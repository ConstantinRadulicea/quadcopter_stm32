
STM32F405RGT6_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e0a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028b4  0801e230  0801e230  0001f230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020ae4  08020ae4  0002231c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08020ae4  08020ae4  00021ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020aec  08020aec  0002231c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020aec  08020aec  00021aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020af0  08020af0  00021af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000031c  20000000  08020af4  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002231c  2**0
                  CONTENTS
 10 .bss          0000a394  2000031c  2000031c  0002231c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000a6b0  2000a6b0  0002231c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002231c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00036a8a  00000000  00000000  0002234c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007efd  00000000  00000000  00058dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002cf0  00000000  00000000  00060cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000229a  00000000  00000000  000639c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002992f  00000000  00000000  00065c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00037559  00000000  00000000  0008f591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc051  00000000  00000000  000c6aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a2b3b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d8f0  00000000  00000000  001a2b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  001b0470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000031c 	.word	0x2000031c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801e218 	.word	0x0801e218

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000320 	.word	0x20000320
 80001cc:	0801e218 	.word	0x0801e218

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <attitude_controller_init>:
void attitude_controller_init(
    attitude_controller_t* fc,
    float rate_gain,
    float max_angle,
    float max_rate
) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	ed87 0a02 	vstr	s0, [r7, #8]
 800102c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001030:	ed87 1a00 	vstr	s2, [r7]
    if (!fc) {
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00e      	beq.n	8001058 <attitude_controller_init+0x38>
        return;
    }

    // Clear all fields
    memset(fc, 0, sizeof(attitude_controller_t));
 800103a:	2234      	movs	r2, #52	@ 0x34
 800103c:	2100      	movs	r1, #0
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f019 fa70 	bl	801a524 <memset>

	fc->rate_gain = rate_gain;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	611a      	str	r2, [r3, #16]
	fc->max_angle = max_angle;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	615a      	str	r2, [r3, #20]
	fc->max_rate = max_rate;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	619a      	str	r2, [r3, #24]
 8001056:	e000      	b.n	800105a <attitude_controller_init+0x3a>
        return;
 8001058:	bf00      	nop

}
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <quat_remove_yaw>:


/* Remove yaw (rotation about world Z) from q */
static quaternion quat_remove_yaw(quaternion q)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b09c      	sub	sp, #112	@ 0x70
 8001064:	af00      	add	r7, sp, #0
 8001066:	eeb0 6a40 	vmov.f32	s12, s0
 800106a:	eef0 6a60 	vmov.f32	s13, s1
 800106e:	eeb0 7a41 	vmov.f32	s14, s2
 8001072:	eef0 7a61 	vmov.f32	s15, s3
 8001076:	ed87 6a04 	vstr	s12, [r7, #16]
 800107a:	edc7 6a05 	vstr	s13, [r7, #20]
 800107e:	ed87 7a06 	vstr	s14, [r7, #24]
 8001082:	edc7 7a07 	vstr	s15, [r7, #28]
    // Ensure q is unit (good practice)
    q = quatnormalize(&q);
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4618      	mov	r0, r3
 800108c:	f001 f8ac 	bl	80021e8 <quatnormalize>
 8001090:	eeb0 6a40 	vmov.f32	s12, s0
 8001094:	eef0 6a60 	vmov.f32	s13, s1
 8001098:	eeb0 7a41 	vmov.f32	s14, s2
 800109c:	eef0 7a61 	vmov.f32	s15, s3
 80010a0:	ed87 6a04 	vstr	s12, [r7, #16]
 80010a4:	edc7 6a05 	vstr	s13, [r7, #20]
 80010a8:	ed87 7a06 	vstr	s14, [r7, #24]
 80010ac:	edc7 7a07 	vstr	s15, [r7, #28]

    // Twist around world Z: keep only w and z, renormalize
    quaternion q_twist = { q.w, 0.0f, 0.0f, q.z };
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	65fb      	str	r3, [r7, #92]	@ 0x5c

    quaternion q_twist_normalized = quatnormalize(&q_twist);
 80010c4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 f88d 	bl	80021e8 <quatnormalize>
 80010ce:	eeb0 6a40 	vmov.f32	s12, s0
 80010d2:	eef0 6a60 	vmov.f32	s13, s1
 80010d6:	eeb0 7a41 	vmov.f32	s14, s2
 80010da:	eef0 7a61 	vmov.f32	s15, s3
 80010de:	ed87 6a10 	vstr	s12, [r7, #64]	@ 0x40
 80010e2:	edc7 6a11 	vstr	s13, [r7, #68]	@ 0x44
 80010e6:	ed87 7a12 	vstr	s14, [r7, #72]	@ 0x48
 80010ea:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

    quaternion twist_conj = quatconj(&q_twist_normalized);
 80010ee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 f83d 	bl	8002172 <quatconj>
 80010f8:	eeb0 6a40 	vmov.f32	s12, s0
 80010fc:	eef0 6a60 	vmov.f32	s13, s1
 8001100:	eeb0 7a41 	vmov.f32	s14, s2
 8001104:	eef0 7a61 	vmov.f32	s15, s3
 8001108:	ed87 6a0c 	vstr	s12, [r7, #48]	@ 0x30
 800110c:	edc7 6a0d 	vstr	s13, [r7, #52]	@ 0x34
 8001110:	ed87 7a0e 	vstr	s14, [r7, #56]	@ 0x38
 8001114:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // swing = q * conj(twist)  -> orientation with yaw removed
    quaternion q_no_yaw = quatmultiply(&q, &twist_conj);
 8001118:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	4611      	mov	r1, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f001 f91b 	bl	800235e <quatmultiply>
 8001128:	eeb0 6a40 	vmov.f32	s12, s0
 800112c:	eef0 6a60 	vmov.f32	s13, s1
 8001130:	eeb0 7a41 	vmov.f32	s14, s2
 8001134:	eef0 7a61 	vmov.f32	s15, s3
 8001138:	ed87 6a08 	vstr	s12, [r7, #32]
 800113c:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8001140:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8001144:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Optional: normalize to clean tiny numeric errors
    return quatnormalize(&q_no_yaw);
 8001148:	f107 0320 	add.w	r3, r7, #32
 800114c:	4618      	mov	r0, r3
 800114e:	f001 f84b 	bl	80021e8 <quatnormalize>
 8001152:	eeb0 6a40 	vmov.f32	s12, s0
 8001156:	eef0 6a60 	vmov.f32	s13, s1
 800115a:	eeb0 7a41 	vmov.f32	s14, s2
 800115e:	eef0 7a61 	vmov.f32	s15, s3
 8001162:	ed87 6a18 	vstr	s12, [r7, #96]	@ 0x60
 8001166:	edc7 6a19 	vstr	s13, [r7, #100]	@ 0x64
 800116a:	ed87 7a1a 	vstr	s14, [r7, #104]	@ 0x68
 800116e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
 8001172:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001174:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001176:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001178:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800117a:	ee06 0a10 	vmov	s12, r0
 800117e:	ee06 1a90 	vmov	s13, r1
 8001182:	ee07 2a10 	vmov	s14, r2
 8001186:	ee07 3a90 	vmov	s15, r3
}
 800118a:	eeb0 0a46 	vmov.f32	s0, s12
 800118e:	eef0 0a66 	vmov.f32	s1, s13
 8001192:	eeb0 1a47 	vmov.f32	s2, s14
 8001196:	eef0 1a67 	vmov.f32	s3, s15
 800119a:	3770      	adds	r7, #112	@ 0x70
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <attitude_controller_angle_mode_update>:
    attitude_controller_t* fc,
    quaternion estimated_q,
    float target_roll,
    float target_pitch,
    float target_yaw_rate
) {
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b0a7      	sub	sp, #156	@ 0x9c
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	61f8      	str	r0, [r7, #28]
 80011a8:	eeb0 6a40 	vmov.f32	s12, s0
 80011ac:	eef0 6a60 	vmov.f32	s13, s1
 80011b0:	eeb0 7a41 	vmov.f32	s14, s2
 80011b4:	eef0 7a61 	vmov.f32	s15, s3
 80011b8:	ed87 2a02 	vstr	s4, [r7, #8]
 80011bc:	edc7 2a01 	vstr	s5, [r7, #4]
 80011c0:	ed87 3a00 	vstr	s6, [r7]
 80011c4:	ed87 6a03 	vstr	s12, [r7, #12]
 80011c8:	edc7 6a04 	vstr	s13, [r7, #16]
 80011cc:	ed87 7a05 	vstr	s14, [r7, #20]
 80011d0:	edc7 7a06 	vstr	s15, [r7, #24]
    if (!fc) {
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 81ad 	beq.w	8001536 <attitude_controller_angle_mode_update+0x396>
        return;
    }

    target_roll = CLAMP(target_roll, -fc->max_angle, fc->max_angle);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	edd3 7a05 	vldr	s15, [r3, #20]
 80011e2:	eef1 7a67 	vneg.f32	s15, s15
 80011e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80011ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	d505      	bpl.n	8001200 <attitude_controller_angle_mode_update+0x60>
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	edd3 7a05 	vldr	s15, [r3, #20]
 80011fa:	eef1 7a67 	vneg.f32	s15, s15
 80011fe:	e00f      	b.n	8001220 <attitude_controller_angle_mode_update+0x80>
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	edd3 7a05 	vldr	s15, [r3, #20]
 8001206:	ed97 7a02 	vldr	s14, [r7, #8]
 800120a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001212:	dd03      	ble.n	800121c <attitude_controller_angle_mode_update+0x7c>
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	edd3 7a05 	vldr	s15, [r3, #20]
 800121a:	e001      	b.n	8001220 <attitude_controller_angle_mode_update+0x80>
 800121c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001220:	edc7 7a02 	vstr	s15, [r7, #8]
    target_pitch = CLAMP(target_pitch, -fc->max_angle, fc->max_angle);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	edd3 7a05 	vldr	s15, [r3, #20]
 800122a:	eef1 7a67 	vneg.f32	s15, s15
 800122e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001232:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123a:	d505      	bpl.n	8001248 <attitude_controller_angle_mode_update+0xa8>
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001242:	eef1 7a67 	vneg.f32	s15, s15
 8001246:	e00f      	b.n	8001268 <attitude_controller_angle_mode_update+0xc8>
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	edd3 7a05 	vldr	s15, [r3, #20]
 800124e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125a:	dd03      	ble.n	8001264 <attitude_controller_angle_mode_update+0xc4>
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001262:	e001      	b.n	8001268 <attitude_controller_angle_mode_update+0xc8>
 8001264:	edd7 7a01 	vldr	s15, [r7, #4]
 8001268:	edc7 7a01 	vstr	s15, [r7, #4]
    target_yaw_rate = CLAMP(target_yaw_rate, -fc->max_rate, fc->max_rate);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001272:	eef1 7a67 	vneg.f32	s15, s15
 8001276:	ed97 7a00 	vldr	s14, [r7]
 800127a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001282:	d505      	bpl.n	8001290 <attitude_controller_angle_mode_update+0xf0>
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	edd3 7a06 	vldr	s15, [r3, #24]
 800128a:	eef1 7a67 	vneg.f32	s15, s15
 800128e:	e00f      	b.n	80012b0 <attitude_controller_angle_mode_update+0x110>
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	edd3 7a06 	vldr	s15, [r3, #24]
 8001296:	ed97 7a00 	vldr	s14, [r7]
 800129a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a2:	dd03      	ble.n	80012ac <attitude_controller_angle_mode_update+0x10c>
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80012aa:	e001      	b.n	80012b0 <attitude_controller_angle_mode_update+0x110>
 80012ac:	edd7 7a00 	vldr	s15, [r7]
 80012b0:	edc7 7a00 	vstr	s15, [r7]

    // --- Store current sensor inputs and setpoints ---
    fc->estimated_q = estimated_q;
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	461c      	mov	r4, r3
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    fc->target_roll = target_roll;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	68ba      	ldr	r2, [r7, #8]
 80012c6:	61da      	str	r2, [r3, #28]
    fc->target_pitch = target_pitch;
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	621a      	str	r2, [r3, #32]
    fc->target_yaw = target_yaw_rate;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	625a      	str	r2, [r3, #36]	@ 0x24

    // --- Step 1: Build target quaternion from commanded roll/pitch ---
    angles3D target_rp = { target_roll, target_pitch, 0.0f }; // yaw handled separately
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    quaternion target_delta_q = angle2quat(&target_rp);
 80012e8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80012ec:	4618      	mov	r0, r3
 80012ee:	f001 faaf 	bl	8002850 <angle2quat>
 80012f2:	eeb0 6a40 	vmov.f32	s12, s0
 80012f6:	eef0 6a60 	vmov.f32	s13, s1
 80012fa:	eeb0 7a41 	vmov.f32	s14, s2
 80012fe:	eef0 7a61 	vmov.f32	s15, s3
 8001302:	ed87 6a1f 	vstr	s12, [r7, #124]	@ 0x7c
 8001306:	edc7 6a20 	vstr	s13, [r7, #128]	@ 0x80
 800130a:	ed87 7a21 	vstr	s14, [r7, #132]	@ 0x84
 800130e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    // --- Step 2: Compose target quaternion relative to level reference ---
	quaternion temp_default_leveld_position_q = FC_DEFAULT_LEVELD_POSITION_Q;
 8001312:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001316:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	673b      	str	r3, [r7, #112]	@ 0x70
 800131e:	f04f 0300 	mov.w	r3, #0
 8001322:	677b      	str	r3, [r7, #116]	@ 0x74
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	67bb      	str	r3, [r7, #120]	@ 0x78
    quaternion target_q = quatmultiply(&temp_default_leveld_position_q, &target_delta_q);
 800132a:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800132e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f001 f812 	bl	800235e <quatmultiply>
 800133a:	eeb0 6a40 	vmov.f32	s12, s0
 800133e:	eef0 6a60 	vmov.f32	s13, s1
 8001342:	eeb0 7a41 	vmov.f32	s14, s2
 8001346:	eef0 7a61 	vmov.f32	s15, s3
 800134a:	ed87 6a13 	vstr	s12, [r7, #76]	@ 0x4c
 800134e:	edc7 6a14 	vstr	s13, [r7, #80]	@ 0x50
 8001352:	ed87 7a15 	vstr	s14, [r7, #84]	@ 0x54
 8001356:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

    // --- Step 3: Orientation error quaternion ---
    quaternion error_q = quat_error(&fc->estimated_q, &target_q);
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f001 fbdc 	bl	8002b20 <quat_error>
 8001368:	eeb0 6a40 	vmov.f32	s12, s0
 800136c:	eef0 6a60 	vmov.f32	s13, s1
 8001370:	eeb0 7a41 	vmov.f32	s14, s2
 8001374:	eef0 7a61 	vmov.f32	s15, s3
 8001378:	ed87 6a0f 	vstr	s12, [r7, #60]	@ 0x3c
 800137c:	edc7 6a10 	vstr	s13, [r7, #64]	@ 0x40
 8001380:	ed87 7a11 	vstr	s14, [r7, #68]	@ 0x44
 8001384:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    quaternion estimated_q_witouth_yaw = quat_remove_yaw(error_q);
 8001388:	ed97 6a0f 	vldr	s12, [r7, #60]	@ 0x3c
 800138c:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8001390:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001394:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001398:	eeb0 0a46 	vmov.f32	s0, s12
 800139c:	eef0 0a66 	vmov.f32	s1, s13
 80013a0:	eeb0 1a47 	vmov.f32	s2, s14
 80013a4:	eef0 1a67 	vmov.f32	s3, s15
 80013a8:	f7ff fe5a 	bl	8001060 <quat_remove_yaw>
 80013ac:	eeb0 6a40 	vmov.f32	s12, s0
 80013b0:	eef0 6a60 	vmov.f32	s13, s1
 80013b4:	eeb0 7a41 	vmov.f32	s14, s2
 80013b8:	eef0 7a61 	vmov.f32	s15, s3
 80013bc:	ed87 6a0b 	vstr	s12, [r7, #44]	@ 0x2c
 80013c0:	edc7 6a0c 	vstr	s13, [r7, #48]	@ 0x30
 80013c4:	ed87 7a0d 	vstr	s14, [r7, #52]	@ 0x34
 80013c8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    // --- Step 4: Convert error quaternion → rotation vector (rad) ---
    angles3D rotvec_err = quat2rotvec(estimated_q_witouth_yaw);
 80013cc:	ed97 6a0b 	vldr	s12, [r7, #44]	@ 0x2c
 80013d0:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80013d4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80013d8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80013dc:	eeb0 0a46 	vmov.f32	s0, s12
 80013e0:	eef0 0a66 	vmov.f32	s1, s13
 80013e4:	eeb0 1a47 	vmov.f32	s2, s14
 80013e8:	eef0 1a67 	vmov.f32	s3, s15
 80013ec:	f001 f97a 	bl	80026e4 <quat2rotvec>
 80013f0:	eef0 6a40 	vmov.f32	s13, s0
 80013f4:	eeb0 7a60 	vmov.f32	s14, s1
 80013f8:	eef0 7a41 	vmov.f32	s15, s2
 80013fc:	edc7 6a08 	vstr	s13, [r7, #32]
 8001400:	ed87 7a09 	vstr	s14, [r7, #36]	@ 0x24
 8001404:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    fc->calculated_roll_rate = rotvec_err.x * fc->rate_gain;
 8001408:	ed97 7a08 	vldr	s14, [r7, #32]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	fc->calculated_pitch_rate = rotvec_err.y * fc->rate_gain;
 800141c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	edd3 7a04 	vldr	s15, [r3, #16]
 8001426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	fc->calculated_yaw_rate = target_yaw_rate * fc->rate_gain;
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	ed93 7a04 	vldr	s14, [r3, #16]
 8001436:	edd7 7a00 	vldr	s15, [r7]
 800143a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	// --- Step 5: Apply limits ---
	fc->calculated_roll_rate = CLAMP(fc->calculated_roll_rate, -fc->max_rate, fc->max_rate);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001450:	eef1 7a67 	vneg.f32	s15, s15
 8001454:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145c:	d505      	bpl.n	800146a <attitude_controller_angle_mode_update+0x2ca>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	edd3 7a06 	vldr	s15, [r3, #24]
 8001464:	eef1 7a67 	vneg.f32	s15, s15
 8001468:	e011      	b.n	800148e <attitude_controller_angle_mode_update+0x2ee>
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	edd3 7a06 	vldr	s15, [r3, #24]
 8001476:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800147a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147e:	dd03      	ble.n	8001488 <attitude_controller_angle_mode_update+0x2e8>
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	edd3 7a06 	vldr	s15, [r3, #24]
 8001486:	e002      	b.n	800148e <attitude_controller_angle_mode_update+0x2ee>
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	fc->calculated_pitch_rate = CLAMP(fc->calculated_pitch_rate, -fc->max_rate, fc->max_rate);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	edd3 7a06 	vldr	s15, [r3, #24]
 80014a0:	eef1 7a67 	vneg.f32	s15, s15
 80014a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ac:	d505      	bpl.n	80014ba <attitude_controller_angle_mode_update+0x31a>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	edd3 7a06 	vldr	s15, [r3, #24]
 80014b4:	eef1 7a67 	vneg.f32	s15, s15
 80014b8:	e011      	b.n	80014de <attitude_controller_angle_mode_update+0x33e>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80014c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ce:	dd03      	ble.n	80014d8 <attitude_controller_angle_mode_update+0x338>
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80014d6:	e002      	b.n	80014de <attitude_controller_angle_mode_update+0x33e>
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	fc->calculated_yaw_rate = CLAMP(fc->calculated_yaw_rate, -fc->max_rate, fc->max_rate);
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80014f0:	eef1 7a67 	vneg.f32	s15, s15
 80014f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fc:	d505      	bpl.n	800150a <attitude_controller_angle_mode_update+0x36a>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	edd3 7a06 	vldr	s15, [r3, #24]
 8001504:	eef1 7a67 	vneg.f32	s15, s15
 8001508:	e011      	b.n	800152e <attitude_controller_angle_mode_update+0x38e>
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	edd3 7a06 	vldr	s15, [r3, #24]
 8001516:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800151a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151e:	dd03      	ble.n	8001528 <attitude_controller_angle_mode_update+0x388>
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	edd3 7a06 	vldr	s15, [r3, #24]
 8001526:	e002      	b.n	800152e <attitude_controller_angle_mode_update+0x38e>
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 8001534:	e000      	b.n	8001538 <attitude_controller_angle_mode_update+0x398>
        return;
 8001536:	bf00      	nop

}
 8001538:	379c      	adds	r7, #156	@ 0x9c
 800153a:	46bd      	mov	sp, r7
 800153c:	bd90      	pop	{r4, r7, pc}

0800153e <attitude_controller_get_calculated_rate>:
void attitude_controller_get_calculated_rate(
    attitude_controller_t* fc,
    float* out_roll_rate,
    float* out_pitch_rate,
    float* out_yaw_rate
) {
 800153e:	b480      	push	{r7}
 8001540:	b085      	sub	sp, #20
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	603b      	str	r3, [r7, #0]
    // Ensure valid pointers before copying
    if (!fc) {
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d015      	beq.n	800157e <attitude_controller_get_calculated_rate+0x40>
        return; // Avoid null pointer access
    }
	if (out_roll_rate) {
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <attitude_controller_get_calculated_rate+0x22>
		*out_roll_rate = fc->calculated_roll_rate;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	601a      	str	r2, [r3, #0]
	}
	if (out_pitch_rate) {
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <attitude_controller_get_calculated_rate+0x30>
		*out_pitch_rate = fc->calculated_pitch_rate;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	601a      	str	r2, [r3, #0]
	}
	if (out_yaw_rate) {
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <attitude_controller_get_calculated_rate+0x42>
		*out_yaw_rate = fc->calculated_yaw_rate;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	e000      	b.n	8001580 <attitude_controller_get_calculated_rate+0x42>
        return; // Avoid null pointer access
 800157e:	bf00      	nop
	}
}
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <crc16_ccitt_init>:
#include "crc.h"


uint16_t crc16_ccitt_init(void) {
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
	return (uint16_t)0xFFFF; // Initial value for CRC-16-CCITT
 800158e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <crc16_ccitt_add>:

uint16_t crc16_ccitt_add(uint16_t crc, uint8_t a)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	460a      	mov	r2, r1
 80015a6:	80fb      	strh	r3, [r7, #6]
 80015a8:	4613      	mov	r3, r2
 80015aa:	717b      	strb	r3, [r7, #5]
    crc ^= (uint16_t)a << (uint8_t)8;
 80015ac:	797b      	ldrb	r3, [r7, #5]
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b8:	4053      	eors	r3, r2
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	80fb      	strh	r3, [r7, #6]
    for (uint8_t ii = (uint8_t)0; ii < (uint8_t)8; ++ii) {
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]
 80015c2:	e014      	b.n	80015ee <crc16_ccitt_add+0x52>
        if (crc & (uint16_t)0x8000) {
 80015c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	da0a      	bge.n	80015e2 <crc16_ccitt_add+0x46>
            crc = (crc << (uint8_t)1) ^ (uint16_t)0x1021;
 80015cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 80015d8:	f083 0301 	eor.w	r3, r3, #1
 80015dc:	b21b      	sxth	r3, r3
 80015de:	80fb      	strh	r3, [r7, #6]
 80015e0:	e002      	b.n	80015e8 <crc16_ccitt_add+0x4c>
        }
        else{
        	crc = (crc << (uint8_t)1);
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	80fb      	strh	r3, [r7, #6]
    for (uint8_t ii = (uint8_t)0; ii < (uint8_t)8; ++ii) {
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	3301      	adds	r3, #1
 80015ec:	73fb      	strb	r3, [r7, #15]
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	2b07      	cmp	r3, #7
 80015f2:	d9e7      	bls.n	80015c4 <crc16_ccitt_add+0x28>
        }
    }
    return crc;
 80015f4:	88fb      	ldrh	r3, [r7, #6]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <crc16_ccitt_add_arr>:

uint16_t crc16_ccitt_add_arr(uint16_t crc, uint8_t* data, size_t len) {
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	81fb      	strh	r3, [r7, #14]
    for (size_t i = (size_t)0; i < len; i++) {
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	e00d      	b.n	8001632 <crc16_ccitt_add_arr+0x30>
        crc = crc16_ccitt_add(crc, data[i]);
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	4413      	add	r3, r2
 800161c:	781a      	ldrb	r2, [r3, #0]
 800161e:	89fb      	ldrh	r3, [r7, #14]
 8001620:	4611      	mov	r1, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ffba 	bl	800159c <crc16_ccitt_add>
 8001628:	4603      	mov	r3, r0
 800162a:	81fb      	strh	r3, [r7, #14]
    for (size_t i = (size_t)0; i < len; i++) {
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	3301      	adds	r3, #1
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	429a      	cmp	r2, r3
 8001638:	d3ed      	bcc.n	8001616 <crc16_ccitt_add_arr+0x14>
    }
    return crc;
 800163a:	89fb      	ldrh	r3, [r7, #14]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	0000      	movs	r0, r0
	...

08001648 <pt1_filter_init_lowpass>:
#include "filters.h"
#define _USE_MATH_DEFINES
#include <math.h>
#include <float.h>

void pt1_filter_init_lowpass(pt1_filter_t* filter, float cutoff_freq, float sample_rate) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	ed87 0a02 	vstr	s0, [r7, #8]
 8001654:	edc7 0a01 	vstr	s1, [r7, #4]
	if(cutoff_freq <= FLT_EPSILON || sample_rate <= FLT_EPSILON){
 8001658:	edd7 7a02 	vldr	s15, [r7, #8]
 800165c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001708 <pt1_filter_init_lowpass+0xc0>
 8001660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001668:	d908      	bls.n	800167c <pt1_filter_init_lowpass+0x34>
 800166a:	edd7 7a01 	vldr	s15, [r7, #4]
 800166e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001708 <pt1_filter_init_lowpass+0xc0>
 8001672:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167a:	d804      	bhi.n	8001686 <pt1_filter_init_lowpass+0x3e>
		filter->alpha = 0.0f;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	e02b      	b.n	80016de <pt1_filter_init_lowpass+0x96>
	}
	else{
	    float dt = 1.0f / sample_rate;
 8001686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800168a:	ed97 7a01 	vldr	s14, [r7, #4]
 800168e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001692:	edc7 7a05 	vstr	s15, [r7, #20]
	    float rc = 1.0f / (2.0f * M_PI * cutoff_freq);
 8001696:	68b8      	ldr	r0, [r7, #8]
 8001698:	f7fe ff56 	bl	8000548 <__aeabi_f2d>
 800169c:	a318      	add	r3, pc, #96	@ (adr r3, 8001700 <pt1_filter_init_lowpass+0xb8>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7fe ffa9 	bl	80005f8 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	f04f 0000 	mov.w	r0, #0
 80016ae:	4917      	ldr	r1, [pc, #92]	@ (800170c <pt1_filter_init_lowpass+0xc4>)
 80016b0:	f7ff f8cc 	bl	800084c <__aeabi_ddiv>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	f7ff fa94 	bl	8000be8 <__aeabi_d2f>
 80016c0:	4603      	mov	r3, r0
 80016c2:	613b      	str	r3, [r7, #16]
	    filter->alpha = dt / (dt + rc);
 80016c4:	ed97 7a05 	vldr	s14, [r7, #20]
 80016c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80016cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016d0:	edd7 6a05 	vldr	s13, [r7, #20]
 80016d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	filter->sample_freq = sample_rate;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	601a      	str	r2, [r3, #0]
    filter->cutoff_freq = cutoff_freq;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	605a      	str	r2, [r3, #4]
    filter->state = 0.0f;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
}
 80016f2:	bf00      	nop
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	f3af 8000 	nop.w
 8001700:	54442d18 	.word	0x54442d18
 8001704:	401921fb 	.word	0x401921fb
 8001708:	34000000 	.word	0x34000000
 800170c:	3ff00000 	.word	0x3ff00000

08001710 <pt1_filter_apply_lowpass>:

float pt1_filter_apply_lowpass(pt1_filter_t* filter, float input) {
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	ed87 0a00 	vstr	s0, [r7]
    filter->state += (filter->alpha * (input - filter->state));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	edd3 6a02 	vldr	s13, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	edd3 7a03 	vldr	s15, [r3, #12]
 800172e:	ed97 6a00 	vldr	s12, [r7]
 8001732:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001736:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800173a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	edc3 7a03 	vstr	s15, [r3, #12]
    return filter->state;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	ee07 3a90 	vmov	s15, r3
}
 800174c:	eeb0 0a67 	vmov.f32	s0, s15
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <pt1_filter_reset>:

void pt1_filter_reset(pt1_filter_t* filter) {
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
    filter->state = 0.0f;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <pt2_filter_init_lowpass>:
    f->a2 = a2 / a0;
    biquad_filter_reset(f);
}


void pt2_filter_init_lowpass(pt2_filter_t *f, float cutoff_freq, float sample_freq) {
 8001776:	b580      	push	{r7, lr}
 8001778:	b084      	sub	sp, #16
 800177a:	af00      	add	r7, sp, #0
 800177c:	60f8      	str	r0, [r7, #12]
 800177e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001782:	edc7 0a01 	vstr	s1, [r7, #4]
    pt1_filter_init_lowpass(&f->s1, cutoff_freq, sample_freq);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	edd7 0a01 	vldr	s1, [r7, #4]
 800178c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff59 	bl	8001648 <pt1_filter_init_lowpass>
    pt1_filter_init_lowpass(&f->s2, cutoff_freq, sample_freq);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3310      	adds	r3, #16
 800179a:	edd7 0a01 	vldr	s1, [r7, #4]
 800179e:	ed97 0a02 	vldr	s0, [r7, #8]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff ff50 	bl	8001648 <pt1_filter_init_lowpass>
	f->sample_freq = sample_freq;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	621a      	str	r2, [r3, #32]
    f->cutoff_freq = cutoff_freq;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <pt2_filter_apply_lowpass>:

float pt2_filter_apply_lowpass(pt2_filter_t *f, float x) {
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	ed87 0a00 	vstr	s0, [r7]
    return pt1_filter_apply_lowpass(&f->s2, pt1_filter_apply_lowpass(&f->s1, x));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f103 0410 	add.w	r4, r3, #16
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	ed97 0a00 	vldr	s0, [r7]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff9b 	bl	8001710 <pt1_filter_apply_lowpass>
 80017da:	eef0 7a40 	vmov.f32	s15, s0
 80017de:	eeb0 0a67 	vmov.f32	s0, s15
 80017e2:	4620      	mov	r0, r4
 80017e4:	f7ff ff94 	bl	8001710 <pt1_filter_apply_lowpass>
 80017e8:	eef0 7a40 	vmov.f32	s15, s0
}
 80017ec:	eeb0 0a67 	vmov.f32	s0, s15
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd90      	pop	{r4, r7, pc}

080017f6 <pt2_filter_reset>:

void pt2_filter_reset(pt2_filter_t *f) {
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
    pt1_filter_reset(&f->s1);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ffaa 	bl	800175a <pt1_filter_reset>
    pt1_filter_reset(&f->s2);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3310      	adds	r3, #16
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff ffa5 	bl	800175a <pt1_filter_reset>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <flight_control_loop_arm_esc>:


static quaternion ground_default_position_q = { .w = 1.0f, .x = 0.0f, .y = 0.0f, .z = 0.0f };


void flight_control_loop_arm_esc(flight_control_loop_t* fcl) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl->flags_mutex, portMAX_DELAY);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8001826:	f04f 31ff 	mov.w	r1, #4294967295
 800182a:	4618      	mov	r0, r3
 800182c:	f012 fefc 	bl	8014628 <xQueueSemaphoreTake>
	#endif
	fcl->are_esc_armed = 1;
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	f892 33c0 	ldrb.w	r3, [r2, #960]	@ 0x3c0
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	f882 33c0 	strb.w	r3, [r2, #960]	@ 0x3c0
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl->flags_mutex);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 8001844:	2300      	movs	r3, #0
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	f012 fc6b 	bl	8014124 <xQueueGenericSend>
	#endif
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <flight_control_loop_disarm_esc>:

void flight_control_loop_disarm_esc(flight_control_loop_t* fcl) {
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl->flags_mutex, portMAX_DELAY);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8001864:	f04f 31ff 	mov.w	r1, #4294967295
 8001868:	4618      	mov	r0, r3
 800186a:	f012 fedd 	bl	8014628 <xQueueSemaphoreTake>
	#endif
	fcl->are_esc_armed = 0;
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	f892 33c0 	ldrb.w	r3, [r2, #960]	@ 0x3c0
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	f882 33c0 	strb.w	r3, [r2, #960]	@ 0x3c0
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl->flags_mutex);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 8001882:	2300      	movs	r3, #0
 8001884:	2200      	movs	r2, #0
 8001886:	2100      	movs	r1, #0
 8001888:	f012 fc4c 	bl	8014124 <xQueueGenericSend>
	#endif
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <flight_control_loop_are_esc_armed>:

int flight_control_loop_are_esc_armed(flight_control_loop_t* fcl) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	int flag;
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl->flags_mutex, portMAX_DELAY);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80018a2:	f04f 31ff 	mov.w	r1, #4294967295
 80018a6:	4618      	mov	r0, r3
 80018a8:	f012 febe 	bl	8014628 <xQueueSemaphoreTake>
	#endif
	flag = fcl->are_esc_armed;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 33c0 	ldrb.w	r3, [r3, #960]	@ 0x3c0
 80018b2:	f343 0300 	sbfx	r3, r3, #0, #1
 80018b6:	b25b      	sxtb	r3, r3
 80018b8:	60fb      	str	r3, [r7, #12]
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl->flags_mutex);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 80018c0:	2300      	movs	r3, #0
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	f012 fc2d 	bl	8014124 <xQueueGenericSend>
	#endif
	return flag;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <flight_control_loop_init>:
	fcl->write_throttle = hook;
	fcl->write_throttle_hook_context = context;
}


void flight_control_loop_init(flight_control_loop_t* fcl) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	memset(fcl, 0, sizeof(flight_control_loop_t));
 80018dc:	f240 4204 	movw	r2, #1028	@ 0x404
 80018e0:	2100      	movs	r1, #0
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f018 fe1e 	bl	801a524 <memset>

	// Initialize IMU and attitude controller here (not shown)
	imu_init(
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	ed9f 2a87 	vldr	s4, [pc, #540]	@ 8001b08 <flight_control_loop_init+0x234>
 80018ee:	eddf 1a86 	vldr	s3, [pc, #536]	@ 8001b08 <flight_control_loop_init+0x234>
 80018f2:	ed9f 1a85 	vldr	s2, [pc, #532]	@ 8001b08 <flight_control_loop_init+0x234>
 80018f6:	eddf 0a85 	vldr	s1, [pc, #532]	@ 8001b0c <flight_control_loop_init+0x238>
 80018fa:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80018fe:	4618      	mov	r0, r3
 8001900:	f001 f954 	bl	8002bac <imu_init>
		ACCELEROMETER_SAMPLE_RATE_HZ,
		GYRO_SAMPLE_RATE_HZ,
		FLIGHT_CONTROLLER_PID_FREQ_HZ
	);

	imu_set_accel_bias(&fcl->imu, (coord3D) { accelerometer_bias[0], accelerometer_bias[1], accelerometer_bias[2] }, accelerometer_A_1);
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	4b82      	ldr	r3, [pc, #520]	@ (8001b10 <flight_control_loop_init+0x23c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	4b80      	ldr	r3, [pc, #512]	@ (8001b10 <flight_control_loop_init+0x23c>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	4b7f      	ldr	r3, [pc, #508]	@ (8001b10 <flight_control_loop_init+0x23c>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	61fb      	str	r3, [r7, #28]
 8001918:	edd7 6a05 	vldr	s13, [r7, #20]
 800191c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001920:	edd7 7a07 	vldr	s15, [r7, #28]
 8001924:	497b      	ldr	r1, [pc, #492]	@ (8001b14 <flight_control_loop_init+0x240>)
 8001926:	eeb0 0a66 	vmov.f32	s0, s13
 800192a:	eef0 0a47 	vmov.f32	s1, s14
 800192e:	eeb0 1a67 	vmov.f32	s2, s15
 8001932:	4610      	mov	r0, r2
 8001934:	f001 fbe6 	bl	8003104 <imu_set_accel_bias>
	imu_set_gyro_bias(&fcl->imu, (coord3D) { gyro_bias[0], gyro_bias[1], gyro_bias[2] });
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	4b77      	ldr	r3, [pc, #476]	@ (8001b18 <flight_control_loop_init+0x244>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	4b75      	ldr	r3, [pc, #468]	@ (8001b18 <flight_control_loop_init+0x244>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	4b74      	ldr	r3, [pc, #464]	@ (8001b18 <flight_control_loop_init+0x244>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001950:	ed97 7a03 	vldr	s14, [r7, #12]
 8001954:	edd7 7a04 	vldr	s15, [r7, #16]
 8001958:	eeb0 0a66 	vmov.f32	s0, s13
 800195c:	eef0 0a47 	vmov.f32	s1, s14
 8001960:	eeb0 1a67 	vmov.f32	s2, s15
 8001964:	4610      	mov	r0, r2
 8001966:	f001 fbab 	bl	80030c0 <imu_set_gyro_bias>
	imu_set_leveled_attitude(&fcl->imu, ground_default_position_q);
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	4b6b      	ldr	r3, [pc, #428]	@ (8001b1c <flight_control_loop_init+0x248>)
 800196e:	ed93 6a00 	vldr	s12, [r3]
 8001972:	edd3 6a01 	vldr	s13, [r3, #4]
 8001976:	ed93 7a02 	vldr	s14, [r3, #8]
 800197a:	edd3 7a03 	vldr	s15, [r3, #12]
 800197e:	eeb0 0a46 	vmov.f32	s0, s12
 8001982:	eef0 0a66 	vmov.f32	s1, s13
 8001986:	eeb0 1a47 	vmov.f32	s2, s14
 800198a:	eef0 1a67 	vmov.f32	s3, s15
 800198e:	4610      	mov	r0, r2
 8001990:	f001 f99c 	bl	8002ccc <imu_set_leveled_attitude>

	attitude_controller_init(
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 800199a:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 8001b20 <flight_control_loop_init+0x24c>
 800199e:	eddf 0a61 	vldr	s1, [pc, #388]	@ 8001b24 <flight_control_loop_init+0x250>
 80019a2:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 8001b28 <flight_control_loop_init+0x254>
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fb3a 	bl	8001020 <attitude_controller_init>
		RATE_GAIN,
		MAX_ANGLE,
		MAX_RATE
	);

	rate_controller_init(
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80019b2:	ed9f 1a5e 	vldr	s2, [pc, #376]	@ 8001b2c <flight_control_loop_init+0x258>
 80019b6:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 80019ba:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8001b08 <flight_control_loop_init+0x234>
 80019be:	4618      	mov	r0, r3
 80019c0:	f002 f986 	bl	8003cd0 <rate_controller_init>
		FLIGHT_CONTROLLER_PID_FREQ_HZ,
		D_TERM_PID_FILTER_CUTOFF_FREQ_HZ,
		FF_TERM_PID_FILTER_CUTOFF_FREQ_HZ
	);

	rate_controller_init_roll_pid(
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80019ca:	ed9f 2a59 	vldr	s4, [pc, #356]	@ 8001b30 <flight_control_loop_init+0x25c>
 80019ce:	eddf 1a59 	vldr	s3, [pc, #356]	@ 8001b34 <flight_control_loop_init+0x260>
 80019d2:	ed9f 1a57 	vldr	s2, [pc, #348]	@ 8001b30 <flight_control_loop_init+0x25c>
 80019d6:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8001b30 <flight_control_loop_init+0x25c>
 80019da:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 8001b38 <flight_control_loop_init+0x264>
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 fa04 	bl	8003dec <rate_controller_init_roll_pid>
		CONTROLLER_PID_KD,
		CONTROLLER_MAX_INTEGRAL_LIMIT,
		CONTROLLER_PID_KFF
	);

	rate_controller_init_pitch_pid(
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80019ea:	ed9f 2a51 	vldr	s4, [pc, #324]	@ 8001b30 <flight_control_loop_init+0x25c>
 80019ee:	eddf 1a51 	vldr	s3, [pc, #324]	@ 8001b34 <flight_control_loop_init+0x260>
 80019f2:	ed9f 1a4f 	vldr	s2, [pc, #316]	@ 8001b30 <flight_control_loop_init+0x25c>
 80019f6:	eddf 0a4e 	vldr	s1, [pc, #312]	@ 8001b30 <flight_control_loop_init+0x25c>
 80019fa:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 8001b38 <flight_control_loop_init+0x264>
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 fa26 	bl	8003e50 <rate_controller_init_pitch_pid>
		CONTROLLER_PID_KD,
		CONTROLLER_MAX_INTEGRAL_LIMIT,
		CONTROLLER_PID_KFF
	);

	rate_controller_init_yaw_pid(
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001a0a:	ed9f 2a49 	vldr	s4, [pc, #292]	@ 8001b30 <flight_control_loop_init+0x25c>
 8001a0e:	eddf 1a49 	vldr	s3, [pc, #292]	@ 8001b34 <flight_control_loop_init+0x260>
 8001a12:	ed9f 1a47 	vldr	s2, [pc, #284]	@ 8001b30 <flight_control_loop_init+0x25c>
 8001a16:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8001b30 <flight_control_loop_init+0x25c>
 8001a1a:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 8001b38 <flight_control_loop_init+0x264>
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f002 fa48 	bl	8003eb4 <rate_controller_init_yaw_pid>
		CONTROLLER_YAW_PID_KD,
		CONTROLLER_YAW_MAX_INTEGRAL_LIMIT,
		CONTROLLER_YAW_PID_KFF
	);

	rc_attitude_control_init_roll(
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a2a:	ed9f 2a44 	vldr	s4, [pc, #272]	@ 8001b3c <flight_control_loop_init+0x268>
 8001a2e:	eddf 1a40 	vldr	s3, [pc, #256]	@ 8001b30 <flight_control_loop_init+0x25c>
 8001a32:	ed9f 1a3c 	vldr	s2, [pc, #240]	@ 8001b24 <flight_control_loop_init+0x250>
 8001a36:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8001b40 <flight_control_loop_init+0x26c>
 8001a3a:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8001b2c <flight_control_loop_init+0x258>
 8001a3e:	2101      	movs	r1, #1
 8001a40:	4618      	mov	r0, r3
 8001a42:	f002 fd4d 	bl	80044e0 <rc_attitude_control_init_roll>
		MAX_ANGLE,
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

	rc_attitude_control_init_pitch(
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a4c:	ed9f 2a3b 	vldr	s4, [pc, #236]	@ 8001b3c <flight_control_loop_init+0x268>
 8001a50:	eddf 1a37 	vldr	s3, [pc, #220]	@ 8001b30 <flight_control_loop_init+0x25c>
 8001a54:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 8001b24 <flight_control_loop_init+0x250>
 8001a58:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8001b40 <flight_control_loop_init+0x26c>
 8001a5c:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8001b2c <flight_control_loop_init+0x258>
 8001a60:	2101      	movs	r1, #1
 8001a62:	4618      	mov	r0, r3
 8001a64:	f002 fd99 	bl	800459a <rc_attitude_control_init_pitch>
		MAX_ANGLE,
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

	rc_attitude_control_init_yaw(
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a6e:	ed9f 2a33 	vldr	s4, [pc, #204]	@ 8001b3c <flight_control_loop_init+0x268>
 8001a72:	eddf 1a2f 	vldr	s3, [pc, #188]	@ 8001b30 <flight_control_loop_init+0x25c>
 8001a76:	ed9f 1a2b 	vldr	s2, [pc, #172]	@ 8001b24 <flight_control_loop_init+0x250>
 8001a7a:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8001b40 <flight_control_loop_init+0x26c>
 8001a7e:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8001b2c <flight_control_loop_init+0x258>
 8001a82:	2101      	movs	r1, #1
 8001a84:	4618      	mov	r0, r3
 8001a86:	f002 fde7 	bl	8004658 <rc_attitude_control_init_yaw>
		MAX_ANGLE,
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

	rc_attitude_control_init_throttle(
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a90:	ed9f 2a2a 	vldr	s4, [pc, #168]	@ 8001b3c <flight_control_loop_init+0x268>
 8001a94:	eddf 1a26 	vldr	s3, [pc, #152]	@ 8001b30 <flight_control_loop_init+0x25c>
 8001a98:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8001a9c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001b40 <flight_control_loop_init+0x26c>
 8001aa0:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8001b2c <flight_control_loop_init+0x258>
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f002 fe36 	bl	8004718 <rc_attitude_control_init_throttle>
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

#if MUTEX_ESP_ENABLE != 0
	fcl->imu_mutex = xSemaphoreCreateMutex();
 8001aac:	2001      	movs	r0, #1
 8001aae:	f012 fb20 	bl	80140f2 <xQueueCreateMutex>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
	fcl->rate_controller_mutex = xSemaphoreCreateMutex();
 8001aba:	2001      	movs	r0, #1
 8001abc:	f012 fb19 	bl	80140f2 <xQueueCreateMutex>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
	fcl->attitude_controller_mutex = xSemaphoreCreateMutex();
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f012 fb12 	bl	80140f2 <xQueueCreateMutex>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f8c3 23f4 	str.w	r2, [r3, #1012]	@ 0x3f4
	fcl->rc_attitude_control_mutex = xSemaphoreCreateMutex();
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f012 fb0b 	bl	80140f2 <xQueueCreateMutex>
 8001adc:	4602      	mov	r2, r0
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
	fcl->motor_throttle_mutex = xSemaphoreCreateMutex();
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f012 fb04 	bl	80140f2 <xQueueCreateMutex>
 8001aea:	4602      	mov	r2, r0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
	fcl->flags_mutex = xSemaphoreCreateMutex();
 8001af2:	2001      	movs	r0, #1
 8001af4:	f012 fafd 	bl	80140f2 <xQueueCreateMutex>
 8001af8:	4602      	mov	r2, r0
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
#endif
}
 8001b00:	bf00      	nop
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	447a0000 	.word	0x447a0000
 8001b0c:	42a00000 	.word	0x42a00000
 8001b10:	20000000 	.word	0x20000000
 8001b14:	2000000c 	.word	0x2000000c
 8001b18:	20000030 	.word	0x20000030
 8001b1c:	2000003c 	.word	0x2000003c
 8001b20:	40a78d36 	.word	0x40a78d36
 8001b24:	3f1c61aa 	.word	0x3f1c61aa
 8001b28:	3f5f66f3 	.word	0x3f5f66f3
 8001b2c:	42200000 	.word	0x42200000
 8001b30:	00000000 	.word	0x00000000
 8001b34:	40278d37 	.word	0x40278d37
 8001b38:	405f66f3 	.word	0x405f66f3
 8001b3c:	42c80000 	.word	0x42c80000
 8001b40:	3d75c28f 	.word	0x3d75c28f

08001b44 <flight_control_loop_tick>:


void flight_control_loop_tick(flight_control_loop_t* fcl) {
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b09b      	sub	sp, #108	@ 0x6c
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	6078      	str	r0, [r7, #4]
	// RC input
	coord3D target_attitude = { 0 };
 8001b4c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
	float target_throttle = 0.0f;
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->rc_attitude_control_mutex, portMAX_DELAY);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f012 fd5d 	bl	8014628 <xQueueSemaphoreTake>
#endif
	rc_attitude_control_get_processed(
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 8001b74:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b78:	f103 0408 	add.w	r4, r3, #8
 8001b7c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b80:	1d1a      	adds	r2, r3, #4
 8001b82:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001b86:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	f002 fe43 	bl	8004818 <rc_attitude_control_get_processed>
		&(target_attitude.z),
		&target_throttle
	);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rc_attitude_control_mutex);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	@ 0x3f8
 8001b98:	2300      	movs	r3, #0
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	f012 fac1 	bl	8014124 <xQueueGenericSend>
	// Get estimated attitude and body frame accel/gyro
	coord3D body_frame_accel, body_frame_gyro;
	quaternion body_frame_estimated_q;

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->imu_mutex, portMAX_DELAY);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 8001ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bac:	4618      	mov	r0, r3
 8001bae:	f012 fd3b 	bl	8014628 <xQueueSemaphoreTake>
#endif
	imu_get_estimated_data(&fcl->imu, &body_frame_estimated_q, &body_frame_accel, &body_frame_gyro);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bb8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001bbc:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001bc0:	f001 faee 	bl	80031a0 <imu_get_estimated_data>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->imu_mutex);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	@ 0x3ec
 8001bca:	2300      	movs	r3, #0
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	f012 faa8 	bl	8014124 <xQueueGenericSend>
#endif


#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->attitude_controller_mutex, portMAX_DELAY);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 8001bda:	f04f 31ff 	mov.w	r1, #4294967295
 8001bde:	4618      	mov	r0, r3
 8001be0:	f012 fd22 	bl	8014628 <xQueueSemaphoreTake>
#endif
	// Update attitude controller
	attitude_controller_angle_mode_update(
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8001bea:	edd7 5a14 	vldr	s11, [r7, #80]	@ 0x50
 8001bee:	ed97 5a15 	vldr	s10, [r7, #84]	@ 0x54
 8001bf2:	edd7 4a16 	vldr	s9, [r7, #88]	@ 0x58
 8001bf6:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8001bfa:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001bfe:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001c02:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001c06:	eeb0 3a64 	vmov.f32	s6, s9
 8001c0a:	eef0 2a45 	vmov.f32	s5, s10
 8001c0e:	eeb0 2a65 	vmov.f32	s4, s11
 8001c12:	eeb0 0a46 	vmov.f32	s0, s12
 8001c16:	eef0 0a66 	vmov.f32	s1, s13
 8001c1a:	eeb0 1a47 	vmov.f32	s2, s14
 8001c1e:	eef0 1a67 	vmov.f32	s3, s15
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fabc 	bl	80011a0 <attitude_controller_angle_mode_update>
		target_attitude.x, // target roll
		target_attitude.y,  // target pitch
		target_attitude.z   // target yaw rate
	);

	float target_roll_rate = 0.0f;
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
	float target_pitch_rate = 0.0f;
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
	float target_yaw_rate = 0.0f;
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
	attitude_controller_get_calculated_rate(
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8001c40:	f107 0318 	add.w	r3, r7, #24
 8001c44:	f107 021c 	add.w	r2, r7, #28
 8001c48:	f107 0120 	add.w	r1, r7, #32
 8001c4c:	f7ff fc77 	bl	800153e <attitude_controller_get_calculated_rate>
		&target_roll_rate,
		&target_pitch_rate,
		&target_yaw_rate
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->attitude_controller_mutex);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 8001c56:	2300      	movs	r3, #0
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	f012 fa62 	bl	8014124 <xQueueGenericSend>
#endif

	float pid_roll_output = 0.0f;
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
	float pid_pitch_output = 0.0f;
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	613b      	str	r3, [r7, #16]
	float pid_yaw_output = 0.0f;
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->rate_controller_mutex, portMAX_DELAY);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f012 fcd3 	bl	8014628 <xQueueSemaphoreTake>
#endif
	if (target_throttle > THROTTLE_IDLE)
 8001c82:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001c86:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001dac <flight_control_loop_tick+0x268>
 8001c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	dd1e      	ble.n	8001cd2 <flight_control_loop_tick+0x18e>
	{
		rate_controller_update(
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001c9a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c9e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001ca2:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001ca6:	ed97 6a08 	vldr	s12, [r7, #32]
 8001caa:	edd7 5a07 	vldr	s11, [r7, #28]
 8001cae:	ed97 5a06 	vldr	s10, [r7, #24]
 8001cb2:	eef0 2a45 	vmov.f32	s5, s10
 8001cb6:	eeb0 2a65 	vmov.f32	s4, s11
 8001cba:	eef0 1a46 	vmov.f32	s3, s12
 8001cbe:	eeb0 1a66 	vmov.f32	s2, s13
 8001cc2:	eef0 0a47 	vmov.f32	s1, s14
 8001cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f002 f924 	bl	8003f18 <rate_controller_update>
 8001cd0:	e005      	b.n	8001cde <flight_control_loop_tick+0x19a>
			target_pitch_rate,
			target_yaw_rate
		);
	}
	else {
		rate_controller_reset(&fcl->rate_controller);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f002 faab 	bl	8004234 <rate_controller_reset>
	}

	// Get PID outputs
	rate_controller_get_pid_outputs(
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 8001ce4:	f107 030c 	add.w	r3, r7, #12
 8001ce8:	f107 0210 	add.w	r2, r7, #16
 8001cec:	f107 0114 	add.w	r1, r7, #20
 8001cf0:	f002 faf4 	bl	80042dc <rate_controller_get_pid_outputs>
		&pid_pitch_output,
		&pid_yaw_output
	);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rate_controller_mutex);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2100      	movs	r1, #0
 8001d00:	f012 fa10 	bl	8014124 <xQueueGenericSend>
#endif

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->motor_throttle_mutex, portMAX_DELAY);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8001d0a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f012 fc8a 	bl	8014628 <xQueueSemaphoreTake>
#endif
	// Mix PID outputs to motor commands
	if (flight_control_loop_are_esc_armed(fcl) != 0)
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff fdbd 	bl	8001894 <flight_control_loop_are_esc_armed>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d018      	beq.n	8001d52 <flight_control_loop_tick+0x20e>
	{
		motor_mixer_quad_x(
 8001d20:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001d24:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d28:	edd7 6a04 	vldr	s13, [r7, #16]
 8001d2c:	ed97 6a03 	vldr	s12, [r7, #12]
			target_throttle,
			pid_roll_output,
			pid_pitch_output,
			pid_yaw_output,
			THROTTLE_IDLE,
			fcl->motor_throttle
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
		motor_mixer_quad_x(
 8001d36:	4618      	mov	r0, r3
 8001d38:	ed9f 2a1c 	vldr	s4, [pc, #112]	@ 8001dac <flight_control_loop_tick+0x268>
 8001d3c:	eef0 1a46 	vmov.f32	s3, s12
 8001d40:	eeb0 1a66 	vmov.f32	s2, s13
 8001d44:	eef0 0a47 	vmov.f32	s1, s14
 8001d48:	eeb0 0a67 	vmov.f32	s0, s15
 8001d4c:	f001 fcc6 	bl	80036dc <motor_mixer_quad_x>
 8001d50:	e010      	b.n	8001d74 <flight_control_loop_tick+0x230>
		);
	}
	else {
		for (int i = 0; i < NUM_MOTORS; i++) {
 8001d52:	2300      	movs	r3, #0
 8001d54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d56:	e00a      	b.n	8001d6e <flight_control_loop_tick+0x22a>
			fcl->motor_throttle[i] = 0.0f;
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d5c:	33ec      	adds	r3, #236	@ 0xec
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < NUM_MOTORS; i++) {
 8001d68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	ddf1      	ble.n	8001d58 <flight_control_loop_tick+0x214>
		}
	}
	if (fcl->write_throttle) {
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00a      	beq.n	8001d94 <flight_control_loop_tick+0x250>
		fcl->write_throttle(fcl, fcl->motor_throttle, fcl->write_throttle_hook_context);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	f502 716c 	add.w	r1, r2, #944	@ 0x3b0
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	f8d2 23e8 	ldr.w	r2, [r2, #1000]	@ 0x3e8
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	4798      	blx	r3
	}
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->motor_throttle_mutex);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	@ 0x3fc
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	f012 f9c0 	bl	8014124 <xQueueGenericSend>
#endif

}
 8001da4:	bf00      	nop
 8001da6:	3764      	adds	r7, #100	@ 0x64
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd90      	pop	{r4, r7, pc}
 8001dac:	3d6147ae 	.word	0x3d6147ae

08001db0 <flight_control_loop_update_rc_control>:

void flight_control_loop_update_rc_control(flight_control_loop_t* fcl, coord3D target_attitude, float target_throttle) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6178      	str	r0, [r7, #20]
 8001db8:	eef0 6a40 	vmov.f32	s13, s0
 8001dbc:	eeb0 7a60 	vmov.f32	s14, s1
 8001dc0:	eef0 7a41 	vmov.f32	s15, s2
 8001dc4:	edc7 1a01 	vstr	s3, [r7, #4]
 8001dc8:	edc7 6a02 	vstr	s13, [r7, #8]
 8001dcc:	ed87 7a03 	vstr	s14, [r7, #12]
 8001dd0:	edc7 7a04 	vstr	s15, [r7, #16]

	target_attitude.x = CLAMP(target_attitude.x, -1.0f, 1.0f);
 8001dd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dd8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de4:	d501      	bpl.n	8001dea <flight_control_loop_update_rc_control+0x3a>
 8001de6:	4b41      	ldr	r3, [pc, #260]	@ (8001eec <flight_control_loop_update_rc_control+0x13c>)
 8001de8:	e00c      	b.n	8001e04 <flight_control_loop_update_rc_control+0x54>
 8001dea:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001df2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfa:	dd02      	ble.n	8001e02 <flight_control_loop_update_rc_control+0x52>
 8001dfc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e00:	e000      	b.n	8001e04 <flight_control_loop_update_rc_control+0x54>
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	60bb      	str	r3, [r7, #8]
	target_attitude.y = CLAMP(target_attitude.y, -1.0f, 1.0f);
 8001e06:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e0a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e16:	d501      	bpl.n	8001e1c <flight_control_loop_update_rc_control+0x6c>
 8001e18:	4b34      	ldr	r3, [pc, #208]	@ (8001eec <flight_control_loop_update_rc_control+0x13c>)
 8001e1a:	e00c      	b.n	8001e36 <flight_control_loop_update_rc_control+0x86>
 8001e1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2c:	dd02      	ble.n	8001e34 <flight_control_loop_update_rc_control+0x84>
 8001e2e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e32:	e000      	b.n	8001e36 <flight_control_loop_update_rc_control+0x86>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	60fb      	str	r3, [r7, #12]
	target_attitude.z = CLAMP(target_attitude.z, -1.0f, 1.0f);
 8001e38:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e3c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e48:	d501      	bpl.n	8001e4e <flight_control_loop_update_rc_control+0x9e>
 8001e4a:	4b28      	ldr	r3, [pc, #160]	@ (8001eec <flight_control_loop_update_rc_control+0x13c>)
 8001e4c:	e00c      	b.n	8001e68 <flight_control_loop_update_rc_control+0xb8>
 8001e4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5e:	dd02      	ble.n	8001e66 <flight_control_loop_update_rc_control+0xb6>
 8001e60:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e64:	e000      	b.n	8001e68 <flight_control_loop_update_rc_control+0xb8>
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	613b      	str	r3, [r7, #16]
	target_throttle = CLAMP(target_throttle, 0.0f, 1.0f);
 8001e6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	d502      	bpl.n	8001e7e <flight_control_loop_update_rc_control+0xce>
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	e00c      	b.n	8001e98 <flight_control_loop_update_rc_control+0xe8>
 8001e7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8e:	dd02      	ble.n	8001e96 <flight_control_loop_update_rc_control+0xe6>
 8001e90:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e94:	e000      	b.n	8001e98 <flight_control_loop_update_rc_control+0xe8>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	607b      	str	r3, [r7, #4]

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->rc_attitude_control_mutex, portMAX_DELAY);
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f012 fbbf 	bl	8014628 <xQueueSemaphoreTake>
#endif
	rc_attitude_control_update(
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001eb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001eb8:	edd7 6a04 	vldr	s13, [r7, #16]
 8001ebc:	edd7 1a01 	vldr	s3, [r7, #4]
 8001ec0:	eeb0 1a66 	vmov.f32	s2, s13
 8001ec4:	eef0 0a47 	vmov.f32	s1, s14
 8001ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f002 fc7f 	bl	80047d0 <rc_attitude_control_update>
		target_attitude.z,
		target_throttle
	);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rc_attitude_control_mutex);
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	@ 0x3f8
 8001ed8:	2300      	movs	r3, #0
 8001eda:	2200      	movs	r2, #0
 8001edc:	2100      	movs	r1, #0
 8001ede:	f012 f921 	bl	8014124 <xQueueGenericSend>
#endif
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	bf800000 	.word	0xbf800000

08001ef0 <flight_control_loop_update_imu>:
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rc_attitude_control_mutex);
#endif
}

void flight_control_loop_update_imu(flight_control_loop_t* fcl, coord3D gyro_data, coord3D accel_data) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	61f8      	str	r0, [r7, #28]
 8001ef8:	eeb0 5a40 	vmov.f32	s10, s0
 8001efc:	eef0 5a60 	vmov.f32	s11, s1
 8001f00:	eeb0 6a41 	vmov.f32	s12, s2
 8001f04:	eef0 6a61 	vmov.f32	s13, s3
 8001f08:	eeb0 7a42 	vmov.f32	s14, s4
 8001f0c:	eef0 7a62 	vmov.f32	s15, s5
 8001f10:	ed87 5a04 	vstr	s10, [r7, #16]
 8001f14:	edc7 5a05 	vstr	s11, [r7, #20]
 8001f18:	ed87 6a06 	vstr	s12, [r7, #24]
 8001f1c:	edc7 6a01 	vstr	s13, [r7, #4]
 8001f20:	ed87 7a02 	vstr	s14, [r7, #8]
 8001f24:	edc7 7a03 	vstr	s15, [r7, #12]
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->imu_mutex, portMAX_DELAY);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 8001f2e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f32:	4618      	mov	r0, r3
 8001f34:	f012 fb78 	bl	8014628 <xQueueSemaphoreTake>
#endif
	imu_update(&fcl->imu, accel_data, gyro_data);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	ed97 5a04 	vldr	s10, [r7, #16]
 8001f3e:	edd7 5a05 	vldr	s11, [r7, #20]
 8001f42:	ed97 6a06 	vldr	s12, [r7, #24]
 8001f46:	edd7 6a01 	vldr	s13, [r7, #4]
 8001f4a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f52:	eef0 1a45 	vmov.f32	s3, s10
 8001f56:	eeb0 2a65 	vmov.f32	s4, s11
 8001f5a:	eef0 2a46 	vmov.f32	s5, s12
 8001f5e:	eeb0 0a66 	vmov.f32	s0, s13
 8001f62:	eef0 0a47 	vmov.f32	s1, s14
 8001f66:	eeb0 1a67 	vmov.f32	s2, s15
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f001 f867 	bl	800303e <imu_update>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->imu_mutex);
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	@ 0x3ec
 8001f76:	2300      	movs	r3, #0
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	f012 f8d2 	bl	8014124 <xQueueGenericSend>
#endif
}
 8001f80:	bf00      	nop
 8001f82:	3720      	adds	r7, #32
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <flight_control_loop_get_motors_throttle>:
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->imu_mutex);
#endif
}

void flight_control_loop_get_motors_throttle(flight_control_loop_t* fcl, float motors_throttle[NUM_MOTORS]) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->motor_throttle_mutex, portMAX_DELAY);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8001f98:	f04f 31ff 	mov.w	r1, #4294967295
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f012 fb43 	bl	8014628 <xQueueSemaphoreTake>
#endif
	for (size_t i = 0; i < NUM_MOTORS; i++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	e00d      	b.n	8001fc4 <flight_control_loop_get_motors_throttle+0x3c>
	{
		motors_throttle[i] = fcl->motor_throttle[i];
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	32ec      	adds	r2, #236	@ 0xec
 8001fb6:	0092      	lsls	r2, r2, #2
 8001fb8:	440a      	add	r2, r1
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < NUM_MOTORS; i++)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d9ee      	bls.n	8001fa8 <flight_control_loop_get_motors_throttle+0x20>
	}
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->motor_throttle_mutex);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	@ 0x3fc
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	f012 f8a5 	bl	8014124 <xQueueGenericSend>
#endif
}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <MagCal>:

#ifdef __cplusplus
extern "C" {
#endif

void MagCal(float* _x, float* _y, float* _z, float _bias[3], float A_1[3][3]) {
 8001fe2:	b480      	push	{r7}
 8001fe4:	b089      	sub	sp, #36	@ 0x24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	603b      	str	r3, [r7, #0]
	//h_cal = (xyz - _bias) * A^-1
	float x_temp, y_temp, z_temp;

	x_temp = *_x;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	61fb      	str	r3, [r7, #28]
	y_temp = *_y;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	61bb      	str	r3, [r7, #24]
	z_temp = *_z;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	617b      	str	r3, [r7, #20]

	x_temp -= _bias[0];
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	ed97 7a07 	vldr	s14, [r7, #28]
 800200c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002010:	edc7 7a07 	vstr	s15, [r7, #28]
	y_temp -= _bias[1];
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	3304      	adds	r3, #4
 8002018:	edd3 7a00 	vldr	s15, [r3]
 800201c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002024:	edc7 7a06 	vstr	s15, [r7, #24]
	z_temp -= _bias[2];
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	3308      	adds	r3, #8
 800202c:	edd3 7a00 	vldr	s15, [r3]
 8002030:	ed97 7a05 	vldr	s14, [r7, #20]
 8002034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002038:	edc7 7a05 	vstr	s15, [r7, #20]


	x_temp = x_temp * A_1[0][0] + y_temp * A_1[1][0] + z_temp * A_1[2][0];
 800203c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800203e:	ed93 7a00 	vldr	s14, [r3]
 8002042:	edd7 7a07 	vldr	s15, [r7, #28]
 8002046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800204a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800204c:	330c      	adds	r3, #12
 800204e:	edd3 6a00 	vldr	s13, [r3]
 8002052:	edd7 7a06 	vldr	s15, [r7, #24]
 8002056:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800205a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800205e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002060:	3318      	adds	r3, #24
 8002062:	edd3 6a00 	vldr	s13, [r3]
 8002066:	edd7 7a05 	vldr	s15, [r7, #20]
 800206a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800206e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002072:	edc7 7a07 	vstr	s15, [r7, #28]
	y_temp = x_temp * A_1[0][1] + y_temp * A_1[1][1] + z_temp * A_1[2][1];
 8002076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002078:	ed93 7a01 	vldr	s14, [r3, #4]
 800207c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002080:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002086:	330c      	adds	r3, #12
 8002088:	edd3 6a01 	vldr	s13, [r3, #4]
 800208c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002090:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002094:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800209a:	3318      	adds	r3, #24
 800209c:	edd3 6a01 	vldr	s13, [r3, #4]
 80020a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80020a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ac:	edc7 7a06 	vstr	s15, [r7, #24]
	z_temp = x_temp * A_1[0][2] + y_temp * A_1[1][2] + z_temp * A_1[2][2];
 80020b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80020b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80020ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c0:	330c      	adds	r3, #12
 80020c2:	edd3 6a02 	vldr	s13, [r3, #8]
 80020c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80020ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d4:	3318      	adds	r3, #24
 80020d6:	edd3 6a02 	vldr	s13, [r3, #8]
 80020da:	edd7 7a05 	vldr	s15, [r7, #20]
 80020de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e6:	edc7 7a05 	vstr	s15, [r7, #20]

	*_x = x_temp;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	69fa      	ldr	r2, [r7, #28]
 80020ee:	601a      	str	r2, [r3, #0]
	*_y = y_temp;
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	601a      	str	r2, [r3, #0]
	*_z = z_temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	601a      	str	r2, [r3, #0]
}
 80020fc:	bf00      	nop
 80020fe:	3724      	adds	r7, #36	@ 0x24
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <quatnorm>:
// ================================================================
// ===						QUATERNIONS			                ===
// ================================================================
// https://www.mathworks.com/help/aerotbx/referencelist.html?type=function&category=flight-parameters-1&s_tid=CRUX_topnav

float quatnorm(quaternion* q) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	return sqrtf((q->w * q->w) + (q->x * q->x) + (q->y * q->y) + (q->z * q->z));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	ed93 7a00 	vldr	s14, [r3]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	edd3 6a01 	vldr	s13, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	edd3 7a01 	vldr	s15, [r3, #4]
 800212c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002130:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	edd3 6a02 	vldr	s13, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002144:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	edd3 6a03 	vldr	s13, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	edd3 7a03 	vldr	s15, [r3, #12]
 8002154:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215c:	eeb0 0a67 	vmov.f32	s0, s15
 8002160:	f015 fbc0 	bl	80178e4 <sqrtf>
 8002164:	eef0 7a40 	vmov.f32	s15, s0
}
 8002168:	eeb0 0a67 	vmov.f32	s0, s15
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <quatconj>:

quaternion quatconj(quaternion* q) {
 8002172:	b490      	push	{r4, r7}
 8002174:	b08e      	sub	sp, #56	@ 0x38
 8002176:	af00      	add	r7, sp, #0
 8002178:	6178      	str	r0, [r7, #20]
    quaternion result;
    result.w =  q->w;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	61bb      	str	r3, [r7, #24]
    result.x = -q->x;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	edd3 7a01 	vldr	s15, [r3, #4]
 8002186:	eef1 7a67 	vneg.f32	s15, s15
 800218a:	edc7 7a07 	vstr	s15, [r7, #28]
    result.y = -q->y;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	edd3 7a02 	vldr	s15, [r3, #8]
 8002194:	eef1 7a67 	vneg.f32	s15, s15
 8002198:	edc7 7a08 	vstr	s15, [r7, #32]
    result.z = -q->z;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	edd3 7a03 	vldr	s15, [r3, #12]
 80021a2:	eef1 7a67 	vneg.f32	s15, s15
 80021a6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return result;
 80021aa:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80021ae:	f107 0318 	add.w	r3, r7, #24
 80021b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80021b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80021bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021c0:	ee06 0a10 	vmov	s12, r0
 80021c4:	ee06 1a90 	vmov	s13, r1
 80021c8:	ee07 2a10 	vmov	s14, r2
 80021cc:	ee07 3a90 	vmov	s15, r3
}
 80021d0:	eeb0 0a46 	vmov.f32	s0, s12
 80021d4:	eef0 0a66 	vmov.f32	s1, s13
 80021d8:	eeb0 1a47 	vmov.f32	s2, s14
 80021dc:	eef0 1a67 	vmov.f32	s3, s15
 80021e0:	3738      	adds	r7, #56	@ 0x38
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc90      	pop	{r4, r7}
 80021e6:	4770      	bx	lr

080021e8 <quatnormalize>:

quaternion quatnormalize(quaternion* q) {
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b091      	sub	sp, #68	@ 0x44
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6178      	str	r0, [r7, #20]
    float im;
    quaternion result;
	float q_norm = quatnorm(q);
 80021f0:	6978      	ldr	r0, [r7, #20]
 80021f2:	f7ff ff89 	bl	8002108 <quatnorm>
 80021f6:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

	if (q_norm <= FLT_EPSILON){
 80021fa:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80021fe:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80022c8 <quatnormalize+0xe0>
 8002202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220a:	d813      	bhi.n	8002234 <quatnormalize+0x4c>
	    result.w = 1.0f;
 800220c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002210:	61bb      	str	r3, [r7, #24]
	    result.x = 0.0f;
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	61fb      	str	r3, [r7, #28]
	    result.y = 0.0f;
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	623b      	str	r3, [r7, #32]
	    result.z = 0.0f;
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	627b      	str	r3, [r7, #36]	@ 0x24
		return result;
 8002224:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002228:	f107 0318 	add.w	r3, r7, #24
 800222c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800222e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002232:	e032      	b.n	800229a <quatnormalize+0xb2>
	}

	im = 1.0f / q_norm;
 8002234:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002238:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800223c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002240:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    result.w = q->w * im;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	ed93 7a00 	vldr	s14, [r3]
 800224a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800224e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002252:	edc7 7a06 	vstr	s15, [r7, #24]
    result.x = q->x * im;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	ed93 7a01 	vldr	s14, [r3, #4]
 800225c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002264:	edc7 7a07 	vstr	s15, [r7, #28]
    result.y = q->y * im;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	ed93 7a02 	vldr	s14, [r3, #8]
 800226e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002276:	edc7 7a08 	vstr	s15, [r7, #32]
    result.z = q->z * im;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002280:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002288:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return result;
 800228c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002290:	f107 0318 	add.w	r3, r7, #24
 8002294:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002296:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800229a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800229c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800229e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022a2:	ee06 0a10 	vmov	s12, r0
 80022a6:	ee06 1a90 	vmov	s13, r1
 80022aa:	ee07 2a10 	vmov	s14, r2
 80022ae:	ee07 3a90 	vmov	s15, r3
 80022b2:	eeb0 0a46 	vmov.f32	s0, s12
 80022b6:	eef0 0a66 	vmov.f32	s1, s13
 80022ba:	eeb0 1a47 	vmov.f32	s2, s14
 80022be:	eef0 1a67 	vmov.f32	s3, s15
 80022c2:	3744      	adds	r7, #68	@ 0x44
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd90      	pop	{r4, r7, pc}
 80022c8:	34000000 	.word	0x34000000

080022cc <quatmultiply_scalar>:
    result.z = qinv.z / norm_sq;
    return result;
}

// Multiply a reference of a quaternion by a scalar, q = s*q
quaternion quatmultiply_scalar(quaternion *q, float scalar){
 80022cc:	b490      	push	{r4, r7}
 80022ce:	b08e      	sub	sp, #56	@ 0x38
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6178      	str	r0, [r7, #20]
 80022d4:	ed87 0a04 	vstr	s0, [r7, #16]
	quaternion res;
    res.w = q->w * scalar;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	ed93 7a00 	vldr	s14, [r3]
 80022de:	edd7 7a04 	vldr	s15, [r7, #16]
 80022e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e6:	edc7 7a06 	vstr	s15, [r7, #24]
    res.x = q->x * scalar;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80022f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80022f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f8:	edc7 7a07 	vstr	s15, [r7, #28]
    res.y = q->y * scalar;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8002302:	edd7 7a04 	vldr	s15, [r7, #16]
 8002306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800230a:	edc7 7a08 	vstr	s15, [r7, #32]
    res.z = q->z * scalar;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	ed93 7a03 	vldr	s14, [r3, #12]
 8002314:	edd7 7a04 	vldr	s15, [r7, #16]
 8002318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 8002320:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002324:	f107 0318 	add.w	r3, r7, #24
 8002328:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800232a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800232e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002330:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002336:	ee06 0a10 	vmov	s12, r0
 800233a:	ee06 1a90 	vmov	s13, r1
 800233e:	ee07 2a10 	vmov	s14, r2
 8002342:	ee07 3a90 	vmov	s15, r3
}
 8002346:	eeb0 0a46 	vmov.f32	s0, s12
 800234a:	eef0 0a66 	vmov.f32	s1, s13
 800234e:	eeb0 1a47 	vmov.f32	s2, s14
 8002352:	eef0 1a67 	vmov.f32	s3, s15
 8002356:	3738      	adds	r7, #56	@ 0x38
 8002358:	46bd      	mov	sp, r7
 800235a:	bc90      	pop	{r4, r7}
 800235c:	4770      	bx	lr

0800235e <quatmultiply>:

quaternion quatmultiply(quaternion* _quat1, quaternion* _quat2) {
 800235e:	b490      	push	{r4, r7}
 8002360:	b096      	sub	sp, #88	@ 0x58
 8002362:	af00      	add	r7, sp, #0
 8002364:	6178      	str	r0, [r7, #20]
 8002366:	6139      	str	r1, [r7, #16]
	quaternion res;
	float w1, x1, y1, z1;
	float w2, x2, y2, z2;

	w1 = _quat1->w;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	657b      	str	r3, [r7, #84]	@ 0x54
	x1 = _quat1->x;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	653b      	str	r3, [r7, #80]	@ 0x50
	y1 = _quat1->y;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	64fb      	str	r3, [r7, #76]	@ 0x4c
	z1 = _quat1->z;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	64bb      	str	r3, [r7, #72]	@ 0x48

	w2 = _quat2->w;
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	647b      	str	r3, [r7, #68]	@ 0x44
	x2 = _quat2->x;
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	643b      	str	r3, [r7, #64]	@ 0x40
	y2 = _quat2->y;
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	63fb      	str	r3, [r7, #60]	@ 0x3c
	z2 = _quat2->z;
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	63bb      	str	r3, [r7, #56]	@ 0x38

	res.w = w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2;  // new w
 8002398:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800239c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80023a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023a4:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80023a8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80023ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023b4:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80023b8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80023bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023c4:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80023c8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80023cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023d4:	edc7 7a06 	vstr	s15, [r7, #24]
	res.x = w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2;  // new x
 80023d8:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80023dc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80023e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023e4:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80023e8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80023ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023f4:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80023f8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80023fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002404:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002408:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800240c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002414:	edc7 7a07 	vstr	s15, [r7, #28]
	res.y = w1 * y2 - x1 * z2 + y1 * w2 + z1 * x2;  // new y
 8002418:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800241c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002420:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002424:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8002428:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800242c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002430:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002434:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8002438:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800243c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002440:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002444:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002448:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800244c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002454:	edc7 7a08 	vstr	s15, [r7, #32]
	res.z = w1 * z2 + x1 * y2 - y1 * x2 + z1 * w2;	// new z
 8002458:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800245c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002460:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002464:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8002468:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800246c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002470:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002474:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8002478:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800247c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002480:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002484:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002488:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800248c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002494:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	return res;
 8002498:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800249c:	f107 0318 	add.w	r3, r7, #24
 80024a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80024a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ae:	ee06 0a10 	vmov	s12, r0
 80024b2:	ee06 1a90 	vmov	s13, r1
 80024b6:	ee07 2a10 	vmov	s14, r2
 80024ba:	ee07 3a90 	vmov	s15, r3
}
 80024be:	eeb0 0a46 	vmov.f32	s0, s12
 80024c2:	eef0 0a66 	vmov.f32	s1, s13
 80024c6:	eeb0 1a47 	vmov.f32	s2, s14
 80024ca:	eef0 1a67 	vmov.f32	s3, s15
 80024ce:	3758      	adds	r7, #88	@ 0x58
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc90      	pop	{r4, r7}
 80024d4:	4770      	bx	lr

080024d6 <quatrotate>:
quaternion quatdivide(quaternion* _quat1, quaternion* _quat2) {
	quaternion qtemp = quatinv(_quat2);
	return quatmultiply(&qtemp, _quat1);
}

vector3D quatrotate(quaternion* q, vector3D* vect) {
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b094      	sub	sp, #80	@ 0x50
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6178      	str	r0, [r7, #20]
 80024de:	6139      	str	r1, [r7, #16]
	// - P_out is the output vector
	// - q is the orientation quaternion
	// - P_in is the input vector (a*aReal)
	// - conj(q) is the conjugate of the orientation quaternion (q=[w,x,y,z], q*=[w,-x,-y,-z])

	quaternion p = { 0.0f, vect->x, vect->y, vect->z }, qtemp;
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	643b      	str	r3, [r7, #64]	@ 0x40

	// quaternion multiplication: q * p, stored back in p
	p = quatmultiply(q, &p);
 80024f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024fc:	4619      	mov	r1, r3
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	f7ff ff2d 	bl	800235e <quatmultiply>
 8002504:	eeb0 6a40 	vmov.f32	s12, s0
 8002508:	eef0 6a60 	vmov.f32	s13, s1
 800250c:	eeb0 7a41 	vmov.f32	s14, s2
 8002510:	eef0 7a61 	vmov.f32	s15, s3
 8002514:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 8002518:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 800251c:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 8002520:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

	// quaternion multiplication: p * conj(q), stored back in p
	qtemp = quatconj(q);
 8002524:	6978      	ldr	r0, [r7, #20]
 8002526:	f7ff fe24 	bl	8002172 <quatconj>
 800252a:	eeb0 6a40 	vmov.f32	s12, s0
 800252e:	eef0 6a60 	vmov.f32	s13, s1
 8002532:	eeb0 7a41 	vmov.f32	s14, s2
 8002536:	eef0 7a61 	vmov.f32	s15, s3
 800253a:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 800253e:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 8002542:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 8002546:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	p = quatmultiply(&p, &qtemp);
 800254a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800254e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff02 	bl	800235e <quatmultiply>
 800255a:	eeb0 6a40 	vmov.f32	s12, s0
 800255e:	eef0 6a60 	vmov.f32	s13, s1
 8002562:	eeb0 7a41 	vmov.f32	s14, s2
 8002566:	eef0 7a61 	vmov.f32	s15, s3
 800256a:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 800256e:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 8002572:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 8002576:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

	// p quaternion is now [0, x', y', z']
	vector3D result;
	result.x = p.x;
 800257a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800257c:	61bb      	str	r3, [r7, #24]
	result.y = p.y;
 800257e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002580:	61fb      	str	r3, [r7, #28]
	result.z = p.z;
 8002582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002584:	623b      	str	r3, [r7, #32]
	return result;
 8002586:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800258a:	f107 0218 	add.w	r2, r7, #24
 800258e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002590:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002594:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002596:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800259a:	ee06 1a90 	vmov	s13, r1
 800259e:	ee07 2a10 	vmov	s14, r2
 80025a2:	ee07 3a90 	vmov	s15, r3
}
 80025a6:	eeb0 0a66 	vmov.f32	s0, s13
 80025aa:	eef0 0a47 	vmov.f32	s1, s14
 80025ae:	eeb0 1a67 	vmov.f32	s2, s15
 80025b2:	3750      	adds	r7, #80	@ 0x50
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <quat2angle>:

// Quaternion to rotating angles (Euler angles)
// rotation order: yaw (Z), pitch (Y), roll (X)
angles3D quat2angle(quaternion* q) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b090      	sub	sp, #64	@ 0x40
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6178      	str	r0, [r7, #20]
	angles3D angles;
	//float sinr_cosp, cosr_cosp, sinp, siny_cosp, cosy_cosp;
	float w, x, y, z;

	w = q->w;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	x = q->x;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	y = q->y;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	637b      	str	r3, [r7, #52]	@ 0x34
	z = q->z;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	633b      	str	r3, [r7, #48]	@ 0x30

//	angles.x = atan2(2 * x * y - 2 * w * z, 2 * w * w + 2 * x * x - 1);   // psi
//	angles.y = -asin(2 * x * z + 2 * w * y);                              // theta
//	angles.z = atan2(2 * y * z - 2 * w * x, 2 * w * w + 2 * z * z - 1);   // phi

	angles.x = atan2f(2.0f * (w * x + y * z), 1.0f - 2.0f * (x * x + y * y)); // roll (X)
 80025d8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80025dc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80025e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e4:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 80025e8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80025ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80025f8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80025fc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002600:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002604:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800260c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002610:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002618:	eef0 0a67 	vmov.f32	s1, s15
 800261c:	eeb0 0a66 	vmov.f32	s0, s13
 8002620:	f015 f906 	bl	8017830 <atan2f>
 8002624:	eef0 7a40 	vmov.f32	s15, s0
 8002628:	edc7 7a06 	vstr	s15, [r7, #24]
	angles.y = asinf(2.0f * (w * y - z * x));                           // pitch (Y)
 800262c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002630:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002638:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 800263c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002648:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800264c:	eeb0 0a67 	vmov.f32	s0, s15
 8002650:	f015 f8c2 	bl	80177d8 <asinf>
 8002654:	eef0 7a40 	vmov.f32	s15, s0
 8002658:	edc7 7a07 	vstr	s15, [r7, #28]
	angles.z = atan2f(2.0f * (w * z + x * y), 1.0f - 2.0f * (y * y + z * z)); // yaw (Z)
 800265c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002660:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002664:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002668:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800266c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002670:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002678:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800267c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002680:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002684:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002688:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800268c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002690:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002694:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800269c:	eef0 0a67 	vmov.f32	s1, s15
 80026a0:	eeb0 0a66 	vmov.f32	s0, s13
 80026a4:	f015 f8c4 	bl	8017830 <atan2f>
 80026a8:	eef0 7a40 	vmov.f32	s15, s0
 80026ac:	edc7 7a08 	vstr	s15, [r7, #32]

	return angles;
 80026b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026b4:	f107 0218 	add.w	r2, r7, #24
 80026b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80026ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80026be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c4:	ee06 1a90 	vmov	s13, r1
 80026c8:	ee07 2a10 	vmov	s14, r2
 80026cc:	ee07 3a90 	vmov	s15, r3
}
 80026d0:	eeb0 0a66 	vmov.f32	s0, s13
 80026d4:	eef0 0a47 	vmov.f32	s1, s14
 80026d8:	eeb0 1a67 	vmov.f32	s2, s15
 80026dc:	3740      	adds	r7, #64	@ 0x40
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <quat2rotvec>:

vector3D quat2rotvec(quaternion q) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b090      	sub	sp, #64	@ 0x40
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	eeb0 6a40 	vmov.f32	s12, s0
 80026ee:	eef0 6a60 	vmov.f32	s13, s1
 80026f2:	eeb0 7a41 	vmov.f32	s14, s2
 80026f6:	eef0 7a61 	vmov.f32	s15, s3
 80026fa:	ed87 6a04 	vstr	s12, [r7, #16]
 80026fe:	edc7 6a05 	vstr	s13, [r7, #20]
 8002702:	ed87 7a06 	vstr	s14, [r7, #24]
 8002706:	edc7 7a07 	vstr	s15, [r7, #28]
	q = quatnormalize(&q);
 800270a:	f107 0310 	add.w	r3, r7, #16
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fd6a 	bl	80021e8 <quatnormalize>
 8002714:	eeb0 6a40 	vmov.f32	s12, s0
 8002718:	eef0 6a60 	vmov.f32	s13, s1
 800271c:	eeb0 7a41 	vmov.f32	s14, s2
 8002720:	eef0 7a61 	vmov.f32	s15, s3
 8002724:	ed87 6a04 	vstr	s12, [r7, #16]
 8002728:	edc7 6a05 	vstr	s13, [r7, #20]
 800272c:	ed87 7a06 	vstr	s14, [r7, #24]
 8002730:	edc7 7a07 	vstr	s15, [r7, #28]
    // Ensure shortest rotation
    if (q.w < 0) {
 8002734:	edd7 7a04 	vldr	s15, [r7, #16]
 8002738:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800273c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002740:	d517      	bpl.n	8002772 <quat2rotvec+0x8e>
        q.w = -q.w;
 8002742:	edd7 7a04 	vldr	s15, [r7, #16]
 8002746:	eef1 7a67 	vneg.f32	s15, s15
 800274a:	edc7 7a04 	vstr	s15, [r7, #16]
        q.x = -q.x;
 800274e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002752:	eef1 7a67 	vneg.f32	s15, s15
 8002756:	edc7 7a05 	vstr	s15, [r7, #20]
        q.y = -q.y;
 800275a:	edd7 7a06 	vldr	s15, [r7, #24]
 800275e:	eef1 7a67 	vneg.f32	s15, s15
 8002762:	edc7 7a06 	vstr	s15, [r7, #24]
        q.z = -q.z;
 8002766:	edd7 7a07 	vldr	s15, [r7, #28]
 800276a:	eef1 7a67 	vneg.f32	s15, s15
 800276e:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    vector3D rotvec;
    float angle = 2.0f * acosf(q.w);
 8002772:	edd7 7a04 	vldr	s15, [r7, #16]
 8002776:	eeb0 0a67 	vmov.f32	s0, s15
 800277a:	f015 f801 	bl	8017780 <acosf>
 800277e:	eef0 7a40 	vmov.f32	s15, s0
 8002782:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002786:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    float s = sqrtf(1.0f - q.w * q.w);  // sin(angle/2)
 800278a:	ed97 7a04 	vldr	s14, [r7, #16]
 800278e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002796:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800279a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800279e:	eeb0 0a67 	vmov.f32	s0, s15
 80027a2:	f015 f89f 	bl	80178e4 <sqrtf>
 80027a6:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38

    if (s <= FLT_EPSILON) {
 80027aa:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80027ae:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800284c <quat2rotvec+0x168>
 80027b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ba:	d809      	bhi.n	80027d0 <quat2rotvec+0xec>
        // If angle is too small, return zero vector
        rotvec.x = 0.0f;
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	623b      	str	r3, [r7, #32]
        rotvec.y = 0.0f;
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	627b      	str	r3, [r7, #36]	@ 0x24
        rotvec.z = 0.0f;
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027ce:	e023      	b.n	8002818 <quat2rotvec+0x134>
    } else {
        // Normalize axis and scale by angle
        rotvec.x = angle * (q.x / s);
 80027d0:	edd7 6a05 	vldr	s13, [r7, #20]
 80027d4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80027d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027dc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80027e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e4:	edc7 7a08 	vstr	s15, [r7, #32]
        rotvec.y = angle * (q.y / s);
 80027e8:	edd7 6a06 	vldr	s13, [r7, #24]
 80027ec:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80027f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027f4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80027f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        rotvec.z = angle * (q.z / s);
 8002800:	edd7 6a07 	vldr	s13, [r7, #28]
 8002804:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002808:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800280c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002814:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    }

    return rotvec;
 8002818:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800281c:	f107 0220 	add.w	r2, r7, #32
 8002820:	ca07      	ldmia	r2, {r0, r1, r2}
 8002822:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002826:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002828:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800282a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800282c:	ee06 1a90 	vmov	s13, r1
 8002830:	ee07 2a10 	vmov	s14, r2
 8002834:	ee07 3a90 	vmov	s15, r3
}
 8002838:	eeb0 0a66 	vmov.f32	s0, s13
 800283c:	eef0 0a47 	vmov.f32	s1, s14
 8002840:	eeb0 1a67 	vmov.f32	s2, s15
 8002844:	3740      	adds	r7, #64	@ 0x40
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	34000000 	.word	0x34000000

08002850 <angle2quat>:

// rotation order: yaw (Z), pitch (Y), roll (X) in radians
quaternion angle2quat(angles3D* angles) {
 8002850:	b590      	push	{r4, r7, lr}
 8002852:	b095      	sub	sp, #84	@ 0x54
 8002854:	af00      	add	r7, sp, #0
 8002856:	6178      	str	r0, [r7, #20]
	// Abbreviations for the various angular functions
	float cy = cosf(angles->z * 0.5f);
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	edd3 7a02 	vldr	s15, [r3, #8]
 800285e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002862:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002866:	eeb0 0a67 	vmov.f32	s0, s15
 800286a:	f015 f92d 	bl	8017ac8 <cosf>
 800286e:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
	float sy = sinf(angles->z * 0.5f);
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	edd3 7a02 	vldr	s15, [r3, #8]
 8002878:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800287c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002880:	eeb0 0a67 	vmov.f32	s0, s15
 8002884:	f015 f96c 	bl	8017b60 <sinf>
 8002888:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
	float cp = cosf(angles->y * 0.5f);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002892:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800289a:	eeb0 0a67 	vmov.f32	s0, s15
 800289e:	f015 f913 	bl	8017ac8 <cosf>
 80028a2:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	float sp = sinf(angles->y * 0.5f);
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80028ac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80028b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028b4:	eeb0 0a67 	vmov.f32	s0, s15
 80028b8:	f015 f952 	bl	8017b60 <sinf>
 80028bc:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
	float cr = cosf(angles->x * 0.5f);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	edd3 7a00 	vldr	s15, [r3]
 80028c6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80028ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ce:	eeb0 0a67 	vmov.f32	s0, s15
 80028d2:	f015 f8f9 	bl	8017ac8 <cosf>
 80028d6:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
	float sr = sinf(angles->x * 0.5f);
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	edd3 7a00 	vldr	s15, [r3]
 80028e0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80028e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028e8:	eeb0 0a67 	vmov.f32	s0, s15
 80028ec:	f015 f938 	bl	8017b60 <sinf>
 80028f0:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38

	quaternion q;
	q.w = cr * cp * cy + sr * sp * sy;
 80028f4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80028f8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80028fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002900:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002908:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800290c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002910:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002914:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800291c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002920:	edc7 7a06 	vstr	s15, [r7, #24]
	q.x = sr * cp * cy - cr * sp * sy;
 8002924:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002928:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800292c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002930:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002934:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002938:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800293c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002940:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002944:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800294c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002950:	edc7 7a07 	vstr	s15, [r7, #28]
	q.y = cr * sp * cy + sr * cp * sy;
 8002954:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002958:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800295c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002960:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002964:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002968:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800296c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002970:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002974:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800297c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002980:	edc7 7a08 	vstr	s15, [r7, #32]
	q.z = cr * cp * sy - sr * sp * cy;
 8002984:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002988:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800298c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002990:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002994:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002998:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800299c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80029a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029a4:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80029a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	return q;
 80029b4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80029b8:	f107 0318 	add.w	r3, r7, #24
 80029bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80029c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80029c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ca:	ee06 0a10 	vmov	s12, r0
 80029ce:	ee06 1a90 	vmov	s13, r1
 80029d2:	ee07 2a10 	vmov	s14, r2
 80029d6:	ee07 3a90 	vmov	s15, r3
}
 80029da:	eeb0 0a46 	vmov.f32	s0, s12
 80029de:	eef0 0a66 	vmov.f32	s1, s13
 80029e2:	eeb0 1a47 	vmov.f32	s2, s14
 80029e6:	eef0 1a67 	vmov.f32	s3, s15
 80029ea:	3754      	adds	r7, #84	@ 0x54
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd90      	pop	{r4, r7, pc}

080029f0 <quatadd>:

// Adds two quaternions together and the sum is the pointer to another quaternion, Sum = L + R
quaternion quatadd(quaternion *L, quaternion *R){
 80029f0:	b490      	push	{r4, r7}
 80029f2:	b08e      	sub	sp, #56	@ 0x38
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6178      	str	r0, [r7, #20]
 80029f8:	6139      	str	r1, [r7, #16]
	quaternion res;
	res.w = L->w + R->w;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	ed93 7a00 	vldr	s14, [r3]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	edd3 7a00 	vldr	s15, [r3]
 8002a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a0a:	edc7 7a06 	vstr	s15, [r7, #24]
	res.x = L->x + R->x;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a1e:	edc7 7a07 	vstr	s15, [r7, #28]
	res.y = L->y + R->y;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a32:	edc7 7a08 	vstr	s15, [r7, #32]
	res.z = L->z + R->z;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	ed93 7a03 	vldr	s14, [r3, #12]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a46:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 8002a4a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002a4e:	f107 0318 	add.w	r3, r7, #24
 8002a52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002a58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a60:	ee06 0a10 	vmov	s12, r0
 8002a64:	ee06 1a90 	vmov	s13, r1
 8002a68:	ee07 2a10 	vmov	s14, r2
 8002a6c:	ee07 3a90 	vmov	s15, r3
}
 8002a70:	eeb0 0a46 	vmov.f32	s0, s12
 8002a74:	eef0 0a66 	vmov.f32	s1, s13
 8002a78:	eeb0 1a47 	vmov.f32	s2, s14
 8002a7c:	eef0 1a67 	vmov.f32	s3, s15
 8002a80:	3738      	adds	r7, #56	@ 0x38
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc90      	pop	{r4, r7}
 8002a86:	4770      	bx	lr

08002a88 <quatsub>:

// Subtracts two quaternions together and the sum is the pointer to another quaternion, sum = L - R
quaternion quatsub(quaternion *L, quaternion *R){
 8002a88:	b490      	push	{r4, r7}
 8002a8a:	b08e      	sub	sp, #56	@ 0x38
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6178      	str	r0, [r7, #20]
 8002a90:	6139      	str	r1, [r7, #16]
	quaternion res;
	res.w = L->w - R->w;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	ed93 7a00 	vldr	s14, [r3]
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	edd3 7a00 	vldr	s15, [r3]
 8002a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa2:	edc7 7a06 	vstr	s15, [r7, #24]
	res.x = L->x - R->x;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	ed93 7a01 	vldr	s14, [r3, #4]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab6:	edc7 7a07 	vstr	s15, [r7, #28]
	res.y = L->y - R->y;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aca:	edc7 7a08 	vstr	s15, [r7, #32]
	res.z = L->z - R->z;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	ed93 7a03 	vldr	s14, [r3, #12]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ada:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ade:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 8002ae2:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002ae6:	f107 0318 	add.w	r3, r7, #24
 8002aea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002af0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af8:	ee06 0a10 	vmov	s12, r0
 8002afc:	ee06 1a90 	vmov	s13, r1
 8002b00:	ee07 2a10 	vmov	s14, r2
 8002b04:	ee07 3a90 	vmov	s15, r3
}
 8002b08:	eeb0 0a46 	vmov.f32	s0, s12
 8002b0c:	eef0 0a66 	vmov.f32	s1, s13
 8002b10:	eeb0 1a47 	vmov.f32	s2, s14
 8002b14:	eef0 1a67 	vmov.f32	s3, s15
 8002b18:	3738      	adds	r7, #56	@ 0x38
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc90      	pop	{r4, r7}
 8002b1e:	4770      	bx	lr

08002b20 <quat_error>:

// Compute error quaternion: q_err = conj(current) * desired
quaternion quat_error(quaternion *q_current, quaternion *q_desired) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08e      	sub	sp, #56	@ 0x38
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6178      	str	r0, [r7, #20]
 8002b28:	6139      	str	r1, [r7, #16]
    quaternion q_conj = quatconj(q_current);
 8002b2a:	6978      	ldr	r0, [r7, #20]
 8002b2c:	f7ff fb21 	bl	8002172 <quatconj>
 8002b30:	eeb0 6a40 	vmov.f32	s12, s0
 8002b34:	eef0 6a60 	vmov.f32	s13, s1
 8002b38:	eeb0 7a41 	vmov.f32	s14, s2
 8002b3c:	eef0 7a61 	vmov.f32	s15, s3
 8002b40:	ed87 6a06 	vstr	s12, [r7, #24]
 8002b44:	edc7 6a07 	vstr	s13, [r7, #28]
 8002b48:	ed87 7a08 	vstr	s14, [r7, #32]
 8002b4c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return quatmultiply(q_desired, &q_conj);
 8002b50:	f107 0318 	add.w	r3, r7, #24
 8002b54:	4619      	mov	r1, r3
 8002b56:	6938      	ldr	r0, [r7, #16]
 8002b58:	f7ff fc01 	bl	800235e <quatmultiply>
 8002b5c:	eeb0 6a40 	vmov.f32	s12, s0
 8002b60:	eef0 6a60 	vmov.f32	s13, s1
 8002b64:	eeb0 7a41 	vmov.f32	s14, s2
 8002b68:	eef0 7a61 	vmov.f32	s15, s3
 8002b6c:	ed87 6a0a 	vstr	s12, [r7, #40]	@ 0x28
 8002b70:	edc7 6a0b 	vstr	s13, [r7, #44]	@ 0x2c
 8002b74:	ed87 7a0c 	vstr	s14, [r7, #48]	@ 0x30
 8002b78:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8002b7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b84:	ee06 0a10 	vmov	s12, r0
 8002b88:	ee06 1a90 	vmov	s13, r1
 8002b8c:	ee07 2a10 	vmov	s14, r2
 8002b90:	ee07 3a90 	vmov	s15, r3
}
 8002b94:	eeb0 0a46 	vmov.f32	s0, s12
 8002b98:	eef0 0a66 	vmov.f32	s1, s13
 8002b9c:	eeb0 1a47 	vmov.f32	s2, s14
 8002ba0:	eef0 1a67 	vmov.f32	s3, s15
 8002ba4:	3738      	adds	r7, #56	@ 0x38
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <imu_init>:
	float accel_filter_cutoff_freq_hz,
	float gyro_filter_cutoff_freq_hz,
	float accel_sample_rate_hz,
	float gyro_sample_rate_hz,
	float madgwick_sample_rate_hz
) {
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b08b      	sub	sp, #44	@ 0x2c
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6178      	str	r0, [r7, #20]
 8002bb4:	ed87 0a04 	vstr	s0, [r7, #16]
 8002bb8:	edc7 0a03 	vstr	s1, [r7, #12]
 8002bbc:	ed87 1a02 	vstr	s2, [r7, #8]
 8002bc0:	edc7 1a01 	vstr	s3, [r7, #4]
 8002bc4:	ed87 2a00 	vstr	s4, [r7]
	memset(im, 0, sizeof(imu_t));
 8002bc8:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8002bcc:	2100      	movs	r1, #0
 8002bce:	6978      	ldr	r0, [r7, #20]
 8002bd0:	f017 fca8 	bl	801a524 <memset>

	imu_set_leveled_attitude(im, IMU_DEFAULT_LEVELD_ATTITUDE_Q); // set default leveld position to identity quaternion
 8002bd4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	61fb      	str	r3, [r7, #28]
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	623b      	str	r3, [r7, #32]
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bec:	ed97 6a06 	vldr	s12, [r7, #24]
 8002bf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bf4:	ed97 7a08 	vldr	s14, [r7, #32]
 8002bf8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002bfc:	eeb0 0a46 	vmov.f32	s0, s12
 8002c00:	eef0 0a66 	vmov.f32	s1, s13
 8002c04:	eeb0 1a47 	vmov.f32	s2, s14
 8002c08:	eef0 1a67 	vmov.f32	s3, s15
 8002c0c:	6978      	ldr	r0, [r7, #20]
 8002c0e:	f000 f85d 	bl	8002ccc <imu_set_leveled_attitude>
	im->estimated_q = im->leveld_attitude_q; // identity quaternion
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f102 0460 	add.w	r4, r2, #96	@ 0x60
 8002c1a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8002c1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	im->accel_misalignment_A_inv[0][0] = 1.0f; // default: no misalignment
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002c2a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	im->accel_misalignment_A_inv[1][1] = 1.0f; // default: no misalignment
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002c34:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	im->accel_misalignment_A_inv[2][2] = 1.0f; // default: no misalignment
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002c3e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

	pt1_filter_init_lowpass(&(im->accel_pt1_filter_x), accel_filter_cutoff_freq_hz, accel_sample_rate_hz);
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	3388      	adds	r3, #136	@ 0x88
 8002c46:	edd7 0a02 	vldr	s1, [r7, #8]
 8002c4a:	ed97 0a04 	vldr	s0, [r7, #16]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe fcfa 	bl	8001648 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->accel_pt1_filter_y), accel_filter_cutoff_freq_hz, accel_sample_rate_hz);
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	3398      	adds	r3, #152	@ 0x98
 8002c58:	edd7 0a02 	vldr	s1, [r7, #8]
 8002c5c:	ed97 0a04 	vldr	s0, [r7, #16]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe fcf1 	bl	8001648 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->accel_pt1_filter_z), accel_filter_cutoff_freq_hz, accel_sample_rate_hz);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	33a8      	adds	r3, #168	@ 0xa8
 8002c6a:	edd7 0a02 	vldr	s1, [r7, #8]
 8002c6e:	ed97 0a04 	vldr	s0, [r7, #16]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe fce8 	bl	8001648 <pt1_filter_init_lowpass>

	pt1_filter_init_lowpass(&(im->gyro_pt1_filter_x), gyro_filter_cutoff_freq_hz, gyro_sample_rate_hz);
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	33b8      	adds	r3, #184	@ 0xb8
 8002c7c:	edd7 0a01 	vldr	s1, [r7, #4]
 8002c80:	ed97 0a03 	vldr	s0, [r7, #12]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fe fcdf 	bl	8001648 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->gyro_pt1_filter_y), gyro_filter_cutoff_freq_hz, gyro_sample_rate_hz);
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	33c8      	adds	r3, #200	@ 0xc8
 8002c8e:	edd7 0a01 	vldr	s1, [r7, #4]
 8002c92:	ed97 0a03 	vldr	s0, [r7, #12]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe fcd6 	bl	8001648 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->gyro_pt1_filter_z), gyro_filter_cutoff_freq_hz, gyro_sample_rate_hz);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	33d8      	adds	r3, #216	@ 0xd8
 8002ca0:	edd7 0a01 	vldr	s1, [r7, #4]
 8002ca4:	ed97 0a03 	vldr	s0, [r7, #12]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe fccd 	bl	8001648 <pt1_filter_init_lowpass>

	madgwick_filter_init(&(im->madgwick_filter), madgwick_sample_rate_hz, (float)IMU_GYRO_MEAN_ERROR_RAD);
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	3370      	adds	r3, #112	@ 0x70
 8002cb2:	eddf 0a05 	vldr	s1, [pc, #20]	@ 8002cc8 <imu_init+0x11c>
 8002cb6:	ed97 0a00 	vldr	s0, [r7]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fac4 	bl	8003248 <madgwick_filter_init>
}
 8002cc0:	bf00      	nop
 8002cc2:	372c      	adds	r7, #44	@ 0x2c
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd90      	pop	{r4, r7, pc}
 8002cc8:	3db2b8c2 	.word	0x3db2b8c2

08002ccc <imu_set_leveled_attitude>:

void imu_set_leveled_attitude(imu_t* im, quaternion leveld_attitude_q) {
 8002ccc:	b590      	push	{r4, r7, lr}
 8002cce:	b097      	sub	sp, #92	@ 0x5c
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6178      	str	r0, [r7, #20]
 8002cd4:	eeb0 6a40 	vmov.f32	s12, s0
 8002cd8:	eef0 6a60 	vmov.f32	s13, s1
 8002cdc:	eeb0 7a41 	vmov.f32	s14, s2
 8002ce0:	eef0 7a61 	vmov.f32	s15, s3
 8002ce4:	ed87 6a01 	vstr	s12, [r7, #4]
 8002ce8:	edc7 6a02 	vstr	s13, [r7, #8]
 8002cec:	ed87 7a03 	vstr	s14, [r7, #12]
 8002cf0:	edc7 7a04 	vstr	s15, [r7, #16]

	// recalculate the offset from leveld position to estimated position
	quaternion q_level = leveld_attitude_q;
 8002cf4:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8002cf8:	1d3b      	adds	r3, r7, #4
 8002cfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	q_level = quatnormalize(&q_level);          // safety
 8002d00:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fa6f 	bl	80021e8 <quatnormalize>
 8002d0a:	eeb0 6a40 	vmov.f32	s12, s0
 8002d0e:	eef0 6a60 	vmov.f32	s13, s1
 8002d12:	eeb0 7a41 	vmov.f32	s14, s2
 8002d16:	eef0 7a61 	vmov.f32	s15, s3
 8002d1a:	ed87 6a12 	vstr	s12, [r7, #72]	@ 0x48
 8002d1e:	edc7 6a13 	vstr	s13, [r7, #76]	@ 0x4c
 8002d22:	ed87 7a14 	vstr	s14, [r7, #80]	@ 0x50
 8002d26:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	quaternion q_ref = (quaternion){ 1.0f,0.0f,0.0f,0.0f };      // "leveled = identity"
 8002d2a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	647b      	str	r3, [r7, #68]	@ 0x44
	q_level = quatconj(&q_level);
 8002d42:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fa13 	bl	8002172 <quatconj>
 8002d4c:	eeb0 6a40 	vmov.f32	s12, s0
 8002d50:	eef0 6a60 	vmov.f32	s13, s1
 8002d54:	eeb0 7a41 	vmov.f32	s14, s2
 8002d58:	eef0 7a61 	vmov.f32	s15, s3
 8002d5c:	ed87 6a12 	vstr	s12, [r7, #72]	@ 0x48
 8002d60:	edc7 6a13 	vstr	s13, [r7, #76]	@ 0x4c
 8002d64:	ed87 7a14 	vstr	s14, [r7, #80]	@ 0x50
 8002d68:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	quaternion q_off = quatmultiply(&q_ref, &q_level); // q_off = q_ref * q_level^-1
 8002d6c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002d70:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff faf1 	bl	800235e <quatmultiply>
 8002d7c:	eeb0 6a40 	vmov.f32	s12, s0
 8002d80:	eef0 6a60 	vmov.f32	s13, s1
 8002d84:	eeb0 7a41 	vmov.f32	s14, s2
 8002d88:	eef0 7a61 	vmov.f32	s15, s3
 8002d8c:	ed87 6a06 	vstr	s12, [r7, #24]
 8002d90:	edc7 6a07 	vstr	s13, [r7, #28]
 8002d94:	ed87 7a08 	vstr	s14, [r7, #32]
 8002d98:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	q_off = quatnormalize(&q_off);
 8002d9c:	f107 0318 	add.w	r3, r7, #24
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fa21 	bl	80021e8 <quatnormalize>
 8002da6:	eeb0 6a40 	vmov.f32	s12, s0
 8002daa:	eef0 6a60 	vmov.f32	s13, s1
 8002dae:	eeb0 7a41 	vmov.f32	s14, s2
 8002db2:	eef0 7a61 	vmov.f32	s15, s3
 8002db6:	ed87 6a06 	vstr	s12, [r7, #24]
 8002dba:	edc7 6a07 	vstr	s13, [r7, #28]
 8002dbe:	ed87 7a08 	vstr	s14, [r7, #32]
 8002dc2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	im->leveld_attitude_q = leveld_attitude_q;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f503 7492 	add.w	r4, r3, #292	@ 0x124
 8002dcc:	1d3b      	adds	r3, r7, #4
 8002dce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	im->q_offset = q_off; // store the offset from leveld position to estimated position
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f503 749a 	add.w	r4, r3, #308	@ 0x134
 8002dda:	f107 0318 	add.w	r3, r7, #24
 8002dde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002de0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002de4:	bf00      	nop
 8002de6:	375c      	adds	r7, #92	@ 0x5c
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd90      	pop	{r4, r7, pc}

08002dec <imu_update_gyro>:

void imu_update_gyro(imu_t* im, coord3D imu_raw_gyro_rad) {
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	eef0 6a40 	vmov.f32	s13, s0
 8002df8:	eeb0 7a60 	vmov.f32	s14, s1
 8002dfc:	eef0 7a41 	vmov.f32	s15, s2
 8002e00:	edc7 6a00 	vstr	s13, [r7]
 8002e04:	ed87 7a01 	vstr	s14, [r7, #4]
 8002e08:	edc7 7a02 	vstr	s15, [r7, #8]

	im->raw_gyro = imu_raw_gyro_rad; // store raw gyro data
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	330c      	adds	r3, #12
 8002e10:	463a      	mov	r2, r7
 8002e12:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e14:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	im->calibrated_gyro.x = imu_raw_gyro_rad.x - im->gyro_bias[0];
 8002e18:	ed97 7a00 	vldr	s14, [r7]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	edd3 7a46 	vldr	s15, [r3, #280]	@ 0x118
 8002e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	im->calibrated_gyro.y = imu_raw_gyro_rad.y - im->gyro_bias[1];
 8002e2c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 8002e36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	im->calibrated_gyro.z = imu_raw_gyro_rad.z - im->gyro_bias[2];
 8002e40:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 8002e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	im->filtered_gyro.x = pt1_filter_apply_lowpass(&(im->gyro_pt1_filter_x), im->calibrated_gyro.x);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002e60:	eeb0 0a67 	vmov.f32	s0, s15
 8002e64:	4610      	mov	r0, r2
 8002e66:	f7fe fc53 	bl	8001710 <pt1_filter_apply_lowpass>
 8002e6a:	eef0 7a40 	vmov.f32	s15, s0
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	im->filtered_gyro.y = pt1_filter_apply_lowpass(&(im->gyro_pt1_filter_y), im->calibrated_gyro.y);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002e80:	eeb0 0a67 	vmov.f32	s0, s15
 8002e84:	4610      	mov	r0, r2
 8002e86:	f7fe fc43 	bl	8001710 <pt1_filter_apply_lowpass>
 8002e8a:	eef0 7a40 	vmov.f32	s15, s0
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	im->filtered_gyro.z = pt1_filter_apply_lowpass(&(im->gyro_pt1_filter_z), im->calibrated_gyro.z);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002ea0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	f7fe fc33 	bl	8001710 <pt1_filter_apply_lowpass>
 8002eaa:	eef0 7a40 	vmov.f32	s15, s0
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

	im->body_frame_gyro = quatrotate(&(im->q_offset), &(im->filtered_gyro));
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	333c      	adds	r3, #60	@ 0x3c
 8002ebe:	68fc      	ldr	r4, [r7, #12]
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	f7ff fb07 	bl	80024d6 <quatrotate>
 8002ec8:	eef0 6a40 	vmov.f32	s13, s0
 8002ecc:	eeb0 7a60 	vmov.f32	s14, s1
 8002ed0:	eef0 7a41 	vmov.f32	s15, s2
 8002ed4:	edc4 6a15 	vstr	s13, [r4, #84]	@ 0x54
 8002ed8:	ed84 7a16 	vstr	s14, [r4, #88]	@ 0x58
 8002edc:	edc4 7a17 	vstr	s15, [r4, #92]	@ 0x5c
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd90      	pop	{r4, r7, pc}

08002ee8 <imu_update_accel>:

void imu_update_accel(imu_t* im, coord3D imu_raw_accel_m_s2) {
 8002ee8:	b5b0      	push	{r4, r5, r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	eef0 6a40 	vmov.f32	s13, s0
 8002ef4:	eeb0 7a60 	vmov.f32	s14, s1
 8002ef8:	eef0 7a41 	vmov.f32	s15, s2
 8002efc:	edc7 6a00 	vstr	s13, [r7]
 8002f00:	ed87 7a01 	vstr	s14, [r7, #4]
 8002f04:	edc7 7a02 	vstr	s15, [r7, #8]
	im->raw_accel = imu_raw_accel_m_s2;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	461c      	mov	r4, r3
 8002f0c:	463b      	mov	r3, r7
 8002f0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	
	MagCal(&(imu_raw_accel_m_s2.x), &(imu_raw_accel_m_s2.y), &(imu_raw_accel_m_s2.z), im->accel_bias, im->accel_misalignment_A_inv);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f103 05e8 	add.w	r5, r3, #232	@ 0xe8
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	33f4      	adds	r3, #244	@ 0xf4
 8002f20:	463a      	mov	r2, r7
 8002f22:	f102 0408 	add.w	r4, r2, #8
 8002f26:	463a      	mov	r2, r7
 8002f28:	1d11      	adds	r1, r2, #4
 8002f2a:	4638      	mov	r0, r7
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	462b      	mov	r3, r5
 8002f30:	4622      	mov	r2, r4
 8002f32:	f7ff f856 	bl	8001fe2 <MagCal>

	im->calibrated_accel = imu_raw_accel_m_s2;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3318      	adds	r3, #24
 8002f3a:	463a      	mov	r2, r7
 8002f3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	im->filtered_accel.x = pt1_filter_apply_lowpass(&(im->accel_pt1_filter_x), imu_raw_accel_m_s2.x);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3388      	adds	r3, #136	@ 0x88
 8002f46:	edd7 7a00 	vldr	s15, [r7]
 8002f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fbde 	bl	8001710 <pt1_filter_apply_lowpass>
 8002f54:	eef0 7a40 	vmov.f32	s15, s0
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	im->filtered_accel.y = pt1_filter_apply_lowpass(&(im->accel_pt1_filter_y), imu_raw_accel_m_s2.y);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	3398      	adds	r3, #152	@ 0x98
 8002f62:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f66:	eeb0 0a67 	vmov.f32	s0, s15
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fbd0 	bl	8001710 <pt1_filter_apply_lowpass>
 8002f70:	eef0 7a40 	vmov.f32	s15, s0
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	im->filtered_accel.z = pt1_filter_apply_lowpass(&(im->accel_pt1_filter_z), imu_raw_accel_m_s2.z);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	33a8      	adds	r3, #168	@ 0xa8
 8002f7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f82:	eeb0 0a67 	vmov.f32	s0, s15
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe fbc2 	bl	8001710 <pt1_filter_apply_lowpass>
 8002f8c:	eef0 7a40 	vmov.f32	s15, s0
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	im->body_frame_accel = quatrotate(&(im->q_offset), &(im->filtered_accel));
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	3330      	adds	r3, #48	@ 0x30
 8002fa0:	68fc      	ldr	r4, [r7, #12]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	f7ff fa96 	bl	80024d6 <quatrotate>
 8002faa:	eef0 6a40 	vmov.f32	s13, s0
 8002fae:	eeb0 7a60 	vmov.f32	s14, s1
 8002fb2:	eef0 7a41 	vmov.f32	s15, s2
 8002fb6:	edc4 6a12 	vstr	s13, [r4, #72]	@ 0x48
 8002fba:	ed84 7a13 	vstr	s14, [r4, #76]	@ 0x4c
 8002fbe:	edc4 7a14 	vstr	s15, [r4, #80]	@ 0x50
}
 8002fc2:	bf00      	nop
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bdb0      	pop	{r4, r5, r7, pc}

08002fca <imu_update_madgwick>:

void imu_update_madgwick(imu_t* im) {
 8002fca:	b590      	push	{r4, r7, lr}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
	madgwick_filter_apply(
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
		&(im->madgwick_filter),
		-im->body_frame_accel.x,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	madgwick_filter_apply(
 8002fde:	eeb1 7a67 	vneg.f32	s14, s15
		-im->body_frame_accel.y,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
	madgwick_filter_apply(
 8002fe8:	eef1 6a67 	vneg.f32	s13, s15
		-im->body_frame_accel.z,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
	madgwick_filter_apply(
 8002ff2:	eef1 7a67 	vneg.f32	s15, s15
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	edd3 5a16 	vldr	s11, [r3, #88]	@ 0x58
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	ed93 5a17 	vldr	s10, [r3, #92]	@ 0x5c
 8003008:	eef0 2a45 	vmov.f32	s5, s10
 800300c:	eeb0 2a65 	vmov.f32	s4, s11
 8003010:	eef0 1a46 	vmov.f32	s3, s12
 8003014:	eeb0 1a67 	vmov.f32	s2, s15
 8003018:	eef0 0a66 	vmov.f32	s1, s13
 800301c:	eeb0 0a47 	vmov.f32	s0, s14
 8003020:	4610      	mov	r0, r2
 8003022:	f000 f935 	bl	8003290 <madgwick_filter_apply>
//		-im->body_frame_gyro.z
//	);

	//im->estimated_q = quatmultiply(&(im->q_offset), &(im->madgwick_filter.q_est));
	//im->estimated_q = quatnormalize(&(im->madgwick_filter.q_est));
	im->estimated_q = im->madgwick_filter.q_est;
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f102 0460 	add.w	r4, r2, #96	@ 0x60
 800302e:	3370      	adds	r3, #112	@ 0x70
 8003030:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003032:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	bd90      	pop	{r4, r7, pc}

0800303e <imu_update>:

void imu_update(imu_t* im, coord3D imu_raw_accel_m_s2, coord3D imu_raw_gyro_rad) {
 800303e:	b580      	push	{r7, lr}
 8003040:	b088      	sub	sp, #32
 8003042:	af00      	add	r7, sp, #0
 8003044:	61f8      	str	r0, [r7, #28]
 8003046:	eeb0 5a40 	vmov.f32	s10, s0
 800304a:	eef0 5a60 	vmov.f32	s11, s1
 800304e:	eeb0 6a41 	vmov.f32	s12, s2
 8003052:	eef0 6a61 	vmov.f32	s13, s3
 8003056:	eeb0 7a42 	vmov.f32	s14, s4
 800305a:	eef0 7a62 	vmov.f32	s15, s5
 800305e:	ed87 5a04 	vstr	s10, [r7, #16]
 8003062:	edc7 5a05 	vstr	s11, [r7, #20]
 8003066:	ed87 6a06 	vstr	s12, [r7, #24]
 800306a:	edc7 6a01 	vstr	s13, [r7, #4]
 800306e:	ed87 7a02 	vstr	s14, [r7, #8]
 8003072:	edc7 7a03 	vstr	s15, [r7, #12]
	imu_update_accel(im, imu_raw_accel_m_s2);
 8003076:	edd7 6a04 	vldr	s13, [r7, #16]
 800307a:	ed97 7a05 	vldr	s14, [r7, #20]
 800307e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003082:	eeb0 0a66 	vmov.f32	s0, s13
 8003086:	eef0 0a47 	vmov.f32	s1, s14
 800308a:	eeb0 1a67 	vmov.f32	s2, s15
 800308e:	69f8      	ldr	r0, [r7, #28]
 8003090:	f7ff ff2a 	bl	8002ee8 <imu_update_accel>
	imu_update_gyro(im, imu_raw_gyro_rad);
 8003094:	edd7 6a01 	vldr	s13, [r7, #4]
 8003098:	ed97 7a02 	vldr	s14, [r7, #8]
 800309c:	edd7 7a03 	vldr	s15, [r7, #12]
 80030a0:	eeb0 0a66 	vmov.f32	s0, s13
 80030a4:	eef0 0a47 	vmov.f32	s1, s14
 80030a8:	eeb0 1a67 	vmov.f32	s2, s15
 80030ac:	69f8      	ldr	r0, [r7, #28]
 80030ae:	f7ff fe9d 	bl	8002dec <imu_update_gyro>
	imu_update_madgwick(im);
 80030b2:	69f8      	ldr	r0, [r7, #28]
 80030b4:	f7ff ff89 	bl	8002fca <imu_update_madgwick>
}
 80030b8:	bf00      	nop
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <imu_set_gyro_bias>:

void imu_set_gyro_bias(imu_t* im, coord3D gyro_bias) {
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	eef0 6a40 	vmov.f32	s13, s0
 80030cc:	eeb0 7a60 	vmov.f32	s14, s1
 80030d0:	eef0 7a41 	vmov.f32	s15, s2
 80030d4:	edc7 6a00 	vstr	s13, [r7]
 80030d8:	ed87 7a01 	vstr	s14, [r7, #4]
 80030dc:	edc7 7a02 	vstr	s15, [r7, #8]
	im->gyro_bias[0] = gyro_bias.x;
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
	im->gyro_bias[1] = gyro_bias.y;
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
	im->gyro_bias[2] = gyro_bias.z;
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <imu_set_accel_bias>:

void imu_set_accel_bias(imu_t* im, coord3D accel_bias, float accel_misalignment_A_1[3][3]) {
 8003104:	b480      	push	{r7}
 8003106:	b089      	sub	sp, #36	@ 0x24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6178      	str	r0, [r7, #20]
 800310c:	eef0 6a40 	vmov.f32	s13, s0
 8003110:	eeb0 7a60 	vmov.f32	s14, s1
 8003114:	eef0 7a41 	vmov.f32	s15, s2
 8003118:	6079      	str	r1, [r7, #4]
 800311a:	edc7 6a02 	vstr	s13, [r7, #8]
 800311e:	ed87 7a03 	vstr	s14, [r7, #12]
 8003122:	edc7 7a04 	vstr	s15, [r7, #16]
	im->accel_bias[0] = accel_bias.x;
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	im->accel_bias[1] = accel_bias.y;
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	im->accel_bias[2] = accel_bias.z;
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

	for (size_t i = 0; i < 3; i++)
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	e023      	b.n	800318c <imu_set_accel_bias+0x88>
	{
		for (size_t j = 0; j < 3; j++) {
 8003144:	2300      	movs	r3, #0
 8003146:	61bb      	str	r3, [r7, #24]
 8003148:	e01a      	b.n	8003180 <imu_set_accel_bias+0x7c>
			im->accel_misalignment_A_inv[i][j] = accel_misalignment_A_1[i][j];
 800314a:	69fa      	ldr	r2, [r7, #28]
 800314c:	4613      	mov	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4413      	add	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	461a      	mov	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	441a      	add	r2, r3
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	6819      	ldr	r1, [r3, #0]
 8003162:	6978      	ldr	r0, [r7, #20]
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4413      	add	r3, r2
 8003170:	333c      	adds	r3, #60	@ 0x3c
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4403      	add	r3, r0
 8003176:	3304      	adds	r3, #4
 8003178:	6019      	str	r1, [r3, #0]
		for (size_t j = 0; j < 3; j++) {
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	3301      	adds	r3, #1
 800317e:	61bb      	str	r3, [r7, #24]
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d9e1      	bls.n	800314a <imu_set_accel_bias+0x46>
	for (size_t i = 0; i < 3; i++)
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3301      	adds	r3, #1
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d9d8      	bls.n	8003144 <imu_set_accel_bias+0x40>
		}
	}
}
 8003192:	bf00      	nop
 8003194:	bf00      	nop
 8003196:	3724      	adds	r7, #36	@ 0x24
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <imu_get_estimated_data>:


void imu_get_estimated_data(imu_t* im, quaternion* estimated_q, coord3D* estimated_acc, coord3D* estimated_gyro) {
 80031a0:	b490      	push	{r4, r7}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	603b      	str	r3, [r7, #0]
	if (estimated_q) {
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d006      	beq.n	80031c2 <imu_get_estimated_data+0x22>
		*estimated_q = im->estimated_q;
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4614      	mov	r4, r2
 80031ba:	3360      	adds	r3, #96	@ 0x60
 80031bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	if (estimated_acc) {
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <imu_get_estimated_data+0x38>
		*estimated_acc = im->body_frame_accel;
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4614      	mov	r4, r2
 80031ce:	3348      	adds	r3, #72	@ 0x48
 80031d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	if (estimated_gyro) {
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d007      	beq.n	80031ee <imu_get_estimated_data+0x4e>
		*estimated_gyro = im->body_frame_gyro;
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4614      	mov	r4, r2
 80031e4:	3354      	adds	r3, #84	@ 0x54
 80031e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
}
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc90      	pop	{r4, r7}
 80031f6:	4770      	bx	lr

080031f8 <imu_get_raw_accel_data>:

void imu_get_raw_accel_data(imu_t* im, coord3D* raw_acc){
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
	if (raw_acc) {
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d004      	beq.n	8003212 <imu_get_raw_accel_data+0x1a>
		*raw_acc = im->raw_accel;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	ca07      	ldmia	r2, {r0, r1, r2}
 800320e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <imu_get_raw_gyro_data>:

void imu_get_raw_gyro_data(imu_t* im, coord3D* raw_gyro){
 800321e:	b490      	push	{r4, r7}
 8003220:	b082      	sub	sp, #8
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	6039      	str	r1, [r7, #0]
		if (raw_gyro) {
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <imu_get_raw_gyro_data+0x20>
		*raw_gyro = im->raw_gyro;
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4614      	mov	r4, r2
 8003234:	330c      	adds	r3, #12
 8003236:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800323a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bc90      	pop	{r4, r7}
 8003246:	4770      	bx	lr

08003248 <madgwick_filter_init>:
    //#define BETA(gyro_mean_error) (sqrt(3.0f/4.0f) * gyro_mean_error)    //*from paper*
	#define BETA(gyro_mean_error) (0.866025403784439f * gyro_mean_error)    //*from paper*
#endif


void madgwick_filter_init(madgwick_filter_t* filter, float sampling_freq, float gyro_mean_error) {
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	ed87 0a02 	vstr	s0, [r7, #8]
 8003254:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->q_est.w = 1.0f;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800325e:	601a      	str	r2, [r3, #0]
	filter->q_est.x = 0.0f;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	605a      	str	r2, [r3, #4]
	filter->q_est.y = 0.0f;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	609a      	str	r2, [r3, #8]
	filter->q_est.z = 0.0f;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	60da      	str	r2, [r3, #12]

	filter->sampling_freq = sampling_freq;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	611a      	str	r2, [r3, #16]
	filter->gyro_mean_error = gyro_mean_error;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	615a      	str	r2, [r3, #20]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <madgwick_filter_apply>:


// The resulting quaternion is a global variable (q_est), so it is not returned or passed by reference/pointer
// Gyroscope Angular Velocity components are in Radians per Second
// Accelerometer componets will be normalized
void madgwick_filter_apply(madgwick_filter_t *filter, float ax, float ay, float az, float gx, float gy, float gz){
 8003290:	b590      	push	{r4, r7, lr}
 8003292:	b0b1      	sub	sp, #196	@ 0xc4
 8003294:	af00      	add	r7, sp, #0
 8003296:	61f8      	str	r0, [r7, #28]
 8003298:	ed87 0a06 	vstr	s0, [r7, #24]
 800329c:	edc7 0a05 	vstr	s1, [r7, #20]
 80032a0:	ed87 1a04 	vstr	s2, [r7, #16]
 80032a4:	edc7 1a03 	vstr	s3, [r7, #12]
 80032a8:	ed87 2a02 	vstr	s4, [r7, #8]
 80032ac:	edc7 2a01 	vstr	s5, [r7, #4]

    //Variables and constants
	quaternion q_est = filter->q_est;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 80032b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    struct quaternion q_est_prev = q_est;
 80032bc:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 80032c0:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80032c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    struct quaternion q_est_dot = {0.0f};            // used as a place holder in equations 42 and 43
 80032ca:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	605a      	str	r2, [r3, #4]
 80032d4:	609a      	str	r2, [r3, #8]
 80032d6:	60da      	str	r2, [r3, #12]
    //const struct quaternion q_g_ref = {0, 0, 0, 1};// equation (23), reference to field of gravity for gradient descent optimization (not needed because I used eq 25 instead of eq 21
    struct quaternion q_a = {0.0f, ax, ay, az};    // equation (24) raw acceleration values, needs to be normalized
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    float F_g [3] = {0};                        // equation(15/21/25) objective function for gravity
 80032f2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	605a      	str	r2, [r3, #4]
 80032fc:	609a      	str	r2, [r3, #8]
    float J_g [3][4] = {0};                   // jacobian matrix for gravity
 80032fe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003302:	2230      	movs	r2, #48	@ 0x30
 8003304:	2100      	movs	r1, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f017 f90c 	bl	801a524 <memset>

    struct quaternion gradient = {0.0f};
 800330c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	60da      	str	r2, [r3, #12]

    /* Integrate angluar velocity to obtain position in angles. */
    struct quaternion q_w;                   // equation (10), places gyroscope readings in a quaternion
    q_w.w = 0.0f;                              // the real component is zero, which the Madgwick uses to simplfy quat. mult.
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	627b      	str	r3, [r7, #36]	@ 0x24
    q_w.x = gx;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	62bb      	str	r3, [r7, #40]	@ 0x28
    q_w.y = gy;
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	62fb      	str	r3, [r7, #44]	@ 0x2c
    q_w.z = gz;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	633b      	str	r3, [r7, #48]	@ 0x30

    q_w = quatmultiply_scalar(&q_w, 0.5f);                  // equation (12) dq/dt = (1/2)q*w
 800332c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003330:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8003334:	4618      	mov	r0, r3
 8003336:	f7fe ffc9 	bl	80022cc <quatmultiply_scalar>
 800333a:	eeb0 6a40 	vmov.f32	s12, s0
 800333e:	eef0 6a60 	vmov.f32	s13, s1
 8003342:	eeb0 7a41 	vmov.f32	s14, s2
 8003346:	eef0 7a61 	vmov.f32	s15, s3
 800334a:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 800334e:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 8003352:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 8003356:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    q_w = quatmultiply(&q_est_prev, &q_w);        // equation (12)
 800335a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800335e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003362:	4611      	mov	r1, r2
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe fffa 	bl	800235e <quatmultiply>
 800336a:	eeb0 6a40 	vmov.f32	s12, s0
 800336e:	eef0 6a60 	vmov.f32	s13, s1
 8003372:	eeb0 7a41 	vmov.f32	s14, s2
 8003376:	eef0 7a61 	vmov.f32	s15, s3
 800337a:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 800337e:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 8003382:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 8003386:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
     The matrix multiplcation can also be done hard coded to reduce code.

     Note: it is possible to compute the objective function with quaternion multiplcation functions, but it does not take into account the many zeros that cancel terms out and is not optimized like the paper shows
     */

    q_a = quatnormalize(&q_a);              // normalize the acceleration quaternion to be a unit quaternion
 800338a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe ff2a 	bl	80021e8 <quatnormalize>
 8003394:	eeb0 6a40 	vmov.f32	s12, s0
 8003398:	eef0 6a60 	vmov.f32	s13, s1
 800339c:	eeb0 7a41 	vmov.f32	s14, s2
 80033a0:	eef0 7a61 	vmov.f32	s15, s3
 80033a4:	ed87 6a20 	vstr	s12, [r7, #128]	@ 0x80
 80033a8:	edc7 6a21 	vstr	s13, [r7, #132]	@ 0x84
 80033ac:	ed87 7a22 	vstr	s14, [r7, #136]	@ 0x88
 80033b0:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    //Compute the objective function for gravity, equation(15), simplified to equation (25) due to the 0's in the acceleration reference quaternion
    F_g[0] = 2*(q_est_prev.x * q_est_prev.z - q_est_prev.w * q_est_prev.y) - q_a.x;
 80033b4:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 80033b8:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80033bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033c0:	edd7 6a28 	vldr	s13, [r7, #160]	@ 0xa0
 80033c4:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80033c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033d0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80033d4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80033d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033dc:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    F_g[1] = 2*(q_est_prev.w * q_est_prev.x + q_est_prev.y* q_est_prev.z) - q_a.y;
 80033e0:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 80033e4:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80033e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033ec:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 80033f0:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80033f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033fc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003400:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003408:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    F_g[2] = 2*(0.5f - q_est_prev.x * q_est_prev.x - q_est_prev.y * q_est_prev.y) - q_a.z;
 800340c:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003410:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003418:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800341c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003420:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 8003424:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800342c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003430:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003434:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800343c:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

    //Compute the Jacobian matrix, equation (26), for gravity
    J_g[0][0] = -2.0f * q_est_prev.y;
 8003440:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003444:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800344c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    J_g[0][1] =  2.0f * q_est_prev.z;
 8003450:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003454:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003458:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    J_g[0][2] = -2.0f * q_est_prev.w;
 800345c:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003460:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003464:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003468:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    J_g[0][3] =  2.0f * q_est_prev.x;
 800346c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003470:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003474:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

    J_g[1][0] = 2.0f * q_est_prev.x;
 8003478:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800347c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003480:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    J_g[1][1] = 2.0f * q_est_prev.w;
 8003484:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003488:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800348c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    J_g[1][2] = 2.0f * q_est_prev.z;
 8003490:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003494:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003498:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    J_g[1][3] = 2.0f * q_est_prev.y;
 800349c:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80034a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80034a4:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

    J_g[2][0] = 0.0f;
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	667b      	str	r3, [r7, #100]	@ 0x64
    J_g[2][1] = -4.0f * q_est_prev.x;
 80034ae:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80034b2:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 80034b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034ba:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    J_g[2][2] = -4.0f * q_est_prev.y;
 80034be:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80034c2:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 80034c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034ca:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    J_g[2][3] = 0.0f;
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	673b      	str	r3, [r7, #112]	@ 0x70

    // now computer the gradient, equation (20), gradient = J_g'*F_g
    gradient.w = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 80034d4:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80034d8:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80034dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034e0:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80034e4:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80034e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034f0:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 80034f4:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80034f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003500:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    gradient.x = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 8003504:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8003508:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800350c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003510:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8003514:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003518:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800351c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003520:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8003524:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800352c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003530:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    gradient.y = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 8003534:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003538:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800353c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003540:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8003544:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003548:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800354c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003550:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8003554:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800355c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003560:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    gradient.z = J_g[0][3] * F_g[0] + J_g[1][3] * F_g[1] + J_g[2][3] * F_g[2];
 8003564:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003568:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800356c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003570:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8003574:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003578:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800357c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003580:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 8003584:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003588:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800358c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003590:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

    // Normalize the gradient, equation (44)
    gradient = quatnormalize(&gradient);
 8003594:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003598:	4618      	mov	r0, r3
 800359a:	f7fe fe25 	bl	80021e8 <quatnormalize>
 800359e:	eeb0 6a40 	vmov.f32	s12, s0
 80035a2:	eef0 6a60 	vmov.f32	s13, s1
 80035a6:	eeb0 7a41 	vmov.f32	s14, s2
 80035aa:	eef0 7a61 	vmov.f32	s15, s3
 80035ae:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 80035b2:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 80035b6:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 80035ba:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
     Eq. 36 has the filter gain Gamma, which is related to the step size and thus alpha. With alpha being very large,
        you can make assumptions to simplify the fusion equatoin of eq.36.
     Combining the simplification of the gradient descent equation with the simplification of the fusion equation gets you eq.
     41 which can be subdivided into eqs 42-44.
    */
    gradient = quatmultiply_scalar(&gradient, BETA(filter->gyro_mean_error));             // multiply normalized gradient by beta
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	edd3 7a05 	vldr	s15, [r3, #20]
 80035c4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80036d8 <madgwick_filter_apply+0x448>
 80035c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035cc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80035d0:	eeb0 0a67 	vmov.f32	s0, s15
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fe fe79 	bl	80022cc <quatmultiply_scalar>
 80035da:	eeb0 6a40 	vmov.f32	s12, s0
 80035de:	eef0 6a60 	vmov.f32	s13, s1
 80035e2:	eeb0 7a41 	vmov.f32	s14, s2
 80035e6:	eef0 7a61 	vmov.f32	s15, s3
 80035ea:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 80035ee:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 80035f2:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 80035f6:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    q_est_dot = quatsub(&q_w, &gradient);        // subtract above from q_w, the integrated gyro quaternion
 80035fa:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80035fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff fa3f 	bl	8002a88 <quatsub>
 800360a:	eeb0 6a40 	vmov.f32	s12, s0
 800360e:	eef0 6a60 	vmov.f32	s13, s1
 8003612:	eeb0 7a41 	vmov.f32	s14, s2
 8003616:	eef0 7a61 	vmov.f32	s15, s3
 800361a:	ed87 6a24 	vstr	s12, [r7, #144]	@ 0x90
 800361e:	edc7 6a25 	vstr	s13, [r7, #148]	@ 0x94
 8003622:	ed87 7a26 	vstr	s14, [r7, #152]	@ 0x98
 8003626:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    q_est_dot = quatmultiply_scalar(&q_est_dot, (1.0f / filter->sampling_freq));
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003630:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003634:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003638:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800363c:	eeb0 0a47 	vmov.f32	s0, s14
 8003640:	4618      	mov	r0, r3
 8003642:	f7fe fe43 	bl	80022cc <quatmultiply_scalar>
 8003646:	eeb0 6a40 	vmov.f32	s12, s0
 800364a:	eef0 6a60 	vmov.f32	s13, s1
 800364e:	eeb0 7a41 	vmov.f32	s14, s2
 8003652:	eef0 7a61 	vmov.f32	s15, s3
 8003656:	ed87 6a24 	vstr	s12, [r7, #144]	@ 0x90
 800365a:	edc7 6a25 	vstr	s13, [r7, #148]	@ 0x94
 800365e:	ed87 7a26 	vstr	s14, [r7, #152]	@ 0x98
 8003662:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    q_est = quatadd(&q_est_prev, &q_est_dot);     // Integrate orientation rate to find position
 8003666:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 800366a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800366e:	4611      	mov	r1, r2
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff f9bd 	bl	80029f0 <quatadd>
 8003676:	eeb0 6a40 	vmov.f32	s12, s0
 800367a:	eef0 6a60 	vmov.f32	s13, s1
 800367e:	eeb0 7a41 	vmov.f32	s14, s2
 8003682:	eef0 7a61 	vmov.f32	s15, s3
 8003686:	ed87 6a2c 	vstr	s12, [r7, #176]	@ 0xb0
 800368a:	edc7 6a2d 	vstr	s13, [r7, #180]	@ 0xb4
 800368e:	ed87 7a2e 	vstr	s14, [r7, #184]	@ 0xb8
 8003692:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
    q_est = quatnormalize(&q_est);                 // normalize the orientation of the estimate
 8003696:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe fda4 	bl	80021e8 <quatnormalize>
 80036a0:	eeb0 6a40 	vmov.f32	s12, s0
 80036a4:	eef0 6a60 	vmov.f32	s13, s1
 80036a8:	eeb0 7a41 	vmov.f32	s14, s2
 80036ac:	eef0 7a61 	vmov.f32	s15, s3
 80036b0:	ed87 6a2c 	vstr	s12, [r7, #176]	@ 0xb0
 80036b4:	edc7 6a2d 	vstr	s13, [r7, #180]	@ 0xb4
 80036b8:	ed87 7a2e 	vstr	s14, [r7, #184]	@ 0xb8
 80036bc:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
                                                //(shown in diagram, plus always use unit quaternions for orientation)
    filter->q_est = q_est;
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	461c      	mov	r4, r3
 80036c4:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80036c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80036ce:	bf00      	nop
 80036d0:	37c4      	adds	r7, #196	@ 0xc4
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd90      	pop	{r4, r7, pc}
 80036d6:	bf00      	nop
 80036d8:	3f5db3d7 	.word	0x3f5db3d7

080036dc <motor_mixer_quad_x>:
void motor_mixer_quad_x(
    float throttle_norm,       // 0..1 throttle
    float roll_out, float pitch_out, float yaw_out,  // ±PID_LIMIT
	float throttle_idle,  // e.g., 0..1 idle throttle
    float motor_dshot[NUM_MOTORS]     // output throttle per motor
) {
 80036dc:	b480      	push	{r7}
 80036de:	b097      	sub	sp, #92	@ 0x5c
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	ed87 0a05 	vstr	s0, [r7, #20]
 80036e6:	edc7 0a04 	vstr	s1, [r7, #16]
 80036ea:	ed87 1a03 	vstr	s2, [r7, #12]
 80036ee:	edc7 1a02 	vstr	s3, [r7, #8]
 80036f2:	ed87 2a01 	vstr	s4, [r7, #4]
 80036f6:	6038      	str	r0, [r7, #0]
	// Clamp inputs
	throttle_norm = CLAMP(throttle_norm, 0.0f, MAX_THROTTLE_MIX);
 80036f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80036fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003704:	d502      	bpl.n	800370c <motor_mixer_quad_x+0x30>
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	e00c      	b.n	8003726 <motor_mixer_quad_x+0x4a>
 800370c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003710:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371c:	dd02      	ble.n	8003724 <motor_mixer_quad_x+0x48>
 800371e:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8003722:	e000      	b.n	8003726 <motor_mixer_quad_x+0x4a>
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	617b      	str	r3, [r7, #20]
	throttle_idle = CLAMP(throttle_idle, 0.0f, MAX_THROTTLE_MIX);
 8003728:	edd7 7a01 	vldr	s15, [r7, #4]
 800372c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003734:	d502      	bpl.n	800373c <motor_mixer_quad_x+0x60>
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	e00c      	b.n	8003756 <motor_mixer_quad_x+0x7a>
 800373c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003740:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374c:	dd02      	ble.n	8003754 <motor_mixer_quad_x+0x78>
 800374e:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8003752:	e000      	b.n	8003756 <motor_mixer_quad_x+0x7a>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	607b      	str	r3, [r7, #4]

    // Scale PID outputs into motor fraction
    float r = roll_out * AXIS_TO_MOTOR_GAIN;
 8003758:	edd7 7a04 	vldr	s15, [r7, #16]
 800375c:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 80039b4 <motor_mixer_quad_x+0x2d8>
 8003760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003764:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float p = pitch_out * AXIS_TO_MOTOR_GAIN;
 8003768:	edd7 7a03 	vldr	s15, [r7, #12]
 800376c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80039b4 <motor_mixer_quad_x+0x2d8>
 8003770:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003774:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float y = yaw_out * AXIS_TO_MOTOR_GAIN;
 8003778:	edd7 7a02 	vldr	s15, [r7, #8]
 800377c:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 80039b4 <motor_mixer_quad_x+0x2d8>
 8003780:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003784:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    // Step 1: Compute raw motor mix
    float m[NUM_MOTORS];


	// Add throttle + roll + pitch + yaw for each motor
    for (int i = 0; i < NUM_MOTORS; i++) {
 8003788:	2300      	movs	r3, #0
 800378a:	657b      	str	r3, [r7, #84]	@ 0x54
 800378c:	e03a      	b.n	8003804 <motor_mixer_quad_x+0x128>
        m[i] = throttle_norm + MIX[i][0] * r + MIX[i][1] * p + MIX[i][2] * y;
 800378e:	498a      	ldr	r1, [pc, #552]	@ (80039b8 <motor_mixer_quad_x+0x2dc>)
 8003790:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	ed93 7a00 	vldr	s14, [r3]
 80037a0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80037a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80037ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037b0:	4981      	ldr	r1, [pc, #516]	@ (80039b8 <motor_mixer_quad_x+0x2dc>)
 80037b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80037b4:	4613      	mov	r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	3304      	adds	r3, #4
 80037c0:	edd3 6a00 	vldr	s13, [r3]
 80037c4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80037c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037d0:	4979      	ldr	r1, [pc, #484]	@ (80039b8 <motor_mixer_quad_x+0x2dc>)
 80037d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80037d4:	4613      	mov	r3, r2
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	3308      	adds	r3, #8
 80037e0:	edd3 6a00 	vldr	s13, [r3]
 80037e4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80037e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	3358      	adds	r3, #88	@ 0x58
 80037f6:	443b      	add	r3, r7
 80037f8:	3b40      	subs	r3, #64	@ 0x40
 80037fa:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < NUM_MOTORS; i++) {
 80037fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003800:	3301      	adds	r3, #1
 8003802:	657b      	str	r3, [r7, #84]	@ 0x54
 8003804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003806:	2b03      	cmp	r3, #3
 8003808:	ddc1      	ble.n	800378e <motor_mixer_quad_x+0xb2>
    }

    // Step 2: Desaturate so all motors stay in [0..1]
    float mmin = m[0], mmax = m[0];
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	653b      	str	r3, [r7, #80]	@ 0x50
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = 1; i < NUM_MOTORS; i++) {
 8003812:	2301      	movs	r3, #1
 8003814:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003816:	e02c      	b.n	8003872 <motor_mixer_quad_x+0x196>
        if (m[i] < mmin) mmin = m[i];
 8003818:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	3358      	adds	r3, #88	@ 0x58
 800381e:	443b      	add	r3, r7
 8003820:	3b40      	subs	r3, #64	@ 0x40
 8003822:	edd3 7a00 	vldr	s15, [r3]
 8003826:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800382a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800382e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003832:	dd06      	ble.n	8003842 <motor_mixer_quad_x+0x166>
 8003834:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	3358      	adds	r3, #88	@ 0x58
 800383a:	443b      	add	r3, r7
 800383c:	3b40      	subs	r3, #64	@ 0x40
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	653b      	str	r3, [r7, #80]	@ 0x50
        if (m[i] > mmax) mmax = m[i];
 8003842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	3358      	adds	r3, #88	@ 0x58
 8003848:	443b      	add	r3, r7
 800384a:	3b40      	subs	r3, #64	@ 0x40
 800384c:	edd3 7a00 	vldr	s15, [r3]
 8003850:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003854:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385c:	d506      	bpl.n	800386c <motor_mixer_quad_x+0x190>
 800385e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	3358      	adds	r3, #88	@ 0x58
 8003864:	443b      	add	r3, r7
 8003866:	3b40      	subs	r3, #64	@ 0x40
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = 1; i < NUM_MOTORS; i++) {
 800386c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800386e:	3301      	adds	r3, #1
 8003870:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003872:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003874:	2b03      	cmp	r3, #3
 8003876:	ddcf      	ble.n	8003818 <motor_mixer_quad_x+0x13c>
    }

	// If any motor is above 1.0, lower all motors by the excess
    if (mmax > MAX_THROTTLE_MIX) {
 8003878:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800387c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003880:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003888:	dd22      	ble.n	80038d0 <motor_mixer_quad_x+0x1f4>
        float shift = mmax - MAX_THROTTLE_MIX;
 800388a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800388e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003892:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003896:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        for (int i = 0; i < NUM_MOTORS; i++) m[i] -= shift;
 800389a:	2300      	movs	r3, #0
 800389c:	647b      	str	r3, [r7, #68]	@ 0x44
 800389e:	e014      	b.n	80038ca <motor_mixer_quad_x+0x1ee>
 80038a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	3358      	adds	r3, #88	@ 0x58
 80038a6:	443b      	add	r3, r7
 80038a8:	3b40      	subs	r3, #64	@ 0x40
 80038aa:	ed93 7a00 	vldr	s14, [r3]
 80038ae:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80038b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	3358      	adds	r3, #88	@ 0x58
 80038bc:	443b      	add	r3, r7
 80038be:	3b40      	subs	r3, #64	@ 0x40
 80038c0:	edc3 7a00 	vstr	s15, [r3]
 80038c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038c6:	3301      	adds	r3, #1
 80038c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80038ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	dde7      	ble.n	80038a0 <motor_mixer_quad_x+0x1c4>
    }

	// If any motor is below 0.0, raise all motors by the deficit
    if (mmin < 0.0f) {
 80038d0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80038d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038dc:	d522      	bpl.n	8003924 <motor_mixer_quad_x+0x248>
        float shift = 0.0f - mmin;
 80038de:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80039bc <motor_mixer_quad_x+0x2e0>
 80038e2:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80038e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038ea:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        for (int i = 0; i < NUM_MOTORS; i++) m[i] += shift;
 80038ee:	2300      	movs	r3, #0
 80038f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80038f2:	e014      	b.n	800391e <motor_mixer_quad_x+0x242>
 80038f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	3358      	adds	r3, #88	@ 0x58
 80038fa:	443b      	add	r3, r7
 80038fc:	3b40      	subs	r3, #64	@ 0x40
 80038fe:	ed93 7a00 	vldr	s14, [r3]
 8003902:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800390a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	3358      	adds	r3, #88	@ 0x58
 8003910:	443b      	add	r3, r7
 8003912:	3b40      	subs	r3, #64	@ 0x40
 8003914:	edc3 7a00 	vstr	s15, [r3]
 8003918:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800391a:	3301      	adds	r3, #1
 800391c:	643b      	str	r3, [r7, #64]	@ 0x40
 800391e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003920:	2b03      	cmp	r3, #3
 8003922:	dde7      	ble.n	80038f4 <motor_mixer_quad_x+0x218>
    }

	// Step 3: Clamp to [throttle_idle..1.0] and write output
    for (int i = 0; i < NUM_MOTORS; i++) {
 8003924:	2300      	movs	r3, #0
 8003926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003928:	e03a      	b.n	80039a0 <motor_mixer_quad_x+0x2c4>
        m[i] = CLAMP(m[i], throttle_idle, MAX_THROTTLE_MIX);
 800392a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	3358      	adds	r3, #88	@ 0x58
 8003930:	443b      	add	r3, r7
 8003932:	3b40      	subs	r3, #64	@ 0x40
 8003934:	edd3 7a00 	vldr	s15, [r3]
 8003938:	ed97 7a01 	vldr	s14, [r7, #4]
 800393c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003944:	dd01      	ble.n	800394a <motor_mixer_quad_x+0x26e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	e016      	b.n	8003978 <motor_mixer_quad_x+0x29c>
 800394a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	3358      	adds	r3, #88	@ 0x58
 8003950:	443b      	add	r3, r7
 8003952:	3b40      	subs	r3, #64	@ 0x40
 8003954:	edd3 7a00 	vldr	s15, [r3]
 8003958:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800395c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003964:	dd02      	ble.n	800396c <motor_mixer_quad_x+0x290>
 8003966:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800396a:	e005      	b.n	8003978 <motor_mixer_quad_x+0x29c>
 800396c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	3358      	adds	r3, #88	@ 0x58
 8003972:	443b      	add	r3, r7
 8003974:	3b40      	subs	r3, #64	@ 0x40
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800397a:	0092      	lsls	r2, r2, #2
 800397c:	3258      	adds	r2, #88	@ 0x58
 800397e:	443a      	add	r2, r7
 8003980:	3a40      	subs	r2, #64	@ 0x40
 8003982:	6013      	str	r3, [r2, #0]
        motor_dshot[i] = m[i];
 8003984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	4413      	add	r3, r2
 800398c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800398e:	0092      	lsls	r2, r2, #2
 8003990:	3258      	adds	r2, #88	@ 0x58
 8003992:	443a      	add	r2, r7
 8003994:	3a40      	subs	r2, #64	@ 0x40
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_MOTORS; i++) {
 800399a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800399c:	3301      	adds	r3, #1
 800399e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	ddc1      	ble.n	800392a <motor_mixer_quad_x+0x24e>
    }
}
 80039a6:	bf00      	nop
 80039a8:	bf00      	nop
 80039aa:	375c      	adds	r7, #92	@ 0x5c
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	3ceaaefa 	.word	0x3ceaaefa
 80039b8:	080201e8 	.word	0x080201e8
 80039bc:	00000000 	.word	0x00000000

080039c0 <pid_init>:
#include <math.h>

#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAX(a,b) (((a)>(b))?(a):(b))

void pid_init(volatile pid_t *pid, float Kp, float Ki, float Kd, float min_output, float max_output) {
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6178      	str	r0, [r7, #20]
 80039c8:	ed87 0a04 	vstr	s0, [r7, #16]
 80039cc:	edc7 0a03 	vstr	s1, [r7, #12]
 80039d0:	ed87 1a02 	vstr	s2, [r7, #8]
 80039d4:	edc7 1a01 	vstr	s3, [r7, #4]
 80039d8:	ed87 2a00 	vstr	s4, [r7]
    pid->Kp = Kp;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	609a      	str	r2, [r3, #8]
    pid->Ki = Ki;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	60da      	str	r2, [r3, #12]
    pid->Kd = Kd;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	611a      	str	r2, [r3, #16]
    pid->min_output = min_output;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	605a      	str	r2, [r3, #4]
    pid->max_output = max_output;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	601a      	str	r2, [r3, #0]
    pid->error = 0.0f;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	615a      	str	r2, [r3, #20]
    pid->pre_error = 0.0f;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	619a      	str	r2, [r3, #24]
    pid->integral = 0.0f;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	621a      	str	r2, [r3, #32]
    pid->integral_max_error = -1.0;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	4a07      	ldr	r2, [pc, #28]	@ (8003a34 <pid_init+0x74>)
 8003a16:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->delta_time = 0.0f;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->derivative_error = 0.0f;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	61da      	str	r2, [r3, #28]
}
 8003a28:	bf00      	nop
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	bf800000 	.word	0xbf800000

08003a38 <pid_init_with_integral_limit>:

void pid_init_with_integral_limit(volatile pid_t *pid, float Kp, float Ki, float Kd, float min_output, float max_output, float integral_max_error) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	61f8      	str	r0, [r7, #28]
 8003a40:	ed87 0a06 	vstr	s0, [r7, #24]
 8003a44:	edc7 0a05 	vstr	s1, [r7, #20]
 8003a48:	ed87 1a04 	vstr	s2, [r7, #16]
 8003a4c:	edc7 1a03 	vstr	s3, [r7, #12]
 8003a50:	ed87 2a02 	vstr	s4, [r7, #8]
 8003a54:	edc7 2a01 	vstr	s5, [r7, #4]
    pid_init(pid, Kp, Ki, Kd, min_output, max_output);
 8003a58:	ed97 2a02 	vldr	s4, [r7, #8]
 8003a5c:	edd7 1a03 	vldr	s3, [r7, #12]
 8003a60:	ed97 1a04 	vldr	s2, [r7, #16]
 8003a64:	edd7 0a05 	vldr	s1, [r7, #20]
 8003a68:	ed97 0a06 	vldr	s0, [r7, #24]
 8003a6c:	69f8      	ldr	r0, [r7, #28]
 8003a6e:	f7ff ffa7 	bl	80039c0 <pid_init>
    pid_set_integral_limit(pid, integral_max_error);
 8003a72:	ed97 0a01 	vldr	s0, [r7, #4]
 8003a76:	69f8      	ldr	r0, [r7, #28]
 8003a78:	f000 f8d4 	bl	8003c24 <pid_set_integral_limit>
}
 8003a7c:	bf00      	nop
 8003a7e:	3720      	adds	r7, #32
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <pid_calculate>:

float pid_calculate(volatile pid_t *pid, float setpoint, float process_value, float dt) {
 8003a84:	b480      	push	{r7}
 8003a86:	b08b      	sub	sp, #44	@ 0x2c
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a90:	edc7 0a01 	vstr	s1, [r7, #4]
 8003a94:	ed87 1a00 	vstr	s2, [r7]
    float error = setpoint - process_value;
 8003a98:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aa4:	edc7 7a05 	vstr	s15, [r7, #20]
    float Pout = pid->Kp * error;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	edd3 7a02 	vldr	s15, [r3, #8]
 8003aae:	ed97 7a05 	vldr	s14, [r7, #20]
 8003ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab6:	edc7 7a04 	vstr	s15, [r7, #16]
    float Iout = 0.0f;
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
    float Dout = 0.0f;
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	623b      	str	r3, [r7, #32]
    float derivative = 0.0f;
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	61fb      	str	r3, [r7, #28]
    dt = fabsf(dt);
 8003acc:	edd7 7a00 	vldr	s15, [r7]
 8003ad0:	eef0 7ae7 	vabs.f32	s15, s15
 8003ad4:	edc7 7a00 	vstr	s15, [r7]
    pid->delta_time = dt;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->error = error;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	615a      	str	r2, [r3, #20]

    if (dt > FLT_EPSILON) {
 8003ae4:	edd7 7a00 	vldr	s15, [r7]
 8003ae8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003c20 <pid_calculate+0x19c>
 8003aec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af4:	dd5c      	ble.n	8003bb0 <pid_calculate+0x12c>
        pid->integral += error * dt;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	ed93 7a08 	vldr	s14, [r3, #32]
 8003afc:	edd7 6a05 	vldr	s13, [r7, #20]
 8003b00:	edd7 7a00 	vldr	s15, [r7]
 8003b04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	edc3 7a08 	vstr	s15, [r3, #32]

        if (pid->integral_max_error > FLT_EPSILON) {
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003b18:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8003c20 <pid_calculate+0x19c>
 8003b1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b24:	dd24      	ble.n	8003b70 <pid_calculate+0xec>
            if (pid->integral > pid->integral_max_error)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	ed93 7a08 	vldr	s14, [r3, #32]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003b32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b3a:	dd04      	ble.n	8003b46 <pid_calculate+0xc2>
                pid->integral = pid->integral_max_error;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	621a      	str	r2, [r3, #32]
 8003b44:	e014      	b.n	8003b70 <pid_calculate+0xec>
            else if (pid->integral < -pid->integral_max_error)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	ed93 7a08 	vldr	s14, [r3, #32]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003b52:	eef1 7a67 	vneg.f32	s15, s15
 8003b56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5e:	d507      	bpl.n	8003b70 <pid_calculate+0xec>
                pid->integral = -pid->integral_max_error;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003b66:	eef1 7a67 	vneg.f32	s15, s15
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	edc3 7a08 	vstr	s15, [r3, #32]
        }

        Iout = pid->Ki * pid->integral;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	edd3 7a08 	vldr	s15, [r3, #32]
 8003b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b80:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        derivative = (error - pid->pre_error) / dt;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b8a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b8e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003b92:	ed97 7a00 	vldr	s14, [r7]
 8003b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        Dout = pid->Kd * derivative;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	edd3 7a04 	vldr	s15, [r3, #16]
 8003ba4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bac:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    float output = Pout + Iout + Dout;
 8003bb0:	ed97 7a04 	vldr	s14, [r7, #16]
 8003bb4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bbc:	ed97 7a08 	vldr	s14, [r7, #32]
 8003bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bc4:	edc7 7a06 	vstr	s15, [r7, #24]

    if (output > pid->max_output) output = pid->max_output;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	edd3 7a00 	vldr	s15, [r3]
 8003bce:	ed97 7a06 	vldr	s14, [r7, #24]
 8003bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bda:	dd03      	ble.n	8003be4 <pid_calculate+0x160>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	61bb      	str	r3, [r7, #24]
 8003be2:	e00c      	b.n	8003bfe <pid_calculate+0x17a>
    else if (output < pid->min_output) output = pid->min_output;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bea:	ed97 7a06 	vldr	s14, [r7, #24]
 8003bee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf6:	d502      	bpl.n	8003bfe <pid_calculate+0x17a>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	61bb      	str	r3, [r7, #24]
    pid->derivative_error = derivative;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	61da      	str	r2, [r3, #28]
    pid->pre_error = error;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	619a      	str	r2, [r3, #24]
    return output;
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	ee07 3a90 	vmov	s15, r3
}
 8003c10:	eeb0 0a67 	vmov.f32	s0, s15
 8003c14:	372c      	adds	r7, #44	@ 0x2c
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	34000000 	.word	0x34000000

08003c24 <pid_set_integral_limit>:
void pid_set_min_output(volatile pid_t *pid, float val) { pid->min_output = val; }
void pid_set_Kp(volatile pid_t *pid, float val) { pid->Kp = val; }
void pid_set_Ki(volatile pid_t *pid, float val) { pid->Ki = val; }
void pid_set_Kd(volatile pid_t *pid, float val) { pid->Kd = val; }

void pid_set_integral_limit(volatile pid_t *pid, float val) {
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	ed87 0a00 	vstr	s0, [r7]
    val = fabsf(val);
 8003c30:	edd7 7a00 	vldr	s15, [r7]
 8003c34:	eef0 7ae7 	vabs.f32	s15, s15
 8003c38:	edc7 7a00 	vstr	s15, [r7]
    pid->integral_max_error = val;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pid->integral > val) pid->integral = val;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	edd3 7a08 	vldr	s15, [r3, #32]
 8003c48:	ed97 7a00 	vldr	s14, [r7]
 8003c4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c54:	d503      	bpl.n	8003c5e <pid_set_integral_limit+0x3a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	621a      	str	r2, [r3, #32]
    else if (pid->integral < -val) pid->integral = -val;
}
 8003c5c:	e013      	b.n	8003c86 <pid_set_integral_limit+0x62>
    else if (pid->integral < -val) pid->integral = -val;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	ed93 7a08 	vldr	s14, [r3, #32]
 8003c64:	edd7 7a00 	vldr	s15, [r7]
 8003c68:	eef1 7a67 	vneg.f32	s15, s15
 8003c6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c74:	d400      	bmi.n	8003c78 <pid_set_integral_limit+0x54>
}
 8003c76:	e006      	b.n	8003c86 <pid_set_integral_limit+0x62>
    else if (pid->integral < -val) pid->integral = -val;
 8003c78:	edd7 7a00 	vldr	s15, [r7]
 8003c7c:	eef1 7a67 	vneg.f32	s15, s15
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <pid_reset>:
float pid_get_Kp(volatile pid_t *pid) { return pid->Kp; }
float pid_get_Ki(volatile pid_t *pid) { return pid->Ki; }
float pid_get_Kd(volatile pid_t *pid) { return pid->Kd; }
float pid_get_integral_error(volatile pid_t *pid) { return pid->integral; }

void pid_reset(volatile pid_t *pid) {
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
    pid->pre_error = 0.0f;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	619a      	str	r2, [r3, #24]
    pid->integral = 0.0f;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	621a      	str	r2, [r3, #32]
    pid->error = 0.0f;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	615a      	str	r2, [r3, #20]
    pid->derivative_error = 0.0f;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	61da      	str	r2, [r3, #28]
    pid->delta_time = 0.0f;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <rate_controller_init>:
void rate_controller_init(
    rate_controller_t* fc,
    float sample_rate_hz,
    float d_term_pid_filter_cutoff_freq_hz,
    float ff_term_pid_filter_cutoff_freq_hz
) {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003cdc:	edc7 0a01 	vstr	s1, [r7, #4]
 8003ce0:	ed87 1a00 	vstr	s2, [r7]
    if (!fc) {
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d076      	beq.n	8003dd8 <rate_controller_init+0x108>
        return;
    }

    // Clear all fields
    memset(fc, 0, sizeof(rate_controller_t));
 8003cea:	f44f 72bc 	mov.w	r2, #376	@ 0x178
 8003cee:	2100      	movs	r1, #0
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f016 fc17 	bl	801a524 <memset>

    // Store sample rate and D-term gain (applied manually in update loop)
    fc->sample_rate_hz = sample_rate_hz;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	625a      	str	r2, [r3, #36]	@ 0x24

    // --- Initialize D-term filters (low-pass for noise reduction) ---
    pt2_filter_init_lowpass(&(fc->d_term_pid_roll_filter), d_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	33c4      	adds	r3, #196	@ 0xc4
 8003d00:	edd7 0a02 	vldr	s1, [r7, #8]
 8003d04:	ed97 0a01 	vldr	s0, [r7, #4]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fd fd34 	bl	8001776 <pt2_filter_init_lowpass>
    pt2_filter_init_lowpass(&(fc->d_term_pid_pitch_filter), d_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	33ec      	adds	r3, #236	@ 0xec
 8003d12:	edd7 0a02 	vldr	s1, [r7, #8]
 8003d16:	ed97 0a01 	vldr	s0, [r7, #4]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fd fd2b 	bl	8001776 <pt2_filter_init_lowpass>
    pt2_filter_init_lowpass(&(fc->d_term_pid_yaw_filter), d_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8003d26:	edd7 0a02 	vldr	s1, [r7, #8]
 8003d2a:	ed97 0a01 	vldr	s0, [r7, #4]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd fd21 	bl	8001776 <pt2_filter_init_lowpass>

	// --- Initialize FF-term filters (PT1 for smoothing) ---
	pt1_filter_init_lowpass(&(fc->ff_term_pid_roll_pt1_filter), ff_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003d3a:	edd7 0a02 	vldr	s1, [r7, #8]
 8003d3e:	ed97 0a00 	vldr	s0, [r7]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fd fc80 	bl	8001648 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(fc->ff_term_pid_pitch_pt1_filter), ff_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8003d4e:	edd7 0a02 	vldr	s1, [r7, #8]
 8003d52:	ed97 0a00 	vldr	s0, [r7]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fd fc76 	bl	8001648 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(fc->ff_term_pid_yaw_pt1_filter), ff_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8003d62:	edd7 0a02 	vldr	s1, [r7, #8]
 8003d66:	ed97 0a00 	vldr	s0, [r7]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fd fc6c 	bl	8001648 <pt1_filter_init_lowpass>

    // --- Initialize PID controllers (no D gain here; applied separately) ---
    pid_init_with_integral_limit(&(fc->pid_roll), 0.0f, 0.0f, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, 0.0f);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	3328      	adds	r3, #40	@ 0x28
 8003d74:	eddf 2a1a 	vldr	s5, [pc, #104]	@ 8003de0 <rate_controller_init+0x110>
 8003d78:	ed9f 2a1a 	vldr	s4, [pc, #104]	@ 8003de4 <rate_controller_init+0x114>
 8003d7c:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 8003de8 <rate_controller_init+0x118>
 8003d80:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 8003de0 <rate_controller_init+0x110>
 8003d84:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8003de0 <rate_controller_init+0x110>
 8003d88:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8003de0 <rate_controller_init+0x110>
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fe53 	bl	8003a38 <pid_init_with_integral_limit>
    pid_init_with_integral_limit(&(fc->pid_pitch), 0.0f, 0.0f, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, 0.0f);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	3354      	adds	r3, #84	@ 0x54
 8003d96:	eddf 2a12 	vldr	s5, [pc, #72]	@ 8003de0 <rate_controller_init+0x110>
 8003d9a:	ed9f 2a12 	vldr	s4, [pc, #72]	@ 8003de4 <rate_controller_init+0x114>
 8003d9e:	eddf 1a12 	vldr	s3, [pc, #72]	@ 8003de8 <rate_controller_init+0x118>
 8003da2:	ed9f 1a0f 	vldr	s2, [pc, #60]	@ 8003de0 <rate_controller_init+0x110>
 8003da6:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8003de0 <rate_controller_init+0x110>
 8003daa:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8003de0 <rate_controller_init+0x110>
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fe42 	bl	8003a38 <pid_init_with_integral_limit>
    pid_init_with_integral_limit(&(fc->pid_yaw), 0.0f, 0.0f, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, 0.0f);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3380      	adds	r3, #128	@ 0x80
 8003db8:	eddf 2a09 	vldr	s5, [pc, #36]	@ 8003de0 <rate_controller_init+0x110>
 8003dbc:	ed9f 2a09 	vldr	s4, [pc, #36]	@ 8003de4 <rate_controller_init+0x114>
 8003dc0:	eddf 1a09 	vldr	s3, [pc, #36]	@ 8003de8 <rate_controller_init+0x118>
 8003dc4:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 8003de0 <rate_controller_init+0x110>
 8003dc8:	eddf 0a05 	vldr	s1, [pc, #20]	@ 8003de0 <rate_controller_init+0x110>
 8003dcc:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8003de0 <rate_controller_init+0x110>
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff fe31 	bl	8003a38 <pid_init_with_integral_limit>
 8003dd6:	e000      	b.n	8003dda <rate_controller_init+0x10a>
        return;
 8003dd8:	bf00      	nop
}
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	00000000 	.word	0x00000000
 8003de4:	410ba058 	.word	0x410ba058
 8003de8:	c10ba058 	.word	0xc10ba058

08003dec <rate_controller_init_roll_pid>:
    float pid_k_p,
    float pid_k_i,
    float pid_k_d,
    float pid_k_i_limit,
    float pid_k_ff
) {
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6178      	str	r0, [r7, #20]
 8003df4:	ed87 0a04 	vstr	s0, [r7, #16]
 8003df8:	edc7 0a03 	vstr	s1, [r7, #12]
 8003dfc:	ed87 1a02 	vstr	s2, [r7, #8]
 8003e00:	edc7 1a01 	vstr	s3, [r7, #4]
 8003e04:	ed87 2a00 	vstr	s4, [r7]
    pid_init_with_integral_limit(&(fc->pid_roll), pid_k_p, pid_k_i, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, pid_k_i_limit);
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	3328      	adds	r3, #40	@ 0x28
 8003e0c:	edd7 2a01 	vldr	s5, [r7, #4]
 8003e10:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 8003e44 <rate_controller_init_roll_pid+0x58>
 8003e14:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8003e48 <rate_controller_init_roll_pid+0x5c>
 8003e18:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8003e4c <rate_controller_init_roll_pid+0x60>
 8003e1c:	edd7 0a03 	vldr	s1, [r7, #12]
 8003e20:	ed97 0a04 	vldr	s0, [r7, #16]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff fe07 	bl	8003a38 <pid_init_with_integral_limit>
    fc->pid_roll_k_d = pid_k_d;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	fc->pid_roll_k_ff = pid_k_ff;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 8003e3a:	bf00      	nop
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	410ba058 	.word	0x410ba058
 8003e48:	c10ba058 	.word	0xc10ba058
 8003e4c:	00000000 	.word	0x00000000

08003e50 <rate_controller_init_pitch_pid>:
    float pid_k_p,
    float pid_k_i,
    float pid_k_d,
    float pid_k_i_limit,
    float pid_k_ff
) {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6178      	str	r0, [r7, #20]
 8003e58:	ed87 0a04 	vstr	s0, [r7, #16]
 8003e5c:	edc7 0a03 	vstr	s1, [r7, #12]
 8003e60:	ed87 1a02 	vstr	s2, [r7, #8]
 8003e64:	edc7 1a01 	vstr	s3, [r7, #4]
 8003e68:	ed87 2a00 	vstr	s4, [r7]
    pid_init_with_integral_limit(&(fc->pid_pitch), pid_k_p, pid_k_i, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, pid_k_i_limit);
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	3354      	adds	r3, #84	@ 0x54
 8003e70:	edd7 2a01 	vldr	s5, [r7, #4]
 8003e74:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 8003ea8 <rate_controller_init_pitch_pid+0x58>
 8003e78:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8003eac <rate_controller_init_pitch_pid+0x5c>
 8003e7c:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8003eb0 <rate_controller_init_pitch_pid+0x60>
 8003e80:	edd7 0a03 	vldr	s1, [r7, #12]
 8003e84:	ed97 0a04 	vldr	s0, [r7, #16]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff fdd5 	bl	8003a38 <pid_init_with_integral_limit>
    fc->pid_pitch_k_d = pid_k_d;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    fc->pid_pitch_k_ff = pid_k_ff;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
}
 8003e9e:	bf00      	nop
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	410ba058 	.word	0x410ba058
 8003eac:	c10ba058 	.word	0xc10ba058
 8003eb0:	00000000 	.word	0x00000000

08003eb4 <rate_controller_init_yaw_pid>:
    float pid_k_p,
    float pid_k_i,
    float pid_k_d,
    float pid_k_i_limit,
    float pid_k_ff
) {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6178      	str	r0, [r7, #20]
 8003ebc:	ed87 0a04 	vstr	s0, [r7, #16]
 8003ec0:	edc7 0a03 	vstr	s1, [r7, #12]
 8003ec4:	ed87 1a02 	vstr	s2, [r7, #8]
 8003ec8:	edc7 1a01 	vstr	s3, [r7, #4]
 8003ecc:	ed87 2a00 	vstr	s4, [r7]
    pid_init_with_integral_limit(&(fc->pid_yaw), pid_k_p, pid_k_i, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, pid_k_i_limit);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	3380      	adds	r3, #128	@ 0x80
 8003ed4:	edd7 2a01 	vldr	s5, [r7, #4]
 8003ed8:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 8003f0c <rate_controller_init_yaw_pid+0x58>
 8003edc:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8003f10 <rate_controller_init_yaw_pid+0x5c>
 8003ee0:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8003f14 <rate_controller_init_yaw_pid+0x60>
 8003ee4:	edd7 0a03 	vldr	s1, [r7, #12]
 8003ee8:	ed97 0a04 	vldr	s0, [r7, #16]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff fda3 	bl	8003a38 <pid_init_with_integral_limit>
    fc->pid_yaw_k_d = pid_k_d;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    fc->pid_yaw_k_ff = pid_k_ff;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003f02:	bf00      	nop
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	410ba058 	.word	0x410ba058
 8003f10:	c10ba058 	.word	0xc10ba058
 8003f14:	00000000 	.word	0x00000000

08003f18 <rate_controller_update>:
	float sensor_pitch_rate,
	float sensor_yaw_rate,
    float target_roll_rate,
    float target_pitch_rate,
    float target_yaw_rate
) {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b092      	sub	sp, #72	@ 0x48
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	61f8      	str	r0, [r7, #28]
 8003f20:	ed87 0a06 	vstr	s0, [r7, #24]
 8003f24:	edc7 0a05 	vstr	s1, [r7, #20]
 8003f28:	ed87 1a04 	vstr	s2, [r7, #16]
 8003f2c:	edc7 1a03 	vstr	s3, [r7, #12]
 8003f30:	ed87 2a02 	vstr	s4, [r7, #8]
 8003f34:	edc7 2a01 	vstr	s5, [r7, #4]
    if (!fc) {
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 816c 	beq.w	8004218 <rate_controller_update+0x300>
    float roll_out;
    float pitch_out;
    float yaw_out;

    // --- Store current sensor inputs and setpoints ---
    fc->prev_target_roll_rate = fc->target_roll_rate;
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	619a      	str	r2, [r3, #24]
	fc->prev_target_pitch_rate = fc->target_pitch_rate;
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	61da      	str	r2, [r3, #28]
	fc->prev_target_yaw_rate = fc->target_yaw_rate;
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	621a      	str	r2, [r3, #32]

    fc->target_roll_rate = target_roll_rate;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	60da      	str	r2, [r3, #12]
    fc->target_pitch_rate = target_pitch_rate;
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	611a      	str	r2, [r3, #16]
    fc->target_yaw_rate = target_yaw_rate;
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	615a      	str	r2, [r3, #20]

    fc->body_frame_roll_rate = sensor_roll_rate;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	601a      	str	r2, [r3, #0]
	fc->body_frame_pitch_rate = sensor_pitch_rate;
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	605a      	str	r2, [r3, #4]
    fc->body_frame_yaw_rate = sensor_yaw_rate;
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	609a      	str	r2, [r3, #8]

    float dt = HzToSec(fc->sample_rate_hz);
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003f82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f8a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    if(fabsf(dt) > FLT_EPSILON){
 8003f8e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003f92:	eef0 7ae7 	vabs.f32	s15, s15
 8003f96:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8004220 <rate_controller_update+0x308>
 8003f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa2:	f340 80e4 	ble.w	800416e <rate_controller_update+0x256>

    // --- Step 5: PID control ---
    roll_out = pid_calculate(&fc->pid_roll, target_roll_rate, sensor_roll_rate, dt);
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	3328      	adds	r3, #40	@ 0x28
 8003faa:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8003fae:	edd7 0a06 	vldr	s1, [r7, #24]
 8003fb2:	ed97 0a03 	vldr	s0, [r7, #12]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff fd64 	bl	8003a84 <pid_calculate>
 8003fbc:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    pitch_out = pid_calculate(&fc->pid_pitch, target_pitch_rate, sensor_pitch_rate, dt);
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	3354      	adds	r3, #84	@ 0x54
 8003fc4:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8003fc8:	edd7 0a05 	vldr	s1, [r7, #20]
 8003fcc:	ed97 0a02 	vldr	s0, [r7, #8]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff fd57 	bl	8003a84 <pid_calculate>
 8003fd6:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
    yaw_out = pid_calculate(&fc->pid_yaw, target_yaw_rate, sensor_yaw_rate, dt);
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	3380      	adds	r3, #128	@ 0x80
 8003fde:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8003fe2:	edd7 0a04 	vldr	s1, [r7, #16]
 8003fe6:	ed97 0a01 	vldr	s0, [r7, #4]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff fd4a 	bl	8003a84 <pid_calculate>
 8003ff0:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

    float roll_k_ff = fc->pid_roll_k_ff * ((fc->target_roll_rate - fc->prev_target_roll_rate) / dt);
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	edd3 6a03 	vldr	s13, [r3, #12]
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	edd3 7a06 	vldr	s15, [r3, #24]
 8004006:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800400a:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800400e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004016:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	float pitch_k_ff = fc->pid_pitch_k_ff * ((fc->target_pitch_rate - fc->prev_target_pitch_rate) / dt);
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	ed93 7a2f 	vldr	s14, [r3, #188]	@ 0xbc
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	edd3 6a04 	vldr	s13, [r3, #16]
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	edd3 7a07 	vldr	s15, [r3, #28]
 800402c:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8004030:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8004034:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800403c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	float yaw_k_ff = fc->pid_yaw_k_ff * ((fc->target_yaw_rate - fc->prev_target_yaw_rate) / dt);
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	edd3 6a05 	vldr	s13, [r3, #20]
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004052:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8004056:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800405a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800405e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004062:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	roll_k_ff = pt1_filter_apply_lowpass(&fc->ff_term_pid_roll_pt1_filter, roll_k_ff);
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800406c:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8004070:	4618      	mov	r0, r3
 8004072:	f7fd fb4d 	bl	8001710 <pt1_filter_apply_lowpass>
 8004076:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	pitch_k_ff = pt1_filter_apply_lowpass(&fc->ff_term_pid_pitch_pt1_filter, pitch_k_ff);
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8004080:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8004084:	4618      	mov	r0, r3
 8004086:	f7fd fb43 	bl	8001710 <pt1_filter_apply_lowpass>
 800408a:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
	yaw_k_ff = pt1_filter_apply_lowpass(&fc->ff_term_pid_yaw_pt1_filter, yaw_k_ff);
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8004094:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8004098:	4618      	mov	r0, r3
 800409a:	f7fd fb39 	bl	8001710 <pt1_filter_apply_lowpass>
 800409e:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

    // --- Step 6: D-term filtering ---
    float roll_d = pt2_filter_apply_lowpass(&fc->d_term_pid_roll_filter, fc->pid_roll.derivative_error * fc->pid_roll_k_d);
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 80040b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b8:	eeb0 0a67 	vmov.f32	s0, s15
 80040bc:	4610      	mov	r0, r2
 80040be:	f7fd fb7d 	bl	80017bc <pt2_filter_apply_lowpass>
 80040c2:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    float pitch_d = pt2_filter_apply_lowpass(&fc->d_term_pid_pitch_filter, fc->pid_pitch.derivative_error * fc->pid_pitch_k_d);
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 80040d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040dc:	eeb0 0a67 	vmov.f32	s0, s15
 80040e0:	4610      	mov	r0, r2
 80040e2:	f7fd fb6b 	bl	80017bc <pt2_filter_apply_lowpass>
 80040e6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float yaw_d = pt2_filter_apply_lowpass(&fc->d_term_pid_yaw_filter, fc->pid_yaw.derivative_error * fc->pid_yaw_k_d);
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f503 728a 	add.w	r2, r3, #276	@ 0x114
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	ed93 7a27 	vldr	s14, [r3, #156]	@ 0x9c
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 80040fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004100:	eeb0 0a67 	vmov.f32	s0, s15
 8004104:	4610      	mov	r0, r2
 8004106:	f7fd fb59 	bl	80017bc <pt2_filter_apply_lowpass>
 800410a:	ed87 0a08 	vstr	s0, [r7, #32]

    // Add D-term back to PID outputs
    roll_out += roll_d;
 800410e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8004112:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800411a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    pitch_out += pitch_d;
 800411e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004122:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800412a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    yaw_out += yaw_d;
 800412e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004132:	edd7 7a08 	vldr	s15, [r7, #32]
 8004136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800413a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // Add FF term back to PID outputs
    roll_out += roll_k_ff;
 800413e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8004142:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800414a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    pitch_out += pitch_k_ff;
 800414e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004152:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800415a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    yaw_out += yaw_k_ff;
 800415e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004162:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800416a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }

    // Clamp to allowed range
    roll_out = CLAMP(roll_out, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT);
 800416e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004172:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8004224 <rate_controller_update+0x30c>
 8004176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800417a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417e:	d501      	bpl.n	8004184 <rate_controller_update+0x26c>
 8004180:	4b29      	ldr	r3, [pc, #164]	@ (8004228 <rate_controller_update+0x310>)
 8004182:	e00b      	b.n	800419c <rate_controller_update+0x284>
 8004184:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004188:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800422c <rate_controller_update+0x314>
 800418c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004194:	dd01      	ble.n	800419a <rate_controller_update+0x282>
 8004196:	4b26      	ldr	r3, [pc, #152]	@ (8004230 <rate_controller_update+0x318>)
 8004198:	e000      	b.n	800419c <rate_controller_update+0x284>
 800419a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800419c:	647b      	str	r3, [r7, #68]	@ 0x44
    pitch_out = CLAMP(pitch_out, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT);
 800419e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80041a2:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8004224 <rate_controller_update+0x30c>
 80041a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ae:	d501      	bpl.n	80041b4 <rate_controller_update+0x29c>
 80041b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004228 <rate_controller_update+0x310>)
 80041b2:	e00b      	b.n	80041cc <rate_controller_update+0x2b4>
 80041b4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80041b8:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800422c <rate_controller_update+0x314>
 80041bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c4:	dd01      	ble.n	80041ca <rate_controller_update+0x2b2>
 80041c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004230 <rate_controller_update+0x318>)
 80041c8:	e000      	b.n	80041cc <rate_controller_update+0x2b4>
 80041ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041cc:	643b      	str	r3, [r7, #64]	@ 0x40
    yaw_out = CLAMP(yaw_out, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT);
 80041ce:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80041d2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8004224 <rate_controller_update+0x30c>
 80041d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041de:	d501      	bpl.n	80041e4 <rate_controller_update+0x2cc>
 80041e0:	4b11      	ldr	r3, [pc, #68]	@ (8004228 <rate_controller_update+0x310>)
 80041e2:	e00b      	b.n	80041fc <rate_controller_update+0x2e4>
 80041e4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80041e8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800422c <rate_controller_update+0x314>
 80041ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f4:	dd01      	ble.n	80041fa <rate_controller_update+0x2e2>
 80041f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004230 <rate_controller_update+0x318>)
 80041f8:	e000      	b.n	80041fc <rate_controller_update+0x2e4>
 80041fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041fc:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Store final PID outputs
    fc->out_pid_roll = roll_out;
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004202:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    fc->out_pid_pitch = pitch_out;
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800420a:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    fc->out_pid_yaw = yaw_out;
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004212:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 8004216:	e000      	b.n	800421a <rate_controller_update+0x302>
        return;
 8004218:	bf00      	nop
}
 800421a:	3748      	adds	r7, #72	@ 0x48
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	34000000 	.word	0x34000000
 8004224:	c10ba058 	.word	0xc10ba058
 8004228:	c10ba058 	.word	0xc10ba058
 800422c:	410ba058 	.word	0x410ba058
 8004230:	410ba058 	.word	0x410ba058

08004234 <rate_controller_reset>:

void rate_controller_reset(rate_controller_t* fc) {
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
	pt2_filter_reset(&(fc->d_term_pid_roll_filter));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	33c4      	adds	r3, #196	@ 0xc4
 8004240:	4618      	mov	r0, r3
 8004242:	f7fd fad8 	bl	80017f6 <pt2_filter_reset>
	pt2_filter_reset(&(fc->d_term_pid_pitch_filter));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	33ec      	adds	r3, #236	@ 0xec
 800424a:	4618      	mov	r0, r3
 800424c:	f7fd fad3 	bl	80017f6 <pt2_filter_reset>
	pt2_filter_reset(&(fc->d_term_pid_yaw_filter));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8004256:	4618      	mov	r0, r3
 8004258:	f7fd facd 	bl	80017f6 <pt2_filter_reset>

    pt1_filter_reset(&(fc->ff_term_pid_roll_pt1_filter));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8004262:	4618      	mov	r0, r3
 8004264:	f7fd fa79 	bl	800175a <pt1_filter_reset>
    pt1_filter_reset(&(fc->ff_term_pid_pitch_pt1_filter));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800426e:	4618      	mov	r0, r3
 8004270:	f7fd fa73 	bl	800175a <pt1_filter_reset>
    pt1_filter_reset(&(fc->ff_term_pid_yaw_pt1_filter));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800427a:	4618      	mov	r0, r3
 800427c:	f7fd fa6d 	bl	800175a <pt1_filter_reset>

    pid_reset(&(fc->pid_roll));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3328      	adds	r3, #40	@ 0x28
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff fd04 	bl	8003c92 <pid_reset>
    pid_reset(&(fc->pid_pitch));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3354      	adds	r3, #84	@ 0x54
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fcff 	bl	8003c92 <pid_reset>
    pid_reset(&(fc->pid_yaw));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3380      	adds	r3, #128	@ 0x80
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fcfa 	bl	8003c92 <pid_reset>

    fc->prev_target_roll_rate = 0.0f;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	619a      	str	r2, [r3, #24]
    fc->prev_target_pitch_rate = 0.0f;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	61da      	str	r2, [r3, #28]
    fc->prev_target_yaw_rate = 0.0f;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	621a      	str	r2, [r3, #32]

    fc->out_pid_roll = 0.0f;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    fc->out_pid_pitch = 0.0f;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    fc->out_pid_yaw = 0.0f;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
}
 80042d4:	bf00      	nop
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <rate_controller_get_pid_outputs>:
void rate_controller_get_pid_outputs(
    rate_controller_t* fc,
    float* out_pid_roll,
    float* out_pid_pitch,
    float* out_pid_yaw
) {
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
    // Ensure valid pointers before copying
    if (!fc) {
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d018      	beq.n	8004322 <rate_controller_get_pid_outputs+0x46>
        return; // Avoid null pointer access
    }
    if (out_pid_roll) {
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <rate_controller_get_pid_outputs+0x24>
        *out_pid_roll = fc->out_pid_roll;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	601a      	str	r2, [r3, #0]
    }
    if (out_pid_pitch) {
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d004      	beq.n	8004310 <rate_controller_get_pid_outputs+0x34>
        *out_pid_pitch = fc->out_pid_pitch;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	601a      	str	r2, [r3, #0]
    }
    if (out_pid_yaw) {
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d006      	beq.n	8004324 <rate_controller_get_pid_outputs+0x48>
        *out_pid_yaw = fc->out_pid_yaw;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f8d3 2174 	ldr.w	r2, [r3, #372]	@ 0x174
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	e000      	b.n	8004324 <rate_controller_get_pid_outputs+0x48>
        return; // Avoid null pointer access
 8004322:	bf00      	nop
    }
}
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <rc_channel_filter_init>:
#include "rc_control.h"
#include <math.h>
#include <string.h>
#include "geometry2D.h"

void rc_channel_filter_init(rc_channel_filter_t* channel, int enable_lpf, float lpf_cutoff_freq_hz, float deadband,float multiplier,  float expo, float sample_rate_hz) {
 800432e:	b580      	push	{r7, lr}
 8004330:	b088      	sub	sp, #32
 8004332:	af00      	add	r7, sp, #0
 8004334:	61f8      	str	r0, [r7, #28]
 8004336:	61b9      	str	r1, [r7, #24]
 8004338:	ed87 0a05 	vstr	s0, [r7, #20]
 800433c:	edc7 0a04 	vstr	s1, [r7, #16]
 8004340:	ed87 1a03 	vstr	s2, [r7, #12]
 8004344:	edc7 1a02 	vstr	s3, [r7, #8]
 8004348:	ed87 2a01 	vstr	s4, [r7, #4]
	memset(channel, 0, sizeof(rc_channel_filter_t));
 800434c:	2230      	movs	r2, #48	@ 0x30
 800434e:	2100      	movs	r1, #0
 8004350:	69f8      	ldr	r0, [r7, #28]
 8004352:	f016 f8e7 	bl	801a524 <memset>

	channel->enable_lpf = enable_lpf;
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	601a      	str	r2, [r3, #0]
	if (enable_lpf) {
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d008      	beq.n	8004374 <rc_channel_filter_init+0x46>
		pt1_filter_init_lowpass(&channel->lpf, lpf_cutoff_freq_hz, sample_rate_hz);
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	3304      	adds	r3, #4
 8004366:	edd7 0a01 	vldr	s1, [r7, #4]
 800436a:	ed97 0a05 	vldr	s0, [r7, #20]
 800436e:	4618      	mov	r0, r3
 8004370:	f7fd f96a 	bl	8001648 <pt1_filter_init_lowpass>
	}
	channel->smoothed = 0.0f;
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	615a      	str	r2, [r3, #20]
	channel->raw = 0.0f;
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	619a      	str	r2, [r3, #24]
	channel->prev_raw = 0.0f;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	61da      	str	r2, [r3, #28]
	channel->deadband = deadband;
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	621a      	str	r2, [r3, #32]
	channel->multiplier = multiplier;
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	629a      	str	r2, [r3, #40]	@ 0x28
	channel->expo = expo;
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	625a      	str	r2, [r3, #36]	@ 0x24
	channel->sample_rate = sample_rate_hz;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80043a4:	bf00      	nop
 80043a6:	3720      	adds	r7, #32
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <rc_channel_filter_update>:

void rc_channel_filter_update(rc_channel_filter_t* channel, float raw_input) {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	ed87 0a00 	vstr	s0, [r7]
	channel->prev_raw = channel->raw;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699a      	ldr	r2, [r3, #24]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	61da      	str	r2, [r3, #28]
	channel->raw = raw_input;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	619a      	str	r2, [r3, #24]

	float processed_input = raw_input;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	60fb      	str	r3, [r7, #12]

	// Apply deadband
	if (fabsf(processed_input) < channel->deadband) {
 80043ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80043ce:	eeb0 7ae7 	vabs.f32	s14, s15
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	edd3 7a08 	vldr	s15, [r3, #32]
 80043d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e0:	d503      	bpl.n	80043ea <rc_channel_filter_update+0x3e>
		processed_input = 0.0f;
 80043e2:	f04f 0300 	mov.w	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	e02b      	b.n	8004442 <rc_channel_filter_update+0x96>
	}
	else {
		// Scale to compensate for deadband
		if (processed_input > 0.0f) {
 80043ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80043ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f6:	dd12      	ble.n	800441e <rc_channel_filter_update+0x72>
			processed_input = (processed_input - channel->deadband) / (1.0f - channel->deadband);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80043fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8004402:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	edd3 7a08 	vldr	s15, [r3, #32]
 800440c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004410:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004418:	edc7 7a03 	vstr	s15, [r7, #12]
 800441c:	e011      	b.n	8004442 <rc_channel_filter_update+0x96>
		}
		else {
			processed_input = (processed_input + channel->deadband) / (1.0f - channel->deadband);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	ed93 7a08 	vldr	s14, [r3, #32]
 8004424:	edd7 7a03 	vldr	s15, [r7, #12]
 8004428:	ee77 6a27 	vadd.f32	s13, s14, s15
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004432:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004436:	ee37 7a67 	vsub.f32	s14, s14, s15
 800443a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800443e:	edc7 7a03 	vstr	s15, [r7, #12]
		}
	}

	// Apply exponential curve
	if (channel->expo != 0.0f) {
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004448:	eef5 7a40 	vcmp.f32	s15, #0.0
 800444c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004450:	d01a      	beq.n	8004488 <rc_channel_filter_update+0xdc>
		processed_input = copysignf(powf(fabsf(processed_input), 1.0f + channel->expo), processed_input);
 8004452:	edd7 7a03 	vldr	s15, [r7, #12]
 8004456:	eeb0 7ae7 	vabs.f32	s14, s15
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004460:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004464:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004468:	eef0 0a67 	vmov.f32	s1, s15
 800446c:	eeb0 0a47 	vmov.f32	s0, s14
 8004470:	f013 f9e0 	bl	8017834 <powf>
 8004474:	eef0 7a40 	vmov.f32	s15, s0
 8004478:	edd7 0a03 	vldr	s1, [r7, #12]
 800447c:	eeb0 0a67 	vmov.f32	s0, s15
 8004480:	f013 fbbe 	bl	8017c00 <copysignf>
 8004484:	ed87 0a03 	vstr	s0, [r7, #12]
	}

	processed_input = processed_input * channel->multiplier;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800448e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004496:	edc7 7a03 	vstr	s15, [r7, #12]

	if (channel->enable_lpf) {
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d008      	beq.n	80044b4 <rc_channel_filter_update+0x108>
		processed_input = pt1_filter_apply_lowpass(&channel->lpf, processed_input);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3304      	adds	r3, #4
 80044a6:	ed97 0a03 	vldr	s0, [r7, #12]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fd f930 	bl	8001710 <pt1_filter_apply_lowpass>
 80044b0:	ed87 0a03 	vstr	s0, [r7, #12]
	}
	channel->smoothed = processed_input;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	615a      	str	r2, [r3, #20]
}
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <rc_channel_filter_get_processed>:

float rc_channel_filter_get_processed(rc_channel_filter_t* channel) {
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
	return channel->smoothed;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	ee07 3a90 	vmov	s15, r3
}
 80044d2:	eeb0 0a67 	vmov.f32	s0, s15
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <rc_attitude_control_init_roll>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	61f8      	str	r0, [r7, #28]
 80044e8:	61b9      	str	r1, [r7, #24]
 80044ea:	ed87 0a05 	vstr	s0, [r7, #20]
 80044ee:	edc7 0a04 	vstr	s1, [r7, #16]
 80044f2:	ed87 1a03 	vstr	s2, [r7, #12]
 80044f6:	edc7 1a02 	vstr	s3, [r7, #8]
 80044fa:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->roll_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	ed97 2a01 	vldr	s4, [r7, #4]
 8004504:	edd7 1a02 	vldr	s3, [r7, #8]
 8004508:	ed97 1a03 	vldr	s2, [r7, #12]
 800450c:	edd7 0a04 	vldr	s1, [r7, #16]
 8004510:	ed97 0a05 	vldr	s0, [r7, #20]
 8004514:	69b9      	ldr	r1, [r7, #24]
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff ff09 	bl	800432e <rc_channel_filter_init>
}
 800451c:	bf00      	nop
 800451e:	3720      	adds	r7, #32
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <rc_attitude_control_update_roll>:

void rc_attitude_control_update_roll(
	rc_attitude_control_t* rc,
	float raw_input
) {
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, -1.0f, 1.0f);
 8004530:	edd7 7a00 	vldr	s15, [r7]
 8004534:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800453c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004540:	d501      	bpl.n	8004546 <rc_attitude_control_update_roll+0x22>
 8004542:	4b0d      	ldr	r3, [pc, #52]	@ (8004578 <rc_attitude_control_update_roll+0x54>)
 8004544:	e00c      	b.n	8004560 <rc_attitude_control_update_roll+0x3c>
 8004546:	edd7 7a00 	vldr	s15, [r7]
 800454a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800454e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004556:	dd02      	ble.n	800455e <rc_attitude_control_update_roll+0x3a>
 8004558:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800455c:	e000      	b.n	8004560 <rc_attitude_control_update_roll+0x3c>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->roll_filter, raw_input);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	ed97 0a00 	vldr	s0, [r7]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff ff1f 	bl	80043ac <rc_channel_filter_update>
}
 800456e:	bf00      	nop
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	bf800000 	.word	0xbf800000

0800457c <rc_attitude_control_get_processed_roll>:

float rc_attitude_control_get_processed_roll(
	rc_attitude_control_t* rc
) {
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->roll_filter);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff ff9b 	bl	80044c2 <rc_channel_filter_get_processed>
 800458c:	eef0 7a40 	vmov.f32	s15, s0
}
 8004590:	eeb0 0a67 	vmov.f32	s0, s15
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <rc_attitude_control_init_pitch>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 800459a:	b580      	push	{r7, lr}
 800459c:	b088      	sub	sp, #32
 800459e:	af00      	add	r7, sp, #0
 80045a0:	61f8      	str	r0, [r7, #28]
 80045a2:	61b9      	str	r1, [r7, #24]
 80045a4:	ed87 0a05 	vstr	s0, [r7, #20]
 80045a8:	edc7 0a04 	vstr	s1, [r7, #16]
 80045ac:	ed87 1a03 	vstr	s2, [r7, #12]
 80045b0:	edc7 1a02 	vstr	s3, [r7, #8]
 80045b4:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->pitch_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	3330      	adds	r3, #48	@ 0x30
 80045bc:	ed97 2a01 	vldr	s4, [r7, #4]
 80045c0:	edd7 1a02 	vldr	s3, [r7, #8]
 80045c4:	ed97 1a03 	vldr	s2, [r7, #12]
 80045c8:	edd7 0a04 	vldr	s1, [r7, #16]
 80045cc:	ed97 0a05 	vldr	s0, [r7, #20]
 80045d0:	69b9      	ldr	r1, [r7, #24]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff feab 	bl	800432e <rc_channel_filter_init>
}
 80045d8:	bf00      	nop
 80045da:	3720      	adds	r7, #32
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <rc_attitude_control_update_pitch>:

void rc_attitude_control_update_pitch(
	rc_attitude_control_t* rc,
	float raw_input
) {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, -1.0f, 1.0f);
 80045ec:	edd7 7a00 	vldr	s15, [r7]
 80045f0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80045f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045fc:	d501      	bpl.n	8004602 <rc_attitude_control_update_pitch+0x22>
 80045fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004634 <rc_attitude_control_update_pitch+0x54>)
 8004600:	e00c      	b.n	800461c <rc_attitude_control_update_pitch+0x3c>
 8004602:	edd7 7a00 	vldr	s15, [r7]
 8004606:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800460a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800460e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004612:	dd02      	ble.n	800461a <rc_attitude_control_update_pitch+0x3a>
 8004614:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004618:	e000      	b.n	800461c <rc_attitude_control_update_pitch+0x3c>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->pitch_filter, raw_input);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3330      	adds	r3, #48	@ 0x30
 8004622:	ed97 0a00 	vldr	s0, [r7]
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff fec0 	bl	80043ac <rc_channel_filter_update>
}
 800462c:	bf00      	nop
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	bf800000 	.word	0xbf800000

08004638 <rc_attitude_control_get_processed_pitch>:

float rc_attitude_control_get_processed_pitch(
	rc_attitude_control_t* rc
) {
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->pitch_filter);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3330      	adds	r3, #48	@ 0x30
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff ff3c 	bl	80044c2 <rc_channel_filter_get_processed>
 800464a:	eef0 7a40 	vmov.f32	s15, s0
}
 800464e:	eeb0 0a67 	vmov.f32	s0, s15
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <rc_attitude_control_init_yaw>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	61f8      	str	r0, [r7, #28]
 8004660:	61b9      	str	r1, [r7, #24]
 8004662:	ed87 0a05 	vstr	s0, [r7, #20]
 8004666:	edc7 0a04 	vstr	s1, [r7, #16]
 800466a:	ed87 1a03 	vstr	s2, [r7, #12]
 800466e:	edc7 1a02 	vstr	s3, [r7, #8]
 8004672:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->yaw_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	3360      	adds	r3, #96	@ 0x60
 800467a:	ed97 2a01 	vldr	s4, [r7, #4]
 800467e:	edd7 1a02 	vldr	s3, [r7, #8]
 8004682:	ed97 1a03 	vldr	s2, [r7, #12]
 8004686:	edd7 0a04 	vldr	s1, [r7, #16]
 800468a:	ed97 0a05 	vldr	s0, [r7, #20]
 800468e:	69b9      	ldr	r1, [r7, #24]
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff fe4c 	bl	800432e <rc_channel_filter_init>
}
 8004696:	bf00      	nop
 8004698:	3720      	adds	r7, #32
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <rc_attitude_control_update_yaw>:

void rc_attitude_control_update_yaw(
	rc_attitude_control_t* rc,
	float raw_input
) {
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, -1.0f, 1.0f);
 80046ac:	edd7 7a00 	vldr	s15, [r7]
 80046b0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80046b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046bc:	d501      	bpl.n	80046c2 <rc_attitude_control_update_yaw+0x22>
 80046be:	4b0d      	ldr	r3, [pc, #52]	@ (80046f4 <rc_attitude_control_update_yaw+0x54>)
 80046c0:	e00c      	b.n	80046dc <rc_attitude_control_update_yaw+0x3c>
 80046c2:	edd7 7a00 	vldr	s15, [r7]
 80046c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d2:	dd02      	ble.n	80046da <rc_attitude_control_update_yaw+0x3a>
 80046d4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80046d8:	e000      	b.n	80046dc <rc_attitude_control_update_yaw+0x3c>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->yaw_filter, raw_input);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3360      	adds	r3, #96	@ 0x60
 80046e2:	ed97 0a00 	vldr	s0, [r7]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff fe60 	bl	80043ac <rc_channel_filter_update>
}
 80046ec:	bf00      	nop
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	bf800000 	.word	0xbf800000

080046f8 <rc_attitude_control_get_processed_yaw>:

float rc_attitude_control_get_processed_yaw(
	rc_attitude_control_t* rc
) {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->yaw_filter);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3360      	adds	r3, #96	@ 0x60
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff fedc 	bl	80044c2 <rc_channel_filter_get_processed>
 800470a:	eef0 7a40 	vmov.f32	s15, s0
}
 800470e:	eeb0 0a67 	vmov.f32	s0, s15
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <rc_attitude_control_init_throttle>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af00      	add	r7, sp, #0
 800471e:	61f8      	str	r0, [r7, #28]
 8004720:	61b9      	str	r1, [r7, #24]
 8004722:	ed87 0a05 	vstr	s0, [r7, #20]
 8004726:	edc7 0a04 	vstr	s1, [r7, #16]
 800472a:	ed87 1a03 	vstr	s2, [r7, #12]
 800472e:	edc7 1a02 	vstr	s3, [r7, #8]
 8004732:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->throttle_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	3390      	adds	r3, #144	@ 0x90
 800473a:	ed97 2a01 	vldr	s4, [r7, #4]
 800473e:	edd7 1a02 	vldr	s3, [r7, #8]
 8004742:	ed97 1a03 	vldr	s2, [r7, #12]
 8004746:	edd7 0a04 	vldr	s1, [r7, #16]
 800474a:	ed97 0a05 	vldr	s0, [r7, #20]
 800474e:	69b9      	ldr	r1, [r7, #24]
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff fdec 	bl	800432e <rc_channel_filter_init>
}
 8004756:	bf00      	nop
 8004758:	3720      	adds	r7, #32
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <rc_attitude_control_update_throttle>:

void rc_attitude_control_update_throttle(
	rc_attitude_control_t* rc,
	float raw_input
) {
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, 0.0f, 1.0f);
 800476a:	edd7 7a00 	vldr	s15, [r7]
 800476e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004776:	d502      	bpl.n	800477e <rc_attitude_control_update_throttle+0x20>
 8004778:	f04f 0300 	mov.w	r3, #0
 800477c:	e00c      	b.n	8004798 <rc_attitude_control_update_throttle+0x3a>
 800477e:	edd7 7a00 	vldr	s15, [r7]
 8004782:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800478a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478e:	dd02      	ble.n	8004796 <rc_attitude_control_update_throttle+0x38>
 8004790:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004794:	e000      	b.n	8004798 <rc_attitude_control_update_throttle+0x3a>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->throttle_filter, raw_input);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3390      	adds	r3, #144	@ 0x90
 800479e:	ed97 0a00 	vldr	s0, [r7]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff fe02 	bl	80043ac <rc_channel_filter_update>
}
 80047a8:	bf00      	nop
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <rc_attitude_control_get_processed_throttle>:

float rc_attitude_control_get_processed_throttle(
	rc_attitude_control_t* rc
) {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->throttle_filter);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3390      	adds	r3, #144	@ 0x90
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff fe80 	bl	80044c2 <rc_channel_filter_get_processed>
 80047c2:	eef0 7a40 	vmov.f32	s15, s0
}
 80047c6:	eeb0 0a67 	vmov.f32	s0, s15
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <rc_attitude_control_update>:
	rc_attitude_control_t* rc,
	float raw_roll,
	float raw_pitch,
	float raw_yaw,
	float raw_throttle
) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6178      	str	r0, [r7, #20]
 80047d8:	ed87 0a04 	vstr	s0, [r7, #16]
 80047dc:	edc7 0a03 	vstr	s1, [r7, #12]
 80047e0:	ed87 1a02 	vstr	s2, [r7, #8]
 80047e4:	edc7 1a01 	vstr	s3, [r7, #4]
	rc_attitude_control_update_roll(rc, raw_roll);
 80047e8:	ed97 0a04 	vldr	s0, [r7, #16]
 80047ec:	6978      	ldr	r0, [r7, #20]
 80047ee:	f7ff fe99 	bl	8004524 <rc_attitude_control_update_roll>
	rc_attitude_control_update_pitch(rc, raw_pitch);
 80047f2:	ed97 0a03 	vldr	s0, [r7, #12]
 80047f6:	6978      	ldr	r0, [r7, #20]
 80047f8:	f7ff fef2 	bl	80045e0 <rc_attitude_control_update_pitch>
	rc_attitude_control_update_yaw(rc, raw_yaw);
 80047fc:	ed97 0a02 	vldr	s0, [r7, #8]
 8004800:	6978      	ldr	r0, [r7, #20]
 8004802:	f7ff ff4d 	bl	80046a0 <rc_attitude_control_update_yaw>
	rc_attitude_control_update_throttle(rc, raw_throttle);
 8004806:	ed97 0a01 	vldr	s0, [r7, #4]
 800480a:	6978      	ldr	r0, [r7, #20]
 800480c:	f7ff ffa7 	bl	800475e <rc_attitude_control_update_throttle>

}
 8004810:	bf00      	nop
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <rc_attitude_control_get_processed>:
	rc_attitude_control_t* rc,
	float* roll,
	float* pitch,
	float* yaw,
	float* throttle
) {
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
	if (roll) {
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d007      	beq.n	800483c <rc_attitude_control_get_processed+0x24>
		*roll = rc_attitude_control_get_processed_roll(rc);
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f7ff fea5 	bl	800457c <rc_attitude_control_get_processed_roll>
 8004832:	eef0 7a40 	vmov.f32	s15, s0
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	edc3 7a00 	vstr	s15, [r3]
	}
	if (pitch) {
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <rc_attitude_control_get_processed+0x3a>
		*pitch = rc_attitude_control_get_processed_pitch(rc);
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f7ff fef8 	bl	8004638 <rc_attitude_control_get_processed_pitch>
 8004848:	eef0 7a40 	vmov.f32	s15, s0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	edc3 7a00 	vstr	s15, [r3]
	}

	if (yaw) {
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d007      	beq.n	8004868 <rc_attitude_control_get_processed+0x50>
		*yaw = rc_attitude_control_get_processed_yaw(rc);
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f7ff ff4d 	bl	80046f8 <rc_attitude_control_get_processed_yaw>
 800485e:	eef0 7a40 	vmov.f32	s15, s0
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	edc3 7a00 	vstr	s15, [r3]
	}

	if (throttle) {
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d007      	beq.n	800487e <rc_attitude_control_get_processed+0x66>
		*throttle = rc_attitude_control_get_processed_throttle(rc);
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f7ff ff9e 	bl	80047b0 <rc_attitude_control_get_processed_throttle>
 8004874:	eef0 7a40 	vmov.f32	s15, s0
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	edc3 7a00 	vstr	s15, [r3]
	}
 800487e:	bf00      	nop
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <mpu6500_basic_init>:
 *            - 0 success
 *            - 1 init failed
 * @note      spi can't read magnetometer data
 */
uint8_t mpu6500_basic_init(mpu6500_interface_t interface, mpu6500_address_t addr_pin)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	460a      	mov	r2, r1
 8004892:	71fb      	strb	r3, [r7, #7]
 8004894:	4613      	mov	r3, r2
 8004896:	71bb      	strb	r3, [r7, #6]
    uint8_t res;
    
    /* link interface function */
    DRIVER_MPU6500_LINK_INIT(&gs_handle_mpu6500, mpu6500_handle_t);
 8004898:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 800489c:	2100      	movs	r1, #0
 800489e:	48a4      	ldr	r0, [pc, #656]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 80048a0:	f015 fe40 	bl	801a524 <memset>
    DRIVER_MPU6500_LINK_IIC_INIT(&gs_handle_mpu6500, mpu6500_interface_iic_init);
 80048a4:	4ba2      	ldr	r3, [pc, #648]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 80048a6:	4aa3      	ldr	r2, [pc, #652]	@ (8004b34 <mpu6500_basic_init+0x2ac>)
 80048a8:	605a      	str	r2, [r3, #4]
    DRIVER_MPU6500_LINK_IIC_DEINIT(&gs_handle_mpu6500, mpu6500_interface_iic_deinit);
 80048aa:	4ba1      	ldr	r3, [pc, #644]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 80048ac:	4aa2      	ldr	r2, [pc, #648]	@ (8004b38 <mpu6500_basic_init+0x2b0>)
 80048ae:	609a      	str	r2, [r3, #8]
    DRIVER_MPU6500_LINK_IIC_READ(&gs_handle_mpu6500, mpu6500_interface_iic_read);
 80048b0:	4b9f      	ldr	r3, [pc, #636]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 80048b2:	4aa2      	ldr	r2, [pc, #648]	@ (8004b3c <mpu6500_basic_init+0x2b4>)
 80048b4:	60da      	str	r2, [r3, #12]
    DRIVER_MPU6500_LINK_IIC_WRITE(&gs_handle_mpu6500, mpu6500_interface_iic_write);
 80048b6:	4b9e      	ldr	r3, [pc, #632]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 80048b8:	4aa1      	ldr	r2, [pc, #644]	@ (8004b40 <mpu6500_basic_init+0x2b8>)
 80048ba:	611a      	str	r2, [r3, #16]
    DRIVER_MPU6500_LINK_SPI_INIT(&gs_handle_mpu6500, mpu6500_interface_spi_init);
 80048bc:	4b9c      	ldr	r3, [pc, #624]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 80048be:	4aa1      	ldr	r2, [pc, #644]	@ (8004b44 <mpu6500_basic_init+0x2bc>)
 80048c0:	615a      	str	r2, [r3, #20]
    DRIVER_MPU6500_LINK_SPI_DEINIT(&gs_handle_mpu6500, mpu6500_interface_spi_deinit);
 80048c2:	4b9b      	ldr	r3, [pc, #620]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 80048c4:	4aa0      	ldr	r2, [pc, #640]	@ (8004b48 <mpu6500_basic_init+0x2c0>)
 80048c6:	619a      	str	r2, [r3, #24]
    DRIVER_MPU6500_LINK_SPI_READ(&gs_handle_mpu6500, mpu6500_interface_spi_read);
 80048c8:	4b99      	ldr	r3, [pc, #612]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 80048ca:	4aa0      	ldr	r2, [pc, #640]	@ (8004b4c <mpu6500_basic_init+0x2c4>)
 80048cc:	61da      	str	r2, [r3, #28]
    DRIVER_MPU6500_LINK_SPI_WRITE(&gs_handle_mpu6500, mpu6500_interface_spi_write);
 80048ce:	4b98      	ldr	r3, [pc, #608]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 80048d0:	4a9f      	ldr	r2, [pc, #636]	@ (8004b50 <mpu6500_basic_init+0x2c8>)
 80048d2:	621a      	str	r2, [r3, #32]
    DRIVER_MPU6500_LINK_DELAY_MS(&gs_handle_mpu6500, mpu6500_interface_delay_ms);
 80048d4:	4b96      	ldr	r3, [pc, #600]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 80048d6:	4a9f      	ldr	r2, [pc, #636]	@ (8004b54 <mpu6500_basic_init+0x2cc>)
 80048d8:	625a      	str	r2, [r3, #36]	@ 0x24
    DRIVER_MPU6500_LINK_DEBUG_PRINT(&gs_handle_mpu6500, mpu6500_interface_debug_print);
 80048da:	4b95      	ldr	r3, [pc, #596]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 80048dc:	4a9e      	ldr	r2, [pc, #632]	@ (8004b58 <mpu6500_basic_init+0x2d0>)
 80048de:	629a      	str	r2, [r3, #40]	@ 0x28
    DRIVER_MPU6500_LINK_RECEIVE_CALLBACK(&gs_handle_mpu6500, mpu6500_interface_receive_callback);
 80048e0:	4b93      	ldr	r3, [pc, #588]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 80048e2:	4a9e      	ldr	r2, [pc, #632]	@ (8004b5c <mpu6500_basic_init+0x2d4>)
 80048e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* set the interface */
    res = mpu6500_set_interface(&gs_handle_mpu6500, interface);
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	4619      	mov	r1, r3
 80048ea:	4891      	ldr	r0, [pc, #580]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 80048ec:	f000 fd7c 	bl	80053e8 <mpu6500_set_interface>
 80048f0:	4603      	mov	r3, r0
 80048f2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d004      	beq.n	8004904 <mpu6500_basic_init+0x7c>
    {
        mpu6500_interface_debug_print("mpu6500: set interface failed.\n");
 80048fa:	4899      	ldr	r0, [pc, #612]	@ (8004b60 <mpu6500_basic_init+0x2d8>)
 80048fc:	f000 fc98 	bl	8005230 <mpu6500_interface_debug_print>
       
        return 1;
 8004900:	2301      	movs	r3, #1
 8004902:	e3ce      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the addr pin */
    res = mpu6500_set_addr_pin(&gs_handle_mpu6500, addr_pin);
 8004904:	79bb      	ldrb	r3, [r7, #6]
 8004906:	4619      	mov	r1, r3
 8004908:	4889      	ldr	r0, [pc, #548]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 800490a:	f000 fd83 	bl	8005414 <mpu6500_set_addr_pin>
 800490e:	4603      	mov	r3, r0
 8004910:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d004      	beq.n	8004922 <mpu6500_basic_init+0x9a>
    {
        mpu6500_interface_debug_print("mpu6500: set addr pin failed.\n");
 8004918:	4892      	ldr	r0, [pc, #584]	@ (8004b64 <mpu6500_basic_init+0x2dc>)
 800491a:	f000 fc89 	bl	8005230 <mpu6500_interface_debug_print>
       
        return 1;
 800491e:	2301      	movs	r3, #1
 8004920:	e3bf      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* init */
    res = mpu6500_init(&gs_handle_mpu6500);
 8004922:	4883      	ldr	r0, [pc, #524]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 8004924:	f000 fd8c 	bl	8005440 <mpu6500_init>
 8004928:	4603      	mov	r3, r0
 800492a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d004      	beq.n	800493c <mpu6500_basic_init+0xb4>
    {
        mpu6500_interface_debug_print("mpu6500: init failed.\n");
 8004932:	488d      	ldr	r0, [pc, #564]	@ (8004b68 <mpu6500_basic_init+0x2e0>)
 8004934:	f000 fc7c 	bl	8005230 <mpu6500_interface_debug_print>
       
        return 1;
 8004938:	2301      	movs	r3, #1
 800493a:	e3b2      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* delay 100 ms */
    mpu6500_interface_delay_ms(100);
 800493c:	2064      	movs	r0, #100	@ 0x64
 800493e:	f000 fc6b 	bl	8005218 <mpu6500_interface_delay_ms>
    
    /* disable sleep */
    res = mpu6500_set_sleep(&gs_handle_mpu6500, MPU6500_BOOL_FALSE);
 8004942:	2100      	movs	r1, #0
 8004944:	487a      	ldr	r0, [pc, #488]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 8004946:	f001 ff57 	bl	80067f8 <mpu6500_set_sleep>
 800494a:	4603      	mov	r3, r0
 800494c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d007      	beq.n	8004964 <mpu6500_basic_init+0xdc>
    {
        mpu6500_interface_debug_print("mpu6500: set sleep failed.\n");
 8004954:	4885      	ldr	r0, [pc, #532]	@ (8004b6c <mpu6500_basic_init+0x2e4>)
 8004956:	f000 fc6b 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800495a:	4875      	ldr	r0, [pc, #468]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 800495c:	f000 fe9c 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004960:	2301      	movs	r3, #1
 8004962:	e39e      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* if spi interface, disable iic interface */
    if (interface == MPU6500_INTERFACE_SPI)
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d110      	bne.n	800498c <mpu6500_basic_init+0x104>
    {
        /* disable iic */
        res = mpu6500_set_disable_iic_slave(&gs_handle_mpu6500, MPU6500_BOOL_TRUE);
 800496a:	2101      	movs	r1, #1
 800496c:	4870      	ldr	r0, [pc, #448]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 800496e:	f001 fe0d 	bl	800658c <mpu6500_set_disable_iic_slave>
 8004972:	4603      	mov	r3, r0
 8004974:	73fb      	strb	r3, [r7, #15]
        if (res != 0)
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d007      	beq.n	800498c <mpu6500_basic_init+0x104>
        {
            mpu6500_interface_debug_print("mpu6500: set disable iic slave failed.\n");
 800497c:	487c      	ldr	r0, [pc, #496]	@ (8004b70 <mpu6500_basic_init+0x2e8>)
 800497e:	f000 fc57 	bl	8005230 <mpu6500_interface_debug_print>
            (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004982:	486b      	ldr	r0, [pc, #428]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 8004984:	f000 fe88 	bl	8005698 <mpu6500_deinit>
           
            return 1;
 8004988:	2301      	movs	r3, #1
 800498a:	e38a      	b.n	80050a2 <mpu6500_basic_init+0x81a>
        }
    }
    
    /* set fifo 1024kb */
    res = mpu6500_set_fifo_1024kb(&gs_handle_mpu6500);
 800498c:	4868      	ldr	r0, [pc, #416]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 800498e:	f002 fadd 	bl	8006f4c <mpu6500_set_fifo_1024kb>
 8004992:	4603      	mov	r3, r0
 8004994:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d007      	beq.n	80049ac <mpu6500_basic_init+0x124>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo 1024kb failed.\n");
 800499c:	4875      	ldr	r0, [pc, #468]	@ (8004b74 <mpu6500_basic_init+0x2ec>)
 800499e:	f000 fc47 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80049a2:	4863      	ldr	r0, [pc, #396]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 80049a4:	f000 fe78 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e37a      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default clock source */
    res = mpu6500_set_clock_source(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_CLOCK_SOURCE);
 80049ac:	2101      	movs	r1, #1
 80049ae:	4860      	ldr	r0, [pc, #384]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 80049b0:	f001 fe3a 	bl	8006628 <mpu6500_set_clock_source>
 80049b4:	4603      	mov	r3, r0
 80049b6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d007      	beq.n	80049ce <mpu6500_basic_init+0x146>
    {
        mpu6500_interface_debug_print("mpu6500: set clock source failed.\n");
 80049be:	486e      	ldr	r0, [pc, #440]	@ (8004b78 <mpu6500_basic_init+0x2f0>)
 80049c0:	f000 fc36 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80049c4:	485a      	ldr	r0, [pc, #360]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 80049c6:	f000 fe67 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e369      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default rate */
    res = mpu6500_set_sample_rate_divider(&gs_handle_mpu6500, (1000 / MPU6500_BASIC_DEFAULT_RATE) - 1);
 80049ce:	2100      	movs	r1, #0
 80049d0:	4857      	ldr	r0, [pc, #348]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 80049d2:	f002 f807 	bl	80069e4 <mpu6500_set_sample_rate_divider>
 80049d6:	4603      	mov	r3, r0
 80049d8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d007      	beq.n	80049f0 <mpu6500_basic_init+0x168>
    {
        mpu6500_interface_debug_print("mpu6500: set sample rate divider failed.\n");
 80049e0:	4866      	ldr	r0, [pc, #408]	@ (8004b7c <mpu6500_basic_init+0x2f4>)
 80049e2:	f000 fc25 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80049e6:	4852      	ldr	r0, [pc, #328]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 80049e8:	f000 fe56 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e358      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* enable temperature sensor */
    res = mpu6500_set_ptat(&gs_handle_mpu6500, MPU6500_BOOL_TRUE);
 80049f0:	2101      	movs	r1, #1
 80049f2:	484f      	ldr	r0, [pc, #316]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 80049f4:	f001 fe62 	bl	80066bc <mpu6500_set_ptat>
 80049f8:	4603      	mov	r3, r0
 80049fa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d007      	beq.n	8004a12 <mpu6500_basic_init+0x18a>
    {
        mpu6500_interface_debug_print("mpu6500: set ptat failed.\n");
 8004a02:	485f      	ldr	r0, [pc, #380]	@ (8004b80 <mpu6500_basic_init+0x2f8>)
 8004a04:	f000 fc14 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004a08:	4849      	ldr	r0, [pc, #292]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 8004a0a:	f000 fe45 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e347      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default cycle wake up */
    res = mpu6500_set_cycle_wake_up(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_CYCLE_WAKE_UP);
 8004a12:	2100      	movs	r1, #0
 8004a14:	4846      	ldr	r0, [pc, #280]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 8004a16:	f001 fea1 	bl	800675c <mpu6500_set_cycle_wake_up>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d007      	beq.n	8004a34 <mpu6500_basic_init+0x1ac>
    {
        mpu6500_interface_debug_print("mpu6500: set cycle wake up failed.\n");
 8004a24:	4857      	ldr	r0, [pc, #348]	@ (8004b84 <mpu6500_basic_init+0x2fc>)
 8004a26:	f000 fc03 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004a2a:	4841      	ldr	r0, [pc, #260]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 8004a2c:	f000 fe34 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e336      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* enable acc x */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_ACC_X, MPU6500_BOOL_FALSE);
 8004a34:	2200      	movs	r2, #0
 8004a36:	2105      	movs	r1, #5
 8004a38:	483d      	ldr	r0, [pc, #244]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 8004a3a:	f001 ff79 	bl	8006930 <mpu6500_set_standby_mode>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d007      	beq.n	8004a58 <mpu6500_basic_init+0x1d0>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8004a48:	484f      	ldr	r0, [pc, #316]	@ (8004b88 <mpu6500_basic_init+0x300>)
 8004a4a:	f000 fbf1 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004a4e:	4838      	ldr	r0, [pc, #224]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 8004a50:	f000 fe22 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e324      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* enable acc y */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_ACC_Y, MPU6500_BOOL_FALSE);
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2104      	movs	r1, #4
 8004a5c:	4834      	ldr	r0, [pc, #208]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 8004a5e:	f001 ff67 	bl	8006930 <mpu6500_set_standby_mode>
 8004a62:	4603      	mov	r3, r0
 8004a64:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004a66:	7bfb      	ldrb	r3, [r7, #15]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d007      	beq.n	8004a7c <mpu6500_basic_init+0x1f4>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8004a6c:	4846      	ldr	r0, [pc, #280]	@ (8004b88 <mpu6500_basic_init+0x300>)
 8004a6e:	f000 fbdf 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004a72:	482f      	ldr	r0, [pc, #188]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 8004a74:	f000 fe10 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e312      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* enable acc z */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_ACC_Z, MPU6500_BOOL_FALSE);
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2103      	movs	r1, #3
 8004a80:	482b      	ldr	r0, [pc, #172]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 8004a82:	f001 ff55 	bl	8006930 <mpu6500_set_standby_mode>
 8004a86:	4603      	mov	r3, r0
 8004a88:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <mpu6500_basic_init+0x218>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8004a90:	483d      	ldr	r0, [pc, #244]	@ (8004b88 <mpu6500_basic_init+0x300>)
 8004a92:	f000 fbcd 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004a96:	4826      	ldr	r0, [pc, #152]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 8004a98:	f000 fdfe 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e300      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* enable gyro x */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_GYRO_X, MPU6500_BOOL_FALSE);
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2102      	movs	r1, #2
 8004aa4:	4822      	ldr	r0, [pc, #136]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 8004aa6:	f001 ff43 	bl	8006930 <mpu6500_set_standby_mode>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <mpu6500_basic_init+0x23c>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8004ab4:	4834      	ldr	r0, [pc, #208]	@ (8004b88 <mpu6500_basic_init+0x300>)
 8004ab6:	f000 fbbb 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004aba:	481d      	ldr	r0, [pc, #116]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 8004abc:	f000 fdec 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e2ee      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* enable gyro y */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_GYRO_Y, MPU6500_BOOL_FALSE);
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	4819      	ldr	r0, [pc, #100]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 8004aca:	f001 ff31 	bl	8006930 <mpu6500_set_standby_mode>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d007      	beq.n	8004ae8 <mpu6500_basic_init+0x260>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8004ad8:	482b      	ldr	r0, [pc, #172]	@ (8004b88 <mpu6500_basic_init+0x300>)
 8004ada:	f000 fba9 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004ade:	4814      	ldr	r0, [pc, #80]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 8004ae0:	f000 fdda 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e2dc      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* enable gyro z */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_GYRO_Z, MPU6500_BOOL_FALSE);
 8004ae8:	2200      	movs	r2, #0
 8004aea:	2100      	movs	r1, #0
 8004aec:	4810      	ldr	r0, [pc, #64]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 8004aee:	f001 ff1f 	bl	8006930 <mpu6500_set_standby_mode>
 8004af2:	4603      	mov	r3, r0
 8004af4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d007      	beq.n	8004b0c <mpu6500_basic_init+0x284>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8004afc:	4822      	ldr	r0, [pc, #136]	@ (8004b88 <mpu6500_basic_init+0x300>)
 8004afe:	f000 fb97 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004b02:	480b      	ldr	r0, [pc, #44]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 8004b04:	f000 fdc8 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e2ca      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* disable gyroscope x test */
    res = mpu6500_set_gyroscope_test(&gs_handle_mpu6500, MPU6500_AXIS_X, MPU6500_BOOL_FALSE);
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2107      	movs	r1, #7
 8004b10:	4807      	ldr	r0, [pc, #28]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 8004b12:	f002 f877 	bl	8006c04 <mpu6500_set_gyroscope_test>
 8004b16:	4603      	mov	r3, r0
 8004b18:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d037      	beq.n	8004b90 <mpu6500_basic_init+0x308>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope test failed.\n");
 8004b20:	481a      	ldr	r0, [pc, #104]	@ (8004b8c <mpu6500_basic_init+0x304>)
 8004b22:	f000 fb85 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004b26:	4802      	ldr	r0, [pc, #8]	@ (8004b30 <mpu6500_basic_init+0x2a8>)
 8004b28:	f000 fdb6 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e2b8      	b.n	80050a2 <mpu6500_basic_init+0x81a>
 8004b30:	20000338 	.word	0x20000338
 8004b34:	080050f1 	.word	0x080050f1
 8004b38:	08005101 	.word	0x08005101
 8004b3c:	08005111 	.word	0x08005111
 8004b40:	08005135 	.word	0x08005135
 8004b44:	08005159 	.word	0x08005159
 8004b48:	08005169 	.word	0x08005169
 8004b4c:	08005179 	.word	0x08005179
 8004b50:	080051c9 	.word	0x080051c9
 8004b54:	08005219 	.word	0x08005219
 8004b58:	08005231 	.word	0x08005231
 8004b5c:	08005261 	.word	0x08005261
 8004b60:	0801e230 	.word	0x0801e230
 8004b64:	0801e250 	.word	0x0801e250
 8004b68:	0801e270 	.word	0x0801e270
 8004b6c:	0801e288 	.word	0x0801e288
 8004b70:	0801e2a4 	.word	0x0801e2a4
 8004b74:	0801e2cc 	.word	0x0801e2cc
 8004b78:	0801e2f0 	.word	0x0801e2f0
 8004b7c:	0801e314 	.word	0x0801e314
 8004b80:	0801e340 	.word	0x0801e340
 8004b84:	0801e35c 	.word	0x0801e35c
 8004b88:	0801e380 	.word	0x0801e380
 8004b8c:	0801e3a4 	.word	0x0801e3a4
    }
    
    /* disable gyroscope y test */
    res = mpu6500_set_gyroscope_test(&gs_handle_mpu6500, MPU6500_AXIS_Y, MPU6500_BOOL_FALSE);
 8004b90:	2200      	movs	r2, #0
 8004b92:	2106      	movs	r1, #6
 8004b94:	48b0      	ldr	r0, [pc, #704]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004b96:	f002 f835 	bl	8006c04 <mpu6500_set_gyroscope_test>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d007      	beq.n	8004bb4 <mpu6500_basic_init+0x32c>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope test failed.\n");
 8004ba4:	48ad      	ldr	r0, [pc, #692]	@ (8004e5c <mpu6500_basic_init+0x5d4>)
 8004ba6:	f000 fb43 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004baa:	48ab      	ldr	r0, [pc, #684]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004bac:	f000 fd74 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e276      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* disable gyroscope z test */
    res = mpu6500_set_gyroscope_test(&gs_handle_mpu6500, MPU6500_AXIS_Z, MPU6500_BOOL_FALSE);
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2105      	movs	r1, #5
 8004bb8:	48a7      	ldr	r0, [pc, #668]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004bba:	f002 f823 	bl	8006c04 <mpu6500_set_gyroscope_test>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d007      	beq.n	8004bd8 <mpu6500_basic_init+0x350>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope test failed.\n");
 8004bc8:	48a4      	ldr	r0, [pc, #656]	@ (8004e5c <mpu6500_basic_init+0x5d4>)
 8004bca:	f000 fb31 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004bce:	48a2      	ldr	r0, [pc, #648]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004bd0:	f000 fd62 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e264      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* disable accelerometer x test */
    res = mpu6500_set_accelerometer_test(&gs_handle_mpu6500, MPU6500_AXIS_X, MPU6500_BOOL_FALSE);
 8004bd8:	2200      	movs	r2, #0
 8004bda:	2107      	movs	r1, #7
 8004bdc:	489e      	ldr	r0, [pc, #632]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004bde:	f002 f90d 	bl	8006dfc <mpu6500_set_accelerometer_test>
 8004be2:	4603      	mov	r3, r0
 8004be4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d007      	beq.n	8004bfc <mpu6500_basic_init+0x374>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer test failed.\n");
 8004bec:	489c      	ldr	r0, [pc, #624]	@ (8004e60 <mpu6500_basic_init+0x5d8>)
 8004bee:	f000 fb1f 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004bf2:	4899      	ldr	r0, [pc, #612]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004bf4:	f000 fd50 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e252      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* disable accelerometer y test */
    res = mpu6500_set_accelerometer_test(&gs_handle_mpu6500, MPU6500_AXIS_Y, MPU6500_BOOL_FALSE);
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2106      	movs	r1, #6
 8004c00:	4895      	ldr	r0, [pc, #596]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004c02:	f002 f8fb 	bl	8006dfc <mpu6500_set_accelerometer_test>
 8004c06:	4603      	mov	r3, r0
 8004c08:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d007      	beq.n	8004c20 <mpu6500_basic_init+0x398>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer test failed.\n");
 8004c10:	4893      	ldr	r0, [pc, #588]	@ (8004e60 <mpu6500_basic_init+0x5d8>)
 8004c12:	f000 fb0d 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004c16:	4890      	ldr	r0, [pc, #576]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004c18:	f000 fd3e 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e240      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* disable accelerometer z test */
    res = mpu6500_set_accelerometer_test(&gs_handle_mpu6500, MPU6500_AXIS_Z, MPU6500_BOOL_FALSE);
 8004c20:	2200      	movs	r2, #0
 8004c22:	2105      	movs	r1, #5
 8004c24:	488c      	ldr	r0, [pc, #560]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004c26:	f002 f8e9 	bl	8006dfc <mpu6500_set_accelerometer_test>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d007      	beq.n	8004c44 <mpu6500_basic_init+0x3bc>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer test failed.\n");
 8004c34:	488a      	ldr	r0, [pc, #552]	@ (8004e60 <mpu6500_basic_init+0x5d8>)
 8004c36:	f000 fafb 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004c3a:	4887      	ldr	r0, [pc, #540]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004c3c:	f000 fd2c 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e22e      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* disable fifo */
    res = mpu6500_set_fifo(&gs_handle_mpu6500, MPU6500_BOOL_FALSE);
 8004c44:	2100      	movs	r1, #0
 8004c46:	4884      	ldr	r0, [pc, #528]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004c48:	f001 fc04 	bl	8006454 <mpu6500_set_fifo>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d007      	beq.n	8004c66 <mpu6500_basic_init+0x3de>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo failed.\n");
 8004c56:	4883      	ldr	r0, [pc, #524]	@ (8004e64 <mpu6500_basic_init+0x5dc>)
 8004c58:	f000 faea 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004c5c:	487e      	ldr	r0, [pc, #504]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004c5e:	f000 fd1b 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e21d      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* disable temp fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_TEMP, MPU6500_BOOL_FALSE);
 8004c66:	2200      	movs	r2, #0
 8004c68:	2107      	movs	r1, #7
 8004c6a:	487b      	ldr	r0, [pc, #492]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004c6c:	f002 fb40 	bl	80072f0 <mpu6500_set_fifo_enable>
 8004c70:	4603      	mov	r3, r0
 8004c72:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d007      	beq.n	8004c8a <mpu6500_basic_init+0x402>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8004c7a:	487b      	ldr	r0, [pc, #492]	@ (8004e68 <mpu6500_basic_init+0x5e0>)
 8004c7c:	f000 fad8 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004c80:	4875      	ldr	r0, [pc, #468]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004c82:	f000 fd09 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e20b      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* disable xg fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_XG, MPU6500_BOOL_FALSE);
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2106      	movs	r1, #6
 8004c8e:	4872      	ldr	r0, [pc, #456]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004c90:	f002 fb2e 	bl	80072f0 <mpu6500_set_fifo_enable>
 8004c94:	4603      	mov	r3, r0
 8004c96:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d007      	beq.n	8004cae <mpu6500_basic_init+0x426>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8004c9e:	4872      	ldr	r0, [pc, #456]	@ (8004e68 <mpu6500_basic_init+0x5e0>)
 8004ca0:	f000 fac6 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004ca4:	486c      	ldr	r0, [pc, #432]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004ca6:	f000 fcf7 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e1f9      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* disable yg fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_YG, MPU6500_BOOL_FALSE);
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2105      	movs	r1, #5
 8004cb2:	4869      	ldr	r0, [pc, #420]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004cb4:	f002 fb1c 	bl	80072f0 <mpu6500_set_fifo_enable>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d007      	beq.n	8004cd2 <mpu6500_basic_init+0x44a>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8004cc2:	4869      	ldr	r0, [pc, #420]	@ (8004e68 <mpu6500_basic_init+0x5e0>)
 8004cc4:	f000 fab4 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004cc8:	4863      	ldr	r0, [pc, #396]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004cca:	f000 fce5 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e1e7      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* disable zg fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_ZG, MPU6500_BOOL_FALSE);
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	2104      	movs	r1, #4
 8004cd6:	4860      	ldr	r0, [pc, #384]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004cd8:	f002 fb0a 	bl	80072f0 <mpu6500_set_fifo_enable>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d007      	beq.n	8004cf6 <mpu6500_basic_init+0x46e>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8004ce6:	4860      	ldr	r0, [pc, #384]	@ (8004e68 <mpu6500_basic_init+0x5e0>)
 8004ce8:	f000 faa2 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004cec:	485a      	ldr	r0, [pc, #360]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004cee:	f000 fcd3 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e1d5      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* disable accel fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_ACCEL, MPU6500_BOOL_FALSE);
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	2103      	movs	r1, #3
 8004cfa:	4857      	ldr	r0, [pc, #348]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004cfc:	f002 faf8 	bl	80072f0 <mpu6500_set_fifo_enable>
 8004d00:	4603      	mov	r3, r0
 8004d02:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d007      	beq.n	8004d1a <mpu6500_basic_init+0x492>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8004d0a:	4857      	ldr	r0, [pc, #348]	@ (8004e68 <mpu6500_basic_init+0x5e0>)
 8004d0c:	f000 fa90 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004d10:	4851      	ldr	r0, [pc, #324]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004d12:	f000 fcc1 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e1c3      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default interrupt level */
    res = mpu6500_set_interrupt_level(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_PIN_LEVEL);
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	484e      	ldr	r0, [pc, #312]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004d1e:	f002 fb41 	bl	80073a4 <mpu6500_set_interrupt_level>
 8004d22:	4603      	mov	r3, r0
 8004d24:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d007      	beq.n	8004d3c <mpu6500_basic_init+0x4b4>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt level failed.\n");
 8004d2c:	484f      	ldr	r0, [pc, #316]	@ (8004e6c <mpu6500_basic_init+0x5e4>)
 8004d2e:	f000 fa7f 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004d32:	4849      	ldr	r0, [pc, #292]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004d34:	f000 fcb0 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e1b2      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default pin type */
    res = mpu6500_set_interrupt_pin_type(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_PIN_TYPE);
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	4846      	ldr	r0, [pc, #280]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004d40:	f002 fb7e 	bl	8007440 <mpu6500_set_interrupt_pin_type>
 8004d44:	4603      	mov	r3, r0
 8004d46:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d007      	beq.n	8004d5e <mpu6500_basic_init+0x4d6>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt pin type failed.\n");
 8004d4e:	4848      	ldr	r0, [pc, #288]	@ (8004e70 <mpu6500_basic_init+0x5e8>)
 8004d50:	f000 fa6e 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004d54:	4840      	ldr	r0, [pc, #256]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004d56:	f000 fc9f 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e1a1      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default motion interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_MOTION, MPU6500_BASIC_DEFAULT_INTERRUPT_MOTION);
 8004d5e:	2200      	movs	r2, #0
 8004d60:	2106      	movs	r1, #6
 8004d62:	483d      	ldr	r0, [pc, #244]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004d64:	f002 fd42 	bl	80077ec <mpu6500_set_interrupt>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <mpu6500_basic_init+0x4fa>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8004d72:	4840      	ldr	r0, [pc, #256]	@ (8004e74 <mpu6500_basic_init+0x5ec>)
 8004d74:	f000 fa5c 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004d78:	4837      	ldr	r0, [pc, #220]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004d7a:	f000 fc8d 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e18f      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fifo overflow interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_FIFO_OVERFLOW, MPU6500_BASIC_DEFAULT_INTERRUPT_FIFO_OVERFLOW);
 8004d82:	2200      	movs	r2, #0
 8004d84:	2104      	movs	r1, #4
 8004d86:	4834      	ldr	r0, [pc, #208]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004d88:	f002 fd30 	bl	80077ec <mpu6500_set_interrupt>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <mpu6500_basic_init+0x51e>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8004d96:	4837      	ldr	r0, [pc, #220]	@ (8004e74 <mpu6500_basic_init+0x5ec>)
 8004d98:	f000 fa4a 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004d9c:	482e      	ldr	r0, [pc, #184]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004d9e:	f000 fc7b 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e17d      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default dmp interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_DMP, MPU6500_BASIC_DEFAULT_INTERRUPT_DMP);
 8004da6:	2200      	movs	r2, #0
 8004da8:	2101      	movs	r1, #1
 8004daa:	482b      	ldr	r0, [pc, #172]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004dac:	f002 fd1e 	bl	80077ec <mpu6500_set_interrupt>
 8004db0:	4603      	mov	r3, r0
 8004db2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d007      	beq.n	8004dca <mpu6500_basic_init+0x542>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8004dba:	482e      	ldr	r0, [pc, #184]	@ (8004e74 <mpu6500_basic_init+0x5ec>)
 8004dbc:	f000 fa38 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004dc0:	4825      	ldr	r0, [pc, #148]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004dc2:	f000 fc69 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e16b      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fsync int interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_FSYNC_INT, MPU6500_BASIC_DEFAULT_INTERRUPT_FSYNC_INT);
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2103      	movs	r1, #3
 8004dce:	4822      	ldr	r0, [pc, #136]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004dd0:	f002 fd0c 	bl	80077ec <mpu6500_set_interrupt>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <mpu6500_basic_init+0x566>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8004dde:	4825      	ldr	r0, [pc, #148]	@ (8004e74 <mpu6500_basic_init+0x5ec>)
 8004de0:	f000 fa26 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004de4:	481c      	ldr	r0, [pc, #112]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004de6:	f000 fc57 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e159      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default data ready interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_DATA_READY, MPU6500_BASIC_DEFAULT_INTERRUPT_DATA_READY);
 8004dee:	2200      	movs	r2, #0
 8004df0:	2100      	movs	r1, #0
 8004df2:	4819      	ldr	r0, [pc, #100]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004df4:	f002 fcfa 	bl	80077ec <mpu6500_set_interrupt>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d007      	beq.n	8004e12 <mpu6500_basic_init+0x58a>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8004e02:	481c      	ldr	r0, [pc, #112]	@ (8004e74 <mpu6500_basic_init+0x5ec>)
 8004e04:	f000 fa14 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004e08:	4813      	ldr	r0, [pc, #76]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004e0a:	f000 fc45 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e147      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default interrupt latch */
    res = mpu6500_set_interrupt_latch(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_LATCH);
 8004e12:	2101      	movs	r1, #1
 8004e14:	4810      	ldr	r0, [pc, #64]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004e16:	f002 fb61 	bl	80074dc <mpu6500_set_interrupt_latch>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d007      	beq.n	8004e34 <mpu6500_basic_init+0x5ac>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt latch failed.\n");
 8004e24:	4814      	ldr	r0, [pc, #80]	@ (8004e78 <mpu6500_basic_init+0x5f0>)
 8004e26:	f000 fa03 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004e2a:	480b      	ldr	r0, [pc, #44]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004e2c:	f000 fc34 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e136      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default interrupt read clear */
    res = mpu6500_set_interrupt_read_clear(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_READ_CLEAR);
 8004e34:	2101      	movs	r1, #1
 8004e36:	4808      	ldr	r0, [pc, #32]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004e38:	f002 fba0 	bl	800757c <mpu6500_set_interrupt_read_clear>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d01c      	beq.n	8004e80 <mpu6500_basic_init+0x5f8>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt read clear failed.\n");
 8004e46:	480d      	ldr	r0, [pc, #52]	@ (8004e7c <mpu6500_basic_init+0x5f4>)
 8004e48:	f000 f9f2 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004e4c:	4802      	ldr	r0, [pc, #8]	@ (8004e58 <mpu6500_basic_init+0x5d0>)
 8004e4e:	f000 fc23 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e125      	b.n	80050a2 <mpu6500_basic_init+0x81a>
 8004e56:	bf00      	nop
 8004e58:	20000338 	.word	0x20000338
 8004e5c:	0801e3a4 	.word	0x0801e3a4
 8004e60:	0801e3cc 	.word	0x0801e3cc
 8004e64:	0801e3f8 	.word	0x0801e3f8
 8004e68:	0801e414 	.word	0x0801e414
 8004e6c:	0801e438 	.word	0x0801e438
 8004e70:	0801e460 	.word	0x0801e460
 8004e74:	0801e48c 	.word	0x0801e48c
 8004e78:	0801e4ac 	.word	0x0801e4ac
 8004e7c:	0801e4d4 	.word	0x0801e4d4
    }
    
    /* set the extern sync */
    res = mpu6500_set_extern_sync(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_EXTERN_SYNC);
 8004e80:	2100      	movs	r1, #0
 8004e82:	488a      	ldr	r0, [pc, #552]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004e84:	f001 fdd8 	bl	8006a38 <mpu6500_set_extern_sync>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d007      	beq.n	8004ea2 <mpu6500_basic_init+0x61a>
    {
        mpu6500_interface_debug_print("mpu6500: set extern sync failed.\n");
 8004e92:	4887      	ldr	r0, [pc, #540]	@ (80050b0 <mpu6500_basic_init+0x828>)
 8004e94:	f000 f9cc 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004e98:	4884      	ldr	r0, [pc, #528]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004e9a:	f000 fbfd 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e0ff      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fsync interrupt */
    res = mpu6500_set_fsync_interrupt(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_FSYNC_INTERRUPT);
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	4881      	ldr	r0, [pc, #516]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004ea6:	f002 fc05 	bl	80076b4 <mpu6500_set_fsync_interrupt>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004eae:	7bfb      	ldrb	r3, [r7, #15]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d007      	beq.n	8004ec4 <mpu6500_basic_init+0x63c>
    {
        mpu6500_interface_debug_print("mpu6500: set fsync interrupt failed.\n");
 8004eb4:	487f      	ldr	r0, [pc, #508]	@ (80050b4 <mpu6500_basic_init+0x82c>)
 8004eb6:	f000 f9bb 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004eba:	487c      	ldr	r0, [pc, #496]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004ebc:	f000 fbec 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0ee      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fsync interrupt level */
    res = mpu6500_set_fsync_interrupt_level(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_FSYNC_INTERRUPT_LEVEL);
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	4879      	ldr	r0, [pc, #484]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004ec8:	f002 fba6 	bl	8007618 <mpu6500_set_fsync_interrupt_level>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d007      	beq.n	8004ee6 <mpu6500_basic_init+0x65e>
    {
        mpu6500_interface_debug_print("mpu6500: set fsync interrupt level failed.\n");
 8004ed6:	4878      	ldr	r0, [pc, #480]	@ (80050b8 <mpu6500_basic_init+0x830>)
 8004ed8:	f000 f9aa 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004edc:	4873      	ldr	r0, [pc, #460]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004ede:	f000 fbdb 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e0dd      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default iic master */
    res = mpu6500_set_iic_master(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_IIC_MASTER);
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	4870      	ldr	r0, [pc, #448]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004eea:	f001 fb01 	bl	80064f0 <mpu6500_set_iic_master>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d007      	beq.n	8004f08 <mpu6500_basic_init+0x680>
    {
        mpu6500_interface_debug_print("mpu6500: set iic master failed.\n");
 8004ef8:	4870      	ldr	r0, [pc, #448]	@ (80050bc <mpu6500_basic_init+0x834>)
 8004efa:	f000 f999 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004efe:	486b      	ldr	r0, [pc, #428]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004f00:	f000 fbca 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0cc      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default iic bypass */
    res = mpu6500_set_iic_bypass(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_IIC_BYPASS);
 8004f08:	2100      	movs	r1, #0
 8004f0a:	4868      	ldr	r0, [pc, #416]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004f0c:	f002 fc20 	bl	8007750 <mpu6500_set_iic_bypass>
 8004f10:	4603      	mov	r3, r0
 8004f12:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d007      	beq.n	8004f2a <mpu6500_basic_init+0x6a2>
    {
        mpu6500_interface_debug_print("mpu6500: set iic bypass failed.\n");
 8004f1a:	4869      	ldr	r0, [pc, #420]	@ (80050c0 <mpu6500_basic_init+0x838>)
 8004f1c:	f000 f988 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004f20:	4862      	ldr	r0, [pc, #392]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004f22:	f000 fbb9 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e0bb      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accelerometer range */
    res = mpu6500_set_accelerometer_range(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_RANGE);
 8004f2a:	2103      	movs	r1, #3
 8004f2c:	485f      	ldr	r0, [pc, #380]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004f2e:	f001 ffbf 	bl	8006eb0 <mpu6500_set_accelerometer_range>
 8004f32:	4603      	mov	r3, r0
 8004f34:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d007      	beq.n	8004f4c <mpu6500_basic_init+0x6c4>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer range failed.\n");
 8004f3c:	4861      	ldr	r0, [pc, #388]	@ (80050c4 <mpu6500_basic_init+0x83c>)
 8004f3e:	f000 f977 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004f42:	485a      	ldr	r0, [pc, #360]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004f44:	f000 fba8 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0aa      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default gyroscope range */
    res = mpu6500_set_gyroscope_range(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_GYROSCOPE_RANGE);
 8004f4c:	2103      	movs	r1, #3
 8004f4e:	4857      	ldr	r0, [pc, #348]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004f50:	f001 feb2 	bl	8006cb8 <mpu6500_set_gyroscope_range>
 8004f54:	4603      	mov	r3, r0
 8004f56:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <mpu6500_basic_init+0x6e6>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope range failed.\n");
 8004f5e:	485a      	ldr	r0, [pc, #360]	@ (80050c8 <mpu6500_basic_init+0x840>)
 8004f60:	f000 f966 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004f64:	4851      	ldr	r0, [pc, #324]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004f66:	f000 fb97 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e099      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default gyro standby */
    res = mpu6500_set_gyro_standby(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_GYROSCOPE_STANDBY);
 8004f6e:	2100      	movs	r1, #0
 8004f70:	484e      	ldr	r0, [pc, #312]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004f72:	f001 fc8f 	bl	8006894 <mpu6500_set_gyro_standby>
 8004f76:	4603      	mov	r3, r0
 8004f78:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d007      	beq.n	8004f90 <mpu6500_basic_init+0x708>
    {
        mpu6500_interface_debug_print("mpu6500: set gyro standby failed.\n");
 8004f80:	4852      	ldr	r0, [pc, #328]	@ (80050cc <mpu6500_basic_init+0x844>)
 8004f82:	f000 f955 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004f86:	4849      	ldr	r0, [pc, #292]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004f88:	f000 fb86 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e088      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fifo mode */
    res = mpu6500_set_fifo_mode(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_FIFO_MODE);
 8004f90:	2101      	movs	r1, #1
 8004f92:	4846      	ldr	r0, [pc, #280]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004f94:	f001 fde8 	bl	8006b68 <mpu6500_set_fifo_mode>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d007      	beq.n	8004fb2 <mpu6500_basic_init+0x72a>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo mode failed.\n");
 8004fa2:	484b      	ldr	r0, [pc, #300]	@ (80050d0 <mpu6500_basic_init+0x848>)
 8004fa4:	f000 f944 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004fa8:	4840      	ldr	r0, [pc, #256]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004faa:	f000 fb75 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e077      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default gyroscope choice */
    res = mpu6500_set_gyroscope_choice(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_GYROSCOPE_CHOICE);
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	483d      	ldr	r0, [pc, #244]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004fb6:	f001 fecd 	bl	8006d54 <mpu6500_set_gyroscope_choice>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d007      	beq.n	8004fd4 <mpu6500_basic_init+0x74c>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope choice failed.\n");
 8004fc4:	4843      	ldr	r0, [pc, #268]	@ (80050d4 <mpu6500_basic_init+0x84c>)
 8004fc6:	f000 f933 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004fca:	4838      	ldr	r0, [pc, #224]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004fcc:	f000 fb64 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e066      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default low pass filter */
    res = mpu6500_set_low_pass_filter(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_LOW_PASS_FILTER);
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	4835      	ldr	r0, [pc, #212]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004fd8:	f001 fd7c 	bl	8006ad4 <mpu6500_set_low_pass_filter>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d007      	beq.n	8004ff6 <mpu6500_basic_init+0x76e>
    {
        mpu6500_interface_debug_print("mpu6500: set low pass filter failed.\n");
 8004fe6:	483c      	ldr	r0, [pc, #240]	@ (80050d8 <mpu6500_basic_init+0x850>)
 8004fe8:	f000 f922 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004fec:	482f      	ldr	r0, [pc, #188]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004fee:	f000 fb53 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e055      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accelerometer choice */
    res = mpu6500_set_accelerometer_choice(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_CHOICE);
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	482c      	ldr	r0, [pc, #176]	@ (80050ac <mpu6500_basic_init+0x824>)
 8004ffa:	f001 ffef 	bl	8006fdc <mpu6500_set_accelerometer_choice>
 8004ffe:	4603      	mov	r3, r0
 8005000:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <mpu6500_basic_init+0x790>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer choice failed.\n");
 8005008:	4834      	ldr	r0, [pc, #208]	@ (80050dc <mpu6500_basic_init+0x854>)
 800500a:	f000 f911 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800500e:	4827      	ldr	r0, [pc, #156]	@ (80050ac <mpu6500_basic_init+0x824>)
 8005010:	f000 fb42 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8005014:	2301      	movs	r3, #1
 8005016:	e044      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accelerometer low pass filter */
    res = mpu6500_set_accelerometer_low_pass_filter(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_LOW_PASS_FILTER);
 8005018:	2100      	movs	r1, #0
 800501a:	4824      	ldr	r0, [pc, #144]	@ (80050ac <mpu6500_basic_init+0x824>)
 800501c:	f002 f838 	bl	8007090 <mpu6500_set_accelerometer_low_pass_filter>
 8005020:	4603      	mov	r3, r0
 8005022:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d007      	beq.n	800503a <mpu6500_basic_init+0x7b2>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer low pass filter failed.\n");
 800502a:	482d      	ldr	r0, [pc, #180]	@ (80050e0 <mpu6500_basic_init+0x858>)
 800502c:	f000 f900 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005030:	481e      	ldr	r0, [pc, #120]	@ (80050ac <mpu6500_basic_init+0x824>)
 8005032:	f000 fb31 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8005036:	2301      	movs	r3, #1
 8005038:	e033      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default low power accel output rate */
    res = mpu6500_set_low_power_accel_output_rate(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_LOW_POWER_ACCEL_OUTPUT_RATE);
 800503a:	2108      	movs	r1, #8
 800503c:	481b      	ldr	r0, [pc, #108]	@ (80050ac <mpu6500_basic_init+0x824>)
 800503e:	f002 f871 	bl	8007124 <mpu6500_set_low_power_accel_output_rate>
 8005042:	4603      	mov	r3, r0
 8005044:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d007      	beq.n	800505c <mpu6500_basic_init+0x7d4>
    {
        mpu6500_interface_debug_print("mpu6500: set low power accel output rate failed.\n");
 800504c:	4825      	ldr	r0, [pc, #148]	@ (80050e4 <mpu6500_basic_init+0x85c>)
 800504e:	f000 f8ef 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005052:	4816      	ldr	r0, [pc, #88]	@ (80050ac <mpu6500_basic_init+0x824>)
 8005054:	f000 fb20 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 8005058:	2301      	movs	r3, #1
 800505a:	e022      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default wake on motion */
    res = mpu6500_set_wake_on_motion(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_WAKE_ON_MOTION);
 800505c:	2100      	movs	r1, #0
 800505e:	4813      	ldr	r0, [pc, #76]	@ (80050ac <mpu6500_basic_init+0x824>)
 8005060:	f002 f8aa 	bl	80071b8 <mpu6500_set_wake_on_motion>
 8005064:	4603      	mov	r3, r0
 8005066:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d007      	beq.n	800507e <mpu6500_basic_init+0x7f6>
    {
        mpu6500_interface_debug_print("mpu6500: set wake on motion failed.\n");
 800506e:	481e      	ldr	r0, [pc, #120]	@ (80050e8 <mpu6500_basic_init+0x860>)
 8005070:	f000 f8de 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005074:	480d      	ldr	r0, [pc, #52]	@ (80050ac <mpu6500_basic_init+0x824>)
 8005076:	f000 fb0f 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 800507a:	2301      	movs	r3, #1
 800507c:	e011      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accel compare with previous sample */
    res = mpu6500_set_accel_compare_with_previous_sample(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_COMPARE);
 800507e:	2101      	movs	r1, #1
 8005080:	480a      	ldr	r0, [pc, #40]	@ (80050ac <mpu6500_basic_init+0x824>)
 8005082:	f002 f8e7 	bl	8007254 <mpu6500_set_accel_compare_with_previous_sample>
 8005086:	4603      	mov	r3, r0
 8005088:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d007      	beq.n	80050a0 <mpu6500_basic_init+0x818>
    {
        mpu6500_interface_debug_print("mpu6500: set accel compare with previous sample failed.\n");
 8005090:	4816      	ldr	r0, [pc, #88]	@ (80050ec <mpu6500_basic_init+0x864>)
 8005092:	f000 f8cd 	bl	8005230 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005096:	4805      	ldr	r0, [pc, #20]	@ (80050ac <mpu6500_basic_init+0x824>)
 8005098:	f000 fafe 	bl	8005698 <mpu6500_deinit>
       
        return 1;
 800509c:	2301      	movs	r3, #1
 800509e:	e000      	b.n	80050a2 <mpu6500_basic_init+0x81a>
    }
    
    return 0;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000338 	.word	0x20000338
 80050b0:	0801e500 	.word	0x0801e500
 80050b4:	0801e524 	.word	0x0801e524
 80050b8:	0801e54c 	.word	0x0801e54c
 80050bc:	0801e578 	.word	0x0801e578
 80050c0:	0801e59c 	.word	0x0801e59c
 80050c4:	0801e5c0 	.word	0x0801e5c0
 80050c8:	0801e5ec 	.word	0x0801e5ec
 80050cc:	0801e614 	.word	0x0801e614
 80050d0:	0801e638 	.word	0x0801e638
 80050d4:	0801e658 	.word	0x0801e658
 80050d8:	0801e680 	.word	0x0801e680
 80050dc:	0801e6a8 	.word	0x0801e6a8
 80050e0:	0801e6d4 	.word	0x0801e6d4
 80050e4:	0801e708 	.word	0x0801e708
 80050e8:	0801e73c 	.word	0x0801e73c
 80050ec:	0801e764 	.word	0x0801e764

080050f0 <mpu6500_interface_iic_init>:
 *         - 0 success
 *         - 1 iic init failed
 * @note   none
 */
uint8_t mpu6500_interface_iic_init(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
    return 0;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <mpu6500_interface_iic_deinit>:
 *         - 0 success
 *         - 1 iic deinit failed
 * @note   none
 */
uint8_t mpu6500_interface_iic_deinit(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
    return 0;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <mpu6500_interface_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6500_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	603a      	str	r2, [r7, #0]
 8005118:	461a      	mov	r2, r3
 800511a:	4603      	mov	r3, r0
 800511c:	71fb      	strb	r3, [r7, #7]
 800511e:	460b      	mov	r3, r1
 8005120:	71bb      	strb	r3, [r7, #6]
 8005122:	4613      	mov	r3, r2
 8005124:	80bb      	strh	r3, [r7, #4]
    return 0;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <mpu6500_interface_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu6500_interface_iic_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	603a      	str	r2, [r7, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	4603      	mov	r3, r0
 8005140:	71fb      	strb	r3, [r7, #7]
 8005142:	460b      	mov	r3, r1
 8005144:	71bb      	strb	r3, [r7, #6]
 8005146:	4613      	mov	r3, r2
 8005148:	80bb      	strh	r3, [r7, #4]
    return 0;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <mpu6500_interface_spi_init>:
 *         - 0 success
 *         - 1 spi init failed
 * @note   none
 */
uint8_t mpu6500_interface_spi_init(void)
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
    return 0;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <mpu6500_interface_spi_deinit>:
 *         - 0 success
 *         - 1 spi deinit failed
 * @note   none
 */
uint8_t mpu6500_interface_spi_deinit(void)
{   
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
    return 0;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <mpu6500_interface_spi_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6500_interface_spi_read(uint8_t reg, uint8_t *buf, uint16_t len)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	6039      	str	r1, [r7, #0]
 8005182:	71fb      	strb	r3, [r7, #7]
 8005184:	4613      	mov	r3, r2
 8005186:	80bb      	strh	r3, [r7, #4]
	//uint8_t temp_data = 0x80|reg;
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8005188:	2200      	movs	r2, #0
 800518a:	2110      	movs	r1, #16
 800518c:	480c      	ldr	r0, [pc, #48]	@ (80051c0 <mpu6500_interface_spi_read+0x48>)
 800518e:	f006 f95d 	bl	800b44c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg , 1, 100);
 8005192:	1df9      	adds	r1, r7, #7
 8005194:	2364      	movs	r3, #100	@ 0x64
 8005196:	2201      	movs	r2, #1
 8005198:	480a      	ldr	r0, [pc, #40]	@ (80051c4 <mpu6500_interface_spi_read+0x4c>)
 800519a:	f008 f916 	bl	800d3ca <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buf, len, 100);
 800519e:	88ba      	ldrh	r2, [r7, #4]
 80051a0:	2364      	movs	r3, #100	@ 0x64
 80051a2:	6839      	ldr	r1, [r7, #0]
 80051a4:	4807      	ldr	r0, [pc, #28]	@ (80051c4 <mpu6500_interface_spi_read+0x4c>)
 80051a6:	f008 fa54 	bl	800d652 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80051aa:	2201      	movs	r2, #1
 80051ac:	2110      	movs	r1, #16
 80051ae:	4804      	ldr	r0, [pc, #16]	@ (80051c0 <mpu6500_interface_spi_read+0x48>)
 80051b0:	f006 f94c 	bl	800b44c <HAL_GPIO_WritePin>
    return 0;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	40020000 	.word	0x40020000
 80051c4:	20002cb0 	.word	0x20002cb0

080051c8 <mpu6500_interface_spi_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu6500_interface_spi_write(uint8_t reg, uint8_t *buf, uint16_t len)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	6039      	str	r1, [r7, #0]
 80051d2:	71fb      	strb	r3, [r7, #7]
 80051d4:	4613      	mov	r3, r2
 80051d6:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80051d8:	2200      	movs	r2, #0
 80051da:	2110      	movs	r1, #16
 80051dc:	480c      	ldr	r0, [pc, #48]	@ (8005210 <mpu6500_interface_spi_write+0x48>)
 80051de:	f006 f935 	bl	800b44c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 80051e2:	1df9      	adds	r1, r7, #7
 80051e4:	2364      	movs	r3, #100	@ 0x64
 80051e6:	2201      	movs	r2, #1
 80051e8:	480a      	ldr	r0, [pc, #40]	@ (8005214 <mpu6500_interface_spi_write+0x4c>)
 80051ea:	f008 f8ee 	bl	800d3ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 80051ee:	2364      	movs	r3, #100	@ 0x64
 80051f0:	2201      	movs	r2, #1
 80051f2:	6839      	ldr	r1, [r7, #0]
 80051f4:	4807      	ldr	r0, [pc, #28]	@ (8005214 <mpu6500_interface_spi_write+0x4c>)
 80051f6:	f008 f8e8 	bl	800d3ca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80051fa:	2201      	movs	r2, #1
 80051fc:	2110      	movs	r1, #16
 80051fe:	4804      	ldr	r0, [pc, #16]	@ (8005210 <mpu6500_interface_spi_write+0x48>)
 8005200:	f006 f924 	bl	800b44c <HAL_GPIO_WritePin>
    return 0;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	40020000 	.word	0x40020000
 8005214:	20002cb0 	.word	0x20002cb0

08005218 <mpu6500_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms time
 * @note      none
 */
void mpu6500_interface_delay_ms(uint32_t ms)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f005 f8e3 	bl	800a3ec <HAL_Delay>
}
 8005226:	bf00      	nop
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <mpu6500_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt format data
 * @note      none
 */
void mpu6500_interface_debug_print(const char *const fmt, ...)
{
 8005230:	b40f      	push	{r0, r1, r2, r3}
 8005232:	b580      	push	{r7, lr}
 8005234:	b082      	sub	sp, #8
 8005236:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, fmt);
 8005238:	f107 0314 	add.w	r3, r7, #20
 800523c:	607b      	str	r3, [r7, #4]
    vfprintf(stderr, fmt, args);  // <-- Pass to stderr
 800523e:	4b07      	ldr	r3, [pc, #28]	@ (800525c <mpu6500_interface_debug_print+0x2c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6939      	ldr	r1, [r7, #16]
 8005248:	4618      	mov	r0, r3
 800524a:	f014 fb4b 	bl	80198e4 <vfiprintf>
    va_end(args);
}
 800524e:	bf00      	nop
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005258:	b004      	add	sp, #16
 800525a:	4770      	bx	lr
 800525c:	20000160 	.word	0x20000160

08005260 <mpu6500_interface_receive_callback>:
 * @brief     interface receive callback
 * @param[in] type irq type
 * @note      none
 */
void mpu6500_interface_receive_callback(uint8_t type)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	4603      	mov	r3, r0
 8005268:	71fb      	strb	r3, [r7, #7]
    switch (type)
 800526a:	79fb      	ldrb	r3, [r7, #7]
 800526c:	2b06      	cmp	r3, #6
 800526e:	d825      	bhi.n	80052bc <mpu6500_interface_receive_callback+0x5c>
 8005270:	a201      	add	r2, pc, #4	@ (adr r2, 8005278 <mpu6500_interface_receive_callback+0x18>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	080052b5 	.word	0x080052b5
 800527c:	080052ad 	.word	0x080052ad
 8005280:	080052bd 	.word	0x080052bd
 8005284:	080052a5 	.word	0x080052a5
 8005288:	0800529d 	.word	0x0800529d
 800528c:	080052bd 	.word	0x080052bd
 8005290:	08005295 	.word	0x08005295
    {
        case MPU6500_INTERRUPT_MOTION :
        {
            mpu6500_interface_debug_print("mpu6500: irq motion.\n");
 8005294:	480d      	ldr	r0, [pc, #52]	@ (80052cc <mpu6500_interface_receive_callback+0x6c>)
 8005296:	f7ff ffcb 	bl	8005230 <mpu6500_interface_debug_print>
            
            break;
 800529a:	e013      	b.n	80052c4 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_FIFO_OVERFLOW :
        {
            mpu6500_interface_debug_print("mpu6500: irq fifo overflow.\n");
 800529c:	480c      	ldr	r0, [pc, #48]	@ (80052d0 <mpu6500_interface_receive_callback+0x70>)
 800529e:	f7ff ffc7 	bl	8005230 <mpu6500_interface_debug_print>
            
            break;
 80052a2:	e00f      	b.n	80052c4 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_FSYNC_INT :
        {
            mpu6500_interface_debug_print("mpu6500: irq fsync int.\n");
 80052a4:	480b      	ldr	r0, [pc, #44]	@ (80052d4 <mpu6500_interface_receive_callback+0x74>)
 80052a6:	f7ff ffc3 	bl	8005230 <mpu6500_interface_debug_print>
            
            break;
 80052aa:	e00b      	b.n	80052c4 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_DMP :
        {
            mpu6500_interface_debug_print("mpu6500: irq dmp\n");
 80052ac:	480a      	ldr	r0, [pc, #40]	@ (80052d8 <mpu6500_interface_receive_callback+0x78>)
 80052ae:	f7ff ffbf 	bl	8005230 <mpu6500_interface_debug_print>
            
            break;
 80052b2:	e007      	b.n	80052c4 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_DATA_READY :
        {
            mpu6500_interface_debug_print("mpu6500: irq data ready\n");
 80052b4:	4809      	ldr	r0, [pc, #36]	@ (80052dc <mpu6500_interface_receive_callback+0x7c>)
 80052b6:	f7ff ffbb 	bl	8005230 <mpu6500_interface_debug_print>
            
            break;
 80052ba:	e003      	b.n	80052c4 <mpu6500_interface_receive_callback+0x64>
        }
        default :
        {
            mpu6500_interface_debug_print("mpu6500: irq unknown code.\n");
 80052bc:	4808      	ldr	r0, [pc, #32]	@ (80052e0 <mpu6500_interface_receive_callback+0x80>)
 80052be:	f7ff ffb7 	bl	8005230 <mpu6500_interface_debug_print>
            
            break;
 80052c2:	bf00      	nop
        }
    }
}
 80052c4:	bf00      	nop
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	0801e7a0 	.word	0x0801e7a0
 80052d0:	0801e7b8 	.word	0x0801e7b8
 80052d4:	0801e7d8 	.word	0x0801e7d8
 80052d8:	0801e7f4 	.word	0x0801e7f4
 80052dc:	0801e808 	.word	0x0801e808
 80052e0:	0801e824 	.word	0x0801e824

080052e4 <a_mpu6500_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mpu6500_read(mpu6500_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80052e4:	b590      	push	{r4, r7, lr}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	607a      	str	r2, [r7, #4]
 80052ee:	461a      	mov	r2, r3
 80052f0:	460b      	mov	r3, r1
 80052f2:	72fb      	strb	r3, [r7, #11]
 80052f4:	4613      	mov	r3, r2
 80052f6:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)                                     /* if iic interface */
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10e      	bne.n	8005320 <a_mpu6500_read+0x3c>
    {
        if (handle->iic_read(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* read data */
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	68dc      	ldr	r4, [r3, #12]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	7818      	ldrb	r0, [r3, #0]
 800530a:	893b      	ldrh	r3, [r7, #8]
 800530c:	7af9      	ldrb	r1, [r7, #11]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	47a0      	blx	r4
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <a_mpu6500_read+0x38>
        {
            return 1;                                                                 /* return error */
 8005318:	2301      	movs	r3, #1
 800531a:	e010      	b.n	800533e <a_mpu6500_read+0x5a>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 800531c:	2300      	movs	r3, #0
 800531e:	e00e      	b.n	800533e <a_mpu6500_read+0x5a>
        }
    }
    else                                                                              /* spi interface */
    {
        if (handle->spi_read(reg | 0x80, (uint8_t *)buf, len) != 0)                   /* read data */
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	7afa      	ldrb	r2, [r7, #11]
 8005326:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800532a:	b2d0      	uxtb	r0, r2
 800532c:	893a      	ldrh	r2, [r7, #8]
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	4798      	blx	r3
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <a_mpu6500_read+0x58>
        {
            return 1;                                                                 /* return error */
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <a_mpu6500_read+0x5a>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 800533c:	2300      	movs	r3, #0
        }
    }
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	bd90      	pop	{r4, r7, pc}

08005346 <a_mpu6500_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mpu6500_write(mpu6500_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8005346:	b590      	push	{r4, r7, lr}
 8005348:	b085      	sub	sp, #20
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	461a      	mov	r2, r3
 8005352:	460b      	mov	r3, r1
 8005354:	72fb      	strb	r3, [r7, #11]
 8005356:	4613      	mov	r3, r2
 8005358:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)                                      /* if iic interface */
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10e      	bne.n	8005382 <a_mpu6500_write+0x3c>
    {
        if (handle->iic_write(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* write data */
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	691c      	ldr	r4, [r3, #16]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	7818      	ldrb	r0, [r3, #0]
 800536c:	893b      	ldrh	r3, [r7, #8]
 800536e:	7af9      	ldrb	r1, [r7, #11]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	47a0      	blx	r4
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <a_mpu6500_write+0x38>
        {
            return 1;                                                                  /* return error */
 800537a:	2301      	movs	r3, #1
 800537c:	e010      	b.n	80053a0 <a_mpu6500_write+0x5a>
        }
        else
        {
            return 0;                                                                  /* success return 0 */
 800537e:	2300      	movs	r3, #0
 8005380:	e00e      	b.n	80053a0 <a_mpu6500_write+0x5a>
        }
    }
    else                                                                               /* spi interface */
    {
        if (handle->spi_write(reg & (~0x80), (uint8_t *)buf, len) != 0)                /* write data */
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	7afa      	ldrb	r2, [r7, #11]
 8005388:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800538c:	b2d0      	uxtb	r0, r2
 800538e:	893a      	ldrh	r2, [r7, #8]
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	4798      	blx	r3
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <a_mpu6500_write+0x58>
        {
            return 1;                                                                  /* return error */
 800539a:	2301      	movs	r3, #1
 800539c:	e000      	b.n	80053a0 <a_mpu6500_write+0x5a>
        }
        else
        {
            return 0;                                                                  /* success return 0 */
 800539e:	2300      	movs	r3, #0
        }
    }
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd90      	pop	{r4, r7, pc}

080053a8 <a_mpu6500_deinit>:
 *            - 0 success
 *            - 1 deinit failed
 * @note      none
 */
static uint8_t a_mpu6500_deinit(mpu6500_handle_t *handle)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)        /* if iic interface */
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d109      	bne.n	80053ce <a_mpu6500_deinit+0x26>
    {
        if (handle->iic_deinit() != 0)                   /* iic deinit */
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	4798      	blx	r3
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <a_mpu6500_deinit+0x22>
        {
            return 1;                                    /* return error */
 80053c6:	2301      	movs	r3, #1
 80053c8:	e00a      	b.n	80053e0 <a_mpu6500_deinit+0x38>
        }
        else
        {
            return 0;                                    /* success return 0 */
 80053ca:	2300      	movs	r3, #0
 80053cc:	e008      	b.n	80053e0 <a_mpu6500_deinit+0x38>
        }
    }
    else
    {
        if (handle->spi_deinit() != 0)                   /* if spi interface */
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	4798      	blx	r3
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <a_mpu6500_deinit+0x36>
        {
            return 1;                                    /* return error */
 80053da:	2301      	movs	r3, #1
 80053dc:	e000      	b.n	80053e0 <a_mpu6500_deinit+0x38>
        }
        else
        {
            return 0;                                    /* success return 0 */
 80053de:	2300      	movs	r3, #0
        }
    }
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <mpu6500_set_interface>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu6500_set_interface(mpu6500_handle_t *handle, mpu6500_interface_t interface)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <mpu6500_set_interface+0x16>
    {
        return 2;                                /* return error */
 80053fa:	2302      	movs	r3, #2
 80053fc:	e004      	b.n	8005408 <mpu6500_set_interface+0x20>
    }
    
    handle->iic_spi = (uint8_t)interface;        /* set interface */
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	78fa      	ldrb	r2, [r7, #3]
 8005402:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    
    return 0;                                    /* success return 0 */
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <mpu6500_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu6500_set_addr_pin(mpu6500_handle_t *handle, mpu6500_address_t addr_pin)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	460b      	mov	r3, r1
 800541e:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <mpu6500_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 8005426:	2302      	movs	r3, #2
 8005428:	e003      	b.n	8005432 <mpu6500_set_addr_pin+0x1e>
    }

    handle->iic_addr = (uint8_t)addr_pin;        /* set iic addr */
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	78fa      	ldrb	r2, [r7, #3]
 800542e:	701a      	strb	r2, [r3, #0]
    
    return 0;                                    /* success return 0 */
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
	...

08005440 <mpu6500_init>:
 *            - 4 reset failed
 *            - 5 id is invalid
 * @note      none
 */
uint8_t mpu6500_init(mpu6500_handle_t *handle)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
    uint8_t res, prev;
    uint32_t timeout;
  
    if (handle == NULL)                                                             /* check handle */
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <mpu6500_init+0x12>
    {
        return 2;                                                                   /* return error */
 800544e:	2302      	movs	r3, #2
 8005450:	e0fb      	b.n	800564a <mpu6500_init+0x20a>
    }
    if (handle->debug_print == NULL)                                                /* check debug_print */
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <mpu6500_init+0x1e>
    {
        return 3;                                                                   /* return error */
 800545a:	2303      	movs	r3, #3
 800545c:	e0f5      	b.n	800564a <mpu6500_init+0x20a>
    }
    if (handle->iic_init == NULL)                                                   /* check iic_init */
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d105      	bne.n	8005472 <mpu6500_init+0x32>
    {
        handle->debug_print("mpu6500: iic_init is null.\n");                        /* iic_init is null */
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546a:	487a      	ldr	r0, [pc, #488]	@ (8005654 <mpu6500_init+0x214>)
 800546c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800546e:	2303      	movs	r3, #3
 8005470:	e0eb      	b.n	800564a <mpu6500_init+0x20a>
    }
    if (handle->iic_deinit == NULL)                                                 /* check iic_deinit */
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d105      	bne.n	8005486 <mpu6500_init+0x46>
    {
        handle->debug_print("mpu6500: iic_deinit is null.\n");                      /* iic_deinit is null */
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547e:	4876      	ldr	r0, [pc, #472]	@ (8005658 <mpu6500_init+0x218>)
 8005480:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8005482:	2303      	movs	r3, #3
 8005484:	e0e1      	b.n	800564a <mpu6500_init+0x20a>
    }
    if (handle->iic_read == NULL)                                                   /* check iic_read */
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d105      	bne.n	800549a <mpu6500_init+0x5a>
    {
        handle->debug_print("mpu6500: iic_read is null.\n");                        /* iic_read is null */
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005492:	4872      	ldr	r0, [pc, #456]	@ (800565c <mpu6500_init+0x21c>)
 8005494:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8005496:	2303      	movs	r3, #3
 8005498:	e0d7      	b.n	800564a <mpu6500_init+0x20a>
    }
    if (handle->iic_write == NULL)                                                  /* check iic_write */
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d105      	bne.n	80054ae <mpu6500_init+0x6e>
    {
        handle->debug_print("mpu6500: iic_write is null.\n");                       /* iic_write is null */
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a6:	486e      	ldr	r0, [pc, #440]	@ (8005660 <mpu6500_init+0x220>)
 80054a8:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80054aa:	2303      	movs	r3, #3
 80054ac:	e0cd      	b.n	800564a <mpu6500_init+0x20a>
    }
    if (handle->spi_init == NULL)                                                   /* check spi_init */
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d105      	bne.n	80054c2 <mpu6500_init+0x82>
    {
        handle->debug_print("mpu6500: spi_init is null.\n");                        /* spi_init is null */
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ba:	486a      	ldr	r0, [pc, #424]	@ (8005664 <mpu6500_init+0x224>)
 80054bc:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80054be:	2303      	movs	r3, #3
 80054c0:	e0c3      	b.n	800564a <mpu6500_init+0x20a>
    }
    if (handle->spi_deinit == NULL)                                                 /* check spi_deinit */
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d105      	bne.n	80054d6 <mpu6500_init+0x96>
    {
        handle->debug_print("mpu6500: spi_deinit is null.\n");                      /* spi_deinit is null */
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ce:	4866      	ldr	r0, [pc, #408]	@ (8005668 <mpu6500_init+0x228>)
 80054d0:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80054d2:	2303      	movs	r3, #3
 80054d4:	e0b9      	b.n	800564a <mpu6500_init+0x20a>
    }
    if (handle->spi_read == NULL)                                                   /* check spi_read */
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d105      	bne.n	80054ea <mpu6500_init+0xaa>
    {
        handle->debug_print("mpu6500: spi_read is null.\n");                        /* spi_read is null */
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e2:	4862      	ldr	r0, [pc, #392]	@ (800566c <mpu6500_init+0x22c>)
 80054e4:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80054e6:	2303      	movs	r3, #3
 80054e8:	e0af      	b.n	800564a <mpu6500_init+0x20a>
    }
    if (handle->spi_write == NULL)                                                  /* check spi_write */
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d105      	bne.n	80054fe <mpu6500_init+0xbe>
    {
        handle->debug_print("mpu6500: spi_write is null.\n");                       /* spi_write is null */
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f6:	485e      	ldr	r0, [pc, #376]	@ (8005670 <mpu6500_init+0x230>)
 80054f8:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80054fa:	2303      	movs	r3, #3
 80054fc:	e0a5      	b.n	800564a <mpu6500_init+0x20a>
    }
    if (handle->delay_ms == NULL)                                                   /* check delay_ms */
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005502:	2b00      	cmp	r3, #0
 8005504:	d105      	bne.n	8005512 <mpu6500_init+0xd2>
    {
        handle->debug_print("mpu6500: delay_ms is null.\n");                        /* delay_ms is null */
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800550a:	485a      	ldr	r0, [pc, #360]	@ (8005674 <mpu6500_init+0x234>)
 800550c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800550e:	2303      	movs	r3, #3
 8005510:	e09b      	b.n	800564a <mpu6500_init+0x20a>
    }
    if (handle->receive_callback == NULL)                                           /* check receive_callback */
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005516:	2b00      	cmp	r3, #0
 8005518:	d105      	bne.n	8005526 <mpu6500_init+0xe6>
    {
        handle->debug_print("mpu6500: receive_callback is null.\n");                /* receive_callback is null */
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551e:	4856      	ldr	r0, [pc, #344]	@ (8005678 <mpu6500_init+0x238>)
 8005520:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8005522:	2303      	movs	r3, #3
 8005524:	e091      	b.n	800564a <mpu6500_init+0x20a>
    }
    
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)                                   /* if iic interface */
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10d      	bne.n	800554c <mpu6500_init+0x10c>
    {
        res = handle->iic_init();                                                   /* iic init */
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	4798      	blx	r3
 8005536:	4603      	mov	r3, r0
 8005538:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 800553a:	7afb      	ldrb	r3, [r7, #11]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d013      	beq.n	8005568 <mpu6500_init+0x128>
        {
            handle->debug_print("mpu6500: iic init failed.\n");                     /* iic init failed */
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005544:	484d      	ldr	r0, [pc, #308]	@ (800567c <mpu6500_init+0x23c>)
 8005546:	4798      	blx	r3
           
            return 1;                                                               /* return error */
 8005548:	2301      	movs	r3, #1
 800554a:	e07e      	b.n	800564a <mpu6500_init+0x20a>
        }
    }
    else                                                                            /* if spi interface */
    {
        res = handle->spi_init();                                                   /* spi init */
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	4798      	blx	r3
 8005552:	4603      	mov	r3, r0
 8005554:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 8005556:	7afb      	ldrb	r3, [r7, #11]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <mpu6500_init+0x128>
        {
            handle->debug_print("mpu6500: spi init failed.\n");                     /* spi init failed */
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005560:	4847      	ldr	r0, [pc, #284]	@ (8005680 <mpu6500_init+0x240>)
 8005562:	4798      	blx	r3
           
            return 1;                                                               /* return error */
 8005564:	2301      	movs	r3, #1
 8005566:	e070      	b.n	800564a <mpu6500_init+0x20a>
        }
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_WHO_AM_I, &prev, 1);                   /* read who am I */
 8005568:	f107 020a 	add.w	r2, r7, #10
 800556c:	2301      	movs	r3, #1
 800556e:	2175      	movs	r1, #117	@ 0x75
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff feb7 	bl	80052e4 <a_mpu6500_read>
 8005576:	4603      	mov	r3, r0
 8005578:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 800557a:	7afb      	ldrb	r3, [r7, #11]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d008      	beq.n	8005592 <mpu6500_init+0x152>
    {
        handle->debug_print("mpu6500: read who am i failed.\n");                    /* read who am I failed */
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005584:	483f      	ldr	r0, [pc, #252]	@ (8005684 <mpu6500_init+0x244>)
 8005586:	4798      	blx	r3
        (void)a_mpu6500_deinit(handle);                                             /* iic or spi deinit */
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff ff0d 	bl	80053a8 <a_mpu6500_deinit>
        
        return 5;                                                                   /* return error */
 800558e:	2305      	movs	r3, #5
 8005590:	e05b      	b.n	800564a <mpu6500_init+0x20a>
    }
    if (prev != 0x70)                                                               /* check the id */
 8005592:	7abb      	ldrb	r3, [r7, #10]
 8005594:	2b70      	cmp	r3, #112	@ 0x70
 8005596:	d008      	beq.n	80055aa <mpu6500_init+0x16a>
    {
        handle->debug_print("mpu6500: id is invalid.\n");                           /* id is invalid */
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559c:	483a      	ldr	r0, [pc, #232]	@ (8005688 <mpu6500_init+0x248>)
 800559e:	4798      	blx	r3
        (void)a_mpu6500_deinit(handle);                                             /* iic or spi deinit */
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff ff01 	bl	80053a8 <a_mpu6500_deinit>
        
        return 5;                                                                   /* return error */
 80055a6:	2305      	movs	r3, #5
 80055a8:	e04f      	b.n	800564a <mpu6500_init+0x20a>
    }
    
    prev = 1 << 7;                                                                  /* reset the device */
 80055aa:	2380      	movs	r3, #128	@ 0x80
 80055ac:	72bb      	strb	r3, [r7, #10]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, &prev, 1);                /* write pwr mgmt 1 */
 80055ae:	f107 020a 	add.w	r2, r7, #10
 80055b2:	2301      	movs	r3, #1
 80055b4:	216b      	movs	r1, #107	@ 0x6b
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7ff fec5 	bl	8005346 <a_mpu6500_write>
 80055bc:	4603      	mov	r3, r0
 80055be:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 80055c0:	7afb      	ldrb	r3, [r7, #11]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d008      	beq.n	80055d8 <mpu6500_init+0x198>
    {
        handle->debug_print("mpu6500: write pwr mgmt 1 failed.\n");                 /* write pwr mgmt 1 failed */
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ca:	4830      	ldr	r0, [pc, #192]	@ (800568c <mpu6500_init+0x24c>)
 80055cc:	4798      	blx	r3
        (void)a_mpu6500_deinit(handle);                                             /* iic or spi deinit */
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7ff feea 	bl	80053a8 <a_mpu6500_deinit>
        
        return 4;                                                                   /* return error */
 80055d4:	2304      	movs	r3, #4
 80055d6:	e038      	b.n	800564a <mpu6500_init+0x20a>
    }
    handle->delay_ms(10);                                                           /* delay 10 ms */
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055dc:	200a      	movs	r0, #10
 80055de:	4798      	blx	r3
    timeout = 100;                                                                  /* set the timeout 1000 ms */
 80055e0:	2364      	movs	r3, #100	@ 0x64
 80055e2:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 80055e4:	e029      	b.n	800563a <mpu6500_init+0x1fa>
    {
        res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, &prev, 1);             /* read pwr mgmt 1 */
 80055e6:	f107 020a 	add.w	r2, r7, #10
 80055ea:	2301      	movs	r3, #1
 80055ec:	216b      	movs	r1, #107	@ 0x6b
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff fe78 	bl	80052e4 <a_mpu6500_read>
 80055f4:	4603      	mov	r3, r0
 80055f6:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 80055f8:	7afb      	ldrb	r3, [r7, #11]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d008      	beq.n	8005610 <mpu6500_init+0x1d0>
        {
            handle->debug_print("mpu6500: read pwr mgmt 1 failed.\n");              /* read pwr mgmt 1 failed */
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005602:	4823      	ldr	r0, [pc, #140]	@ (8005690 <mpu6500_init+0x250>)
 8005604:	4798      	blx	r3
            (void)a_mpu6500_deinit(handle);                                         /* iic or spi deinit */
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7ff fece 	bl	80053a8 <a_mpu6500_deinit>
            
            return 4;                                                               /* return error */
 800560c:	2304      	movs	r3, #4
 800560e:	e01c      	b.n	800564a <mpu6500_init+0x20a>
        }
        if ((prev & (1 << 7)) == 0)                                                 /* check the result */
 8005610:	7abb      	ldrb	r3, [r7, #10]
 8005612:	b25b      	sxtb	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	db09      	blt.n	800562c <mpu6500_init+0x1ec>
        {
            handle->inited = 1;                                                     /* flag the inited bit */
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            handle->dmp_inited = 0;                                                 /* flag closed */
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            
            return 0;                                                               /* success return 0 */
 8005628:	2300      	movs	r3, #0
 800562a:	e00e      	b.n	800564a <mpu6500_init+0x20a>
        }
        handle->delay_ms(10);                                                       /* delay 10 ms */
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005630:	200a      	movs	r0, #10
 8005632:	4798      	blx	r3
        timeout--;                                                                  /* timeout-- */
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	3b01      	subs	r3, #1
 8005638:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1d2      	bne.n	80055e6 <mpu6500_init+0x1a6>
    }
    
    handle->debug_print("mpu6500: reset failed.\n");                                /* reset failed */
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005644:	4813      	ldr	r0, [pc, #76]	@ (8005694 <mpu6500_init+0x254>)
 8005646:	4798      	blx	r3
   
    return 4;                                                                       /* return error */
 8005648:	2304      	movs	r3, #4
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	0801edfc 	.word	0x0801edfc
 8005658:	0801ee18 	.word	0x0801ee18
 800565c:	0801ee38 	.word	0x0801ee38
 8005660:	0801ee54 	.word	0x0801ee54
 8005664:	0801ee74 	.word	0x0801ee74
 8005668:	0801ee90 	.word	0x0801ee90
 800566c:	0801eeb0 	.word	0x0801eeb0
 8005670:	0801eecc 	.word	0x0801eecc
 8005674:	0801eeec 	.word	0x0801eeec
 8005678:	0801ef08 	.word	0x0801ef08
 800567c:	0801ef2c 	.word	0x0801ef2c
 8005680:	0801ef48 	.word	0x0801ef48
 8005684:	0801ef64 	.word	0x0801ef64
 8005688:	0801ef84 	.word	0x0801ef84
 800568c:	0801efa0 	.word	0x0801efa0
 8005690:	0801efc4 	.word	0x0801efc4
 8005694:	0801efe8 	.word	0x0801efe8

08005698 <mpu6500_deinit>:
 *            - 3 handle is not initialized
 *            - 4 enter sleep mode failed
 * @note      none
 */
uint8_t mpu6500_deinit(mpu6500_handle_t *handle)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                         /* check handle */
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <mpu6500_deinit+0x12>
    {
        return 2;                                                               /* return error */
 80056a6:	2302      	movs	r3, #2
 80056a8:	e031      	b.n	800570e <mpu6500_deinit+0x76>
    }
    if (handle->inited != 1)                                                    /* check handle initialization */
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d001      	beq.n	80056b8 <mpu6500_deinit+0x20>
    {
        return 3;                                                               /* return error */
 80056b4:	2303      	movs	r3, #3
 80056b6:	e02a      	b.n	800570e <mpu6500_deinit+0x76>
    }
    
    prev = (1 << 6) | (1 << 3) | (7 << 0);                                      /* enter sleep mode */
 80056b8:	234f      	movs	r3, #79	@ 0x4f
 80056ba:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, &prev, 1);            /* write pwr mgmt 1 */
 80056bc:	f107 020e 	add.w	r2, r7, #14
 80056c0:	2301      	movs	r3, #1
 80056c2:	216b      	movs	r1, #107	@ 0x6b
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff fe3e 	bl	8005346 <a_mpu6500_write>
 80056ca:	4603      	mov	r3, r0
 80056cc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                               /* check the result */
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d005      	beq.n	80056e0 <mpu6500_deinit+0x48>
    {
        handle->debug_print("mpu6500: write pwr mgmt 1 failed.\n");             /* write pwr mgmt 1 failed */
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d8:	480f      	ldr	r0, [pc, #60]	@ (8005718 <mpu6500_deinit+0x80>)
 80056da:	4798      	blx	r3
       
        return 4;                                                               /* return error */
 80056dc:	2304      	movs	r3, #4
 80056de:	e016      	b.n	800570e <mpu6500_deinit+0x76>
    }
    res = a_mpu6500_deinit(handle);                                             /* deinit */
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff fe61 	bl	80053a8 <a_mpu6500_deinit>
 80056e6:	4603      	mov	r3, r0
 80056e8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                               /* check the result */
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d005      	beq.n	80056fc <mpu6500_deinit+0x64>
    {
        handle->debug_print("mpu6500: deinit failed.\n");                       /* deinit failed */
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f4:	4809      	ldr	r0, [pc, #36]	@ (800571c <mpu6500_deinit+0x84>)
 80056f6:	4798      	blx	r3
       
        return 1;                                                               /* return error */
 80056f8:	2301      	movs	r3, #1
 80056fa:	e008      	b.n	800570e <mpu6500_deinit+0x76>
    }
    handle->inited = 0;                                                         /* flag closed */
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    handle->dmp_inited = 0;                                                     /* flag closed */
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    
    return 0;                                                                   /* success return 0 */
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	0801efa0 	.word	0x0801efa0
 800571c:	0801f000 	.word	0x0801f000

08005720 <mpu6500_read>:
uint8_t mpu6500_read(mpu6500_handle_t *handle,
                     int16_t (*accel_raw)[3], float (*accel_g)[3],
                     int16_t (*gyro_raw)[3], float (*gyro_dps)[3],
                     uint16_t *len
                    )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
 800572c:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t prev;
    uint8_t accel_conf;
    uint8_t gyro_conf;
    
    if (handle == NULL)                                                                            /* check handle */
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d102      	bne.n	800573a <mpu6500_read+0x1a>
    {
        return 2;                                                                                  /* return error */
 8005734:	2302      	movs	r3, #2
 8005736:	f000 be88 	b.w	800644a <mpu6500_read+0xd2a>
    }
    if (handle->inited != 1)                                                                       /* check handle initialization */
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005740:	2b01      	cmp	r3, #1
 8005742:	d002      	beq.n	800574a <mpu6500_read+0x2a>
    {
        return 3;                                                                                  /* return error */
 8005744:	2303      	movs	r3, #3
 8005746:	f000 be80 	b.w	800644a <mpu6500_read+0xd2a>
    }
    if ((*len) == 0)                                                                               /* check length */
 800574a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d106      	bne.n	8005760 <mpu6500_read+0x40>
    {
        handle->debug_print("mpu6500: length is zero.\n");                                         /* length is zero */
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005756:	486a      	ldr	r0, [pc, #424]	@ (8005900 <mpu6500_read+0x1e0>)
 8005758:	4798      	blx	r3
                                                                                                  
        return 4;                                                                                  /* return error */
 800575a:	2304      	movs	r3, #4
 800575c:	f000 be75 	b.w	800644a <mpu6500_read+0xd2a>
    }
    if (handle->dmp_inited != 0)                                                                   /* check dmp initialization */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005766:	2b00      	cmp	r3, #0
 8005768:	d006      	beq.n	8005778 <mpu6500_read+0x58>
    {
        handle->debug_print("mpu6500: dmp is running.\n");                                         /* dmp is running */
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576e:	4865      	ldr	r0, [pc, #404]	@ (8005904 <mpu6500_read+0x1e4>)
 8005770:	4798      	blx	r3
        
        return 5;                                                                                  /* return error */
 8005772:	2305      	movs	r3, #5
 8005774:	f000 be69 	b.w	800644a <mpu6500_read+0xd2a>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);                      /* read config */
 8005778:	f107 0219 	add.w	r2, r7, #25
 800577c:	2301      	movs	r3, #1
 800577e:	216a      	movs	r1, #106	@ 0x6a
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f7ff fdaf 	bl	80052e4 <a_mpu6500_read>
 8005786:	4603      	mov	r3, r0
 8005788:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 800578a:	7f7b      	ldrb	r3, [r7, #29]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d006      	beq.n	800579e <mpu6500_read+0x7e>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                                  /* read user ctrl failed */
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005794:	485c      	ldr	r0, [pc, #368]	@ (8005908 <mpu6500_read+0x1e8>)
 8005796:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 8005798:	2301      	movs	r3, #1
 800579a:	f000 be56 	b.w	800644a <mpu6500_read+0xd2a>
    }
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&accel_conf, 1);             /* read accel config */
 800579e:	f107 0218 	add.w	r2, r7, #24
 80057a2:	2301      	movs	r3, #1
 80057a4:	211c      	movs	r1, #28
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f7ff fd9c 	bl	80052e4 <a_mpu6500_read>
 80057ac:	4603      	mov	r3, r0
 80057ae:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 80057b0:	7f7b      	ldrb	r3, [r7, #29]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d006      	beq.n	80057c4 <mpu6500_read+0xa4>
    {
        handle->debug_print("mpu6500: read accel config failed.\n");                               /* read accel config failed */
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ba:	4854      	ldr	r0, [pc, #336]	@ (800590c <mpu6500_read+0x1ec>)
 80057bc:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 80057be:	2301      	movs	r3, #1
 80057c0:	f000 be43 	b.w	800644a <mpu6500_read+0xd2a>
    }
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&gyro_conf, 1);               /* read gyro config */
 80057c4:	f107 0217 	add.w	r2, r7, #23
 80057c8:	2301      	movs	r3, #1
 80057ca:	211b      	movs	r1, #27
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f7ff fd89 	bl	80052e4 <a_mpu6500_read>
 80057d2:	4603      	mov	r3, r0
 80057d4:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 80057d6:	7f7b      	ldrb	r3, [r7, #29]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d006      	beq.n	80057ea <mpu6500_read+0xca>
    {
        handle->debug_print("mpu6500: read gyro config failed.\n");                                /* read gyro config failed */
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e0:	484b      	ldr	r0, [pc, #300]	@ (8005910 <mpu6500_read+0x1f0>)
 80057e2:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 80057e4:	2301      	movs	r3, #1
 80057e6:	f000 be30 	b.w	800644a <mpu6500_read+0xd2a>
    }
    accel_conf = (accel_conf >> 3) & 0x3;                                                          /* get the accel conf */
 80057ea:	7e3b      	ldrb	r3, [r7, #24]
 80057ec:	08db      	lsrs	r3, r3, #3
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	763b      	strb	r3, [r7, #24]
    gyro_conf = (gyro_conf >> 3) & 0x3;                                                            /* get the gyro conf */
 80057f8:	7dfb      	ldrb	r3, [r7, #23]
 80057fa:	08db      	lsrs	r3, r3, #3
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	b2db      	uxtb	r3, r3
 8005804:	75fb      	strb	r3, [r7, #23]
    if ((prev & (1 << 6)) != 0)                                                                    /* if fifo mode */
 8005806:	7e7b      	ldrb	r3, [r7, #25]
 8005808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 8436 	beq.w	800607e <mpu6500_read+0x95e>
        uint8_t conf;
        uint8_t buf[2];
        uint16_t count;
        uint16_t i;
        
        res = a_mpu6500_read(handle, MPU6500_REG_FIFO_EN, (uint8_t *)&conf, 1);                    /* read fifo enable */
 8005812:	f107 0216 	add.w	r2, r7, #22
 8005816:	2301      	movs	r3, #1
 8005818:	2123      	movs	r1, #35	@ 0x23
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f7ff fd62 	bl	80052e4 <a_mpu6500_read>
 8005820:	4603      	mov	r3, r0
 8005822:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8005824:	7f7b      	ldrb	r3, [r7, #29]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d006      	beq.n	8005838 <mpu6500_read+0x118>
        {
            handle->debug_print("mpu6500: read fifo enable failed.\n");                            /* read fifo enable failed */
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582e:	4839      	ldr	r0, [pc, #228]	@ (8005914 <mpu6500_read+0x1f4>)
 8005830:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8005832:	2301      	movs	r3, #1
 8005834:	f000 be09 	b.w	800644a <mpu6500_read+0xd2a>
        }
        if (conf != 0x78)                                                                          /* check the conf */
 8005838:	7dbb      	ldrb	r3, [r7, #22]
 800583a:	2b78      	cmp	r3, #120	@ 0x78
 800583c:	d006      	beq.n	800584c <mpu6500_read+0x12c>
        {
            handle->debug_print("mpu6500: fifo conf is error.\n");                                 /* fifo conf is error */
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005842:	4835      	ldr	r0, [pc, #212]	@ (8005918 <mpu6500_read+0x1f8>)
 8005844:	4798      	blx	r3
                                                                                                      
            return 6;                                                                              /* return error */
 8005846:	2306      	movs	r3, #6
 8005848:	f000 bdff 	b.w	800644a <mpu6500_read+0xd2a>
        }
        
        res = a_mpu6500_read(handle, MPU6500_REG_FIFO_COUNTH, (uint8_t *)buf, 2);                  /* read fifo count */
 800584c:	f107 0214 	add.w	r2, r7, #20
 8005850:	2302      	movs	r3, #2
 8005852:	2172      	movs	r1, #114	@ 0x72
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f7ff fd45 	bl	80052e4 <a_mpu6500_read>
 800585a:	4603      	mov	r3, r0
 800585c:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 800585e:	7f7b      	ldrb	r3, [r7, #29]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d006      	beq.n	8005872 <mpu6500_read+0x152>
        {
            handle->debug_print("mpu6500: read fifo count failed.\n");                             /* read fifo count failed */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005868:	482c      	ldr	r0, [pc, #176]	@ (800591c <mpu6500_read+0x1fc>)
 800586a:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 800586c:	2301      	movs	r3, #1
 800586e:	f000 bdec 	b.w	800644a <mpu6500_read+0xd2a>
        }
        
        count = (uint16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                      /* set count */
 8005872:	7d3b      	ldrb	r3, [r7, #20]
 8005874:	b21b      	sxth	r3, r3
 8005876:	021b      	lsls	r3, r3, #8
 8005878:	b21a      	sxth	r2, r3
 800587a:	7d7b      	ldrb	r3, [r7, #21]
 800587c:	b21b      	sxth	r3, r3
 800587e:	4313      	orrs	r3, r2
 8005880:	b21b      	sxth	r3, r3
 8005882:	837b      	strh	r3, [r7, #26]
        count = (count < 1024) ? count : 1024;                                                     /* just the counter */
 8005884:	8b7b      	ldrh	r3, [r7, #26]
 8005886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800588a:	bf28      	it	cs
 800588c:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8005890:	837b      	strh	r3, [r7, #26]
        count = (count < ((*len) * 12)) ? count : ((*len) * 12);                                   /* just outer buffer size */
 8005892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	4613      	mov	r3, r2
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	4413      	add	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	461a      	mov	r2, r3
 80058a2:	8b7b      	ldrh	r3, [r7, #26]
 80058a4:	4293      	cmp	r3, r2
 80058a6:	bfa8      	it	ge
 80058a8:	4613      	movge	r3, r2
 80058aa:	837b      	strh	r3, [r7, #26]
        count = (count / 12) * 12;                                                                 /* 12 times */
 80058ac:	8b7b      	ldrh	r3, [r7, #26]
 80058ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005920 <mpu6500_read+0x200>)
 80058b0:	fba2 2303 	umull	r2, r3, r2, r3
 80058b4:	08db      	lsrs	r3, r3, #3
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	461a      	mov	r2, r3
 80058ba:	0052      	lsls	r2, r2, #1
 80058bc:	4413      	add	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	837b      	strh	r3, [r7, #26]
        *len = count / 12;                                                                         /* set the output length */
 80058c2:	8b7b      	ldrh	r3, [r7, #26]
 80058c4:	4a16      	ldr	r2, [pc, #88]	@ (8005920 <mpu6500_read+0x200>)
 80058c6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ca:	08db      	lsrs	r3, r3, #3
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d0:	801a      	strh	r2, [r3, #0]
        res = a_mpu6500_read(handle, MPU6500_REG_R_W, handle->buf, count);                         /* read data */
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80058d8:	8b7b      	ldrh	r3, [r7, #26]
 80058da:	2174      	movs	r1, #116	@ 0x74
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f7ff fd01 	bl	80052e4 <a_mpu6500_read>
 80058e2:	4603      	mov	r3, r0
 80058e4:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 80058e6:	7f7b      	ldrb	r3, [r7, #29]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d006      	beq.n	80058fa <mpu6500_read+0x1da>
        {
            handle->debug_print("mpu6500: read failed.\n");                                        /* read failed */
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f0:	480c      	ldr	r0, [pc, #48]	@ (8005924 <mpu6500_read+0x204>)
 80058f2:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 80058f4:	2301      	movs	r3, #1
 80058f6:	f000 bda8 	b.w	800644a <mpu6500_read+0xd2a>
        }
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 80058fa:	2300      	movs	r3, #0
 80058fc:	83fb      	strh	r3, [r7, #30]
 80058fe:	e3b6      	b.n	800606e <mpu6500_read+0x94e>
 8005900:	0801f01c 	.word	0x0801f01c
 8005904:	0801eaec 	.word	0x0801eaec
 8005908:	0801edb4 	.word	0x0801edb4
 800590c:	0801ed6c 	.word	0x0801ed6c
 8005910:	0801ed90 	.word	0x0801ed90
 8005914:	0801f038 	.word	0x0801f038
 8005918:	0801f05c 	.word	0x0801f05c
 800591c:	0801ecf0 	.word	0x0801ecf0
 8005920:	aaaaaaab 	.word	0xaaaaaaab
 8005924:	0801ed14 	.word	0x0801ed14
 8005928:	46800000 	.word	0x46800000
 800592c:	46000000 	.word	0x46000000
        {
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) | 
 8005930:	8bfa      	ldrh	r2, [r7, #30]
 8005932:	4613      	mov	r3, r2
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	461a      	mov	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005944:	b21b      	sxth	r3, r3
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 1];                                  /* set raw accel x */
 800594a:	8bfa      	ldrh	r2, [r7, #30]
 800594c:	4613      	mov	r3, r2
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	4413      	add	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	3301      	adds	r3, #1
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4413      	add	r3, r2
 800595a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800595e:	b219      	sxth	r1, r3
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) | 
 8005960:	8bfa      	ldrh	r2, [r7, #30]
 8005962:	4613      	mov	r3, r2
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	4413      	add	r3, r2
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	461a      	mov	r2, r3
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	4413      	add	r3, r2
 8005970:	ea40 0201 	orr.w	r2, r0, r1
 8005974:	b212      	sxth	r2, r2
 8005976:	801a      	strh	r2, [r3, #0]
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) | 
 8005978:	8bfa      	ldrh	r2, [r7, #30]
 800597a:	4613      	mov	r3, r2
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	3302      	adds	r3, #2
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800598c:	b21b      	sxth	r3, r3
 800598e:	021b      	lsls	r3, r3, #8
 8005990:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 3];                                  /* set raw accel y */
 8005992:	8bfa      	ldrh	r2, [r7, #30]
 8005994:	4613      	mov	r3, r2
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	4413      	add	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	3303      	adds	r3, #3
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4413      	add	r3, r2
 80059a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059a6:	b219      	sxth	r1, r3
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) | 
 80059a8:	8bfa      	ldrh	r2, [r7, #30]
 80059aa:	4613      	mov	r3, r2
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	4413      	add	r3, r2
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	461a      	mov	r2, r3
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	4413      	add	r3, r2
 80059b8:	ea40 0201 	orr.w	r2, r0, r1
 80059bc:	b212      	sxth	r2, r2
 80059be:	805a      	strh	r2, [r3, #2]
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) | 
 80059c0:	8bfa      	ldrh	r2, [r7, #30]
 80059c2:	4613      	mov	r3, r2
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	4413      	add	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	3304      	adds	r3, #4
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059d4:	b21b      	sxth	r3, r3
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 5];                                  /* set raw accel z */
 80059da:	8bfa      	ldrh	r2, [r7, #30]
 80059dc:	4613      	mov	r3, r2
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	4413      	add	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	3305      	adds	r3, #5
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	4413      	add	r3, r2
 80059ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059ee:	b219      	sxth	r1, r3
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) | 
 80059f0:	8bfa      	ldrh	r2, [r7, #30]
 80059f2:	4613      	mov	r3, r2
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	4413      	add	r3, r2
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	461a      	mov	r2, r3
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4413      	add	r3, r2
 8005a00:	ea40 0201 	orr.w	r2, r0, r1
 8005a04:	b212      	sxth	r2, r2
 8005a06:	809a      	strh	r2, [r3, #4]
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) | 
 8005a08:	8bfa      	ldrh	r2, [r7, #30]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	4413      	add	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	3306      	adds	r3, #6
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4413      	add	r3, r2
 8005a18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a1c:	b21b      	sxth	r3, r3
 8005a1e:	021b      	lsls	r3, r3, #8
 8005a20:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 7];                                   /* set raw gyro x */
 8005a22:	8bfa      	ldrh	r2, [r7, #30]
 8005a24:	4613      	mov	r3, r2
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	4413      	add	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	3307      	adds	r3, #7
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4413      	add	r3, r2
 8005a32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a36:	b219      	sxth	r1, r3
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) | 
 8005a38:	8bfa      	ldrh	r2, [r7, #30]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	4413      	add	r3, r2
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	461a      	mov	r2, r3
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	4413      	add	r3, r2
 8005a48:	ea40 0201 	orr.w	r2, r0, r1
 8005a4c:	b212      	sxth	r2, r2
 8005a4e:	801a      	strh	r2, [r3, #0]
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) | 
 8005a50:	8bfa      	ldrh	r2, [r7, #30]
 8005a52:	4613      	mov	r3, r2
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	4413      	add	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	3308      	adds	r3, #8
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a64:	b21b      	sxth	r3, r3
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 9];                                   /* set raw gyro y */
 8005a6a:	8bfa      	ldrh	r2, [r7, #30]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	4413      	add	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	3309      	adds	r3, #9
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a7e:	b219      	sxth	r1, r3
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) | 
 8005a80:	8bfa      	ldrh	r2, [r7, #30]
 8005a82:	4613      	mov	r3, r2
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	4413      	add	r3, r2
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	4413      	add	r3, r2
 8005a90:	ea40 0201 	orr.w	r2, r0, r1
 8005a94:	b212      	sxth	r2, r2
 8005a96:	805a      	strh	r2, [r3, #2]
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) | 
 8005a98:	8bfa      	ldrh	r2, [r7, #30]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	4413      	add	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	330a      	adds	r3, #10
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005aac:	b21b      	sxth	r3, r3
 8005aae:	021b      	lsls	r3, r3, #8
 8005ab0:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 11];                                  /* set raw gyro z */
 8005ab2:	8bfa      	ldrh	r2, [r7, #30]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	4413      	add	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	330b      	adds	r3, #11
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ac6:	b219      	sxth	r1, r3
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) | 
 8005ac8:	8bfa      	ldrh	r2, [r7, #30]
 8005aca:	4613      	mov	r3, r2
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	4413      	add	r3, r2
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	ea40 0201 	orr.w	r2, r0, r1
 8005adc:	b212      	sxth	r2, r2
 8005ade:	809a      	strh	r2, [r3, #4]
            
            if (accel_conf == 0)                                                                   /* ±2g */
 8005ae0:	7e3b      	ldrb	r3, [r7, #24]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d154      	bne.n	8005b90 <mpu6500_read+0x470>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 16384.0f;                               /* set accel x */
 8005ae6:	8bfa      	ldrh	r2, [r7, #30]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	4413      	add	r3, r2
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	461a      	mov	r2, r3
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	4413      	add	r3, r2
 8005af6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005afa:	ee07 3a90 	vmov	s15, r3
 8005afe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b02:	8bfa      	ldrh	r2, [r7, #30]
 8005b04:	4613      	mov	r3, r2
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4413      	add	r3, r2
 8005b12:	ed5f 6a7b 	vldr	s13, [pc, #-492]	@ 8005928 <mpu6500_read+0x208>
 8005b16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b1a:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 16384.0f;                               /* set accel y */
 8005b1e:	8bfa      	ldrh	r2, [r7, #30]
 8005b20:	4613      	mov	r3, r2
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	4413      	add	r3, r2
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	461a      	mov	r2, r3
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b3a:	8bfa      	ldrh	r2, [r7, #30]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	461a      	mov	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4413      	add	r3, r2
 8005b4a:	ed5f 6a89 	vldr	s13, [pc, #-548]	@ 8005928 <mpu6500_read+0x208>
 8005b4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b52:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 16384.0f;                               /* set accel z */
 8005b56:	8bfa      	ldrh	r2, [r7, #30]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	4413      	add	r3, r2
 8005b5e:	005b      	lsls	r3, r3, #1
 8005b60:	461a      	mov	r2, r3
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	4413      	add	r3, r2
 8005b66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b72:	8bfa      	ldrh	r2, [r7, #30]
 8005b74:	4613      	mov	r3, r2
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	4413      	add	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4413      	add	r3, r2
 8005b82:	ed5f 6a97 	vldr	s13, [pc, #-604]	@ 8005928 <mpu6500_read+0x208>
 8005b86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b8a:	edc3 7a02 	vstr	s15, [r3, #8]
 8005b8e:	e103      	b.n	8005d98 <mpu6500_read+0x678>
            }
            else if (accel_conf == 1)                                                              /* ±4g */
 8005b90:	7e3b      	ldrb	r3, [r7, #24]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d154      	bne.n	8005c40 <mpu6500_read+0x520>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 8192.0f;                                /* set accel x */
 8005b96:	8bfa      	ldrh	r2, [r7, #30]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	4413      	add	r3, r2
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bb2:	8bfa      	ldrh	r2, [r7, #30]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	ed5f 6aa6 	vldr	s13, [pc, #-664]	@ 800592c <mpu6500_read+0x20c>
 8005bc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005bca:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 8192.0f;                                /* set accel y */
 8005bce:	8bfa      	ldrh	r2, [r7, #30]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	4413      	add	r3, r2
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	461a      	mov	r2, r3
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bea:	8bfa      	ldrh	r2, [r7, #30]
 8005bec:	4613      	mov	r3, r2
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	4413      	add	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	ed5f 6ab4 	vldr	s13, [pc, #-720]	@ 800592c <mpu6500_read+0x20c>
 8005bfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c02:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 8192.0f;                                /* set accel z */
 8005c06:	8bfa      	ldrh	r2, [r7, #30]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	4413      	add	r3, r2
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	461a      	mov	r2, r3
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	4413      	add	r3, r2
 8005c16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c22:	8bfa      	ldrh	r2, [r7, #30]
 8005c24:	4613      	mov	r3, r2
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	4413      	add	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4413      	add	r3, r2
 8005c32:	ed5f 6ac2 	vldr	s13, [pc, #-776]	@ 800592c <mpu6500_read+0x20c>
 8005c36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c3a:	edc3 7a02 	vstr	s15, [r3, #8]
 8005c3e:	e0ab      	b.n	8005d98 <mpu6500_read+0x678>
            }
            else if (accel_conf == 2)                                                              /* ±8g */
 8005c40:	7e3b      	ldrb	r3, [r7, #24]
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d154      	bne.n	8005cf0 <mpu6500_read+0x5d0>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 4096.0f;                                /* set accel x */
 8005c46:	8bfa      	ldrh	r2, [r7, #30]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	4413      	add	r3, r2
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	461a      	mov	r2, r3
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	4413      	add	r3, r2
 8005c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c5a:	ee07 3a90 	vmov	s15, r3
 8005c5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c62:	8bfa      	ldrh	r2, [r7, #30]
 8005c64:	4613      	mov	r3, r2
 8005c66:	005b      	lsls	r3, r3, #1
 8005c68:	4413      	add	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4413      	add	r3, r2
 8005c72:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8005fa8 <mpu6500_read+0x888>
 8005c76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c7a:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 4096.0f;                                /* set accel y */
 8005c7e:	8bfa      	ldrh	r2, [r7, #30]
 8005c80:	4613      	mov	r3, r2
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	4413      	add	r3, r2
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	461a      	mov	r2, r3
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c9a:	8bfa      	ldrh	r2, [r7, #30]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4413      	add	r3, r2
 8005caa:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8005fa8 <mpu6500_read+0x888>
 8005cae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005cb2:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 4096.0f;                                /* set accel z */
 8005cb6:	8bfa      	ldrh	r2, [r7, #30]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	4413      	add	r3, r2
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005cca:	ee07 3a90 	vmov	s15, r3
 8005cce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cd2:	8bfa      	ldrh	r2, [r7, #30]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	4413      	add	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	461a      	mov	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8005fa8 <mpu6500_read+0x888>
 8005ce6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005cea:	edc3 7a02 	vstr	s15, [r3, #8]
 8005cee:	e053      	b.n	8005d98 <mpu6500_read+0x678>
            }
            else                                                                                   /* ±16g */
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 2048.0f;                                /* set accel x */
 8005cf0:	8bfa      	ldrh	r2, [r7, #30]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	4413      	add	r3, r2
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d04:	ee07 3a90 	vmov	s15, r3
 8005d08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d0c:	8bfa      	ldrh	r2, [r7, #30]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	461a      	mov	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8005fac <mpu6500_read+0x88c>
 8005d20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d24:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 2048.0f;                                /* set accel y */
 8005d28:	8bfa      	ldrh	r2, [r7, #30]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	4413      	add	r3, r2
 8005d30:	005b      	lsls	r3, r3, #1
 8005d32:	461a      	mov	r2, r3
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	4413      	add	r3, r2
 8005d38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005d3c:	ee07 3a90 	vmov	s15, r3
 8005d40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d44:	8bfa      	ldrh	r2, [r7, #30]
 8005d46:	4613      	mov	r3, r2
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	4413      	add	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	461a      	mov	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4413      	add	r3, r2
 8005d54:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8005fac <mpu6500_read+0x88c>
 8005d58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d5c:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 2048.0f;                                /* set accel z */
 8005d60:	8bfa      	ldrh	r2, [r7, #30]
 8005d62:	4613      	mov	r3, r2
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	4413      	add	r3, r2
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005d74:	ee07 3a90 	vmov	s15, r3
 8005d78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d7c:	8bfa      	ldrh	r2, [r7, #30]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	461a      	mov	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8005fac <mpu6500_read+0x88c>
 8005d90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d94:	edc3 7a02 	vstr	s15, [r3, #8]
            }
            
            if (gyro_conf == 0)                                                                    /* ±250dps */
 8005d98:	7dfb      	ldrb	r3, [r7, #23]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d154      	bne.n	8005e48 <mpu6500_read+0x728>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 131.0f;                                 /* set gyro x */
 8005d9e:	8bfa      	ldrh	r2, [r7, #30]
 8005da0:	4613      	mov	r3, r2
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	4413      	add	r3, r2
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	461a      	mov	r2, r3
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	4413      	add	r3, r2
 8005dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dba:	8bfa      	ldrh	r2, [r7, #30]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc8:	4413      	add	r3, r2
 8005dca:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8005fb0 <mpu6500_read+0x890>
 8005dce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005dd2:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 131.0f;                                 /* set gyro y */
 8005dd6:	8bfa      	ldrh	r2, [r7, #30]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	4413      	add	r3, r2
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	461a      	mov	r2, r3
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	4413      	add	r3, r2
 8005de6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005dea:	ee07 3a90 	vmov	s15, r3
 8005dee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005df2:	8bfa      	ldrh	r2, [r7, #30]
 8005df4:	4613      	mov	r3, r2
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e00:	4413      	add	r3, r2
 8005e02:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8005fb0 <mpu6500_read+0x890>
 8005e06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e0a:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 131.0f;                                 /* set gyro z */
 8005e0e:	8bfa      	ldrh	r2, [r7, #30]
 8005e10:	4613      	mov	r3, r2
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	4413      	add	r3, r2
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	461a      	mov	r2, r3
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e2a:	8bfa      	ldrh	r2, [r7, #30]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	4413      	add	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	461a      	mov	r2, r3
 8005e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e38:	4413      	add	r3, r2
 8005e3a:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8005fb0 <mpu6500_read+0x890>
 8005e3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e42:	edc3 7a02 	vstr	s15, [r3, #8]
 8005e46:	e10f      	b.n	8006068 <mpu6500_read+0x948>
            }
            else if (gyro_conf == 1)                                                               /* ±500dps */
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d154      	bne.n	8005ef8 <mpu6500_read+0x7d8>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 65.5f;                                  /* set gyro x */
 8005e4e:	8bfa      	ldrh	r2, [r7, #30]
 8005e50:	4613      	mov	r3, r2
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	4413      	add	r3, r2
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	461a      	mov	r2, r3
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e62:	ee07 3a90 	vmov	s15, r3
 8005e66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e6a:	8bfa      	ldrh	r2, [r7, #30]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	4413      	add	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	461a      	mov	r2, r3
 8005e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e78:	4413      	add	r3, r2
 8005e7a:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8005fb4 <mpu6500_read+0x894>
 8005e7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e82:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 65.5f;                                  /* set gyro y */
 8005e86:	8bfa      	ldrh	r2, [r7, #30]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	4413      	add	r3, r2
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	461a      	mov	r2, r3
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	4413      	add	r3, r2
 8005e96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ea2:	8bfa      	ldrh	r2, [r7, #30]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	4413      	add	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	461a      	mov	r2, r3
 8005eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb0:	4413      	add	r3, r2
 8005eb2:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8005fb4 <mpu6500_read+0x894>
 8005eb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005eba:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 65.5f;                                  /* set gyro z */
 8005ebe:	8bfa      	ldrh	r2, [r7, #30]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	4413      	add	r3, r2
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	461a      	mov	r2, r3
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005eda:	8bfa      	ldrh	r2, [r7, #30]
 8005edc:	4613      	mov	r3, r2
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee8:	4413      	add	r3, r2
 8005eea:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005fb4 <mpu6500_read+0x894>
 8005eee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ef2:	edc3 7a02 	vstr	s15, [r3, #8]
 8005ef6:	e0b7      	b.n	8006068 <mpu6500_read+0x948>
            }
            else if (gyro_conf == 2)                                                               /* ±1000dps */
 8005ef8:	7dfb      	ldrb	r3, [r7, #23]
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d160      	bne.n	8005fc0 <mpu6500_read+0x8a0>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 32.8f;                                  /* set gyro x */
 8005efe:	8bfa      	ldrh	r2, [r7, #30]
 8005f00:	4613      	mov	r3, r2
 8005f02:	005b      	lsls	r3, r3, #1
 8005f04:	4413      	add	r3, r2
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	461a      	mov	r2, r3
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f1a:	8bfa      	ldrh	r2, [r7, #30]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	4413      	add	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	461a      	mov	r2, r3
 8005f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f28:	4413      	add	r3, r2
 8005f2a:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8005fb8 <mpu6500_read+0x898>
 8005f2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f32:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 32.8f;                                  /* set gyro y */
 8005f36:	8bfa      	ldrh	r2, [r7, #30]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	4413      	add	r3, r2
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	461a      	mov	r2, r3
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	4413      	add	r3, r2
 8005f46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005f4a:	ee07 3a90 	vmov	s15, r3
 8005f4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f52:	8bfa      	ldrh	r2, [r7, #30]
 8005f54:	4613      	mov	r3, r2
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	4413      	add	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f60:	4413      	add	r3, r2
 8005f62:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8005fb8 <mpu6500_read+0x898>
 8005f66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f6a:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 32.8f;                                  /* set gyro z */
 8005f6e:	8bfa      	ldrh	r2, [r7, #30]
 8005f70:	4613      	mov	r3, r2
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	4413      	add	r3, r2
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	461a      	mov	r2, r3
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f8a:	8bfa      	ldrh	r2, [r7, #30]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	4413      	add	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	461a      	mov	r2, r3
 8005f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f98:	4413      	add	r3, r2
 8005f9a:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8005fb8 <mpu6500_read+0x898>
 8005f9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005fa2:	edc3 7a02 	vstr	s15, [r3, #8]
 8005fa6:	e05f      	b.n	8006068 <mpu6500_read+0x948>
 8005fa8:	45800000 	.word	0x45800000
 8005fac:	45000000 	.word	0x45000000
 8005fb0:	43030000 	.word	0x43030000
 8005fb4:	42830000 	.word	0x42830000
 8005fb8:	42033333 	.word	0x42033333
 8005fbc:	41833333 	.word	0x41833333
            }
            else                                                                                   /* ±2000dps */
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 16.4f;                                  /* set gyro x */
 8005fc0:	8bfa      	ldrh	r2, [r7, #30]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	4413      	add	r3, r2
 8005fc8:	005b      	lsls	r3, r3, #1
 8005fca:	461a      	mov	r2, r3
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fd4:	ee07 3a90 	vmov	s15, r3
 8005fd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005fdc:	8bfa      	ldrh	r2, [r7, #30]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fea:	4413      	add	r3, r2
 8005fec:	ed5f 6a0d 	vldr	s13, [pc, #-52]	@ 8005fbc <mpu6500_read+0x89c>
 8005ff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ff4:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 16.4f;                                  /* set gyro y */
 8005ff8:	8bfa      	ldrh	r2, [r7, #30]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	4413      	add	r3, r2
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	461a      	mov	r2, r3
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	4413      	add	r3, r2
 8006008:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800600c:	ee07 3a90 	vmov	s15, r3
 8006010:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006014:	8bfa      	ldrh	r2, [r7, #30]
 8006016:	4613      	mov	r3, r2
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	4413      	add	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	461a      	mov	r2, r3
 8006020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006022:	4413      	add	r3, r2
 8006024:	ed5f 6a1b 	vldr	s13, [pc, #-108]	@ 8005fbc <mpu6500_read+0x89c>
 8006028:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800602c:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 16.4f;                                  /* set gyro z */
 8006030:	8bfa      	ldrh	r2, [r7, #30]
 8006032:	4613      	mov	r3, r2
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	4413      	add	r3, r2
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	461a      	mov	r2, r3
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	4413      	add	r3, r2
 8006040:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006044:	ee07 3a90 	vmov	s15, r3
 8006048:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800604c:	8bfa      	ldrh	r2, [r7, #30]
 800604e:	4613      	mov	r3, r2
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	4413      	add	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	461a      	mov	r2, r3
 8006058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605a:	4413      	add	r3, r2
 800605c:	ed5f 6a29 	vldr	s13, [pc, #-164]	@ 8005fbc <mpu6500_read+0x89c>
 8006060:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006064:	edc3 7a02 	vstr	s15, [r3, #8]
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 8006068:	8bfb      	ldrh	r3, [r7, #30]
 800606a:	3301      	adds	r3, #1
 800606c:	83fb      	strh	r3, [r7, #30]
 800606e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	8bfa      	ldrh	r2, [r7, #30]
 8006074:	429a      	cmp	r2, r3
 8006076:	f4ff ac5b 	bcc.w	8005930 <mpu6500_read+0x210>
            }
        }
        
        return 0;                                                                                  /* success return 0 */
 800607a:	2300      	movs	r3, #0
 800607c:	e1e5      	b.n	800644a <mpu6500_read+0xd2a>
    }
    else                                                                                           /* if normal mode */
    {
        *len = 1;                                                                                  /* set 1 */
 800607e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006080:	2201      	movs	r2, #1
 8006082:	801a      	strh	r2, [r3, #0]
        res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_XOUT_H, handle->buf, 14);                   /* read data */
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800608a:	230e      	movs	r3, #14
 800608c:	213b      	movs	r1, #59	@ 0x3b
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7ff f928 	bl	80052e4 <a_mpu6500_read>
 8006094:	4603      	mov	r3, r0
 8006096:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8006098:	7f7b      	ldrb	r3, [r7, #29]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d005      	beq.n	80060aa <mpu6500_read+0x98a>
        {
            handle->debug_print("mpu6500: read failed.\n");                                        /* read failed */
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a2:	48b4      	ldr	r0, [pc, #720]	@ (8006374 <mpu6500_read+0xc54>)
 80060a4:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 80060a6:	2301      	movs	r3, #1
 80060a8:	e1cf      	b.n	800644a <mpu6500_read+0xd2a>
        }
        accel_raw[0][0] = (int16_t)((uint16_t)handle->buf[0] << 8) | handle->buf[1];               /* set raw accel x */
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060b0:	b21b      	sxth	r3, r3
 80060b2:	021b      	lsls	r3, r3, #8
 80060b4:	b21a      	sxth	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060bc:	b21b      	sxth	r3, r3
 80060be:	4313      	orrs	r3, r2
 80060c0:	b21a      	sxth	r2, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	801a      	strh	r2, [r3, #0]
        accel_raw[0][1] = (int16_t)((uint16_t)handle->buf[2] << 8) | handle->buf[3];               /* set raw accel y */
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060cc:	b21b      	sxth	r3, r3
 80060ce:	021b      	lsls	r3, r3, #8
 80060d0:	b21a      	sxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80060d8:	b21b      	sxth	r3, r3
 80060da:	4313      	orrs	r3, r2
 80060dc:	b21a      	sxth	r2, r3
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	805a      	strh	r2, [r3, #2]
        accel_raw[0][2] = (int16_t)((uint16_t)handle->buf[4] << 8) | handle->buf[5];               /* set raw accel z */
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060e8:	b21b      	sxth	r3, r3
 80060ea:	021b      	lsls	r3, r3, #8
 80060ec:	b21a      	sxth	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060f4:	b21b      	sxth	r3, r3
 80060f6:	4313      	orrs	r3, r2
 80060f8:	b21a      	sxth	r2, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	809a      	strh	r2, [r3, #4]
        gyro_raw[0][0] = (int16_t)((uint16_t)handle->buf[8] << 8) | handle->buf[9];                /* set raw gyro x */
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8006104:	b21b      	sxth	r3, r3
 8006106:	021b      	lsls	r3, r3, #8
 8006108:	b21a      	sxth	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8006110:	b21b      	sxth	r3, r3
 8006112:	4313      	orrs	r3, r2
 8006114:	b21a      	sxth	r2, r3
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	801a      	strh	r2, [r3, #0]
        gyro_raw[0][1] = (int16_t)((uint16_t)handle->buf[10] << 8) | handle->buf[11];              /* set raw gyro y */
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8006120:	b21b      	sxth	r3, r3
 8006122:	021b      	lsls	r3, r3, #8
 8006124:	b21a      	sxth	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800612c:	b21b      	sxth	r3, r3
 800612e:	4313      	orrs	r3, r2
 8006130:	b21a      	sxth	r2, r3
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	805a      	strh	r2, [r3, #2]
        gyro_raw[0][2] = (int16_t)((uint16_t)handle->buf[12] << 8) | handle->buf[13];              /* set raw gyro z */
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800613c:	b21b      	sxth	r3, r3
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	b21a      	sxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006148:	b21b      	sxth	r3, r3
 800614a:	4313      	orrs	r3, r2
 800614c:	b21a      	sxth	r2, r3
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	809a      	strh	r2, [r3, #4]
        
        if (accel_conf == 0)                                                                       /* ±2g */
 8006152:	7e3b      	ldrb	r3, [r7, #24]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d12a      	bne.n	80061ae <mpu6500_read+0xa8e>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 16384.0f;                                   /* set accel x */
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800615e:	ee07 3a90 	vmov	s15, r3
 8006162:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006166:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8006378 <mpu6500_read+0xc58>
 800616a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 16384.0f;                                   /* set accel y */
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006182:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8006378 <mpu6500_read+0xc58>
 8006186:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 16384.0f;                                   /* set accel z */
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800619e:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8006378 <mpu6500_read+0xc58>
 80061a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	edc3 7a02 	vstr	s15, [r3, #8]
 80061ac:	e085      	b.n	80062ba <mpu6500_read+0xb9a>
        }
        else if (accel_conf == 1)                                                                  /* ±4g */
 80061ae:	7e3b      	ldrb	r3, [r7, #24]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d12a      	bne.n	800620a <mpu6500_read+0xaea>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 8192.0f;                                    /* set accel x */
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061c2:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800637c <mpu6500_read+0xc5c>
 80061c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 8192.0f;                                    /* set accel y */
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80061d6:	ee07 3a90 	vmov	s15, r3
 80061da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061de:	eddf 6a67 	vldr	s13, [pc, #412]	@ 800637c <mpu6500_read+0xc5c>
 80061e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 8192.0f;                                    /* set accel z */
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80061f2:	ee07 3a90 	vmov	s15, r3
 80061f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061fa:	eddf 6a60 	vldr	s13, [pc, #384]	@ 800637c <mpu6500_read+0xc5c>
 80061fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	edc3 7a02 	vstr	s15, [r3, #8]
 8006208:	e057      	b.n	80062ba <mpu6500_read+0xb9a>
        }
        else if (accel_conf == 2)                                                                  /* ±8g */
 800620a:	7e3b      	ldrb	r3, [r7, #24]
 800620c:	2b02      	cmp	r3, #2
 800620e:	d12a      	bne.n	8006266 <mpu6500_read+0xb46>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 4096.0f;                                    /* set accel x */
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006216:	ee07 3a90 	vmov	s15, r3
 800621a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800621e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006380 <mpu6500_read+0xc60>
 8006222:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 4096.0f;                                    /* set accel y */
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800623a:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8006380 <mpu6500_read+0xc60>
 800623e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 4096.0f;                                    /* set accel z */
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800624e:	ee07 3a90 	vmov	s15, r3
 8006252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006256:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8006380 <mpu6500_read+0xc60>
 800625a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	edc3 7a02 	vstr	s15, [r3, #8]
 8006264:	e029      	b.n	80062ba <mpu6500_read+0xb9a>
        }
        else                                                                                       /* ±16g */
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 2048.0f;                                    /* set accel x */
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800626c:	ee07 3a90 	vmov	s15, r3
 8006270:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006274:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8006384 <mpu6500_read+0xc64>
 8006278:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 2048.0f;                                    /* set accel y */
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006288:	ee07 3a90 	vmov	s15, r3
 800628c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006290:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8006384 <mpu6500_read+0xc64>
 8006294:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 2048.0f;                                    /* set accel z */
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80062a4:	ee07 3a90 	vmov	s15, r3
 80062a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062ac:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8006384 <mpu6500_read+0xc64>
 80062b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	edc3 7a02 	vstr	s15, [r3, #8]
        }
        
        if (gyro_conf == 0)                                                                        /* ±250dps */
 80062ba:	7dfb      	ldrb	r3, [r7, #23]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d12a      	bne.n	8006316 <mpu6500_read+0xbf6>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 131.0f;                                     /* set gyro x */
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062c6:	ee07 3a90 	vmov	s15, r3
 80062ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062ce:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8006388 <mpu6500_read+0xc68>
 80062d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d8:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 131.0f;                                     /* set gyro y */
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80062e2:	ee07 3a90 	vmov	s15, r3
 80062e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062ea:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8006388 <mpu6500_read+0xc68>
 80062ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f4:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 131.0f;                                     /* set gyro z */
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006306:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8006388 <mpu6500_read+0xc68>
 800630a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800630e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006310:	edc3 7a02 	vstr	s15, [r3, #8]
 8006314:	e098      	b.n	8006448 <mpu6500_read+0xd28>
        }
        else if (gyro_conf == 1)                                                                   /* ±500dps */
 8006316:	7dfb      	ldrb	r3, [r7, #23]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d13d      	bne.n	8006398 <mpu6500_read+0xc78>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 65.5f;                                      /* set gyro x */
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006322:	ee07 3a90 	vmov	s15, r3
 8006326:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800632a:	eddf 6a18 	vldr	s13, [pc, #96]	@ 800638c <mpu6500_read+0xc6c>
 800632e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006334:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 65.5f;                                      /* set gyro y */
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800633e:	ee07 3a90 	vmov	s15, r3
 8006342:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006346:	eddf 6a11 	vldr	s13, [pc, #68]	@ 800638c <mpu6500_read+0xc6c>
 800634a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800634e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006350:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 65.5f;                                      /* set gyro z */
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006362:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800638c <mpu6500_read+0xc6c>
 8006366:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800636a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636c:	edc3 7a02 	vstr	s15, [r3, #8]
 8006370:	e06a      	b.n	8006448 <mpu6500_read+0xd28>
 8006372:	bf00      	nop
 8006374:	0801ed14 	.word	0x0801ed14
 8006378:	46800000 	.word	0x46800000
 800637c:	46000000 	.word	0x46000000
 8006380:	45800000 	.word	0x45800000
 8006384:	45000000 	.word	0x45000000
 8006388:	43030000 	.word	0x43030000
 800638c:	42830000 	.word	0x42830000
 8006390:	42033333 	.word	0x42033333
 8006394:	41833333 	.word	0x41833333
        }
        else if (gyro_conf == 2)                                                                   /* ±1000dps */
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	2b02      	cmp	r3, #2
 800639c:	d12a      	bne.n	80063f4 <mpu6500_read+0xcd4>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 32.8f;                                      /* set gyro x */
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063a4:	ee07 3a90 	vmov	s15, r3
 80063a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063ac:	ed5f 6a08 	vldr	s13, [pc, #-32]	@ 8006390 <mpu6500_read+0xc70>
 80063b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b6:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 32.8f;                                      /* set gyro y */
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80063c0:	ee07 3a90 	vmov	s15, r3
 80063c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063c8:	ed5f 6a0f 	vldr	s13, [pc, #-60]	@ 8006390 <mpu6500_read+0xc70>
 80063cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d2:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 32.8f;                                      /* set gyro z */
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80063dc:	ee07 3a90 	vmov	s15, r3
 80063e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063e4:	ed5f 6a16 	vldr	s13, [pc, #-88]	@ 8006390 <mpu6500_read+0xc70>
 80063e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ee:	edc3 7a02 	vstr	s15, [r3, #8]
 80063f2:	e029      	b.n	8006448 <mpu6500_read+0xd28>
        }
        else                                                                                       /* ±2000dps */
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 16.4f;                                      /* set gyro x */
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063fa:	ee07 3a90 	vmov	s15, r3
 80063fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006402:	ed5f 6a1c 	vldr	s13, [pc, #-112]	@ 8006394 <mpu6500_read+0xc74>
 8006406:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800640a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640c:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 16.4f;                                      /* set gyro y */
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006416:	ee07 3a90 	vmov	s15, r3
 800641a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800641e:	ed5f 6a23 	vldr	s13, [pc, #-140]	@ 8006394 <mpu6500_read+0xc74>
 8006422:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006428:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 16.4f;                                      /* set gyro z */
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006432:	ee07 3a90 	vmov	s15, r3
 8006436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800643a:	ed5f 6a2a 	vldr	s13, [pc, #-168]	@ 8006394 <mpu6500_read+0xc74>
 800643e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006444:	edc3 7a02 	vstr	s15, [r3, #8]
        }
        
        return 0;                                                                                  /* success return 0 */
 8006448:	2300      	movs	r3, #0
    }
}
 800644a:	4618      	mov	r0, r3
 800644c:	3720      	adds	r7, #32
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop

08006454 <mpu6500_set_fifo>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                               /* check handle */
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <mpu6500_set_fifo+0x16>
    {
        return 2;                                                                     /* return error */
 8006466:	2302      	movs	r3, #2
 8006468:	e03a      	b.n	80064e0 <mpu6500_set_fifo+0x8c>
    }
    if (handle->inited != 1)                                                          /* check handle initialization */
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006470:	2b01      	cmp	r3, #1
 8006472:	d001      	beq.n	8006478 <mpu6500_set_fifo+0x24>
    {
        return 3;                                                                     /* return error */
 8006474:	2303      	movs	r3, #3
 8006476:	e033      	b.n	80064e0 <mpu6500_set_fifo+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8006478:	f107 020e 	add.w	r2, r7, #14
 800647c:	2301      	movs	r3, #1
 800647e:	216a      	movs	r1, #106	@ 0x6a
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7fe ff2f 	bl	80052e4 <a_mpu6500_read>
 8006486:	4603      	mov	r3, r0
 8006488:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                     /* check result */
 800648a:	7bfb      	ldrb	r3, [r7, #15]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d005      	beq.n	800649c <mpu6500_set_fifo+0x48>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                     /* read user ctrl failed */
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006494:	4814      	ldr	r0, [pc, #80]	@ (80064e8 <mpu6500_set_fifo+0x94>)
 8006496:	4798      	blx	r3
       
        return 1;                                                                     /* return error */
 8006498:	2301      	movs	r3, #1
 800649a:	e021      	b.n	80064e0 <mpu6500_set_fifo+0x8c>
    }
    prev &= ~(1 << 6);                                                                /* clear config */
 800649c:	7bbb      	ldrb	r3, [r7, #14]
 800649e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                              /* set config */
 80064a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064aa:	019b      	lsls	r3, r3, #6
 80064ac:	b25a      	sxtb	r2, r3
 80064ae:	7bbb      	ldrb	r3, [r7, #14]
 80064b0:	b25b      	sxtb	r3, r3
 80064b2:	4313      	orrs	r3, r2
 80064b4:	b25b      	sxtb	r3, r3
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* write config */
 80064ba:	f107 020e 	add.w	r2, r7, #14
 80064be:	2301      	movs	r3, #1
 80064c0:	216a      	movs	r1, #106	@ 0x6a
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7fe ff3f 	bl	8005346 <a_mpu6500_write>
 80064c8:	4603      	mov	r3, r0
 80064ca:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                     /* check result */
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d005      	beq.n	80064de <mpu6500_set_fifo+0x8a>
    {
        handle->debug_print("mpu6500: write user ctrl failed.\n");                    /* write user ctrl failed */
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d6:	4805      	ldr	r0, [pc, #20]	@ (80064ec <mpu6500_set_fifo+0x98>)
 80064d8:	4798      	blx	r3
       
        return 1;                                                                     /* return error */
 80064da:	2301      	movs	r3, #1
 80064dc:	e000      	b.n	80064e0 <mpu6500_set_fifo+0x8c>
    }
    
    return 0;                                                                         /* success return 0 */
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	0801edb4 	.word	0x0801edb4
 80064ec:	0801edd8 	.word	0x0801edd8

080064f0 <mpu6500_set_iic_master>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_iic_master(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	460b      	mov	r3, r1
 80064fa:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <mpu6500_set_iic_master+0x16>
    {
        return 2;                                                                    /* return error */
 8006502:	2302      	movs	r3, #2
 8006504:	e03a      	b.n	800657c <mpu6500_set_iic_master+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800650c:	2b01      	cmp	r3, #1
 800650e:	d001      	beq.n	8006514 <mpu6500_set_iic_master+0x24>
    {
        return 3;                                                                    /* return error */
 8006510:	2303      	movs	r3, #3
 8006512:	e033      	b.n	800657c <mpu6500_set_iic_master+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8006514:	f107 020e 	add.w	r2, r7, #14
 8006518:	2301      	movs	r3, #1
 800651a:	216a      	movs	r1, #106	@ 0x6a
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7fe fee1 	bl	80052e4 <a_mpu6500_read>
 8006522:	4603      	mov	r3, r0
 8006524:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006526:	7bfb      	ldrb	r3, [r7, #15]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <mpu6500_set_iic_master+0x48>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                    /* read user ctrl failed */
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006530:	4814      	ldr	r0, [pc, #80]	@ (8006584 <mpu6500_set_iic_master+0x94>)
 8006532:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006534:	2301      	movs	r3, #1
 8006536:	e021      	b.n	800657c <mpu6500_set_iic_master+0x8c>
    }
    prev &= ~(1 << 5);                                                               /* clear config */
 8006538:	7bbb      	ldrb	r3, [r7, #14]
 800653a:	f023 0320 	bic.w	r3, r3, #32
 800653e:	b2db      	uxtb	r3, r3
 8006540:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                             /* set config */
 8006542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006546:	015b      	lsls	r3, r3, #5
 8006548:	b25a      	sxtb	r2, r3
 800654a:	7bbb      	ldrb	r3, [r7, #14]
 800654c:	b25b      	sxtb	r3, r3
 800654e:	4313      	orrs	r3, r2
 8006550:	b25b      	sxtb	r3, r3
 8006552:	b2db      	uxtb	r3, r3
 8006554:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8006556:	f107 020e 	add.w	r2, r7, #14
 800655a:	2301      	movs	r3, #1
 800655c:	216a      	movs	r1, #106	@ 0x6a
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7fe fef1 	bl	8005346 <a_mpu6500_write>
 8006564:	4603      	mov	r3, r0
 8006566:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d005      	beq.n	800657a <mpu6500_set_iic_master+0x8a>
    {
        handle->debug_print("mpu6500: write user ctrl failed.\n");                   /* write user ctrl failed */
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006572:	4805      	ldr	r0, [pc, #20]	@ (8006588 <mpu6500_set_iic_master+0x98>)
 8006574:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <mpu6500_set_iic_master+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	0801edb4 	.word	0x0801edb4
 8006588:	0801edd8 	.word	0x0801edd8

0800658c <mpu6500_set_disable_iic_slave>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_disable_iic_slave(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	460b      	mov	r3, r1
 8006596:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <mpu6500_set_disable_iic_slave+0x16>
    {
        return 2;                                                                    /* return error */
 800659e:	2302      	movs	r3, #2
 80065a0:	e03a      	b.n	8006618 <mpu6500_set_disable_iic_slave+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d001      	beq.n	80065b0 <mpu6500_set_disable_iic_slave+0x24>
    {
        return 3;                                                                    /* return error */
 80065ac:	2303      	movs	r3, #3
 80065ae:	e033      	b.n	8006618 <mpu6500_set_disable_iic_slave+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 80065b0:	f107 020e 	add.w	r2, r7, #14
 80065b4:	2301      	movs	r3, #1
 80065b6:	216a      	movs	r1, #106	@ 0x6a
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f7fe fe93 	bl	80052e4 <a_mpu6500_read>
 80065be:	4603      	mov	r3, r0
 80065c0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d005      	beq.n	80065d4 <mpu6500_set_disable_iic_slave+0x48>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                    /* read user ctrl failed */
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065cc:	4814      	ldr	r0, [pc, #80]	@ (8006620 <mpu6500_set_disable_iic_slave+0x94>)
 80065ce:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80065d0:	2301      	movs	r3, #1
 80065d2:	e021      	b.n	8006618 <mpu6500_set_disable_iic_slave+0x8c>
    }
    prev &= ~(1 << 4);                                                               /* clear config */
 80065d4:	7bbb      	ldrb	r3, [r7, #14]
 80065d6:	f023 0310 	bic.w	r3, r3, #16
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                             /* set config */
 80065de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	b25a      	sxtb	r2, r3
 80065e6:	7bbb      	ldrb	r3, [r7, #14]
 80065e8:	b25b      	sxtb	r3, r3
 80065ea:	4313      	orrs	r3, r2
 80065ec:	b25b      	sxtb	r3, r3
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 80065f2:	f107 020e 	add.w	r2, r7, #14
 80065f6:	2301      	movs	r3, #1
 80065f8:	216a      	movs	r1, #106	@ 0x6a
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fe fea3 	bl	8005346 <a_mpu6500_write>
 8006600:	4603      	mov	r3, r0
 8006602:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006604:	7bfb      	ldrb	r3, [r7, #15]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d005      	beq.n	8006616 <mpu6500_set_disable_iic_slave+0x8a>
    {
        handle->debug_print("mpu6500: write user ctrl failed.\n");                   /* write user ctrl failed */
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800660e:	4805      	ldr	r0, [pc, #20]	@ (8006624 <mpu6500_set_disable_iic_slave+0x98>)
 8006610:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006612:	2301      	movs	r3, #1
 8006614:	e000      	b.n	8006618 <mpu6500_set_disable_iic_slave+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	0801edb4 	.word	0x0801edb4
 8006624:	0801edd8 	.word	0x0801edd8

08006628 <mpu6500_set_clock_source>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_clock_source(mpu6500_handle_t *handle, mpu6500_clock_source_t clock_source)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	460b      	mov	r3, r1
 8006632:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <mpu6500_set_clock_source+0x16>
    {
        return 2;                                                                    /* return error */
 800663a:	2302      	movs	r3, #2
 800663c:	e035      	b.n	80066aa <mpu6500_set_clock_source+0x82>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006644:	2b01      	cmp	r3, #1
 8006646:	d001      	beq.n	800664c <mpu6500_set_clock_source+0x24>
    {
        return 3;                                                                    /* return error */
 8006648:	2303      	movs	r3, #3
 800664a:	e02e      	b.n	80066aa <mpu6500_set_clock_source+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 800664c:	f107 020e 	add.w	r2, r7, #14
 8006650:	2301      	movs	r3, #1
 8006652:	216b      	movs	r1, #107	@ 0x6b
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7fe fe45 	bl	80052e4 <a_mpu6500_read>
 800665a:	4603      	mov	r3, r0
 800665c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d005      	beq.n	8006670 <mpu6500_set_clock_source+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006668:	4812      	ldr	r0, [pc, #72]	@ (80066b4 <mpu6500_set_clock_source+0x8c>)
 800666a:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800666c:	2301      	movs	r3, #1
 800666e:	e01c      	b.n	80066aa <mpu6500_set_clock_source+0x82>
    }
    prev &= ~(0x7 << 0);                                                             /* clear config */
 8006670:	7bbb      	ldrb	r3, [r7, #14]
 8006672:	f023 0307 	bic.w	r3, r3, #7
 8006676:	b2db      	uxtb	r3, r3
 8006678:	73bb      	strb	r3, [r7, #14]
    prev |= clock_source << 0;                                                       /* set config */
 800667a:	7bba      	ldrb	r2, [r7, #14]
 800667c:	78fb      	ldrb	r3, [r7, #3]
 800667e:	4313      	orrs	r3, r2
 8006680:	b2db      	uxtb	r3, r3
 8006682:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8006684:	f107 020e 	add.w	r2, r7, #14
 8006688:	2301      	movs	r3, #1
 800668a:	216b      	movs	r1, #107	@ 0x6b
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7fe fe5a 	bl	8005346 <a_mpu6500_write>
 8006692:	4603      	mov	r3, r0
 8006694:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006696:	7bfb      	ldrb	r3, [r7, #15]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d005      	beq.n	80066a8 <mpu6500_set_clock_source+0x80>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a0:	4805      	ldr	r0, [pc, #20]	@ (80066b8 <mpu6500_set_clock_source+0x90>)
 80066a2:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80066a4:	2301      	movs	r3, #1
 80066a6:	e000      	b.n	80066aa <mpu6500_set_clock_source+0x82>
    }
    
    return 0;                                                                        /* success return 0 */
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	0801f0a0 	.word	0x0801f0a0
 80066b8:	0801f0cc 	.word	0x0801f0cc

080066bc <mpu6500_set_ptat>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_ptat(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <mpu6500_set_ptat+0x16>
    {
        return 2;                                                                    /* return error */
 80066ce:	2302      	movs	r3, #2
 80066d0:	e03c      	b.n	800674c <mpu6500_set_ptat+0x90>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d001      	beq.n	80066e0 <mpu6500_set_ptat+0x24>
    {
        return 3;                                                                    /* return error */
 80066dc:	2303      	movs	r3, #3
 80066de:	e035      	b.n	800674c <mpu6500_set_ptat+0x90>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 80066e0:	f107 020e 	add.w	r2, r7, #14
 80066e4:	2301      	movs	r3, #1
 80066e6:	216b      	movs	r1, #107	@ 0x6b
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7fe fdfb 	bl	80052e4 <a_mpu6500_read>
 80066ee:	4603      	mov	r3, r0
 80066f0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d005      	beq.n	8006704 <mpu6500_set_ptat+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066fc:	4815      	ldr	r0, [pc, #84]	@ (8006754 <mpu6500_set_ptat+0x98>)
 80066fe:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006700:	2301      	movs	r3, #1
 8006702:	e023      	b.n	800674c <mpu6500_set_ptat+0x90>
    }
    prev &= ~(1 << 3);                                                               /* clear config */
 8006704:	7bbb      	ldrb	r3, [r7, #14]
 8006706:	f023 0308 	bic.w	r3, r3, #8
 800670a:	b2db      	uxtb	r3, r3
 800670c:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 3;                                                          /* set config */
 800670e:	78fb      	ldrb	r3, [r7, #3]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <mpu6500_set_ptat+0x5c>
 8006714:	2208      	movs	r2, #8
 8006716:	e000      	b.n	800671a <mpu6500_set_ptat+0x5e>
 8006718:	2200      	movs	r2, #0
 800671a:	7bbb      	ldrb	r3, [r7, #14]
 800671c:	b25b      	sxtb	r3, r3
 800671e:	4313      	orrs	r3, r2
 8006720:	b25b      	sxtb	r3, r3
 8006722:	b2db      	uxtb	r3, r3
 8006724:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8006726:	f107 020e 	add.w	r2, r7, #14
 800672a:	2301      	movs	r3, #1
 800672c:	216b      	movs	r1, #107	@ 0x6b
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7fe fe09 	bl	8005346 <a_mpu6500_write>
 8006734:	4603      	mov	r3, r0
 8006736:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d005      	beq.n	800674a <mpu6500_set_ptat+0x8e>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006742:	4805      	ldr	r0, [pc, #20]	@ (8006758 <mpu6500_set_ptat+0x9c>)
 8006744:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006746:	2301      	movs	r3, #1
 8006748:	e000      	b.n	800674c <mpu6500_set_ptat+0x90>
    }
    
    return 0;                                                                        /* success return 0 */
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	0801f0a0 	.word	0x0801f0a0
 8006758:	0801f0cc 	.word	0x0801f0cc

0800675c <mpu6500_set_cycle_wake_up>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_cycle_wake_up(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <mpu6500_set_cycle_wake_up+0x16>
    {
        return 2;                                                                    /* return error */
 800676e:	2302      	movs	r3, #2
 8006770:	e03a      	b.n	80067e8 <mpu6500_set_cycle_wake_up+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006778:	2b01      	cmp	r3, #1
 800677a:	d001      	beq.n	8006780 <mpu6500_set_cycle_wake_up+0x24>
    {
        return 3;                                                                    /* return error */
 800677c:	2303      	movs	r3, #3
 800677e:	e033      	b.n	80067e8 <mpu6500_set_cycle_wake_up+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8006780:	f107 020e 	add.w	r2, r7, #14
 8006784:	2301      	movs	r3, #1
 8006786:	216b      	movs	r1, #107	@ 0x6b
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7fe fdab 	bl	80052e4 <a_mpu6500_read>
 800678e:	4603      	mov	r3, r0
 8006790:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006792:	7bfb      	ldrb	r3, [r7, #15]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d005      	beq.n	80067a4 <mpu6500_set_cycle_wake_up+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679c:	4814      	ldr	r0, [pc, #80]	@ (80067f0 <mpu6500_set_cycle_wake_up+0x94>)
 800679e:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80067a0:	2301      	movs	r3, #1
 80067a2:	e021      	b.n	80067e8 <mpu6500_set_cycle_wake_up+0x8c>
    }
    prev &= ~(1 << 5);                                                               /* clear config */
 80067a4:	7bbb      	ldrb	r3, [r7, #14]
 80067a6:	f023 0320 	bic.w	r3, r3, #32
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                             /* set config */
 80067ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067b2:	015b      	lsls	r3, r3, #5
 80067b4:	b25a      	sxtb	r2, r3
 80067b6:	7bbb      	ldrb	r3, [r7, #14]
 80067b8:	b25b      	sxtb	r3, r3
 80067ba:	4313      	orrs	r3, r2
 80067bc:	b25b      	sxtb	r3, r3
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 80067c2:	f107 020e 	add.w	r2, r7, #14
 80067c6:	2301      	movs	r3, #1
 80067c8:	216b      	movs	r1, #107	@ 0x6b
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7fe fdbb 	bl	8005346 <a_mpu6500_write>
 80067d0:	4603      	mov	r3, r0
 80067d2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d005      	beq.n	80067e6 <mpu6500_set_cycle_wake_up+0x8a>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067de:	4805      	ldr	r0, [pc, #20]	@ (80067f4 <mpu6500_set_cycle_wake_up+0x98>)
 80067e0:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80067e2:	2301      	movs	r3, #1
 80067e4:	e000      	b.n	80067e8 <mpu6500_set_cycle_wake_up+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	0801f0a0 	.word	0x0801f0a0
 80067f4:	0801f0cc 	.word	0x0801f0cc

080067f8 <mpu6500_set_sleep>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_sleep(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <mpu6500_set_sleep+0x16>
    {
        return 2;                                                                    /* return error */
 800680a:	2302      	movs	r3, #2
 800680c:	e03a      	b.n	8006884 <mpu6500_set_sleep+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006814:	2b01      	cmp	r3, #1
 8006816:	d001      	beq.n	800681c <mpu6500_set_sleep+0x24>
    {
        return 3;                                                                    /* return error */
 8006818:	2303      	movs	r3, #3
 800681a:	e033      	b.n	8006884 <mpu6500_set_sleep+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 800681c:	f107 020e 	add.w	r2, r7, #14
 8006820:	2301      	movs	r3, #1
 8006822:	216b      	movs	r1, #107	@ 0x6b
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7fe fd5d 	bl	80052e4 <a_mpu6500_read>
 800682a:	4603      	mov	r3, r0
 800682c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800682e:	7bfb      	ldrb	r3, [r7, #15]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d005      	beq.n	8006840 <mpu6500_set_sleep+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006838:	4814      	ldr	r0, [pc, #80]	@ (800688c <mpu6500_set_sleep+0x94>)
 800683a:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800683c:	2301      	movs	r3, #1
 800683e:	e021      	b.n	8006884 <mpu6500_set_sleep+0x8c>
    }
    prev &= ~(1 << 6);                                                               /* clear config */
 8006840:	7bbb      	ldrb	r3, [r7, #14]
 8006842:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006846:	b2db      	uxtb	r3, r3
 8006848:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                             /* set config */
 800684a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800684e:	019b      	lsls	r3, r3, #6
 8006850:	b25a      	sxtb	r2, r3
 8006852:	7bbb      	ldrb	r3, [r7, #14]
 8006854:	b25b      	sxtb	r3, r3
 8006856:	4313      	orrs	r3, r2
 8006858:	b25b      	sxtb	r3, r3
 800685a:	b2db      	uxtb	r3, r3
 800685c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 800685e:	f107 020e 	add.w	r2, r7, #14
 8006862:	2301      	movs	r3, #1
 8006864:	216b      	movs	r1, #107	@ 0x6b
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7fe fd6d 	bl	8005346 <a_mpu6500_write>
 800686c:	4603      	mov	r3, r0
 800686e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006870:	7bfb      	ldrb	r3, [r7, #15]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <mpu6500_set_sleep+0x8a>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800687a:	4805      	ldr	r0, [pc, #20]	@ (8006890 <mpu6500_set_sleep+0x98>)
 800687c:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800687e:	2301      	movs	r3, #1
 8006880:	e000      	b.n	8006884 <mpu6500_set_sleep+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	0801f0a0 	.word	0x0801f0a0
 8006890:	0801f0cc 	.word	0x0801f0cc

08006894 <mpu6500_set_gyro_standby>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_standby(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <mpu6500_set_gyro_standby+0x16>
    {
        return 2;                                                                    /* return error */
 80068a6:	2302      	movs	r3, #2
 80068a8:	e03a      	b.n	8006920 <mpu6500_set_gyro_standby+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d001      	beq.n	80068b8 <mpu6500_set_gyro_standby+0x24>
    {
        return 3;                                                                    /* return error */
 80068b4:	2303      	movs	r3, #3
 80068b6:	e033      	b.n	8006920 <mpu6500_set_gyro_standby+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 80068b8:	f107 020e 	add.w	r2, r7, #14
 80068bc:	2301      	movs	r3, #1
 80068be:	216b      	movs	r1, #107	@ 0x6b
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7fe fd0f 	bl	80052e4 <a_mpu6500_read>
 80068c6:	4603      	mov	r3, r0
 80068c8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d005      	beq.n	80068dc <mpu6500_set_gyro_standby+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d4:	4814      	ldr	r0, [pc, #80]	@ (8006928 <mpu6500_set_gyro_standby+0x94>)
 80068d6:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80068d8:	2301      	movs	r3, #1
 80068da:	e021      	b.n	8006920 <mpu6500_set_gyro_standby+0x8c>
    }
    prev &= ~(1 << 4);                                                               /* clear config */
 80068dc:	7bbb      	ldrb	r3, [r7, #14]
 80068de:	f023 0310 	bic.w	r3, r3, #16
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                             /* set config */
 80068e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068ea:	011b      	lsls	r3, r3, #4
 80068ec:	b25a      	sxtb	r2, r3
 80068ee:	7bbb      	ldrb	r3, [r7, #14]
 80068f0:	b25b      	sxtb	r3, r3
 80068f2:	4313      	orrs	r3, r2
 80068f4:	b25b      	sxtb	r3, r3
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 80068fa:	f107 020e 	add.w	r2, r7, #14
 80068fe:	2301      	movs	r3, #1
 8006900:	216b      	movs	r1, #107	@ 0x6b
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7fe fd1f 	bl	8005346 <a_mpu6500_write>
 8006908:	4603      	mov	r3, r0
 800690a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d005      	beq.n	800691e <mpu6500_set_gyro_standby+0x8a>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006916:	4805      	ldr	r0, [pc, #20]	@ (800692c <mpu6500_set_gyro_standby+0x98>)
 8006918:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800691a:	2301      	movs	r3, #1
 800691c:	e000      	b.n	8006920 <mpu6500_set_gyro_standby+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	0801f0a0 	.word	0x0801f0a0
 800692c:	0801f0cc 	.word	0x0801f0cc

08006930 <mpu6500_set_standby_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_standby_mode(mpu6500_handle_t *handle, mpu6500_source_t source, mpu6500_bool_t enable)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	70fb      	strb	r3, [r7, #3]
 800693c:	4613      	mov	r3, r2
 800693e:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <mpu6500_set_standby_mode+0x1a>
    {
        return 2;                                                                    /* return error */
 8006946:	2302      	movs	r3, #2
 8006948:	e043      	b.n	80069d2 <mpu6500_set_standby_mode+0xa2>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006950:	2b01      	cmp	r3, #1
 8006952:	d001      	beq.n	8006958 <mpu6500_set_standby_mode+0x28>
    {
        return 3;                                                                    /* return error */
 8006954:	2303      	movs	r3, #3
 8006956:	e03c      	b.n	80069d2 <mpu6500_set_standby_mode+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);       /* read config */
 8006958:	f107 020e 	add.w	r2, r7, #14
 800695c:	2301      	movs	r3, #1
 800695e:	216c      	movs	r1, #108	@ 0x6c
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7fe fcbf 	bl	80052e4 <a_mpu6500_read>
 8006966:	4603      	mov	r3, r0
 8006968:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800696a:	7bfb      	ldrb	r3, [r7, #15]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d005      	beq.n	800697c <mpu6500_set_standby_mode+0x4c>
    {
        handle->debug_print("mpu6500: read power management 2 failed.\n");           /* read power management 2 failed */
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006974:	4819      	ldr	r0, [pc, #100]	@ (80069dc <mpu6500_set_standby_mode+0xac>)
 8006976:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006978:	2301      	movs	r3, #1
 800697a:	e02a      	b.n	80069d2 <mpu6500_set_standby_mode+0xa2>
    }
    prev &= ~(1 << source);                                                          /* clear config */
 800697c:	78fb      	ldrb	r3, [r7, #3]
 800697e:	2201      	movs	r2, #1
 8006980:	fa02 f303 	lsl.w	r3, r2, r3
 8006984:	b25b      	sxtb	r3, r3
 8006986:	43db      	mvns	r3, r3
 8006988:	b25a      	sxtb	r2, r3
 800698a:	7bbb      	ldrb	r3, [r7, #14]
 800698c:	b25b      	sxtb	r3, r3
 800698e:	4013      	ands	r3, r2
 8006990:	b25b      	sxtb	r3, r3
 8006992:	b2db      	uxtb	r3, r3
 8006994:	73bb      	strb	r3, [r7, #14]
    prev |= enable << source;                                                        /* set config */
 8006996:	78ba      	ldrb	r2, [r7, #2]
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	fa02 f303 	lsl.w	r3, r2, r3
 800699e:	b25a      	sxtb	r2, r3
 80069a0:	7bbb      	ldrb	r3, [r7, #14]
 80069a2:	b25b      	sxtb	r3, r3
 80069a4:	4313      	orrs	r3, r2
 80069a6:	b25b      	sxtb	r3, r3
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);      /* write config */
 80069ac:	f107 020e 	add.w	r2, r7, #14
 80069b0:	2301      	movs	r3, #1
 80069b2:	216c      	movs	r1, #108	@ 0x6c
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7fe fcc6 	bl	8005346 <a_mpu6500_write>
 80069ba:	4603      	mov	r3, r0
 80069bc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80069be:	7bfb      	ldrb	r3, [r7, #15]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d005      	beq.n	80069d0 <mpu6500_set_standby_mode+0xa0>
    {
        handle->debug_print("mpu6500: write power management 2 failed.\n");          /* write power management 2 failed */
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c8:	4805      	ldr	r0, [pc, #20]	@ (80069e0 <mpu6500_set_standby_mode+0xb0>)
 80069ca:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80069cc:	2301      	movs	r3, #1
 80069ce:	e000      	b.n	80069d2 <mpu6500_set_standby_mode+0xa2>
    }
    
    return 0;                                                                        /* success return 0 */
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	0801f0f8 	.word	0x0801f0f8
 80069e0:	0801f124 	.word	0x0801f124

080069e4 <mpu6500_set_sample_rate_divider>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_sample_rate_divider(mpu6500_handle_t *handle, uint8_t d)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    
    if (handle == NULL)                                                              /* check handle */
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <mpu6500_set_sample_rate_divider+0x16>
    {
        return 2;                                                                    /* return error */
 80069f6:	2302      	movs	r3, #2
 80069f8:	e018      	b.n	8006a2c <mpu6500_set_sample_rate_divider+0x48>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d001      	beq.n	8006a08 <mpu6500_set_sample_rate_divider+0x24>
    {
        return 3;                                                                    /* return error */
 8006a04:	2303      	movs	r3, #3
 8006a06:	e011      	b.n	8006a2c <mpu6500_set_sample_rate_divider+0x48>
    }
    
    res = a_mpu6500_write(handle, MPU6500_REG_SMPRT_DIV, (uint8_t *)&d, 1);          /* write config */
 8006a08:	1cfa      	adds	r2, r7, #3
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	2119      	movs	r1, #25
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7fe fc99 	bl	8005346 <a_mpu6500_write>
 8006a14:	4603      	mov	r3, r0
 8006a16:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <mpu6500_set_sample_rate_divider+0x46>
    {
        handle->debug_print("mpu6500: write smprt div failed.\n");                   /* write smprt div failed */
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a22:	4804      	ldr	r0, [pc, #16]	@ (8006a34 <mpu6500_set_sample_rate_divider+0x50>)
 8006a24:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006a26:	2301      	movs	r3, #1
 8006a28:	e000      	b.n	8006a2c <mpu6500_set_sample_rate_divider+0x48>
    }
    
    return 0;                                                                        /* success return 0 */
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	0801f1e4 	.word	0x0801f1e4

08006a38 <mpu6500_set_extern_sync>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_extern_sync(mpu6500_handle_t *handle, mpu6500_extern_sync_t sync)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <mpu6500_set_extern_sync+0x16>
    {
        return 2;                                                                  /* return error */
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e03a      	b.n	8006ac4 <mpu6500_set_extern_sync+0x8c>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d001      	beq.n	8006a5c <mpu6500_set_extern_sync+0x24>
    {
        return 3;                                                                  /* return error */
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e033      	b.n	8006ac4 <mpu6500_set_extern_sync+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8006a5c:	f107 020e 	add.w	r2, r7, #14
 8006a60:	2301      	movs	r3, #1
 8006a62:	211a      	movs	r1, #26
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7fe fc3d 	bl	80052e4 <a_mpu6500_read>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d005      	beq.n	8006a80 <mpu6500_set_extern_sync+0x48>
    {
        handle->debug_print("mpu6500: read config failed.\n");                     /* read config failed */
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a78:	4814      	ldr	r0, [pc, #80]	@ (8006acc <mpu6500_set_extern_sync+0x94>)
 8006a7a:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e021      	b.n	8006ac4 <mpu6500_set_extern_sync+0x8c>
    }
    prev &= ~(0x7 << 3);                                                           /* clear config */
 8006a80:	7bbb      	ldrb	r3, [r7, #14]
 8006a82:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	73bb      	strb	r3, [r7, #14]
    prev |= sync << 3;                                                             /* set config */
 8006a8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	b25a      	sxtb	r2, r3
 8006a92:	7bbb      	ldrb	r3, [r7, #14]
 8006a94:	b25b      	sxtb	r3, r3
 8006a96:	4313      	orrs	r3, r2
 8006a98:	b25b      	sxtb	r3, r3
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8006a9e:	f107 020e 	add.w	r2, r7, #14
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	211a      	movs	r1, #26
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7fe fc4d 	bl	8005346 <a_mpu6500_write>
 8006aac:	4603      	mov	r3, r0
 8006aae:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <mpu6500_set_extern_sync+0x8a>
    {
        handle->debug_print("mpu6500: write config failed.\n");                    /* write config failed */
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aba:	4805      	ldr	r0, [pc, #20]	@ (8006ad0 <mpu6500_set_extern_sync+0x98>)
 8006abc:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e000      	b.n	8006ac4 <mpu6500_set_extern_sync+0x8c>
    }
    
    return 0;                                                                      /* success return 0 */
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	0801f22c 	.word	0x0801f22c
 8006ad0:	0801f24c 	.word	0x0801f24c

08006ad4 <mpu6500_set_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_low_pass_filter(mpu6500_handle_t *handle, mpu6500_low_pass_filter_t filter)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	460b      	mov	r3, r1
 8006ade:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <mpu6500_set_low_pass_filter+0x16>
    {
        return 2;                                                                  /* return error */
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	e035      	b.n	8006b56 <mpu6500_set_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d001      	beq.n	8006af8 <mpu6500_set_low_pass_filter+0x24>
    {
        return 3;                                                                  /* return error */
 8006af4:	2303      	movs	r3, #3
 8006af6:	e02e      	b.n	8006b56 <mpu6500_set_low_pass_filter+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8006af8:	f107 020e 	add.w	r2, r7, #14
 8006afc:	2301      	movs	r3, #1
 8006afe:	211a      	movs	r1, #26
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7fe fbef 	bl	80052e4 <a_mpu6500_read>
 8006b06:	4603      	mov	r3, r0
 8006b08:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006b0a:	7bfb      	ldrb	r3, [r7, #15]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d005      	beq.n	8006b1c <mpu6500_set_low_pass_filter+0x48>
    {
        handle->debug_print("mpu6500: read config failed.\n");                     /* read config failed */
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b14:	4812      	ldr	r0, [pc, #72]	@ (8006b60 <mpu6500_set_low_pass_filter+0x8c>)
 8006b16:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e01c      	b.n	8006b56 <mpu6500_set_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                           /* clear config */
 8006b1c:	7bbb      	ldrb	r3, [r7, #14]
 8006b1e:	f023 0307 	bic.w	r3, r3, #7
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                           /* set config */
 8006b26:	7bba      	ldrb	r2, [r7, #14]
 8006b28:	78fb      	ldrb	r3, [r7, #3]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8006b30:	f107 020e 	add.w	r2, r7, #14
 8006b34:	2301      	movs	r3, #1
 8006b36:	211a      	movs	r1, #26
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7fe fc04 	bl	8005346 <a_mpu6500_write>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006b42:	7bfb      	ldrb	r3, [r7, #15]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d005      	beq.n	8006b54 <mpu6500_set_low_pass_filter+0x80>
    {
        handle->debug_print("mpu6500: write config failed.\n");                    /* write config failed */
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4c:	4805      	ldr	r0, [pc, #20]	@ (8006b64 <mpu6500_set_low_pass_filter+0x90>)
 8006b4e:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006b50:	2301      	movs	r3, #1
 8006b52:	e000      	b.n	8006b56 <mpu6500_set_low_pass_filter+0x82>
    }
    
    return 0;                                                                      /* success return 0 */
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	0801f22c 	.word	0x0801f22c
 8006b64:	0801f24c 	.word	0x0801f24c

08006b68 <mpu6500_set_fifo_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo_mode(mpu6500_handle_t *handle, mpu6500_fifo_mode mode)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <mpu6500_set_fifo_mode+0x16>
    {
        return 2;                                                                  /* return error */
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e03a      	b.n	8006bf4 <mpu6500_set_fifo_mode+0x8c>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d001      	beq.n	8006b8c <mpu6500_set_fifo_mode+0x24>
    {
        return 3;                                                                  /* return error */
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e033      	b.n	8006bf4 <mpu6500_set_fifo_mode+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8006b8c:	f107 020e 	add.w	r2, r7, #14
 8006b90:	2301      	movs	r3, #1
 8006b92:	211a      	movs	r1, #26
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7fe fba5 	bl	80052e4 <a_mpu6500_read>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d005      	beq.n	8006bb0 <mpu6500_set_fifo_mode+0x48>
    {
        handle->debug_print("mpu6500: read config failed.\n");                     /* read config failed */
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba8:	4814      	ldr	r0, [pc, #80]	@ (8006bfc <mpu6500_set_fifo_mode+0x94>)
 8006baa:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006bac:	2301      	movs	r3, #1
 8006bae:	e021      	b.n	8006bf4 <mpu6500_set_fifo_mode+0x8c>
    }
    prev &= ~(1 << 6);                                                             /* clear config */
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	73bb      	strb	r3, [r7, #14]
    prev |= mode << 6;                                                             /* set config */
 8006bba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bbe:	019b      	lsls	r3, r3, #6
 8006bc0:	b25a      	sxtb	r2, r3
 8006bc2:	7bbb      	ldrb	r3, [r7, #14]
 8006bc4:	b25b      	sxtb	r3, r3
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	b25b      	sxtb	r3, r3
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8006bce:	f107 020e 	add.w	r2, r7, #14
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	211a      	movs	r1, #26
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fe fbb5 	bl	8005346 <a_mpu6500_write>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d005      	beq.n	8006bf2 <mpu6500_set_fifo_mode+0x8a>
    {
        handle->debug_print("mpu6500: write config failed.\n");                    /* write config failed */
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bea:	4805      	ldr	r0, [pc, #20]	@ (8006c00 <mpu6500_set_fifo_mode+0x98>)
 8006bec:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e000      	b.n	8006bf4 <mpu6500_set_fifo_mode+0x8c>
    }
    
    return 0;                                                                      /* success return 0 */
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	0801f22c 	.word	0x0801f22c
 8006c00:	0801f24c 	.word	0x0801f24c

08006c04 <mpu6500_set_gyroscope_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyroscope_test(mpu6500_handle_t *handle, mpu6500_axis_t axis, mpu6500_bool_t enable)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	70fb      	strb	r3, [r7, #3]
 8006c10:	4613      	mov	r3, r2
 8006c12:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <mpu6500_set_gyroscope_test+0x1a>
    {
        return 2;                                                                       /* return error */
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	e043      	b.n	8006ca6 <mpu6500_set_gyroscope_test+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d001      	beq.n	8006c2c <mpu6500_set_gyroscope_test+0x28>
    {
        return 3;                                                                       /* return error */
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e03c      	b.n	8006ca6 <mpu6500_set_gyroscope_test+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8006c2c:	f107 020e 	add.w	r2, r7, #14
 8006c30:	2301      	movs	r3, #1
 8006c32:	211b      	movs	r1, #27
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7fe fb55 	bl	80052e4 <a_mpu6500_read>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d005      	beq.n	8006c50 <mpu6500_set_gyroscope_test+0x4c>
    {
        handle->debug_print("mpu6500: read gyroscope config failed.\n");                /* read gyroscope config failed */
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c48:	4819      	ldr	r0, [pc, #100]	@ (8006cb0 <mpu6500_set_gyroscope_test+0xac>)
 8006c4a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e02a      	b.n	8006ca6 <mpu6500_set_gyroscope_test+0xa2>
    }
    prev &= ~(1 << axis);                                                               /* clear config */
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	2201      	movs	r2, #1
 8006c54:	fa02 f303 	lsl.w	r3, r2, r3
 8006c58:	b25b      	sxtb	r3, r3
 8006c5a:	43db      	mvns	r3, r3
 8006c5c:	b25a      	sxtb	r2, r3
 8006c5e:	7bbb      	ldrb	r3, [r7, #14]
 8006c60:	b25b      	sxtb	r3, r3
 8006c62:	4013      	ands	r3, r2
 8006c64:	b25b      	sxtb	r3, r3
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                             /* set config */
 8006c6a:	78ba      	ldrb	r2, [r7, #2]
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c72:	b25a      	sxtb	r2, r3
 8006c74:	7bbb      	ldrb	r3, [r7, #14]
 8006c76:	b25b      	sxtb	r3, r3
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	b25b      	sxtb	r3, r3
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8006c80:	f107 020e 	add.w	r2, r7, #14
 8006c84:	2301      	movs	r3, #1
 8006c86:	211b      	movs	r1, #27
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7fe fb5c 	bl	8005346 <a_mpu6500_write>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d005      	beq.n	8006ca4 <mpu6500_set_gyroscope_test+0xa0>
    {
        handle->debug_print("mpu6500: write gyroscope config failed.\n");               /* write gyroscope config failed */
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c9c:	4805      	ldr	r0, [pc, #20]	@ (8006cb4 <mpu6500_set_gyroscope_test+0xb0>)
 8006c9e:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e000      	b.n	8006ca6 <mpu6500_set_gyroscope_test+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	0801f26c 	.word	0x0801f26c
 8006cb4:	0801f294 	.word	0x0801f294

08006cb8 <mpu6500_set_gyroscope_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyroscope_range(mpu6500_handle_t *handle, mpu6500_gyroscope_range_t range)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <mpu6500_set_gyroscope_range+0x16>
    {
        return 2;                                                                       /* return error */
 8006cca:	2302      	movs	r3, #2
 8006ccc:	e03a      	b.n	8006d44 <mpu6500_set_gyroscope_range+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d001      	beq.n	8006cdc <mpu6500_set_gyroscope_range+0x24>
    {
        return 3;                                                                       /* return error */
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e033      	b.n	8006d44 <mpu6500_set_gyroscope_range+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8006cdc:	f107 020e 	add.w	r2, r7, #14
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	211b      	movs	r1, #27
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7fe fafd 	bl	80052e4 <a_mpu6500_read>
 8006cea:	4603      	mov	r3, r0
 8006cec:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <mpu6500_set_gyroscope_range+0x48>
    {
        handle->debug_print("mpu6500: read gyroscope config failed.\n");                /* read gyroscope config failed */
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf8:	4814      	ldr	r0, [pc, #80]	@ (8006d4c <mpu6500_set_gyroscope_range+0x94>)
 8006cfa:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e021      	b.n	8006d44 <mpu6500_set_gyroscope_range+0x8c>
    }
    prev &= ~(3 << 3);                                                                  /* clear config */
 8006d00:	7bbb      	ldrb	r3, [r7, #14]
 8006d02:	f023 0318 	bic.w	r3, r3, #24
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                 /* set config */
 8006d0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	b25a      	sxtb	r2, r3
 8006d12:	7bbb      	ldrb	r3, [r7, #14]
 8006d14:	b25b      	sxtb	r3, r3
 8006d16:	4313      	orrs	r3, r2
 8006d18:	b25b      	sxtb	r3, r3
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8006d1e:	f107 020e 	add.w	r2, r7, #14
 8006d22:	2301      	movs	r3, #1
 8006d24:	211b      	movs	r1, #27
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7fe fb0d 	bl	8005346 <a_mpu6500_write>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d005      	beq.n	8006d42 <mpu6500_set_gyroscope_range+0x8a>
    {
        handle->debug_print("mpu6500: write gyroscope config failed.\n");               /* write gyroscope config failed */
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d3a:	4805      	ldr	r0, [pc, #20]	@ (8006d50 <mpu6500_set_gyroscope_range+0x98>)
 8006d3c:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e000      	b.n	8006d44 <mpu6500_set_gyroscope_range+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	0801f26c 	.word	0x0801f26c
 8006d50:	0801f294 	.word	0x0801f294

08006d54 <mpu6500_set_gyroscope_choice>:
 *            - 3 handle is not initialized
 *            - 4 choice > 3
 * @note      none
 */
uint8_t mpu6500_set_gyroscope_choice(mpu6500_handle_t *handle, uint8_t choice)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <mpu6500_set_gyroscope_choice+0x16>
    {
        return 2;                                                                       /* return error */
 8006d66:	2302      	movs	r3, #2
 8006d68:	e03e      	b.n	8006de8 <mpu6500_set_gyroscope_choice+0x94>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d001      	beq.n	8006d78 <mpu6500_set_gyroscope_choice+0x24>
    {
        return 3;                                                                       /* return error */
 8006d74:	2303      	movs	r3, #3
 8006d76:	e037      	b.n	8006de8 <mpu6500_set_gyroscope_choice+0x94>
    }
    if (choice > 3)                                                                     /* check the choice */
 8006d78:	78fb      	ldrb	r3, [r7, #3]
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d905      	bls.n	8006d8a <mpu6500_set_gyroscope_choice+0x36>
    {
        handle->debug_print("mpu6500: choice > 3.\n");                                  /* choice > 3 */
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d82:	481b      	ldr	r0, [pc, #108]	@ (8006df0 <mpu6500_set_gyroscope_choice+0x9c>)
 8006d84:	4798      	blx	r3
       
        return 4;                                                                       /* return error */
 8006d86:	2304      	movs	r3, #4
 8006d88:	e02e      	b.n	8006de8 <mpu6500_set_gyroscope_choice+0x94>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8006d8a:	f107 020e 	add.w	r2, r7, #14
 8006d8e:	2301      	movs	r3, #1
 8006d90:	211b      	movs	r1, #27
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7fe faa6 	bl	80052e4 <a_mpu6500_read>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d005      	beq.n	8006dae <mpu6500_set_gyroscope_choice+0x5a>
    {
        handle->debug_print("mpu6500: read gyroscope config failed.\n");                /* read gyroscope config failed */
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da6:	4813      	ldr	r0, [pc, #76]	@ (8006df4 <mpu6500_set_gyroscope_choice+0xa0>)
 8006da8:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006daa:	2301      	movs	r3, #1
 8006dac:	e01c      	b.n	8006de8 <mpu6500_set_gyroscope_choice+0x94>
    }
    prev &= ~(3 << 0);                                                                  /* clear config */
 8006dae:	7bbb      	ldrb	r3, [r7, #14]
 8006db0:	f023 0303 	bic.w	r3, r3, #3
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	73bb      	strb	r3, [r7, #14]
    prev |= choice << 0;                                                                /* set config */
 8006db8:	7bba      	ldrb	r2, [r7, #14]
 8006dba:	78fb      	ldrb	r3, [r7, #3]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8006dc2:	f107 020e 	add.w	r2, r7, #14
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	211b      	movs	r1, #27
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7fe fabb 	bl	8005346 <a_mpu6500_write>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d005      	beq.n	8006de6 <mpu6500_set_gyroscope_choice+0x92>
    {
        handle->debug_print("mpu6500: write gyroscope config failed.\n");               /* write gyroscope config failed */
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dde:	4806      	ldr	r0, [pc, #24]	@ (8006df8 <mpu6500_set_gyroscope_choice+0xa4>)
 8006de0:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006de2:	2301      	movs	r3, #1
 8006de4:	e000      	b.n	8006de8 <mpu6500_set_gyroscope_choice+0x94>
    }
    
    return 0;                                                                           /* success return 0 */
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	0801f2c0 	.word	0x0801f2c0
 8006df4:	0801f26c 	.word	0x0801f26c
 8006df8:	0801f294 	.word	0x0801f294

08006dfc <mpu6500_set_accelerometer_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_test(mpu6500_handle_t *handle, mpu6500_axis_t axis, mpu6500_bool_t enable)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	70fb      	strb	r3, [r7, #3]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <mpu6500_set_accelerometer_test+0x1a>
    {
        return 2;                                                                       /* return error */
 8006e12:	2302      	movs	r3, #2
 8006e14:	e043      	b.n	8006e9e <mpu6500_set_accelerometer_test+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d001      	beq.n	8006e24 <mpu6500_set_accelerometer_test+0x28>
    {
        return 3;                                                                       /* return error */
 8006e20:	2303      	movs	r3, #3
 8006e22:	e03c      	b.n	8006e9e <mpu6500_set_accelerometer_test+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 8006e24:	f107 020e 	add.w	r2, r7, #14
 8006e28:	2301      	movs	r3, #1
 8006e2a:	211c      	movs	r1, #28
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f7fe fa59 	bl	80052e4 <a_mpu6500_read>
 8006e32:	4603      	mov	r3, r0
 8006e34:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d005      	beq.n	8006e48 <mpu6500_set_accelerometer_test+0x4c>
    {
        handle->debug_print("mpu6500: read accelerometer config failed.\n");            /* read accelerometer config failed */
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e40:	4819      	ldr	r0, [pc, #100]	@ (8006ea8 <mpu6500_set_accelerometer_test+0xac>)
 8006e42:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006e44:	2301      	movs	r3, #1
 8006e46:	e02a      	b.n	8006e9e <mpu6500_set_accelerometer_test+0xa2>
    }
    prev &= ~(1 << axis);                                                               /* clear config */
 8006e48:	78fb      	ldrb	r3, [r7, #3]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e50:	b25b      	sxtb	r3, r3
 8006e52:	43db      	mvns	r3, r3
 8006e54:	b25a      	sxtb	r2, r3
 8006e56:	7bbb      	ldrb	r3, [r7, #14]
 8006e58:	b25b      	sxtb	r3, r3
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	b25b      	sxtb	r3, r3
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                             /* set config */
 8006e62:	78ba      	ldrb	r2, [r7, #2]
 8006e64:	78fb      	ldrb	r3, [r7, #3]
 8006e66:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6a:	b25a      	sxtb	r2, r3
 8006e6c:	7bbb      	ldrb	r3, [r7, #14]
 8006e6e:	b25b      	sxtb	r3, r3
 8006e70:	4313      	orrs	r3, r2
 8006e72:	b25b      	sxtb	r3, r3
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 8006e78:	f107 020e 	add.w	r2, r7, #14
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	211c      	movs	r1, #28
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7fe fa60 	bl	8005346 <a_mpu6500_write>
 8006e86:	4603      	mov	r3, r0
 8006e88:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006e8a:	7bfb      	ldrb	r3, [r7, #15]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d005      	beq.n	8006e9c <mpu6500_set_accelerometer_test+0xa0>
    {
        handle->debug_print("mpu6500: write accelerometer config failed.\n");           /* write accelerometer config failed */
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e94:	4805      	ldr	r0, [pc, #20]	@ (8006eac <mpu6500_set_accelerometer_test+0xb0>)
 8006e96:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e000      	b.n	8006e9e <mpu6500_set_accelerometer_test+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	0801ec1c 	.word	0x0801ec1c
 8006eac:	0801f2d8 	.word	0x0801f2d8

08006eb0 <mpu6500_set_accelerometer_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_range(mpu6500_handle_t *handle, mpu6500_accelerometer_range_t range)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <mpu6500_set_accelerometer_range+0x16>
    {
        return 2;                                                                       /* return error */
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	e03a      	b.n	8006f3c <mpu6500_set_accelerometer_range+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d001      	beq.n	8006ed4 <mpu6500_set_accelerometer_range+0x24>
    {
        return 3;                                                                       /* return error */
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e033      	b.n	8006f3c <mpu6500_set_accelerometer_range+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 8006ed4:	f107 020e 	add.w	r2, r7, #14
 8006ed8:	2301      	movs	r3, #1
 8006eda:	211c      	movs	r1, #28
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7fe fa01 	bl	80052e4 <a_mpu6500_read>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d005      	beq.n	8006ef8 <mpu6500_set_accelerometer_range+0x48>
    {
        handle->debug_print("mpu6500: read accelerometer config failed.\n");            /* read accelerometer config failed */
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef0:	4814      	ldr	r0, [pc, #80]	@ (8006f44 <mpu6500_set_accelerometer_range+0x94>)
 8006ef2:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e021      	b.n	8006f3c <mpu6500_set_accelerometer_range+0x8c>
    }
    prev &= ~(3 << 3);                                                                  /* clear config */
 8006ef8:	7bbb      	ldrb	r3, [r7, #14]
 8006efa:	f023 0318 	bic.w	r3, r3, #24
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                 /* set config */
 8006f02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	b25a      	sxtb	r2, r3
 8006f0a:	7bbb      	ldrb	r3, [r7, #14]
 8006f0c:	b25b      	sxtb	r3, r3
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	b25b      	sxtb	r3, r3
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 8006f16:	f107 020e 	add.w	r2, r7, #14
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	211c      	movs	r1, #28
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7fe fa11 	bl	8005346 <a_mpu6500_write>
 8006f24:	4603      	mov	r3, r0
 8006f26:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d005      	beq.n	8006f3a <mpu6500_set_accelerometer_range+0x8a>
    {
        handle->debug_print("mpu6500: write accelerometer config failed.\n");           /* write accelerometer config failed */
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f32:	4805      	ldr	r0, [pc, #20]	@ (8006f48 <mpu6500_set_accelerometer_range+0x98>)
 8006f34:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006f36:	2301      	movs	r3, #1
 8006f38:	e000      	b.n	8006f3c <mpu6500_set_accelerometer_range+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	0801ec1c 	.word	0x0801ec1c
 8006f48:	0801f2d8 	.word	0x0801f2d8

08006f4c <mpu6500_set_fifo_1024kb>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo_1024kb(mpu6500_handle_t *handle)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <mpu6500_set_fifo_1024kb+0x12>
    {
        return 2;                                                                         /* return error */
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	e035      	b.n	8006fca <mpu6500_set_fifo_1024kb+0x7e>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d001      	beq.n	8006f6c <mpu6500_set_fifo_1024kb+0x20>
    {
        return 3;                                                                         /* return error */
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e02e      	b.n	8006fca <mpu6500_set_fifo_1024kb+0x7e>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);         /* read config */
 8006f6c:	f107 020e 	add.w	r2, r7, #14
 8006f70:	2301      	movs	r3, #1
 8006f72:	211d      	movs	r1, #29
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7fe f9b5 	bl	80052e4 <a_mpu6500_read>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d005      	beq.n	8006f90 <mpu6500_set_fifo_1024kb+0x44>
    {
        handle->debug_print("mpu6500: read accelerometer 2 config failed.\n");            /* read accelerometer 2 config failed */
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f88:	4812      	ldr	r0, [pc, #72]	@ (8006fd4 <mpu6500_set_fifo_1024kb+0x88>)
 8006f8a:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e01c      	b.n	8006fca <mpu6500_set_fifo_1024kb+0x7e>
    }
    prev &= ~(1 << 6);                                                                    /* clear config */
 8006f90:	7bbb      	ldrb	r3, [r7, #14]
 8006f92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	73bb      	strb	r3, [r7, #14]
    prev |= 1 << 6;                                                                       /* set config */
 8006f9a:	7bbb      	ldrb	r3, [r7, #14]
 8006f9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);        /* write config */
 8006fa4:	f107 020e 	add.w	r2, r7, #14
 8006fa8:	2301      	movs	r3, #1
 8006faa:	211d      	movs	r1, #29
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7fe f9ca 	bl	8005346 <a_mpu6500_write>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d005      	beq.n	8006fc8 <mpu6500_set_fifo_1024kb+0x7c>
    {
        handle->debug_print("mpu6500: write accelerometer 2 config failed.\n");           /* write accelerometer 2 config failed */
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc0:	4805      	ldr	r0, [pc, #20]	@ (8006fd8 <mpu6500_set_fifo_1024kb+0x8c>)
 8006fc2:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e000      	b.n	8006fca <mpu6500_set_fifo_1024kb+0x7e>
    }
    
    return 0;                                                                             /* success return 0 */
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	0801f308 	.word	0x0801f308
 8006fd8:	0801f338 	.word	0x0801f338

08006fdc <mpu6500_set_accelerometer_choice>:
 *            - 3 handle is not initialized
 *            - 4 choice > 1
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_choice(mpu6500_handle_t *handle, uint8_t choice)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <mpu6500_set_accelerometer_choice+0x16>
    {
        return 2;                                                                       /* return error */
 8006fee:	2302      	movs	r3, #2
 8006ff0:	e043      	b.n	800707a <mpu6500_set_accelerometer_choice+0x9e>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d001      	beq.n	8007000 <mpu6500_set_accelerometer_choice+0x24>
    {
        return 3;                                                                       /* return error */
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e03c      	b.n	800707a <mpu6500_set_accelerometer_choice+0x9e>
    }
    if (choice > 1)                                                                     /* check the choice */
 8007000:	78fb      	ldrb	r3, [r7, #3]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d905      	bls.n	8007012 <mpu6500_set_accelerometer_choice+0x36>
    {
        handle->debug_print("mpu6500: choice > 1.\n");                                  /* choice > 1 */
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700a:	481e      	ldr	r0, [pc, #120]	@ (8007084 <mpu6500_set_accelerometer_choice+0xa8>)
 800700c:	4798      	blx	r3
       
        return 4;                                                                       /* return error */
 800700e:	2304      	movs	r3, #4
 8007010:	e033      	b.n	800707a <mpu6500_set_accelerometer_choice+0x9e>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);       /* read accelerometer config */
 8007012:	f107 020e 	add.w	r2, r7, #14
 8007016:	2301      	movs	r3, #1
 8007018:	211d      	movs	r1, #29
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7fe f962 	bl	80052e4 <a_mpu6500_read>
 8007020:	4603      	mov	r3, r0
 8007022:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007024:	7bfb      	ldrb	r3, [r7, #15]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d005      	beq.n	8007036 <mpu6500_set_accelerometer_choice+0x5a>
    {
        handle->debug_print("mpu6500: read accelerometer 2 config failed.\n");          /* read accelerometer 2 config failed */
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702e:	4816      	ldr	r0, [pc, #88]	@ (8007088 <mpu6500_set_accelerometer_choice+0xac>)
 8007030:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007032:	2301      	movs	r3, #1
 8007034:	e021      	b.n	800707a <mpu6500_set_accelerometer_choice+0x9e>
    }
    prev &= ~(1 << 3);                                                                  /* clear config */
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	f023 0308 	bic.w	r3, r3, #8
 800703c:	b2db      	uxtb	r3, r3
 800703e:	73bb      	strb	r3, [r7, #14]
    prev |= choice << 3;                                                                /* set config */
 8007040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007044:	00db      	lsls	r3, r3, #3
 8007046:	b25a      	sxtb	r2, r3
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	b25b      	sxtb	r3, r3
 800704c:	4313      	orrs	r3, r2
 800704e:	b25b      	sxtb	r3, r3
 8007050:	b2db      	uxtb	r3, r3
 8007052:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);      /* write accelerometer config */
 8007054:	f107 020e 	add.w	r2, r7, #14
 8007058:	2301      	movs	r3, #1
 800705a:	211d      	movs	r1, #29
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7fe f972 	bl	8005346 <a_mpu6500_write>
 8007062:	4603      	mov	r3, r0
 8007064:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007066:	7bfb      	ldrb	r3, [r7, #15]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d005      	beq.n	8007078 <mpu6500_set_accelerometer_choice+0x9c>
    {
        handle->debug_print("mpu6500: write accelerometer 2 config failed.\n");         /* write accelerometer 2 config failed */
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007070:	4806      	ldr	r0, [pc, #24]	@ (800708c <mpu6500_set_accelerometer_choice+0xb0>)
 8007072:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007074:	2301      	movs	r3, #1
 8007076:	e000      	b.n	800707a <mpu6500_set_accelerometer_choice+0x9e>
    }
    
    return 0;                                                                           /* success return 0 */
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	0801f368 	.word	0x0801f368
 8007088:	0801f308 	.word	0x0801f308
 800708c:	0801f338 	.word	0x0801f338

08007090 <mpu6500_set_accelerometer_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_low_pass_filter(mpu6500_handle_t *handle, mpu6500_accelerometer_low_pass_filter_t filter)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	460b      	mov	r3, r1
 800709a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <mpu6500_set_accelerometer_low_pass_filter+0x16>
    {
        return 2;                                                                         /* return error */
 80070a2:	2302      	movs	r3, #2
 80070a4:	e035      	b.n	8007112 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d001      	beq.n	80070b4 <mpu6500_set_accelerometer_low_pass_filter+0x24>
    {
        return 3;                                                                         /* return error */
 80070b0:	2303      	movs	r3, #3
 80070b2:	e02e      	b.n	8007112 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);         /* read config */
 80070b4:	f107 020e 	add.w	r2, r7, #14
 80070b8:	2301      	movs	r3, #1
 80070ba:	211d      	movs	r1, #29
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7fe f911 	bl	80052e4 <a_mpu6500_read>
 80070c2:	4603      	mov	r3, r0
 80070c4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d005      	beq.n	80070d8 <mpu6500_set_accelerometer_low_pass_filter+0x48>
    {
        handle->debug_print("mpu6500: read accelerometer 2 config failed.\n");            /* read accelerometer 2 config failed */
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d0:	4812      	ldr	r0, [pc, #72]	@ (800711c <mpu6500_set_accelerometer_low_pass_filter+0x8c>)
 80070d2:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 80070d4:	2301      	movs	r3, #1
 80070d6:	e01c      	b.n	8007112 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                                  /* clear config */
 80070d8:	7bbb      	ldrb	r3, [r7, #14]
 80070da:	f023 0307 	bic.w	r3, r3, #7
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                                  /* set config */
 80070e2:	7bba      	ldrb	r2, [r7, #14]
 80070e4:	78fb      	ldrb	r3, [r7, #3]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);        /* write config */
 80070ec:	f107 020e 	add.w	r2, r7, #14
 80070f0:	2301      	movs	r3, #1
 80070f2:	211d      	movs	r1, #29
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7fe f926 	bl	8005346 <a_mpu6500_write>
 80070fa:	4603      	mov	r3, r0
 80070fc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 80070fe:	7bfb      	ldrb	r3, [r7, #15]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d005      	beq.n	8007110 <mpu6500_set_accelerometer_low_pass_filter+0x80>
    {
        handle->debug_print("mpu6500: write accelerometer 2 config failed.\n");           /* write accelerometer 2 config failed */
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007108:	4805      	ldr	r0, [pc, #20]	@ (8007120 <mpu6500_set_accelerometer_low_pass_filter+0x90>)
 800710a:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 800710c:	2301      	movs	r3, #1
 800710e:	e000      	b.n	8007112 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    
    return 0;                                                                             /* success return 0 */
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	0801f308 	.word	0x0801f308
 8007120:	0801f338 	.word	0x0801f338

08007124 <mpu6500_set_low_power_accel_output_rate>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_low_power_accel_output_rate(mpu6500_handle_t *handle, mpu6500_low_power_accel_output_rate_t rate)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	460b      	mov	r3, r1
 800712e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                  /* check handle */
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <mpu6500_set_low_power_accel_output_rate+0x16>
    {
        return 2;                                                                        /* return error */
 8007136:	2302      	movs	r3, #2
 8007138:	e035      	b.n	80071a6 <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007140:	2b01      	cmp	r3, #1
 8007142:	d001      	beq.n	8007148 <mpu6500_set_low_power_accel_output_rate+0x24>
    {
        return 3;                                                                        /* return error */
 8007144:	2303      	movs	r3, #3
 8007146:	e02e      	b.n	80071a6 <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_LP_ACCEL_ODR, (uint8_t *)&prev, 1);         /* read config */
 8007148:	f107 020e 	add.w	r2, r7, #14
 800714c:	2301      	movs	r3, #1
 800714e:	211e      	movs	r1, #30
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7fe f8c7 	bl	80052e4 <a_mpu6500_read>
 8007156:	4603      	mov	r3, r0
 8007158:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 800715a:	7bfb      	ldrb	r3, [r7, #15]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d005      	beq.n	800716c <mpu6500_set_low_power_accel_output_rate+0x48>
    {
        handle->debug_print("mpu6500: read lp accelerometer odr failed.\n");             /* read lp accelerometer odr failed */
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007164:	4812      	ldr	r0, [pc, #72]	@ (80071b0 <mpu6500_set_low_power_accel_output_rate+0x8c>)
 8007166:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8007168:	2301      	movs	r3, #1
 800716a:	e01c      	b.n	80071a6 <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    prev &= ~(0xF << 0);                                                                 /* clear config */
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	f023 030f 	bic.w	r3, r3, #15
 8007172:	b2db      	uxtb	r3, r3
 8007174:	73bb      	strb	r3, [r7, #14]
    prev |= rate << 0;                                                                   /* set config */
 8007176:	7bba      	ldrb	r2, [r7, #14]
 8007178:	78fb      	ldrb	r3, [r7, #3]
 800717a:	4313      	orrs	r3, r2
 800717c:	b2db      	uxtb	r3, r3
 800717e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_LP_ACCEL_ODR, (uint8_t *)&prev, 1);        /* write config */
 8007180:	f107 020e 	add.w	r2, r7, #14
 8007184:	2301      	movs	r3, #1
 8007186:	211e      	movs	r1, #30
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7fe f8dc 	bl	8005346 <a_mpu6500_write>
 800718e:	4603      	mov	r3, r0
 8007190:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007192:	7bfb      	ldrb	r3, [r7, #15]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d005      	beq.n	80071a4 <mpu6500_set_low_power_accel_output_rate+0x80>
    {
        handle->debug_print("mpu6500: write lp accelerometer odr failed.\n");            /* write lp accelerometer odr failed */
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800719c:	4805      	ldr	r0, [pc, #20]	@ (80071b4 <mpu6500_set_low_power_accel_output_rate+0x90>)
 800719e:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 80071a0:	2301      	movs	r3, #1
 80071a2:	e000      	b.n	80071a6 <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    
    return 0;                                                                            /* success return 0 */
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	0801f380 	.word	0x0801f380
 80071b4:	0801f3ac 	.word	0x0801f3ac

080071b8 <mpu6500_set_wake_on_motion>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_wake_on_motion(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	460b      	mov	r3, r1
 80071c2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                     /* check handle */
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <mpu6500_set_wake_on_motion+0x16>
    {
        return 2;                                                                           /* return error */
 80071ca:	2302      	movs	r3, #2
 80071cc:	e03a      	b.n	8007244 <mpu6500_set_wake_on_motion+0x8c>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d001      	beq.n	80071dc <mpu6500_set_wake_on_motion+0x24>
    {
        return 3;                                                                           /* return error */
 80071d8:	2303      	movs	r3, #3
 80071da:	e033      	b.n	8007244 <mpu6500_set_wake_on_motion+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);         /* read config */
 80071dc:	f107 020e 	add.w	r2, r7, #14
 80071e0:	2301      	movs	r3, #1
 80071e2:	2169      	movs	r1, #105	@ 0x69
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7fe f87d 	bl	80052e4 <a_mpu6500_read>
 80071ea:	4603      	mov	r3, r0
 80071ec:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d005      	beq.n	8007200 <mpu6500_set_wake_on_motion+0x48>
    {
        handle->debug_print("mpu6500: read motion detect ctrl failed.\n");                  /* read motion detect ctrl failed */
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f8:	4814      	ldr	r0, [pc, #80]	@ (800724c <mpu6500_set_wake_on_motion+0x94>)
 80071fa:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 80071fc:	2301      	movs	r3, #1
 80071fe:	e021      	b.n	8007244 <mpu6500_set_wake_on_motion+0x8c>
    }
    prev &= ~(1 << 7);                                                                      /* clear config */
 8007200:	7bbb      	ldrb	r3, [r7, #14]
 8007202:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007206:	b2db      	uxtb	r3, r3
 8007208:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 7;                                                                    /* set config */
 800720a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800720e:	01db      	lsls	r3, r3, #7
 8007210:	b25a      	sxtb	r2, r3
 8007212:	7bbb      	ldrb	r3, [r7, #14]
 8007214:	b25b      	sxtb	r3, r3
 8007216:	4313      	orrs	r3, r2
 8007218:	b25b      	sxtb	r3, r3
 800721a:	b2db      	uxtb	r3, r3
 800721c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);        /* write config */
 800721e:	f107 020e 	add.w	r2, r7, #14
 8007222:	2301      	movs	r3, #1
 8007224:	2169      	movs	r1, #105	@ 0x69
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7fe f88d 	bl	8005346 <a_mpu6500_write>
 800722c:	4603      	mov	r3, r0
 800722e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007230:	7bfb      	ldrb	r3, [r7, #15]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d005      	beq.n	8007242 <mpu6500_set_wake_on_motion+0x8a>
    {
        handle->debug_print("mpu6500: write motion detect ctrl failed.\n");                 /* write motion detect ctrl failed */
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800723a:	4805      	ldr	r0, [pc, #20]	@ (8007250 <mpu6500_set_wake_on_motion+0x98>)
 800723c:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 800723e:	2301      	movs	r3, #1
 8007240:	e000      	b.n	8007244 <mpu6500_set_wake_on_motion+0x8c>
    }
    
    return 0;                                                                               /* success return 0 */
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	0801f3dc 	.word	0x0801f3dc
 8007250:	0801f408 	.word	0x0801f408

08007254 <mpu6500_set_accel_compare_with_previous_sample>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accel_compare_with_previous_sample(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	460b      	mov	r3, r1
 800725e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                     /* check handle */
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <mpu6500_set_accel_compare_with_previous_sample+0x16>
    {
        return 2;                                                                           /* return error */
 8007266:	2302      	movs	r3, #2
 8007268:	e03a      	b.n	80072e0 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007270:	2b01      	cmp	r3, #1
 8007272:	d001      	beq.n	8007278 <mpu6500_set_accel_compare_with_previous_sample+0x24>
    {
        return 3;                                                                           /* return error */
 8007274:	2303      	movs	r3, #3
 8007276:	e033      	b.n	80072e0 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8007278:	f107 020e 	add.w	r2, r7, #14
 800727c:	2301      	movs	r3, #1
 800727e:	2169      	movs	r1, #105	@ 0x69
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7fe f82f 	bl	80052e4 <a_mpu6500_read>
 8007286:	4603      	mov	r3, r0
 8007288:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800728a:	7bfb      	ldrb	r3, [r7, #15]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d005      	beq.n	800729c <mpu6500_set_accel_compare_with_previous_sample+0x48>
    {
        handle->debug_print("mpu6500: read motion detect ctrl failed.\n");                  /* read motion detect ctrl failed */
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007294:	4814      	ldr	r0, [pc, #80]	@ (80072e8 <mpu6500_set_accel_compare_with_previous_sample+0x94>)
 8007296:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 8007298:	2301      	movs	r3, #1
 800729a:	e021      	b.n	80072e0 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    prev &= ~(1 << 6);                                                                      /* clear config */
 800729c:	7bbb      	ldrb	r3, [r7, #14]
 800729e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                                    /* set config */
 80072a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072aa:	019b      	lsls	r3, r3, #6
 80072ac:	b25a      	sxtb	r2, r3
 80072ae:	7bbb      	ldrb	r3, [r7, #14]
 80072b0:	b25b      	sxtb	r3, r3
 80072b2:	4313      	orrs	r3, r2
 80072b4:	b25b      	sxtb	r3, r3
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);        /* write config */
 80072ba:	f107 020e 	add.w	r2, r7, #14
 80072be:	2301      	movs	r3, #1
 80072c0:	2169      	movs	r1, #105	@ 0x69
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7fe f83f 	bl	8005346 <a_mpu6500_write>
 80072c8:	4603      	mov	r3, r0
 80072ca:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80072cc:	7bfb      	ldrb	r3, [r7, #15]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d005      	beq.n	80072de <mpu6500_set_accel_compare_with_previous_sample+0x8a>
    {
        handle->debug_print("mpu6500: write motion detect ctrl failed.\n");                 /* write motion detect ctrl failed */
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d6:	4805      	ldr	r0, [pc, #20]	@ (80072ec <mpu6500_set_accel_compare_with_previous_sample+0x98>)
 80072d8:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 80072da:	2301      	movs	r3, #1
 80072dc:	e000      	b.n	80072e0 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    
    return 0;                                                                               /* success return 0 */
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	0801f3dc 	.word	0x0801f3dc
 80072ec:	0801f408 	.word	0x0801f408

080072f0 <mpu6500_set_fifo_enable>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo_enable(mpu6500_handle_t *handle, mpu6500_fifo_t fifo, mpu6500_bool_t enable)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	460b      	mov	r3, r1
 80072fa:	70fb      	strb	r3, [r7, #3]
 80072fc:	4613      	mov	r3, r2
 80072fe:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                             /* check handle */
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <mpu6500_set_fifo_enable+0x1a>
    {
        return 2;                                                                   /* return error */
 8007306:	2302      	movs	r3, #2
 8007308:	e043      	b.n	8007392 <mpu6500_set_fifo_enable+0xa2>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007310:	2b01      	cmp	r3, #1
 8007312:	d001      	beq.n	8007318 <mpu6500_set_fifo_enable+0x28>
    {
        return 3;                                                                   /* return error */
 8007314:	2303      	movs	r3, #3
 8007316:	e03c      	b.n	8007392 <mpu6500_set_fifo_enable+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_FIFO_EN, (uint8_t *)&prev, 1);         /* read fifo enable config */
 8007318:	f107 020e 	add.w	r2, r7, #14
 800731c:	2301      	movs	r3, #1
 800731e:	2123      	movs	r1, #35	@ 0x23
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7fd ffdf 	bl	80052e4 <a_mpu6500_read>
 8007326:	4603      	mov	r3, r0
 8007328:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 800732a:	7bfb      	ldrb	r3, [r7, #15]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d005      	beq.n	800733c <mpu6500_set_fifo_enable+0x4c>
    {
        handle->debug_print("mpu6500: read fifo enable config failed.\n");          /* read fifo enable config failed */
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007334:	4819      	ldr	r0, [pc, #100]	@ (800739c <mpu6500_set_fifo_enable+0xac>)
 8007336:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8007338:	2301      	movs	r3, #1
 800733a:	e02a      	b.n	8007392 <mpu6500_set_fifo_enable+0xa2>
    }
    prev &= ~(1 << fifo);                                                           /* clear config */
 800733c:	78fb      	ldrb	r3, [r7, #3]
 800733e:	2201      	movs	r2, #1
 8007340:	fa02 f303 	lsl.w	r3, r2, r3
 8007344:	b25b      	sxtb	r3, r3
 8007346:	43db      	mvns	r3, r3
 8007348:	b25a      	sxtb	r2, r3
 800734a:	7bbb      	ldrb	r3, [r7, #14]
 800734c:	b25b      	sxtb	r3, r3
 800734e:	4013      	ands	r3, r2
 8007350:	b25b      	sxtb	r3, r3
 8007352:	b2db      	uxtb	r3, r3
 8007354:	73bb      	strb	r3, [r7, #14]
    prev |= enable << fifo;                                                         /* set config */
 8007356:	78ba      	ldrb	r2, [r7, #2]
 8007358:	78fb      	ldrb	r3, [r7, #3]
 800735a:	fa02 f303 	lsl.w	r3, r2, r3
 800735e:	b25a      	sxtb	r2, r3
 8007360:	7bbb      	ldrb	r3, [r7, #14]
 8007362:	b25b      	sxtb	r3, r3
 8007364:	4313      	orrs	r3, r2
 8007366:	b25b      	sxtb	r3, r3
 8007368:	b2db      	uxtb	r3, r3
 800736a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_FIFO_EN, (uint8_t *)&prev, 1);        /* write fifo enable config */
 800736c:	f107 020e 	add.w	r2, r7, #14
 8007370:	2301      	movs	r3, #1
 8007372:	2123      	movs	r1, #35	@ 0x23
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7fd ffe6 	bl	8005346 <a_mpu6500_write>
 800737a:	4603      	mov	r3, r0
 800737c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 800737e:	7bfb      	ldrb	r3, [r7, #15]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d005      	beq.n	8007390 <mpu6500_set_fifo_enable+0xa0>
    {
        handle->debug_print("mpu6500: write fifo enable config failed.\n");         /* write fifo enable config failed */
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007388:	4805      	ldr	r0, [pc, #20]	@ (80073a0 <mpu6500_set_fifo_enable+0xb0>)
 800738a:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 800738c:	2301      	movs	r3, #1
 800738e:	e000      	b.n	8007392 <mpu6500_set_fifo_enable+0xa2>
    }
    
    return 0;                                                                       /* success return 0 */
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	0801f434 	.word	0x0801f434
 80073a0:	0801f460 	.word	0x0801f460

080073a4 <mpu6500_set_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_level(mpu6500_handle_t *handle, mpu6500_pin_level_t level)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <mpu6500_set_interrupt_level+0x16>
    {
        return 2;                                                                       /* return error */
 80073b6:	2302      	movs	r3, #2
 80073b8:	e03a      	b.n	8007430 <mpu6500_set_interrupt_level+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d001      	beq.n	80073c8 <mpu6500_set_interrupt_level+0x24>
    {
        return 3;                                                                       /* return error */
 80073c4:	2303      	movs	r3, #3
 80073c6:	e033      	b.n	8007430 <mpu6500_set_interrupt_level+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 80073c8:	f107 020e 	add.w	r2, r7, #14
 80073cc:	2301      	movs	r3, #1
 80073ce:	2137      	movs	r1, #55	@ 0x37
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7fd ff87 	bl	80052e4 <a_mpu6500_read>
 80073d6:	4603      	mov	r3, r0
 80073d8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80073da:	7bfb      	ldrb	r3, [r7, #15]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d005      	beq.n	80073ec <mpu6500_set_interrupt_level+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e4:	4814      	ldr	r0, [pc, #80]	@ (8007438 <mpu6500_set_interrupt_level+0x94>)
 80073e6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80073e8:	2301      	movs	r3, #1
 80073ea:	e021      	b.n	8007430 <mpu6500_set_interrupt_level+0x8c>
    }
    prev &= ~(1 << 7);                                                                  /* clear config */
 80073ec:	7bbb      	ldrb	r3, [r7, #14]
 80073ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	73bb      	strb	r3, [r7, #14]
    prev |= level << 7;                                                                 /* set config */
 80073f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073fa:	01db      	lsls	r3, r3, #7
 80073fc:	b25a      	sxtb	r2, r3
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
 8007400:	b25b      	sxtb	r3, r3
 8007402:	4313      	orrs	r3, r2
 8007404:	b25b      	sxtb	r3, r3
 8007406:	b2db      	uxtb	r3, r3
 8007408:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 800740a:	f107 020e 	add.w	r2, r7, #14
 800740e:	2301      	movs	r3, #1
 8007410:	2137      	movs	r1, #55	@ 0x37
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7fd ff97 	bl	8005346 <a_mpu6500_write>
 8007418:	4603      	mov	r3, r0
 800741a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800741c:	7bfb      	ldrb	r3, [r7, #15]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d005      	beq.n	800742e <mpu6500_set_interrupt_level+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007426:	4805      	ldr	r0, [pc, #20]	@ (800743c <mpu6500_set_interrupt_level+0x98>)
 8007428:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <mpu6500_set_interrupt_level+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	0801f48c 	.word	0x0801f48c
 800743c:	0801f4b4 	.word	0x0801f4b4

08007440 <mpu6500_set_interrupt_pin_type>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_pin_type(mpu6500_handle_t *handle, mpu6500_pin_type_t type)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	460b      	mov	r3, r1
 800744a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <mpu6500_set_interrupt_pin_type+0x16>
    {
        return 2;                                                                       /* return error */
 8007452:	2302      	movs	r3, #2
 8007454:	e03a      	b.n	80074cc <mpu6500_set_interrupt_pin_type+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800745c:	2b01      	cmp	r3, #1
 800745e:	d001      	beq.n	8007464 <mpu6500_set_interrupt_pin_type+0x24>
    {
        return 3;                                                                       /* return error */
 8007460:	2303      	movs	r3, #3
 8007462:	e033      	b.n	80074cc <mpu6500_set_interrupt_pin_type+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007464:	f107 020e 	add.w	r2, r7, #14
 8007468:	2301      	movs	r3, #1
 800746a:	2137      	movs	r1, #55	@ 0x37
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f7fd ff39 	bl	80052e4 <a_mpu6500_read>
 8007472:	4603      	mov	r3, r0
 8007474:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007476:	7bfb      	ldrb	r3, [r7, #15]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d005      	beq.n	8007488 <mpu6500_set_interrupt_pin_type+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007480:	4814      	ldr	r0, [pc, #80]	@ (80074d4 <mpu6500_set_interrupt_pin_type+0x94>)
 8007482:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007484:	2301      	movs	r3, #1
 8007486:	e021      	b.n	80074cc <mpu6500_set_interrupt_pin_type+0x8c>
    }
    prev &= ~(1 << 6);                                                                  /* clear config */
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800748e:	b2db      	uxtb	r3, r3
 8007490:	73bb      	strb	r3, [r7, #14]
    prev |= type << 6;                                                                  /* set config */
 8007492:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007496:	019b      	lsls	r3, r3, #6
 8007498:	b25a      	sxtb	r2, r3
 800749a:	7bbb      	ldrb	r3, [r7, #14]
 800749c:	b25b      	sxtb	r3, r3
 800749e:	4313      	orrs	r3, r2
 80074a0:	b25b      	sxtb	r3, r3
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 80074a6:	f107 020e 	add.w	r2, r7, #14
 80074aa:	2301      	movs	r3, #1
 80074ac:	2137      	movs	r1, #55	@ 0x37
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7fd ff49 	bl	8005346 <a_mpu6500_write>
 80074b4:	4603      	mov	r3, r0
 80074b6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d005      	beq.n	80074ca <mpu6500_set_interrupt_pin_type+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c2:	4805      	ldr	r0, [pc, #20]	@ (80074d8 <mpu6500_set_interrupt_pin_type+0x98>)
 80074c4:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80074c6:	2301      	movs	r3, #1
 80074c8:	e000      	b.n	80074cc <mpu6500_set_interrupt_pin_type+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	0801f48c 	.word	0x0801f48c
 80074d8:	0801f4b4 	.word	0x0801f4b4

080074dc <mpu6500_set_interrupt_latch>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_latch(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <mpu6500_set_interrupt_latch+0x16>
    {
        return 2;                                                                       /* return error */
 80074ee:	2302      	movs	r3, #2
 80074f0:	e03c      	b.n	800756c <mpu6500_set_interrupt_latch+0x90>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d001      	beq.n	8007500 <mpu6500_set_interrupt_latch+0x24>
    {
        return 3;                                                                       /* return error */
 80074fc:	2303      	movs	r3, #3
 80074fe:	e035      	b.n	800756c <mpu6500_set_interrupt_latch+0x90>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007500:	f107 020e 	add.w	r2, r7, #14
 8007504:	2301      	movs	r3, #1
 8007506:	2137      	movs	r1, #55	@ 0x37
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7fd feeb 	bl	80052e4 <a_mpu6500_read>
 800750e:	4603      	mov	r3, r0
 8007510:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d005      	beq.n	8007524 <mpu6500_set_interrupt_latch+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751c:	4815      	ldr	r0, [pc, #84]	@ (8007574 <mpu6500_set_interrupt_latch+0x98>)
 800751e:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007520:	2301      	movs	r3, #1
 8007522:	e023      	b.n	800756c <mpu6500_set_interrupt_latch+0x90>
    }
    prev &= ~(1 << 5);                                                                  /* clear config */
 8007524:	7bbb      	ldrb	r3, [r7, #14]
 8007526:	f023 0320 	bic.w	r3, r3, #32
 800752a:	b2db      	uxtb	r3, r3
 800752c:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 5;                                                             /* set config */
 800752e:	78fb      	ldrb	r3, [r7, #3]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <mpu6500_set_interrupt_latch+0x5c>
 8007534:	2220      	movs	r2, #32
 8007536:	e000      	b.n	800753a <mpu6500_set_interrupt_latch+0x5e>
 8007538:	2200      	movs	r2, #0
 800753a:	7bbb      	ldrb	r3, [r7, #14]
 800753c:	b25b      	sxtb	r3, r3
 800753e:	4313      	orrs	r3, r2
 8007540:	b25b      	sxtb	r3, r3
 8007542:	b2db      	uxtb	r3, r3
 8007544:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007546:	f107 020e 	add.w	r2, r7, #14
 800754a:	2301      	movs	r3, #1
 800754c:	2137      	movs	r1, #55	@ 0x37
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7fd fef9 	bl	8005346 <a_mpu6500_write>
 8007554:	4603      	mov	r3, r0
 8007556:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007558:	7bfb      	ldrb	r3, [r7, #15]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d005      	beq.n	800756a <mpu6500_set_interrupt_latch+0x8e>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007562:	4805      	ldr	r0, [pc, #20]	@ (8007578 <mpu6500_set_interrupt_latch+0x9c>)
 8007564:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007566:	2301      	movs	r3, #1
 8007568:	e000      	b.n	800756c <mpu6500_set_interrupt_latch+0x90>
    }
    
    return 0;                                                                           /* success return 0 */
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	0801f48c 	.word	0x0801f48c
 8007578:	0801f4b4 	.word	0x0801f4b4

0800757c <mpu6500_set_interrupt_read_clear>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_read_clear(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <mpu6500_set_interrupt_read_clear+0x16>
    {
        return 2;                                                                       /* return error */
 800758e:	2302      	movs	r3, #2
 8007590:	e03a      	b.n	8007608 <mpu6500_set_interrupt_read_clear+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007598:	2b01      	cmp	r3, #1
 800759a:	d001      	beq.n	80075a0 <mpu6500_set_interrupt_read_clear+0x24>
    {
        return 3;                                                                       /* return error */
 800759c:	2303      	movs	r3, #3
 800759e:	e033      	b.n	8007608 <mpu6500_set_interrupt_read_clear+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 80075a0:	f107 020e 	add.w	r2, r7, #14
 80075a4:	2301      	movs	r3, #1
 80075a6:	2137      	movs	r1, #55	@ 0x37
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7fd fe9b 	bl	80052e4 <a_mpu6500_read>
 80075ae:	4603      	mov	r3, r0
 80075b0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d005      	beq.n	80075c4 <mpu6500_set_interrupt_read_clear+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075bc:	4814      	ldr	r0, [pc, #80]	@ (8007610 <mpu6500_set_interrupt_read_clear+0x94>)
 80075be:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80075c0:	2301      	movs	r3, #1
 80075c2:	e021      	b.n	8007608 <mpu6500_set_interrupt_read_clear+0x8c>
    }
    prev &= ~(1 << 4);                                                                  /* clear config */
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	f023 0310 	bic.w	r3, r3, #16
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                                /* set config */
 80075ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075d2:	011b      	lsls	r3, r3, #4
 80075d4:	b25a      	sxtb	r2, r3
 80075d6:	7bbb      	ldrb	r3, [r7, #14]
 80075d8:	b25b      	sxtb	r3, r3
 80075da:	4313      	orrs	r3, r2
 80075dc:	b25b      	sxtb	r3, r3
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 80075e2:	f107 020e 	add.w	r2, r7, #14
 80075e6:	2301      	movs	r3, #1
 80075e8:	2137      	movs	r1, #55	@ 0x37
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7fd feab 	bl	8005346 <a_mpu6500_write>
 80075f0:	4603      	mov	r3, r0
 80075f2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d005      	beq.n	8007606 <mpu6500_set_interrupt_read_clear+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fe:	4805      	ldr	r0, [pc, #20]	@ (8007614 <mpu6500_set_interrupt_read_clear+0x98>)
 8007600:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007602:	2301      	movs	r3, #1
 8007604:	e000      	b.n	8007608 <mpu6500_set_interrupt_read_clear+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	0801f48c 	.word	0x0801f48c
 8007614:	0801f4b4 	.word	0x0801f4b4

08007618 <mpu6500_set_fsync_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fsync_interrupt_level(mpu6500_handle_t *handle, mpu6500_pin_level_t level)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <mpu6500_set_fsync_interrupt_level+0x16>
    {
        return 2;                                                                       /* return error */
 800762a:	2302      	movs	r3, #2
 800762c:	e03a      	b.n	80076a4 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007634:	2b01      	cmp	r3, #1
 8007636:	d001      	beq.n	800763c <mpu6500_set_fsync_interrupt_level+0x24>
    {
        return 3;                                                                       /* return error */
 8007638:	2303      	movs	r3, #3
 800763a:	e033      	b.n	80076a4 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 800763c:	f107 020e 	add.w	r2, r7, #14
 8007640:	2301      	movs	r3, #1
 8007642:	2137      	movs	r1, #55	@ 0x37
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7fd fe4d 	bl	80052e4 <a_mpu6500_read>
 800764a:	4603      	mov	r3, r0
 800764c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d005      	beq.n	8007660 <mpu6500_set_fsync_interrupt_level+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007658:	4814      	ldr	r0, [pc, #80]	@ (80076ac <mpu6500_set_fsync_interrupt_level+0x94>)
 800765a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800765c:	2301      	movs	r3, #1
 800765e:	e021      	b.n	80076a4 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    prev &= ~(1 << 3);                                                                  /* clear config */
 8007660:	7bbb      	ldrb	r3, [r7, #14]
 8007662:	f023 0308 	bic.w	r3, r3, #8
 8007666:	b2db      	uxtb	r3, r3
 8007668:	73bb      	strb	r3, [r7, #14]
    prev |= level << 3;                                                                 /* set config */
 800766a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800766e:	00db      	lsls	r3, r3, #3
 8007670:	b25a      	sxtb	r2, r3
 8007672:	7bbb      	ldrb	r3, [r7, #14]
 8007674:	b25b      	sxtb	r3, r3
 8007676:	4313      	orrs	r3, r2
 8007678:	b25b      	sxtb	r3, r3
 800767a:	b2db      	uxtb	r3, r3
 800767c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 800767e:	f107 020e 	add.w	r2, r7, #14
 8007682:	2301      	movs	r3, #1
 8007684:	2137      	movs	r1, #55	@ 0x37
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7fd fe5d 	bl	8005346 <a_mpu6500_write>
 800768c:	4603      	mov	r3, r0
 800768e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007690:	7bfb      	ldrb	r3, [r7, #15]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d005      	beq.n	80076a2 <mpu6500_set_fsync_interrupt_level+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800769a:	4805      	ldr	r0, [pc, #20]	@ (80076b0 <mpu6500_set_fsync_interrupt_level+0x98>)
 800769c:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800769e:	2301      	movs	r3, #1
 80076a0:	e000      	b.n	80076a4 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	0801f48c 	.word	0x0801f48c
 80076b0:	0801f4b4 	.word	0x0801f4b4

080076b4 <mpu6500_set_fsync_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fsync_interrupt(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <mpu6500_set_fsync_interrupt+0x16>
    {
        return 2;                                                                       /* return error */
 80076c6:	2302      	movs	r3, #2
 80076c8:	e03a      	b.n	8007740 <mpu6500_set_fsync_interrupt+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d001      	beq.n	80076d8 <mpu6500_set_fsync_interrupt+0x24>
    {
        return 3;                                                                       /* return error */
 80076d4:	2303      	movs	r3, #3
 80076d6:	e033      	b.n	8007740 <mpu6500_set_fsync_interrupt+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 80076d8:	f107 020e 	add.w	r2, r7, #14
 80076dc:	2301      	movs	r3, #1
 80076de:	2137      	movs	r1, #55	@ 0x37
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7fd fdff 	bl	80052e4 <a_mpu6500_read>
 80076e6:	4603      	mov	r3, r0
 80076e8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d005      	beq.n	80076fc <mpu6500_set_fsync_interrupt+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f4:	4814      	ldr	r0, [pc, #80]	@ (8007748 <mpu6500_set_fsync_interrupt+0x94>)
 80076f6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80076f8:	2301      	movs	r3, #1
 80076fa:	e021      	b.n	8007740 <mpu6500_set_fsync_interrupt+0x8c>
    }
    prev &= ~(1 << 2);                                                                  /* clear config */
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
 80076fe:	f023 0304 	bic.w	r3, r3, #4
 8007702:	b2db      	uxtb	r3, r3
 8007704:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 2;                                                                /* set config */
 8007706:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	b25a      	sxtb	r2, r3
 800770e:	7bbb      	ldrb	r3, [r7, #14]
 8007710:	b25b      	sxtb	r3, r3
 8007712:	4313      	orrs	r3, r2
 8007714:	b25b      	sxtb	r3, r3
 8007716:	b2db      	uxtb	r3, r3
 8007718:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 800771a:	f107 020e 	add.w	r2, r7, #14
 800771e:	2301      	movs	r3, #1
 8007720:	2137      	movs	r1, #55	@ 0x37
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7fd fe0f 	bl	8005346 <a_mpu6500_write>
 8007728:	4603      	mov	r3, r0
 800772a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800772c:	7bfb      	ldrb	r3, [r7, #15]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d005      	beq.n	800773e <mpu6500_set_fsync_interrupt+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007736:	4805      	ldr	r0, [pc, #20]	@ (800774c <mpu6500_set_fsync_interrupt+0x98>)
 8007738:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800773a:	2301      	movs	r3, #1
 800773c:	e000      	b.n	8007740 <mpu6500_set_fsync_interrupt+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	0801f48c 	.word	0x0801f48c
 800774c:	0801f4b4 	.word	0x0801f4b4

08007750 <mpu6500_set_iic_bypass>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_iic_bypass(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	460b      	mov	r3, r1
 800775a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <mpu6500_set_iic_bypass+0x16>
    {
        return 2;                                                                       /* return error */
 8007762:	2302      	movs	r3, #2
 8007764:	e03a      	b.n	80077dc <mpu6500_set_iic_bypass+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800776c:	2b01      	cmp	r3, #1
 800776e:	d001      	beq.n	8007774 <mpu6500_set_iic_bypass+0x24>
    {
        return 3;                                                                       /* return error */
 8007770:	2303      	movs	r3, #3
 8007772:	e033      	b.n	80077dc <mpu6500_set_iic_bypass+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin */
 8007774:	f107 020e 	add.w	r2, r7, #14
 8007778:	2301      	movs	r3, #1
 800777a:	2137      	movs	r1, #55	@ 0x37
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7fd fdb1 	bl	80052e4 <a_mpu6500_read>
 8007782:	4603      	mov	r3, r0
 8007784:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007786:	7bfb      	ldrb	r3, [r7, #15]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d005      	beq.n	8007798 <mpu6500_set_iic_bypass+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007790:	4814      	ldr	r0, [pc, #80]	@ (80077e4 <mpu6500_set_iic_bypass+0x94>)
 8007792:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007794:	2301      	movs	r3, #1
 8007796:	e021      	b.n	80077dc <mpu6500_set_iic_bypass+0x8c>
    }
    prev &= ~(1 << 1);                                                                  /* clear config */
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	f023 0302 	bic.w	r3, r3, #2
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 1;                                                                /* set config */
 80077a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077a6:	005b      	lsls	r3, r3, #1
 80077a8:	b25a      	sxtb	r2, r3
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	b25b      	sxtb	r3, r3
 80077ae:	4313      	orrs	r3, r2
 80077b0:	b25b      	sxtb	r3, r3
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 80077b6:	f107 020e 	add.w	r2, r7, #14
 80077ba:	2301      	movs	r3, #1
 80077bc:	2137      	movs	r1, #55	@ 0x37
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7fd fdc1 	bl	8005346 <a_mpu6500_write>
 80077c4:	4603      	mov	r3, r0
 80077c6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d005      	beq.n	80077da <mpu6500_set_iic_bypass+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d2:	4805      	ldr	r0, [pc, #20]	@ (80077e8 <mpu6500_set_iic_bypass+0x98>)
 80077d4:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80077d6:	2301      	movs	r3, #1
 80077d8:	e000      	b.n	80077dc <mpu6500_set_iic_bypass+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	0801f48c 	.word	0x0801f48c
 80077e8:	0801f4b4 	.word	0x0801f4b4

080077ec <mpu6500_set_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt(mpu6500_handle_t *handle, mpu6500_interrupt_t type, mpu6500_bool_t enable)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	460b      	mov	r3, r1
 80077f6:	70fb      	strb	r3, [r7, #3]
 80077f8:	4613      	mov	r3, r2
 80077fa:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <mpu6500_set_interrupt+0x1a>
    {
        return 2;                                                                       /* return error */
 8007802:	2302      	movs	r3, #2
 8007804:	e043      	b.n	800788e <mpu6500_set_interrupt+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800780c:	2b01      	cmp	r3, #1
 800780e:	d001      	beq.n	8007814 <mpu6500_set_interrupt+0x28>
    {
        return 3;                                                                       /* return error */
 8007810:	2303      	movs	r3, #3
 8007812:	e03c      	b.n	800788e <mpu6500_set_interrupt+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_ENABLE, (uint8_t *)&prev, 1);          /* read interrupt enable */
 8007814:	f107 020e 	add.w	r2, r7, #14
 8007818:	2301      	movs	r3, #1
 800781a:	2138      	movs	r1, #56	@ 0x38
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f7fd fd61 	bl	80052e4 <a_mpu6500_read>
 8007822:	4603      	mov	r3, r0
 8007824:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007826:	7bfb      	ldrb	r3, [r7, #15]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d005      	beq.n	8007838 <mpu6500_set_interrupt+0x4c>
    {
        handle->debug_print("mpu6500: read interrupt enable failed.\n");                /* read interrupt enable failed */
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007830:	4819      	ldr	r0, [pc, #100]	@ (8007898 <mpu6500_set_interrupt+0xac>)
 8007832:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007834:	2301      	movs	r3, #1
 8007836:	e02a      	b.n	800788e <mpu6500_set_interrupt+0xa2>
    }
    prev &= ~(1 << type);                                                               /* clear config */
 8007838:	78fb      	ldrb	r3, [r7, #3]
 800783a:	2201      	movs	r2, #1
 800783c:	fa02 f303 	lsl.w	r3, r2, r3
 8007840:	b25b      	sxtb	r3, r3
 8007842:	43db      	mvns	r3, r3
 8007844:	b25a      	sxtb	r2, r3
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	b25b      	sxtb	r3, r3
 800784a:	4013      	ands	r3, r2
 800784c:	b25b      	sxtb	r3, r3
 800784e:	b2db      	uxtb	r3, r3
 8007850:	73bb      	strb	r3, [r7, #14]
    prev |= enable << type;                                                             /* set config */
 8007852:	78ba      	ldrb	r2, [r7, #2]
 8007854:	78fb      	ldrb	r3, [r7, #3]
 8007856:	fa02 f303 	lsl.w	r3, r2, r3
 800785a:	b25a      	sxtb	r2, r3
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	b25b      	sxtb	r3, r3
 8007860:	4313      	orrs	r3, r2
 8007862:	b25b      	sxtb	r3, r3
 8007864:	b2db      	uxtb	r3, r3
 8007866:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_ENABLE, (uint8_t *)&prev, 1);         /* write interrupt enable */
 8007868:	f107 020e 	add.w	r2, r7, #14
 800786c:	2301      	movs	r3, #1
 800786e:	2138      	movs	r1, #56	@ 0x38
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7fd fd68 	bl	8005346 <a_mpu6500_write>
 8007876:	4603      	mov	r3, r0
 8007878:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800787a:	7bfb      	ldrb	r3, [r7, #15]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d005      	beq.n	800788c <mpu6500_set_interrupt+0xa0>
    {
        handle->debug_print("mpu6500: write interrupt enable failed.\n");               /* write interrupt enable failed */
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007884:	4805      	ldr	r0, [pc, #20]	@ (800789c <mpu6500_set_interrupt+0xb0>)
 8007886:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007888:	2301      	movs	r3, #1
 800788a:	e000      	b.n	800788e <mpu6500_set_interrupt+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	0801f4dc 	.word	0x0801f4dc
 800789c:	0801f504 	.word	0x0801f504

080078a0 <mpu6500_set_accelerometer_x_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_x_offset(mpu6500_handle_t *handle, int16_t offset)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <mpu6500_set_accelerometer_x_offset+0x16>
    {
        return 2;                                                          /* return error */
 80078b2:	2302      	movs	r3, #2
 80078b4:	e022      	b.n	80078fc <mpu6500_set_accelerometer_x_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d001      	beq.n	80078c4 <mpu6500_set_accelerometer_x_offset+0x24>
    {
        return 3;                                                          /* return error */
 80078c0:	2303      	movs	r3, #3
 80078c2:	e01b      	b.n	80078fc <mpu6500_set_accelerometer_x_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 80078c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80078c8:	121b      	asrs	r3, r3, #8
 80078ca:	b21b      	sxth	r3, r3
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 80078d0:	887b      	ldrh	r3, [r7, #2]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_XA_OFFSET_H, buf, 2);        /* write xa offset */
 80078d6:	f107 020c 	add.w	r2, r7, #12
 80078da:	2302      	movs	r3, #2
 80078dc:	2177      	movs	r1, #119	@ 0x77
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fd fd31 	bl	8005346 <a_mpu6500_write>
 80078e4:	4603      	mov	r3, r0
 80078e6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d005      	beq.n	80078fa <mpu6500_set_accelerometer_x_offset+0x5a>
    {
        handle->debug_print("mpu6500: write xa offset failed.\n");         /* write xa offset failed*/
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f2:	4804      	ldr	r0, [pc, #16]	@ (8007904 <mpu6500_set_accelerometer_x_offset+0x64>)
 80078f4:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 80078f6:	2301      	movs	r3, #1
 80078f8:	e000      	b.n	80078fc <mpu6500_set_accelerometer_x_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	0801f630 	.word	0x0801f630

08007908 <mpu6500_set_accelerometer_y_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_y_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	460b      	mov	r3, r1
 8007912:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <mpu6500_set_accelerometer_y_offset+0x16>
    {
        return 2;                                                          /* return error */
 800791a:	2302      	movs	r3, #2
 800791c:	e022      	b.n	8007964 <mpu6500_set_accelerometer_y_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007924:	2b01      	cmp	r3, #1
 8007926:	d001      	beq.n	800792c <mpu6500_set_accelerometer_y_offset+0x24>
    {
        return 3;                                                          /* return error */
 8007928:	2303      	movs	r3, #3
 800792a:	e01b      	b.n	8007964 <mpu6500_set_accelerometer_y_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 800792c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007930:	121b      	asrs	r3, r3, #8
 8007932:	b21b      	sxth	r3, r3
 8007934:	b2db      	uxtb	r3, r3
 8007936:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8007938:	887b      	ldrh	r3, [r7, #2]
 800793a:	b2db      	uxtb	r3, r3
 800793c:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_YA_OFFSET_H, buf, 2);        /* write ya offset */
 800793e:	f107 020c 	add.w	r2, r7, #12
 8007942:	2302      	movs	r3, #2
 8007944:	217a      	movs	r1, #122	@ 0x7a
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7fd fcfd 	bl	8005346 <a_mpu6500_write>
 800794c:	4603      	mov	r3, r0
 800794e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8007950:	7bfb      	ldrb	r3, [r7, #15]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d005      	beq.n	8007962 <mpu6500_set_accelerometer_y_offset+0x5a>
    {
        handle->debug_print("mpu6500: write ya offset failed.\n");         /* write ya offset failed*/
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795a:	4804      	ldr	r0, [pc, #16]	@ (800796c <mpu6500_set_accelerometer_y_offset+0x64>)
 800795c:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 800795e:	2301      	movs	r3, #1
 8007960:	e000      	b.n	8007964 <mpu6500_set_accelerometer_y_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	0801f678 	.word	0x0801f678

08007970 <mpu6500_set_accelerometer_z_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_z_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <mpu6500_set_accelerometer_z_offset+0x16>
    {
        return 2;                                                          /* return error */
 8007982:	2302      	movs	r3, #2
 8007984:	e022      	b.n	80079cc <mpu6500_set_accelerometer_z_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800798c:	2b01      	cmp	r3, #1
 800798e:	d001      	beq.n	8007994 <mpu6500_set_accelerometer_z_offset+0x24>
    {
        return 3;                                                          /* return error */
 8007990:	2303      	movs	r3, #3
 8007992:	e01b      	b.n	80079cc <mpu6500_set_accelerometer_z_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8007994:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007998:	121b      	asrs	r3, r3, #8
 800799a:	b21b      	sxth	r3, r3
 800799c:	b2db      	uxtb	r3, r3
 800799e:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 80079a0:	887b      	ldrh	r3, [r7, #2]
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_ZA_OFFSET_H, buf, 2);        /* write za offset */
 80079a6:	f107 020c 	add.w	r2, r7, #12
 80079aa:	2302      	movs	r3, #2
 80079ac:	217d      	movs	r1, #125	@ 0x7d
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7fd fcc9 	bl	8005346 <a_mpu6500_write>
 80079b4:	4603      	mov	r3, r0
 80079b6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d005      	beq.n	80079ca <mpu6500_set_accelerometer_z_offset+0x5a>
    {
        handle->debug_print("mpu6500: write za offset failed.\n");         /* write za offset failed*/
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c2:	4804      	ldr	r0, [pc, #16]	@ (80079d4 <mpu6500_set_accelerometer_z_offset+0x64>)
 80079c4:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 80079c6:	2301      	movs	r3, #1
 80079c8:	e000      	b.n	80079cc <mpu6500_set_accelerometer_z_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	0801f6c0 	.word	0x0801f6c0

080079d8 <mpu6500_accelerometer_offset_convert_to_register>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu6500_accelerometer_offset_convert_to_register(mpu6500_handle_t *handle, float mg, int16_t *reg)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80079e4:	6079      	str	r1, [r7, #4]
    if (handle == NULL)                 /* check handle */
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <mpu6500_accelerometer_offset_convert_to_register+0x18>
    {
        return 2;                       /* return error */
 80079ec:	2302      	movs	r3, #2
 80079ee:	e014      	b.n	8007a1a <mpu6500_accelerometer_offset_convert_to_register+0x42>
    }
    if (handle->inited != 1)            /* check handle initialization */
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d001      	beq.n	80079fe <mpu6500_accelerometer_offset_convert_to_register+0x26>
    {
        return 3;                       /* return error */
 80079fa:	2303      	movs	r3, #3
 80079fc:	e00d      	b.n	8007a1a <mpu6500_accelerometer_offset_convert_to_register+0x42>
    }
    
    *reg = (int16_t)(mg / 0.98f);       /* convert real data to register data */
 80079fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8007a02:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007a28 <mpu6500_accelerometer_offset_convert_to_register+0x50>
 8007a06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a0e:	ee17 3a90 	vmov	r3, s15
 8007a12:	b21a      	sxth	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	801a      	strh	r2, [r3, #0]
    
    return 0;                           /* success return 0 */
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	3f7ae148 	.word	0x3f7ae148

08007a2c <mpu6500_set_gyro_x_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_x_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	460b      	mov	r3, r1
 8007a36:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d101      	bne.n	8007a42 <mpu6500_set_gyro_x_offset+0x16>
    {
        return 2;                                                          /* return error */
 8007a3e:	2302      	movs	r3, #2
 8007a40:	e022      	b.n	8007a88 <mpu6500_set_gyro_x_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d001      	beq.n	8007a50 <mpu6500_set_gyro_x_offset+0x24>
    {
        return 3;                                                          /* return error */
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	e01b      	b.n	8007a88 <mpu6500_set_gyro_x_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8007a50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a54:	121b      	asrs	r3, r3, #8
 8007a56:	b21b      	sxth	r3, r3
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8007a5c:	887b      	ldrh	r3, [r7, #2]
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_XG_OFFSET_H, buf, 2);        /* write xg offset */
 8007a62:	f107 020c 	add.w	r2, r7, #12
 8007a66:	2302      	movs	r3, #2
 8007a68:	2113      	movs	r1, #19
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7fd fc6b 	bl	8005346 <a_mpu6500_write>
 8007a70:	4603      	mov	r3, r0
 8007a72:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d005      	beq.n	8007a86 <mpu6500_set_gyro_x_offset+0x5a>
    {
        handle->debug_print("mpu6500: write xg offset failed.\n");         /* write xg offset failed*/
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a7e:	4804      	ldr	r0, [pc, #16]	@ (8007a90 <mpu6500_set_gyro_x_offset+0x64>)
 8007a80:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8007a82:	2301      	movs	r3, #1
 8007a84:	e000      	b.n	8007a88 <mpu6500_set_gyro_x_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	0801f708 	.word	0x0801f708

08007a94 <mpu6500_set_gyro_y_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_y_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <mpu6500_set_gyro_y_offset+0x16>
    {
        return 2;                                                          /* return error */
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	e022      	b.n	8007af0 <mpu6500_set_gyro_y_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d001      	beq.n	8007ab8 <mpu6500_set_gyro_y_offset+0x24>
    {
        return 3;                                                          /* return error */
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e01b      	b.n	8007af0 <mpu6500_set_gyro_y_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8007ab8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007abc:	121b      	asrs	r3, r3, #8
 8007abe:	b21b      	sxth	r3, r3
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8007ac4:	887b      	ldrh	r3, [r7, #2]
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_YG_OFFSET_H, buf, 2);        /* write yg offset */
 8007aca:	f107 020c 	add.w	r2, r7, #12
 8007ace:	2302      	movs	r3, #2
 8007ad0:	2115      	movs	r1, #21
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7fd fc37 	bl	8005346 <a_mpu6500_write>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8007adc:	7bfb      	ldrb	r3, [r7, #15]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d005      	beq.n	8007aee <mpu6500_set_gyro_y_offset+0x5a>
    {
        handle->debug_print("mpu6500: write yg offset failed.\n");         /* write yg offset failed*/
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae6:	4804      	ldr	r0, [pc, #16]	@ (8007af8 <mpu6500_set_gyro_y_offset+0x64>)
 8007ae8:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8007aea:	2301      	movs	r3, #1
 8007aec:	e000      	b.n	8007af0 <mpu6500_set_gyro_y_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	0801f750 	.word	0x0801f750

08007afc <mpu6500_set_gyro_z_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_z_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <mpu6500_set_gyro_z_offset+0x16>
    {
        return 2;                                                          /* return error */
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e022      	b.n	8007b58 <mpu6500_set_gyro_z_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d001      	beq.n	8007b20 <mpu6500_set_gyro_z_offset+0x24>
    {
        return 3;                                                          /* return error */
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e01b      	b.n	8007b58 <mpu6500_set_gyro_z_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8007b20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b24:	121b      	asrs	r3, r3, #8
 8007b26:	b21b      	sxth	r3, r3
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8007b2c:	887b      	ldrh	r3, [r7, #2]
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_ZG_OFFSET_H, buf, 2);        /* write zg offset */
 8007b32:	f107 020c 	add.w	r2, r7, #12
 8007b36:	2302      	movs	r3, #2
 8007b38:	2117      	movs	r1, #23
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7fd fc03 	bl	8005346 <a_mpu6500_write>
 8007b40:	4603      	mov	r3, r0
 8007b42:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d005      	beq.n	8007b56 <mpu6500_set_gyro_z_offset+0x5a>
    {
        handle->debug_print("mpu6500: write zg offset failed.\n");         /* write zg offset failed*/
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b4e:	4804      	ldr	r0, [pc, #16]	@ (8007b60 <mpu6500_set_gyro_z_offset+0x64>)
 8007b50:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8007b52:	2301      	movs	r3, #1
 8007b54:	e000      	b.n	8007b58 <mpu6500_set_gyro_z_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	0801f798 	.word	0x0801f798

08007b64 <mpu6500_gyro_offset_convert_to_register>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu6500_gyro_offset_convert_to_register(mpu6500_handle_t *handle, float dps, int16_t *reg)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8007b70:	6079      	str	r1, [r7, #4]
    if (handle == NULL)                     /* check handle */
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <mpu6500_gyro_offset_convert_to_register+0x18>
    {
        return 2;                           /* return error */
 8007b78:	2302      	movs	r3, #2
 8007b7a:	e014      	b.n	8007ba6 <mpu6500_gyro_offset_convert_to_register+0x42>
    }
    if (handle->inited != 1)                /* check handle initialization */
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d001      	beq.n	8007b8a <mpu6500_gyro_offset_convert_to_register+0x26>
    {
        return 3;                           /* return error */
 8007b86:	2303      	movs	r3, #3
 8007b88:	e00d      	b.n	8007ba6 <mpu6500_gyro_offset_convert_to_register+0x42>
    }
    
    *reg = (int16_t)(dps / 0.0305f);        /* convert real data to register data */
 8007b8a:	ed97 7a02 	vldr	s14, [r7, #8]
 8007b8e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007bb4 <mpu6500_gyro_offset_convert_to_register+0x50>
 8007b92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b9a:	ee17 3a90 	vmov	r3, s15
 8007b9e:	b21a      	sxth	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	801a      	strh	r2, [r3, #0]
    
    return 0;                               /* success return 0 */
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	3cf9db23 	.word	0x3cf9db23

08007bb8 <ring_buffer_init>:

#define MIN(X, Y) (((X) < (Y)) ? (X) : (Y))
#define MAX(X, Y) (((X) > (Y)) ? (X) : (Y))


uint8_t ring_buffer_init(ring_buffer_t* rb, uint8_t* buffer, size_t size) {
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
	if (rb == NULL || buffer == NULL || size < (size_t)2) {
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d005      	beq.n	8007bd6 <ring_buffer_init+0x1e>
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d002      	beq.n	8007bd6 <ring_buffer_init+0x1e>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d801      	bhi.n	8007bda <ring_buffer_init+0x22>
		// Must have valid pointers and buffer size ≥ 2
		return RING_BUFFER_ERROR_INVALID_PARAMETERS;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e00c      	b.n	8007bf4 <ring_buffer_init+0x3c>
	}

	rb->buffer = buffer;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	601a      	str	r2, [r3, #0]
	rb->size = size;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	605a      	str	r2, [r3, #4]
	rb->head = (size_t)0;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	609a      	str	r2, [r3, #8]
	rb->tail = (size_t)0;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	60da      	str	r2, [r3, #12]

	return RING_BUFFER_SUCCESS;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <ring_buffer_free_space>:
//		return rb->tail - rb->head - (size_t)1; // Free space when tail is ahead of head
//	}
//}


size_t ring_buffer_free_space(ring_buffer_t* rb) {
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;
	return (rb->tail + rb->size - rb->head - (size_t)1) % rb->size;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68da      	ldr	r2, [r3, #12]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	441a      	add	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	6852      	ldr	r2, [r2, #4]
 8007c1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c22:	fb01 f202 	mul.w	r2, r1, r2
 8007c26:	1a9b      	subs	r3, r3, r2
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <ring_buffer_used_space>:
uint8_t ring_buffer_is_full(ring_buffer_t* rb) {
	//if (rb == NULL) return (size_t)0;
	return (uint8_t) (((rb->head + (size_t)1) % rb->size) == rb->tail);
}

size_t ring_buffer_used_space(ring_buffer_t* rb) {
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;
	return (rb->head + rb->size - rb->tail) % rb->size;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	441a      	add	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	6852      	ldr	r2, [r2, #4]
 8007c50:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c54:	fb01 f202 	mul.w	r2, r1, r2
 8007c58:	1a9b      	subs	r3, r3, r2
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <ring_buffer_linear_free_space>:

 buffer size = 8, tail = 7, head = 2
 [ _ _ H _ _ _ _ T ]
 returns: 7 - 2 - 1 = 4 bytes available before reaching tail
*/
size_t ring_buffer_linear_free_space(ring_buffer_t* rb) {
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;

	if (rb->head >= rb->tail) {
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	689a      	ldr	r2, [r3, #8]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d310      	bcc.n	8007c9c <ring_buffer_linear_free_space+0x36>
		if (rb->tail == (size_t)0) {
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d106      	bne.n	8007c90 <ring_buffer_linear_free_space+0x2a>
			// Only leave one byte free to distinguish full/empty
			return rb->size - rb->head - (size_t)1;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	e00b      	b.n	8007ca8 <ring_buffer_linear_free_space+0x42>
		}
		else {
			return rb->size - rb->head;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	e005      	b.n	8007ca8 <ring_buffer_linear_free_space+0x42>
		}
	}
	else {
		// Tail is before head, space is up to tail - 1
		return rb->tail - rb->head - (size_t)1;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	3b01      	subs	r3, #1
	}
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <ring_buffer_linear_used_space>:



size_t ring_buffer_linear_used_space(ring_buffer_t* rb) {
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;

	if (rb->head >= rb->tail) {
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689a      	ldr	r2, [r3, #8]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d305      	bcc.n	8007cd4 <ring_buffer_linear_used_space+0x20>
		// All used data is linear
		return rb->head - rb->tail;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689a      	ldr	r2, [r3, #8]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	e004      	b.n	8007cde <ring_buffer_linear_used_space+0x2a>
	}
	else {
		// Used data wraps around, so linear part is from tail to end
		return rb->size - rb->tail;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	1ad3      	subs	r3, r2, r3
	}
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <ring_buffer_write_ptr>:



uint8_t* ring_buffer_write_ptr(ring_buffer_t* rb) {
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || rb->size == (size_t)0) {
//		return NULL;
//	}

	return &rb->buffer[rb->head];
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	4413      	add	r3, r2
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <ring_buffer_read_ptr>:


uint8_t* ring_buffer_read_ptr(ring_buffer_t* rb) {
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || rb->size == (size_t)0) {
//		return NULL;
//	}

	return &rb->buffer[rb->tail];
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	4413      	add	r3, r2
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <ring_buffer_enqueue_arr>:

size_t ring_buffer_enqueue_arr(ring_buffer_t* rb, uint8_t* byte_array, size_t len) {
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b088      	sub	sp, #32
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	60f8      	str	r0, [r7, #12]
 8007d2e:	60b9      	str	r1, [r7, #8]
 8007d30:	607a      	str	r2, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || byte_array == NULL || rb->size == (size_t)0) {
//		return (size_t)0;
//	}

	size_t free_space = ring_buffer_free_space(rb);
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f7ff ff64 	bl	8007c00 <ring_buffer_free_space>
 8007d38:	61f8      	str	r0, [r7, #28]
	size_t to_write = MIN(len, free_space);
 8007d3a:	69fa      	ldr	r2, [r7, #28]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	bf28      	it	cs
 8007d42:	4613      	movcs	r3, r2
 8007d44:	61bb      	str	r3, [r7, #24]

	size_t linear_part = MIN(ring_buffer_linear_free_space(rb), to_write);
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f7ff ff8d 	bl	8007c66 <ring_buffer_linear_free_space>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d904      	bls.n	8007d5e <ring_buffer_enqueue_arr+0x38>
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f7ff ff86 	bl	8007c66 <ring_buffer_linear_free_space>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	e000      	b.n	8007d60 <ring_buffer_enqueue_arr+0x3a>
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	617b      	str	r3, [r7, #20]
	memcpy(&rb->buffer[rb->head], byte_array, linear_part);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	68b9      	ldr	r1, [r7, #8]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f012 fcb4 	bl	801a6de <memcpy>
	rb->head = (rb->head + linear_part) % rb->size;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	689a      	ldr	r2, [r3, #8]
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	6852      	ldr	r2, [r2, #4]
 8007d82:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d86:	fb01 f202 	mul.w	r2, r1, r2
 8007d8a:	1a9a      	subs	r2, r3, r2
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	609a      	str	r2, [r3, #8]

	size_t wrapped_part = to_write - linear_part;
 8007d90:	69ba      	ldr	r2, [r7, #24]
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	613b      	str	r3, [r7, #16]
	if (wrapped_part > (size_t)0) {
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d018      	beq.n	8007dd0 <ring_buffer_enqueue_arr+0xaa>
		memcpy(&rb->buffer[rb->head], &byte_array[linear_part], wrapped_part);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	18d0      	adds	r0, r2, r3
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	4413      	add	r3, r2
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	4619      	mov	r1, r3
 8007db2:	f012 fc94 	bl	801a6de <memcpy>
		rb->head = (rb->head + wrapped_part) % rb->size;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	689a      	ldr	r2, [r3, #8]
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	6852      	ldr	r2, [r2, #4]
 8007dc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dc6:	fb01 f202 	mul.w	r2, r1, r2
 8007dca:	1a9a      	subs	r2, r3, r2
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	609a      	str	r2, [r3, #8]
	}

	return to_write;
 8007dd0:	69bb      	ldr	r3, [r7, #24]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3720      	adds	r7, #32
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <ring_buffer_dequeue_arr>:


size_t ring_buffer_dequeue_arr(ring_buffer_t* rb, uint8_t* out_array, size_t len) {
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b08a      	sub	sp, #40	@ 0x28
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	60f8      	str	r0, [r7, #12]
 8007de2:	60b9      	str	r1, [r7, #8]
 8007de4:	607a      	str	r2, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || rb->size == (size_t)0 || out_array == NULL) {
//		return (size_t)0;
//	}

	size_t used = ring_buffer_used_space(rb);
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f7ff ff24 	bl	8007c34 <ring_buffer_used_space>
 8007dec:	6278      	str	r0, [r7, #36]	@ 0x24
	if (used == (size_t)0) {
 8007dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <ring_buffer_dequeue_arr+0x1e>
		return (size_t)0; // Nothing to read
 8007df4:	2300      	movs	r3, #0
 8007df6:	e048      	b.n	8007e8a <ring_buffer_dequeue_arr+0xb0>
	}

	size_t to_read = MIN(len, used);
 8007df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	bf28      	it	cs
 8007e00:	4613      	movcs	r3, r2
 8007e02:	623b      	str	r3, [r7, #32]

	// How many bytes we can read linearly (without wrapping)
	size_t linear_data = ring_buffer_linear_used_space(rb);
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f7ff ff55 	bl	8007cb4 <ring_buffer_linear_used_space>
 8007e0a:	61f8      	str	r0, [r7, #28]

	
	size_t first_chunk = MIN(to_read, linear_data);
 8007e0c:	69fa      	ldr	r2, [r7, #28]
 8007e0e:	6a3b      	ldr	r3, [r7, #32]
 8007e10:	4293      	cmp	r3, r2
 8007e12:	bf28      	it	cs
 8007e14:	4613      	movcs	r3, r2
 8007e16:	61bb      	str	r3, [r7, #24]

	memcpy(out_array, &rb->buffer[rb->tail], first_chunk);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	4413      	add	r3, r2
 8007e22:	69ba      	ldr	r2, [r7, #24]
 8007e24:	4619      	mov	r1, r3
 8007e26:	68b8      	ldr	r0, [r7, #8]
 8007e28:	f012 fc59 	bl	801a6de <memcpy>
	rb->tail = (rb->tail + first_chunk) % rb->size;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	68da      	ldr	r2, [r3, #12]
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	4413      	add	r3, r2
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	6852      	ldr	r2, [r2, #4]
 8007e38:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e3c:	fb01 f202 	mul.w	r2, r1, r2
 8007e40:	1a9a      	subs	r2, r3, r2
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	60da      	str	r2, [r3, #12]

	if (to_read > first_chunk) {
 8007e46:	6a3a      	ldr	r2, [r7, #32]
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d91c      	bls.n	8007e88 <ring_buffer_dequeue_arr+0xae>
		size_t second_chunk = to_read - first_chunk;
 8007e4e:	6a3a      	ldr	r2, [r7, #32]
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	617b      	str	r3, [r7, #20]
		memcpy(&out_array[first_chunk], &rb->buffer[rb->tail], second_chunk);
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	18d0      	adds	r0, r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	4413      	add	r3, r2
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	4619      	mov	r1, r3
 8007e6a:	f012 fc38 	bl	801a6de <memcpy>
		rb->tail = (rb->tail + second_chunk) % rb->size;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	68da      	ldr	r2, [r3, #12]
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	4413      	add	r3, r2
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	6852      	ldr	r2, [r2, #4]
 8007e7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e7e:	fb01 f202 	mul.w	r2, r1, r2
 8007e82:	1a9a      	subs	r2, r3, r2
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	60da      	str	r2, [r3, #12]
	}

	return (size_t)to_read;
 8007e88:	6a3b      	ldr	r3, [r7, #32]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3728      	adds	r7, #40	@ 0x28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <ring_buffer_advance_tail>:
	}

	return to_peek - offset;
}

void ring_buffer_advance_tail(ring_buffer_t* rb, size_t len) {
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b084      	sub	sp, #16
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	6039      	str	r1, [r7, #0]
//	if (rb == NULL) {
//		return;
//	}
	size_t used = ring_buffer_used_space(rb);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7ff fec9 	bl	8007c34 <ring_buffer_used_space>
 8007ea2:	60f8      	str	r0, [r7, #12]
	size_t advance_len = MIN(len, used);
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	bf28      	it	cs
 8007eac:	4613      	movcs	r3, r2
 8007eae:	60bb      	str	r3, [r7, #8]
	rb->tail = (rb->tail + advance_len) % rb->size;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	68da      	ldr	r2, [r3, #12]
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	6852      	ldr	r2, [r2, #4]
 8007ebc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ec0:	fb01 f202 	mul.w	r2, r1, r2
 8007ec4:	1a9a      	subs	r2, r3, r2
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	60da      	str	r2, [r3, #12]
}
 8007eca:	bf00      	nop
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <ring_buffer_clear>:
	size_t free_space = ring_buffer_free_space(rb);
	size_t advance_len = MIN(len, free_space);
	rb->head = (rb->head + advance_len) % rb->size;
}

void ring_buffer_clear(ring_buffer_t* rb) {
 8007ed2:	b480      	push	{r7}
 8007ed4:	b083      	sub	sp, #12
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
//	if (rb == NULL) {
//		return;
//	}
	rb->head = (size_t)0;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	609a      	str	r2, [r3, #8]
	rb->tail = (size_t)0;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	60da      	str	r2, [r3, #12]
}
 8007ee6:	bf00      	nop
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
	...

08007ef4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007efa:	2300      	movs	r3, #0
 8007efc:	607b      	str	r3, [r7, #4]
 8007efe:	4b10      	ldr	r3, [pc, #64]	@ (8007f40 <MX_DMA_Init+0x4c>)
 8007f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f02:	4a0f      	ldr	r2, [pc, #60]	@ (8007f40 <MX_DMA_Init+0x4c>)
 8007f04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8007f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f40 <MX_DMA_Init+0x4c>)
 8007f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f12:	607b      	str	r3, [r7, #4]
 8007f14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8007f16:	2200      	movs	r2, #0
 8007f18:	2105      	movs	r1, #5
 8007f1a:	203a      	movs	r0, #58	@ 0x3a
 8007f1c:	f002 fb66 	bl	800a5ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8007f20:	203a      	movs	r0, #58	@ 0x3a
 8007f22:	f002 fb7f 	bl	800a624 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8007f26:	2200      	movs	r2, #0
 8007f28:	2105      	movs	r1, #5
 8007f2a:	2046      	movs	r0, #70	@ 0x46
 8007f2c:	f002 fb5e 	bl	800a5ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8007f30:	2046      	movs	r0, #70	@ 0x46
 8007f32:	f002 fb77 	bl	800a624 <HAL_NVIC_EnableIRQ>

}
 8007f36:	bf00      	nop
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	40023800 	.word	0x40023800

08007f44 <arr_from_freqf>:
// esc_pwm_dc.c
#include "esc_pwm.h"

static inline uint32_t arr_from_freqf(uint32_t base_hz, float pwm_hz_f) {
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	ed87 0a00 	vstr	s0, [r7]
    if (pwm_hz_f < 1e-3f) pwm_hz_f = 1e-3f;           // protecție
 8007f50:	edd7 7a00 	vldr	s15, [r7]
 8007f54:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007fbc <arr_from_freqf+0x78>
 8007f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f60:	d501      	bpl.n	8007f66 <arr_from_freqf+0x22>
 8007f62:	4b17      	ldr	r3, [pc, #92]	@ (8007fc0 <arr_from_freqf+0x7c>)
 8007f64:	603b      	str	r3, [r7, #0]
    double ticks = (float)base_hz / (float)pwm_hz_f; // folosește double pt. precizie
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	ee07 3a90 	vmov	s15, r3
 8007f6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f70:	edd7 7a00 	vldr	s15, [r7]
 8007f74:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007f78:	ee16 0a90 	vmov	r0, s13
 8007f7c:	f7f8 fae4 	bl	8000548 <__aeabi_f2d>
 8007f80:	4602      	mov	r2, r0
 8007f82:	460b      	mov	r3, r1
 8007f84:	e9c7 2302 	strd	r2, r3, [r7, #8]
    uint32_t period_ticks = (uint32_t)(ticks + 0.5);   // rotunjire la cel mai apropiat
 8007f88:	f04f 0200 	mov.w	r2, #0
 8007f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc4 <arr_from_freqf+0x80>)
 8007f8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f92:	f7f8 f97b 	bl	800028c <__adddf3>
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	f7f8 fe03 	bl	8000ba8 <__aeabi_d2uiz>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	617b      	str	r3, [r7, #20]
    if (period_ticks < 1u) period_ticks = 1u;
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <arr_from_freqf+0x6c>
 8007fac:	2301      	movs	r3, #1
 8007fae:	617b      	str	r3, [r7, #20]
    return period_ticks - 1u;                          // ARR = top - 1
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	3b01      	subs	r3, #1
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	3a83126f 	.word	0x3a83126f
 8007fc0:	3a83126f 	.word	0x3a83126f
 8007fc4:	3fe00000 	.word	0x3fe00000

08007fc8 <ccr_from_duty>:

static inline uint32_t ccr_from_duty(uint32_t arr, float duty) {
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	ed87 0a00 	vstr	s0, [r7]
    if (duty < 0.0f) duty = 0.0f;
 8007fd4:	edd7 7a00 	vldr	s15, [r7]
 8007fd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe0:	d502      	bpl.n	8007fe8 <ccr_from_duty+0x20>
 8007fe2:	f04f 0300 	mov.w	r3, #0
 8007fe6:	603b      	str	r3, [r7, #0]
    if (duty > 1.0f) duty = 1.0f;
 8007fe8:	edd7 7a00 	vldr	s15, [r7]
 8007fec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ff8:	dd02      	ble.n	8008000 <ccr_from_duty+0x38>
 8007ffa:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8007ffe:	603b      	str	r3, [r7, #0]
    uint32_t top = arr + 1u;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	3301      	adds	r3, #1
 8008004:	60bb      	str	r3, [r7, #8]
    uint32_t ccr = (uint32_t)((float)top * (float)duty + 0.5f);
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	ee07 3a90 	vmov	s15, r3
 800800c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008010:	edd7 7a00 	vldr	s15, [r7]
 8008014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008018:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800801c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008024:	ee17 3a90 	vmov	r3, s15
 8008028:	60fb      	str	r3, [r7, #12]
    if (ccr > arr) ccr = arr;
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	429a      	cmp	r2, r3
 8008030:	d901      	bls.n	8008036 <ccr_from_duty+0x6e>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	60fb      	str	r3, [r7, #12]
    return ccr;
 8008036:	68fb      	ldr	r3, [r7, #12]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3714      	adds	r7, #20
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <pwm_init>:
// 1) make this non-static and let caller provide storage, or
// 2) keep an array of TIM_HandleTypeDef.
HAL_StatusTypeDef pwm_init(pwm_t *esc,
    TIM_HandleTypeDef *htim, uint32_t channel,
    uint32_t timer_clock_hz, float pwm_hz, float duty)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b09c      	sub	sp, #112	@ 0x70
 8008048:	af00      	add	r7, sp, #0
 800804a:	6178      	str	r0, [r7, #20]
 800804c:	6139      	str	r1, [r7, #16]
 800804e:	60fa      	str	r2, [r7, #12]
 8008050:	60bb      	str	r3, [r7, #8]
 8008052:	ed87 0a01 	vstr	s0, [r7, #4]
 8008056:	edc7 0a00 	vstr	s1, [r7]
    if (!esc || !htim) return HAL_ERROR;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <pwm_init+0x22>
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <pwm_init+0x26>
 8008066:	2301      	movs	r3, #1
 8008068:	e0de      	b.n	8008228 <pwm_init+0x1e4>
    if (timer_clock_hz < 1000000u) return HAL_ERROR;
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	4a70      	ldr	r2, [pc, #448]	@ (8008230 <pwm_init+0x1ec>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d801      	bhi.n	8008076 <pwm_init+0x32>
 8008072:	2301      	movs	r3, #1
 8008074:	e0d8      	b.n	8008228 <pwm_init+0x1e4>

    HAL_StatusTypeDef st;
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008076:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800807a:	2200      	movs	r2, #0
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8008080:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8008084:	2200      	movs	r2, #0
 8008086:	601a      	str	r2, [r3, #0]
 8008088:	605a      	str	r2, [r3, #4]
 800808a:	609a      	str	r2, [r3, #8]
 800808c:	60da      	str	r2, [r3, #12]
 800808e:	611a      	str	r2, [r3, #16]
 8008090:	615a      	str	r2, [r3, #20]
 8008092:	619a      	str	r2, [r3, #24]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008094:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008098:	2200      	movs	r2, #0
 800809a:	601a      	str	r2, [r3, #0]
 800809c:	605a      	str	r2, [r3, #4]
 800809e:	609a      	str	r2, [r3, #8]
 80080a0:	60da      	str	r2, [r3, #12]

    esc->htim       = htim;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	601a      	str	r2, [r3, #0]
    esc->channel    = channel;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	605a      	str	r2, [r3, #4]
    esc->tim_clk_hz = timer_clock_hz;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	ee07 3a90 	vmov	s15, r3
 80080b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	edc3 7a02 	vstr	s15, [r3, #8]
    esc->pwm_hz     = (pwm_hz <= 0.0f) ? 50.0f : pwm_hz;
 80080be:	edd7 7a01 	vldr	s15, [r7, #4]
 80080c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80080c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ca:	d801      	bhi.n	80080d0 <pwm_init+0x8c>
 80080cc:	4b59      	ldr	r3, [pc, #356]	@ (8008234 <pwm_init+0x1f0>)
 80080ce:	e000      	b.n	80080d2 <pwm_init+0x8e>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	60d3      	str	r3, [r2, #12]
    esc->duty       = (duty < 0.0f) ? 0.0f : (duty > 1.0f ? 1.0f : duty);
 80080d6:	edd7 7a00 	vldr	s15, [r7]
 80080da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80080de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e2:	d502      	bpl.n	80080ea <pwm_init+0xa6>
 80080e4:	f04f 0300 	mov.w	r3, #0
 80080e8:	e00c      	b.n	8008104 <pwm_init+0xc0>
 80080ea:	edd7 7a00 	vldr	s15, [r7]
 80080ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080fa:	dd02      	ble.n	8008102 <pwm_init+0xbe>
 80080fc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8008100:	e000      	b.n	8008104 <pwm_init+0xc0>
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	6113      	str	r3, [r2, #16]

    uint32_t psc = (timer_clock_hz / 1000000u) - 1u;  // 1 MHz base
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	4a4b      	ldr	r2, [pc, #300]	@ (8008238 <pwm_init+0x1f4>)
 800810c:	fba2 2303 	umull	r2, r3, r2, r3
 8008110:	0c9b      	lsrs	r3, r3, #18
 8008112:	3b01      	subs	r3, #1
 8008114:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (psc > 0xFFFFu) return HAL_ERROR;
 8008116:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800811c:	d301      	bcc.n	8008122 <pwm_init+0xde>
 800811e:	2301      	movs	r3, #1
 8008120:	e082      	b.n	8008228 <pwm_init+0x1e4>

    //HAL_TIM_Base_DeInit(htim);
    HAL_TIM_PWM_DeInit(htim);
 8008122:	6938      	ldr	r0, [r7, #16]
 8008124:	f006 f811 	bl	800e14a <HAL_TIM_PWM_DeInit>

    htim->Init.Prescaler         = psc;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800812c:	605a      	str	r2, [r3, #4]
    htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	2200      	movs	r2, #0
 8008132:	609a      	str	r2, [r3, #8]
    htim->Init.Period            = arr_from_freqf(1000000u, esc->pwm_hz);
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	edd3 7a03 	vldr	s15, [r3, #12]
 800813a:	eeb0 0a67 	vmov.f32	s0, s15
 800813e:	483f      	ldr	r0, [pc, #252]	@ (800823c <pwm_init+0x1f8>)
 8008140:	f7ff ff00 	bl	8007f44 <arr_from_freqf>
 8008144:	4602      	mov	r2, r0
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	60da      	str	r2, [r3, #12]
    htim->Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	2200      	movs	r2, #0
 800814e:	611a      	str	r2, [r3, #16]
    htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	2280      	movs	r2, #128	@ 0x80
 8008154:	619a      	str	r2, [r3, #24]

    st = HAL_TIM_Base_Init(htim);
 8008156:	6938      	ldr	r0, [r7, #16]
 8008158:	f005 fe80 	bl	800de5c <HAL_TIM_Base_Init>
 800815c:	4603      	mov	r3, r0
 800815e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (st != HAL_OK) return st;
 8008162:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008166:	2b00      	cmp	r3, #0
 8008168:	d002      	beq.n	8008170 <pwm_init+0x12c>
 800816a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800816e:	e05b      	b.n	8008228 <pwm_init+0x1e4>


    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008170:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008174:	637b      	str	r3, [r7, #52]	@ 0x34
    st = HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig);
 8008176:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800817a:	4619      	mov	r1, r3
 800817c:	6938      	ldr	r0, [r7, #16]
 800817e:	f006 fac7 	bl	800e710 <HAL_TIM_ConfigClockSource>
 8008182:	4603      	mov	r3, r0
 8008184:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

    st = HAL_TIM_PWM_Init(htim);
 8008188:	6938      	ldr	r0, [r7, #16]
 800818a:	f005 ff8f 	bl	800e0ac <HAL_TIM_PWM_Init>
 800818e:	4603      	mov	r3, r0
 8008190:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (st != HAL_OK) return st;
 8008194:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008198:	2b00      	cmp	r3, #0
 800819a:	d002      	beq.n	80081a2 <pwm_init+0x15e>
 800819c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80081a0:	e042      	b.n	8008228 <pwm_init+0x1e4>


    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80081a2:	2300      	movs	r3, #0
 80081a4:	663b      	str	r3, [r7, #96]	@ 0x60
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80081a6:	2300      	movs	r3, #0
 80081a8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig);
 80081aa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80081ae:	4619      	mov	r1, r3
 80081b0:	6938      	ldr	r0, [r7, #16]
 80081b2:	f006 feb9 	bl	800ef28 <HAL_TIMEx_MasterConfigSynchronization>
    if (st != HAL_OK) return st;
 80081b6:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d002      	beq.n	80081c4 <pwm_init+0x180>
 80081be:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80081c2:	e031      	b.n	8008228 <pwm_init+0x1e4>


    TIM_OC_InitTypeDef oc = {0};
 80081c4:	f107 0318 	add.w	r3, r7, #24
 80081c8:	2200      	movs	r2, #0
 80081ca:	601a      	str	r2, [r3, #0]
 80081cc:	605a      	str	r2, [r3, #4]
 80081ce:	609a      	str	r2, [r3, #8]
 80081d0:	60da      	str	r2, [r3, #12]
 80081d2:	611a      	str	r2, [r3, #16]
 80081d4:	615a      	str	r2, [r3, #20]
 80081d6:	619a      	str	r2, [r3, #24]
    oc.OCMode     = TIM_OCMODE_PWM1;
 80081d8:	2360      	movs	r3, #96	@ 0x60
 80081da:	61bb      	str	r3, [r7, #24]
    oc.OCPolarity = TIM_OCPOLARITY_HIGH;
 80081dc:	2300      	movs	r3, #0
 80081de:	623b      	str	r3, [r7, #32]
    oc.OCFastMode = TIM_OCFAST_DISABLE;
 80081e0:	2300      	movs	r3, #0
 80081e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    oc.Pulse      = ccr_from_duty(htim->Init.Period, esc->duty);
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	68da      	ldr	r2, [r3, #12]
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80081ee:	eeb0 0a67 	vmov.f32	s0, s15
 80081f2:	4610      	mov	r0, r2
 80081f4:	f7ff fee8 	bl	8007fc8 <ccr_from_duty>
 80081f8:	4603      	mov	r3, r0
 80081fa:	61fb      	str	r3, [r7, #28]

    st = HAL_TIM_PWM_ConfigChannel(htim, &oc, channel);
 80081fc:	f107 0318 	add.w	r3, r7, #24
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	4619      	mov	r1, r3
 8008204:	6938      	ldr	r0, [r7, #16]
 8008206:	f006 f9c1 	bl	800e58c <HAL_TIM_PWM_ConfigChannel>
 800820a:	4603      	mov	r3, r0
 800820c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (st != HAL_OK) return st;
 8008210:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008214:	2b00      	cmp	r3, #0
 8008216:	d002      	beq.n	800821e <pwm_init+0x1da>
 8008218:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800821c:	e004      	b.n	8008228 <pwm_init+0x1e4>

    return HAL_TIM_PWM_Start(htim, channel);
 800821e:	68f9      	ldr	r1, [r7, #12]
 8008220:	6938      	ldr	r0, [r7, #16]
 8008222:	f005 fffb 	bl	800e21c <HAL_TIM_PWM_Start>
 8008226:	4603      	mov	r3, r0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3770      	adds	r7, #112	@ 0x70
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	000f423f 	.word	0x000f423f
 8008234:	42480000 	.word	0x42480000
 8008238:	431bde83 	.word	0x431bde83
 800823c:	000f4240 	.word	0x000f4240

08008240 <pwm_set_duty>:



void pwm_set_duty(pwm_t *esc, float duty_0_1) {
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	ed87 0a00 	vstr	s0, [r7]
    if (!esc) return;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d04a      	beq.n	80082e8 <pwm_set_duty+0xa8>
    esc->duty = (duty_0_1 < 0.0f) ? 0.0f : (duty_0_1 > 1.0f ? 1.0f : duty_0_1);
 8008252:	edd7 7a00 	vldr	s15, [r7]
 8008256:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800825a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800825e:	d502      	bpl.n	8008266 <pwm_set_duty+0x26>
 8008260:	f04f 0300 	mov.w	r3, #0
 8008264:	e00c      	b.n	8008280 <pwm_set_duty+0x40>
 8008266:	edd7 7a00 	vldr	s15, [r7]
 800826a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800826e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008276:	dd02      	ble.n	800827e <pwm_set_duty+0x3e>
 8008278:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800827c:	e000      	b.n	8008280 <pwm_set_duty+0x40>
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	6113      	str	r3, [r2, #16]
    uint32_t arr = __HAL_TIM_GET_AUTORELOAD(esc->htim);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800828c:	60fb      	str	r3, [r7, #12]
    uint32_t ccr = ccr_from_duty(arr, esc->duty);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	edd3 7a04 	vldr	s15, [r3, #16]
 8008294:	eeb0 0a67 	vmov.f32	s0, s15
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f7ff fe95 	bl	8007fc8 <ccr_from_duty>
 800829e:	60b8      	str	r0, [r7, #8]
    __HAL_TIM_SET_COMPARE(esc->htim, esc->channel, ccr);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d105      	bne.n	80082b4 <pwm_set_duty+0x74>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80082b2:	e01a      	b.n	80082ea <pwm_set_duty+0xaa>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	d105      	bne.n	80082c8 <pwm_set_duty+0x88>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	6393      	str	r3, [r2, #56]	@ 0x38
 80082c6:	e010      	b.n	80082ea <pwm_set_duty+0xaa>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	2b08      	cmp	r3, #8
 80082ce:	d105      	bne.n	80082dc <pwm_set_duty+0x9c>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80082da:	e006      	b.n	80082ea <pwm_set_duty+0xaa>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80082e6:	e000      	b.n	80082ea <pwm_set_duty+0xaa>
    if (!esc) return;
 80082e8:	bf00      	nop
}
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <esc_pwm_throttle_to_duty_cycle>:
    HAL_TIM_GenerateEvent(esc->htim, TIM_EVENTSOURCE_UPDATE);
    __HAL_TIM_ENABLE(esc->htim);
}

float esc_pwm_throttle_to_duty_cycle(float pwm_hz, float min_us, float max_us, float throttle)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b089      	sub	sp, #36	@ 0x24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80082fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80082fe:	ed87 1a01 	vstr	s2, [r7, #4]
 8008302:	edc7 1a00 	vstr	s3, [r7]
    if (throttle < 0.0f) throttle = 0.0f;
 8008306:	edd7 7a00 	vldr	s15, [r7]
 800830a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800830e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008312:	d502      	bpl.n	800831a <esc_pwm_throttle_to_duty_cycle+0x2a>
 8008314:	f04f 0300 	mov.w	r3, #0
 8008318:	603b      	str	r3, [r7, #0]
    if (throttle > 1.0f) throttle = 1.0f;
 800831a:	edd7 7a00 	vldr	s15, [r7]
 800831e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008322:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800832a:	dd02      	ble.n	8008332 <esc_pwm_throttle_to_duty_cycle+0x42>
 800832c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8008330:	603b      	str	r3, [r7, #0]

    // Period of the PWM in microseconds
    float period_us = 1000000.0f / pwm_hz;
 8008332:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80083b4 <esc_pwm_throttle_to_duty_cycle+0xc4>
 8008336:	ed97 7a03 	vldr	s14, [r7, #12]
 800833a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800833e:	edc7 7a06 	vstr	s15, [r7, #24]

    // Map throttle to pulse width in microseconds
    float pulse_us = min_us + throttle * (max_us - min_us);
 8008342:	ed97 7a01 	vldr	s14, [r7, #4]
 8008346:	edd7 7a02 	vldr	s15, [r7, #8]
 800834a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800834e:	edd7 7a00 	vldr	s15, [r7]
 8008352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008356:	ed97 7a02 	vldr	s14, [r7, #8]
 800835a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800835e:	edc7 7a05 	vstr	s15, [r7, #20]

    // Duty cycle = pulse / period
    float duty = pulse_us / period_us;
 8008362:	edd7 6a05 	vldr	s13, [r7, #20]
 8008366:	ed97 7a06 	vldr	s14, [r7, #24]
 800836a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800836e:	edc7 7a07 	vstr	s15, [r7, #28]

    // Clamp to [0..1]
    if (duty < 0.0f) duty = 0.0f;
 8008372:	edd7 7a07 	vldr	s15, [r7, #28]
 8008376:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800837a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800837e:	d502      	bpl.n	8008386 <esc_pwm_throttle_to_duty_cycle+0x96>
 8008380:	f04f 0300 	mov.w	r3, #0
 8008384:	61fb      	str	r3, [r7, #28]
    if (duty > 1.0f) duty = 1.0f;
 8008386:	edd7 7a07 	vldr	s15, [r7, #28]
 800838a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800838e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008396:	dd02      	ble.n	800839e <esc_pwm_throttle_to_duty_cycle+0xae>
 8008398:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800839c:	61fb      	str	r3, [r7, #28]

    return duty;
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	ee07 3a90 	vmov	s15, r3
}
 80083a4:	eeb0 0a67 	vmov.f32	s0, s15
 80083a8:	3724      	adds	r7, #36	@ 0x24
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	49742400 	.word	0x49742400

080083b8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80083b8:	b580      	push	{r7, lr}
 80083ba:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80083bc:	4a08      	ldr	r2, [pc, #32]	@ (80083e0 <MX_FREERTOS_Init+0x28>)
 80083be:	2100      	movs	r1, #0
 80083c0:	4808      	ldr	r0, [pc, #32]	@ (80083e4 <MX_FREERTOS_Init+0x2c>)
 80083c2:	f00b fba1 	bl	8013b08 <osThreadNew>
 80083c6:	4603      	mov	r3, r0
 80083c8:	4a07      	ldr	r2, [pc, #28]	@ (80083e8 <MX_FREERTOS_Init+0x30>)
 80083ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  flignt_controller_taskHandle = osThreadNew(app_main, NULL, &flignt_controller_task_attributes);
 80083cc:	4a07      	ldr	r2, [pc, #28]	@ (80083ec <MX_FREERTOS_Init+0x34>)
 80083ce:	2100      	movs	r1, #0
 80083d0:	4807      	ldr	r0, [pc, #28]	@ (80083f0 <MX_FREERTOS_Init+0x38>)
 80083d2:	f00b fb99 	bl	8013b08 <osThreadNew>
 80083d6:	4603      	mov	r3, r0
 80083d8:	4a06      	ldr	r2, [pc, #24]	@ (80083f4 <MX_FREERTOS_Init+0x3c>)
 80083da:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80083dc:	bf00      	nop
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	0802023c 	.word	0x0802023c
 80083e4:	080083f9 	.word	0x080083f9
 80083e8:	20002824 	.word	0x20002824
 80083ec:	08020218 	.word	0x08020218
 80083f0:	080091d5 	.word	0x080091d5
 80083f4:	20000778 	.word	0x20000778

080083f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8008400:	f00e fcca 	bl	8016d98 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8008404:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008408:	f00b fc10 	bl	8013c2c <osDelay>
 800840c:	e7fa      	b.n	8008404 <StartDefaultTask+0xc>
	...

08008410 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b08a      	sub	sp, #40	@ 0x28
 8008414:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008416:	f107 0314 	add.w	r3, r7, #20
 800841a:	2200      	movs	r2, #0
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	605a      	str	r2, [r3, #4]
 8008420:	609a      	str	r2, [r3, #8]
 8008422:	60da      	str	r2, [r3, #12]
 8008424:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008426:	2300      	movs	r3, #0
 8008428:	613b      	str	r3, [r7, #16]
 800842a:	4b26      	ldr	r3, [pc, #152]	@ (80084c4 <MX_GPIO_Init+0xb4>)
 800842c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800842e:	4a25      	ldr	r2, [pc, #148]	@ (80084c4 <MX_GPIO_Init+0xb4>)
 8008430:	f043 0304 	orr.w	r3, r3, #4
 8008434:	6313      	str	r3, [r2, #48]	@ 0x30
 8008436:	4b23      	ldr	r3, [pc, #140]	@ (80084c4 <MX_GPIO_Init+0xb4>)
 8008438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800843a:	f003 0304 	and.w	r3, r3, #4
 800843e:	613b      	str	r3, [r7, #16]
 8008440:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008442:	2300      	movs	r3, #0
 8008444:	60fb      	str	r3, [r7, #12]
 8008446:	4b1f      	ldr	r3, [pc, #124]	@ (80084c4 <MX_GPIO_Init+0xb4>)
 8008448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800844a:	4a1e      	ldr	r2, [pc, #120]	@ (80084c4 <MX_GPIO_Init+0xb4>)
 800844c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008450:	6313      	str	r3, [r2, #48]	@ 0x30
 8008452:	4b1c      	ldr	r3, [pc, #112]	@ (80084c4 <MX_GPIO_Init+0xb4>)
 8008454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800845a:	60fb      	str	r3, [r7, #12]
 800845c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800845e:	2300      	movs	r3, #0
 8008460:	60bb      	str	r3, [r7, #8]
 8008462:	4b18      	ldr	r3, [pc, #96]	@ (80084c4 <MX_GPIO_Init+0xb4>)
 8008464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008466:	4a17      	ldr	r2, [pc, #92]	@ (80084c4 <MX_GPIO_Init+0xb4>)
 8008468:	f043 0301 	orr.w	r3, r3, #1
 800846c:	6313      	str	r3, [r2, #48]	@ 0x30
 800846e:	4b15      	ldr	r3, [pc, #84]	@ (80084c4 <MX_GPIO_Init+0xb4>)
 8008470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	60bb      	str	r3, [r7, #8]
 8008478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800847a:	2300      	movs	r3, #0
 800847c:	607b      	str	r3, [r7, #4]
 800847e:	4b11      	ldr	r3, [pc, #68]	@ (80084c4 <MX_GPIO_Init+0xb4>)
 8008480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008482:	4a10      	ldr	r2, [pc, #64]	@ (80084c4 <MX_GPIO_Init+0xb4>)
 8008484:	f043 0302 	orr.w	r3, r3, #2
 8008488:	6313      	str	r3, [r2, #48]	@ 0x30
 800848a:	4b0e      	ldr	r3, [pc, #56]	@ (80084c4 <MX_GPIO_Init+0xb4>)
 800848c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800848e:	f003 0302 	and.w	r3, r3, #2
 8008492:	607b      	str	r3, [r7, #4]
 8008494:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8008496:	2200      	movs	r2, #0
 8008498:	2110      	movs	r1, #16
 800849a:	480b      	ldr	r0, [pc, #44]	@ (80084c8 <MX_GPIO_Init+0xb8>)
 800849c:	f002 ffd6 	bl	800b44c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80084a0:	2310      	movs	r3, #16
 80084a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80084a4:	2301      	movs	r3, #1
 80084a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084a8:	2300      	movs	r3, #0
 80084aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084ac:	2300      	movs	r3, #0
 80084ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80084b0:	f107 0314 	add.w	r3, r7, #20
 80084b4:	4619      	mov	r1, r3
 80084b6:	4804      	ldr	r0, [pc, #16]	@ (80084c8 <MX_GPIO_Init+0xb8>)
 80084b8:	f002 fd30 	bl	800af1c <HAL_GPIO_Init>

}
 80084bc:	bf00      	nop
 80084be:	3728      	adds	r7, #40	@ 0x28
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	40023800 	.word	0x40023800
 80084c8:	40020000 	.word	0x40020000

080084cc <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *data, int len) {
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
    static char err_header[] = "ERROR->";
int sent_size = len;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	617b      	str	r3, [r7, #20]
    if (file == 2) { // stderror to usb
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d103      	bne.n	80084ea <_write+0x1e>
        //CDC_Transmit_FS((uint8_t*)err_header, sizeof(err_header) - 1);
        usart1_send_data(err_header, sizeof(err_header) - 1);
 80084e2:	2107      	movs	r1, #7
 80084e4:	4807      	ldr	r0, [pc, #28]	@ (8008504 <_write+0x38>)
 80084e6:	f001 fe27 	bl	800a138 <usart1_send_data>
    }
    //CDC_Transmit_FS((uint8_t*)data, len);
    sent_size = usart1_send_data(data, len);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4619      	mov	r1, r3
 80084ee:	68b8      	ldr	r0, [r7, #8]
 80084f0:	f001 fe22 	bl	800a138 <usart1_send_data>
 80084f4:	4603      	mov	r3, r0
 80084f6:	617b      	str	r3, [r7, #20]
    return sent_size;
 80084f8:	697b      	ldr	r3, [r7, #20]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3718      	adds	r7, #24
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	2000004c 	.word	0x2000004c

08008508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800850c:	f001 ff2c 	bl	800a368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008510:	f000 f818 	bl	8008544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008514:	f7ff ff7c 	bl	8008410 <MX_GPIO_Init>
  MX_DMA_Init();
 8008518:	f7ff fcec 	bl	8007ef4 <MX_DMA_Init>
  MX_SPI1_Init();
 800851c:	f000 fee4 	bl	80092e8 <MX_SPI1_Init>
  MX_TIM4_Init();
 8008520:	f001 f9c2 	bl	80098a8 <MX_TIM4_Init>
  MX_TIM2_Init();
 8008524:	f001 f92a 	bl	800977c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8008528:	f001 faa6 	bl	8009a78 <MX_USART1_UART_Init>
  //HAL_UART_Receive_DMA(&huart1, uart_rx_buffer, UART_RX_BUFFER_SIZE);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800852c:	f00b faa2 	bl	8013a74 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8008530:	f7ff ff42 	bl	80083b8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8008534:	f00b fac2 	bl	8013abc <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //dshot_test_sweep();
	  HAL_Delay(1000); // Only runs if scheduler fails
 8008538:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800853c:	f001 ff56 	bl	800a3ec <HAL_Delay>
 8008540:	e7fa      	b.n	8008538 <main+0x30>
	...

08008544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b094      	sub	sp, #80	@ 0x50
 8008548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800854a:	f107 0320 	add.w	r3, r7, #32
 800854e:	2230      	movs	r2, #48	@ 0x30
 8008550:	2100      	movs	r1, #0
 8008552:	4618      	mov	r0, r3
 8008554:	f011 ffe6 	bl	801a524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008558:	f107 030c 	add.w	r3, r7, #12
 800855c:	2200      	movs	r2, #0
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	605a      	str	r2, [r3, #4]
 8008562:	609a      	str	r2, [r3, #8]
 8008564:	60da      	str	r2, [r3, #12]
 8008566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008568:	2300      	movs	r3, #0
 800856a:	60bb      	str	r3, [r7, #8]
 800856c:	4b28      	ldr	r3, [pc, #160]	@ (8008610 <SystemClock_Config+0xcc>)
 800856e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008570:	4a27      	ldr	r2, [pc, #156]	@ (8008610 <SystemClock_Config+0xcc>)
 8008572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008576:	6413      	str	r3, [r2, #64]	@ 0x40
 8008578:	4b25      	ldr	r3, [pc, #148]	@ (8008610 <SystemClock_Config+0xcc>)
 800857a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800857c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008580:	60bb      	str	r3, [r7, #8]
 8008582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008584:	2300      	movs	r3, #0
 8008586:	607b      	str	r3, [r7, #4]
 8008588:	4b22      	ldr	r3, [pc, #136]	@ (8008614 <SystemClock_Config+0xd0>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a21      	ldr	r2, [pc, #132]	@ (8008614 <SystemClock_Config+0xd0>)
 800858e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008592:	6013      	str	r3, [r2, #0]
 8008594:	4b1f      	ldr	r3, [pc, #124]	@ (8008614 <SystemClock_Config+0xd0>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800859c:	607b      	str	r3, [r7, #4]
 800859e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80085a0:	2301      	movs	r3, #1
 80085a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80085a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80085a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80085aa:	2302      	movs	r3, #2
 80085ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80085ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80085b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80085b4:	2304      	movs	r3, #4
 80085b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80085b8:	23a8      	movs	r3, #168	@ 0xa8
 80085ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80085bc:	2302      	movs	r3, #2
 80085be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80085c0:	2307      	movs	r3, #7
 80085c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80085c4:	f107 0320 	add.w	r3, r7, #32
 80085c8:	4618      	mov	r0, r3
 80085ca:	f004 f9ab 	bl	800c924 <HAL_RCC_OscConfig>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80085d4:	f000 f832 	bl	800863c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80085d8:	230f      	movs	r3, #15
 80085da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80085dc:	2302      	movs	r3, #2
 80085de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085e0:	2300      	movs	r3, #0
 80085e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80085e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80085e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80085ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80085ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80085f0:	f107 030c 	add.w	r3, r7, #12
 80085f4:	2105      	movs	r1, #5
 80085f6:	4618      	mov	r0, r3
 80085f8:	f004 fc0c 	bl	800ce14 <HAL_RCC_ClockConfig>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8008602:	f000 f81b 	bl	800863c <Error_Handler>
  }
}
 8008606:	bf00      	nop
 8008608:	3750      	adds	r7, #80	@ 0x50
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	40023800 	.word	0x40023800
 8008614:	40007000 	.word	0x40007000

08008618 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a04      	ldr	r2, [pc, #16]	@ (8008638 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d101      	bne.n	800862e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800862a:	f001 febf 	bl	800a3ac <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else if(htim == &htim4){
		//flight_controller_loop();
	}
  /* USER CODE END Callback 1 */
}
 800862e:	bf00      	nop
 8008630:	3708      	adds	r7, #8
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	40010000 	.word	0x40010000

0800863c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800863c:	b480      	push	{r7}
 800863e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008640:	b672      	cpsid	i
}
 8008642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008644:	bf00      	nop
 8008646:	e7fd      	b.n	8008644 <Error_Handler+0x8>

08008648 <ctrl_timer_cb>:

static TaskHandle_t ctrl_task_h;
static TaskHandle_t write_motor_main_h;

static void ctrl_timer_cb(TimerHandle_t arg)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
     BaseType_t hpw = pdFALSE;
 8008650:	2300      	movs	r3, #0
 8008652:	60fb      	str	r3, [r7, #12]
     vTaskNotifyGiveFromISR(ctrl_task_h, &hpw);
 8008654:	4b0c      	ldr	r3, [pc, #48]	@ (8008688 <ctrl_timer_cb+0x40>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f107 020c 	add.w	r2, r7, #12
 800865c:	4611      	mov	r1, r2
 800865e:	4618      	mov	r0, r3
 8008660:	f00d faba 	bl	8015bd8 <vTaskNotifyGiveFromISR>
     if (hpw) portYIELD_FROM_ISR(hpw);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00a      	beq.n	8008680 <ctrl_timer_cb+0x38>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d007      	beq.n	8008680 <ctrl_timer_cb+0x38>
 8008670:	4b06      	ldr	r3, [pc, #24]	@ (800868c <ctrl_timer_cb+0x44>)
 8008672:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	f3bf 8f6f 	isb	sy
    //xTaskNotifyGive(ctrl_task_h);   // task-context safe
}
 8008680:	bf00      	nop
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	20002c90 	.word	0x20002c90
 800868c:	e000ed04 	.word	0xe000ed04

08008690 <write_motor_timer_cb>:

static void write_motor_timer_cb(TimerHandle_t arg)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
     BaseType_t hpw = pdFALSE;
 8008698:	2300      	movs	r3, #0
 800869a:	60fb      	str	r3, [r7, #12]
     vTaskNotifyGiveFromISR(write_motor_main_h, &hpw);
 800869c:	4b0c      	ldr	r3, [pc, #48]	@ (80086d0 <write_motor_timer_cb+0x40>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f107 020c 	add.w	r2, r7, #12
 80086a4:	4611      	mov	r1, r2
 80086a6:	4618      	mov	r0, r3
 80086a8:	f00d fa96 	bl	8015bd8 <vTaskNotifyGiveFromISR>
     if (hpw) portYIELD_FROM_ISR(hpw);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00a      	beq.n	80086c8 <write_motor_timer_cb+0x38>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d007      	beq.n	80086c8 <write_motor_timer_cb+0x38>
 80086b8:	4b06      	ldr	r3, [pc, #24]	@ (80086d4 <write_motor_timer_cb+0x44>)
 80086ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	f3bf 8f6f 	isb	sy
    //xTaskNotifyGive(write_motor_main_h);   // task-context safe
}
 80086c8:	bf00      	nop
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	20002c94 	.word	0x20002c94
 80086d4:	e000ed04 	.word	0xe000ed04

080086d8 <init_imu>:

static void init_imu(){
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
    int16_t temp_int16_t;
    uint8_t mpu_res;
	mpu_res = mpu6500_basic_init(MPU6500_INTERFACE_SPI, MPU6500_ADDRESS_0x68);
 80086de:	2168      	movs	r1, #104	@ 0x68
 80086e0:	2001      	movs	r0, #1
 80086e2:	f7fc f8d1 	bl	8004888 <mpu6500_basic_init>
 80086e6:	4603      	mov	r3, r0
 80086e8:	71fb      	strb	r3, [r7, #7]
	if(mpu_res == 0){
 80086ea:	79fb      	ldrb	r3, [r7, #7]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d14e      	bne.n	800878e <init_imu+0xb6>
		  mpu6500_gyro_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 80086f0:	1d3b      	adds	r3, r7, #4
 80086f2:	4619      	mov	r1, r3
 80086f4:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800879c <init_imu+0xc4>
 80086f8:	4829      	ldr	r0, [pc, #164]	@ (80087a0 <init_imu+0xc8>)
 80086fa:	f7ff fa33 	bl	8007b64 <mpu6500_gyro_offset_convert_to_register>
		  mpu6500_set_gyro_x_offset(&gs_handle_mpu6500, temp_int16_t);
 80086fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008702:	4619      	mov	r1, r3
 8008704:	4826      	ldr	r0, [pc, #152]	@ (80087a0 <init_imu+0xc8>)
 8008706:	f7ff f991 	bl	8007a2c <mpu6500_set_gyro_x_offset>

		  mpu6500_gyro_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 800870a:	1d3b      	adds	r3, r7, #4
 800870c:	4619      	mov	r1, r3
 800870e:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 800879c <init_imu+0xc4>
 8008712:	4823      	ldr	r0, [pc, #140]	@ (80087a0 <init_imu+0xc8>)
 8008714:	f7ff fa26 	bl	8007b64 <mpu6500_gyro_offset_convert_to_register>
		  mpu6500_set_gyro_y_offset(&gs_handle_mpu6500, temp_int16_t);
 8008718:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800871c:	4619      	mov	r1, r3
 800871e:	4820      	ldr	r0, [pc, #128]	@ (80087a0 <init_imu+0xc8>)
 8008720:	f7ff f9b8 	bl	8007a94 <mpu6500_set_gyro_y_offset>

		  mpu6500_gyro_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 8008724:	1d3b      	adds	r3, r7, #4
 8008726:	4619      	mov	r1, r3
 8008728:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 800879c <init_imu+0xc4>
 800872c:	481c      	ldr	r0, [pc, #112]	@ (80087a0 <init_imu+0xc8>)
 800872e:	f7ff fa19 	bl	8007b64 <mpu6500_gyro_offset_convert_to_register>
		  mpu6500_set_gyro_z_offset(&gs_handle_mpu6500, temp_int16_t);
 8008732:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008736:	4619      	mov	r1, r3
 8008738:	4819      	ldr	r0, [pc, #100]	@ (80087a0 <init_imu+0xc8>)
 800873a:	f7ff f9df 	bl	8007afc <mpu6500_set_gyro_z_offset>


		  mpu6500_accelerometer_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 800873e:	1d3b      	adds	r3, r7, #4
 8008740:	4619      	mov	r1, r3
 8008742:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800879c <init_imu+0xc4>
 8008746:	4816      	ldr	r0, [pc, #88]	@ (80087a0 <init_imu+0xc8>)
 8008748:	f7ff f946 	bl	80079d8 <mpu6500_accelerometer_offset_convert_to_register>
		  mpu6500_set_accelerometer_x_offset(&gs_handle_mpu6500, temp_int16_t);
 800874c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008750:	4619      	mov	r1, r3
 8008752:	4813      	ldr	r0, [pc, #76]	@ (80087a0 <init_imu+0xc8>)
 8008754:	f7ff f8a4 	bl	80078a0 <mpu6500_set_accelerometer_x_offset>

		  mpu6500_accelerometer_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 8008758:	1d3b      	adds	r3, r7, #4
 800875a:	4619      	mov	r1, r3
 800875c:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 800879c <init_imu+0xc4>
 8008760:	480f      	ldr	r0, [pc, #60]	@ (80087a0 <init_imu+0xc8>)
 8008762:	f7ff f939 	bl	80079d8 <mpu6500_accelerometer_offset_convert_to_register>
		  mpu6500_set_accelerometer_y_offset(&gs_handle_mpu6500, temp_int16_t);
 8008766:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800876a:	4619      	mov	r1, r3
 800876c:	480c      	ldr	r0, [pc, #48]	@ (80087a0 <init_imu+0xc8>)
 800876e:	f7ff f8cb 	bl	8007908 <mpu6500_set_accelerometer_y_offset>

		  mpu6500_accelerometer_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 8008772:	1d3b      	adds	r3, r7, #4
 8008774:	4619      	mov	r1, r3
 8008776:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800879c <init_imu+0xc4>
 800877a:	4809      	ldr	r0, [pc, #36]	@ (80087a0 <init_imu+0xc8>)
 800877c:	f7ff f92c 	bl	80079d8 <mpu6500_accelerometer_offset_convert_to_register>
		  mpu6500_set_accelerometer_z_offset(&gs_handle_mpu6500, temp_int16_t);
 8008780:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008784:	4619      	mov	r1, r3
 8008786:	4806      	ldr	r0, [pc, #24]	@ (80087a0 <init_imu+0xc8>)
 8008788:	f7ff f8f2 	bl	8007970 <mpu6500_set_accelerometer_z_offset>
	  }
	  else{
		  printf("MPU6500 failed to initialize");
	  }
}
 800878c:	e002      	b.n	8008794 <init_imu+0xbc>
		  printf("MPU6500 failed to initialize");
 800878e:	4805      	ldr	r0, [pc, #20]	@ (80087a4 <init_imu+0xcc>)
 8008790:	f011 fd0e 	bl	801a1b0 <iprintf>
}
 8008794:	bf00      	nop
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	00000000 	.word	0x00000000
 80087a0:	20000338 	.word	0x20000338
 80087a4:	08020090 	.word	0x08020090

080087a8 <flight_controller_main>:


static void flight_controller_main(void *arg)
{
 80087a8:	b590      	push	{r4, r7, lr}
 80087aa:	b095      	sub	sp, #84	@ 0x54
 80087ac:	af02      	add	r7, sp, #8
 80087ae:	6078      	str	r0, [r7, #4]
    init_imu();
 80087b0:	f7ff ff92 	bl	80086d8 <init_imu>
    flight_control_loop_init(&fcl);
 80087b4:	4851      	ldr	r0, [pc, #324]	@ (80088fc <flight_controller_main+0x154>)
 80087b6:	f7f9 f88d 	bl	80018d4 <flight_control_loop_init>
    flight_control_loop_disarm_esc(&fcl);
 80087ba:	4850      	ldr	r0, [pc, #320]	@ (80088fc <flight_controller_main+0x154>)
 80087bc:	f7f9 f84b 	bl	8001856 <flight_control_loop_disarm_esc>
    float accel[3];
    float gyro[3];
    coord3D gyro_data;
    coord3D accel_data;

    ctrl_task_h = xTaskGetCurrentTaskHandle();
 80087c0:	f00d f820 	bl	8015804 <xTaskGetCurrentTaskHandle>
 80087c4:	4603      	mov	r3, r0
 80087c6:	4a4e      	ldr	r2, [pc, #312]	@ (8008900 <flight_controller_main+0x158>)
 80087c8:	6013      	str	r3, [r2, #0]

        static TimerHandle_t tmr = NULL;
        if (tmr == NULL) {
 80087ca:	4b4e      	ldr	r3, [pc, #312]	@ (8008904 <flight_controller_main+0x15c>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10a      	bne.n	80087e8 <flight_controller_main+0x40>
        	tmr = xTimerCreate(
 80087d2:	4b4d      	ldr	r3, [pc, #308]	@ (8008908 <flight_controller_main+0x160>)
 80087d4:	9300      	str	r3, [sp, #0]
 80087d6:	2300      	movs	r3, #0
 80087d8:	2201      	movs	r2, #1
 80087da:	2101      	movs	r1, #1
 80087dc:	484b      	ldr	r0, [pc, #300]	@ (800890c <flight_controller_main+0x164>)
 80087de:	f00d fb2f 	bl	8015e40 <xTimerCreate>
 80087e2:	4603      	mov	r3, r0
 80087e4:	4a47      	ldr	r2, [pc, #284]	@ (8008904 <flight_controller_main+0x15c>)
 80087e6:	6013      	str	r3, [r2, #0]
                NULL,                             // timer ID used to carry arg
				ctrl_timer_cb                // callback
            );
        }

        if (tmr != NULL) {
 80087e8:	4b46      	ldr	r3, [pc, #280]	@ (8008904 <flight_controller_main+0x15c>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00b      	beq.n	8008808 <flight_controller_main+0x60>
            xTimerStart(tmr, 0);
 80087f0:	4b44      	ldr	r3, [pc, #272]	@ (8008904 <flight_controller_main+0x15c>)
 80087f2:	681c      	ldr	r4, [r3, #0]
 80087f4:	f00c fcbe 	bl	8015174 <xTaskGetTickCount>
 80087f8:	4602      	mov	r2, r0
 80087fa:	2300      	movs	r3, #0
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	2300      	movs	r3, #0
 8008800:	2101      	movs	r1, #1
 8008802:	4620      	mov	r0, r4
 8008804:	f00d fb7a 	bl	8015efc <xTimerGenericCommand>
        }

    /* set 1 */
      for (;;)
      {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8008808:	f04f 31ff 	mov.w	r1, #4294967295
 800880c:	2001      	movs	r0, #1
 800880e:	f00d f997 	bl	8015b40 <ulTaskNotifyTake>

        len = 1;
 8008812:	2301      	movs	r3, #1
 8008814:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        if (mpu6500_read(&gs_handle_mpu6500,
 8008818:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800881c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008820:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8008824:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 8008828:	9301      	str	r3, [sp, #4]
 800882a:	f107 0320 	add.w	r3, r7, #32
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	4603      	mov	r3, r0
 8008832:	4837      	ldr	r0, [pc, #220]	@ (8008910 <flight_controller_main+0x168>)
 8008834:	f7fc ff74 	bl	8005720 <mpu6500_read>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d006      	beq.n	800884c <flight_controller_main+0xa4>
                    (int16_t (*)[3])&accel_raw, (float (*)[3])&accel,
                    (int16_t (*)[3])&gyro_raw, (float (*)[3])&gyro,
                     &len) != 0
                    )
        {
            printf("MPU6500 read error\n");
 800883e:	4835      	ldr	r0, [pc, #212]	@ (8008914 <flight_controller_main+0x16c>)
 8008840:	f011 fd26 	bl	801a290 <puts>
            flight_control_loop_disarm_esc(&fcl);
 8008844:	482d      	ldr	r0, [pc, #180]	@ (80088fc <flight_controller_main+0x154>)
 8008846:	f7f9 f806 	bl	8001856 <flight_control_loop_disarm_esc>
 800884a:	e052      	b.n	80088f2 <flight_controller_main+0x14a>
            //return; // implement some form of recovery if the mpu read fails
        }
        else{
            accel_data.x = G2MS2(accel[0]);
 800884c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8008850:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8008918 <flight_controller_main+0x170>
 8008854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008858:	edc7 7a02 	vstr	s15, [r7, #8]
            accel_data.y = -G2MS2(accel[1]);
 800885c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8008860:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8008918 <flight_controller_main+0x170>
 8008864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008868:	eef1 7a67 	vneg.f32	s15, s15
 800886c:	edc7 7a03 	vstr	s15, [r7, #12]
            accel_data.z = -G2MS2(accel[2]);
 8008870:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8008874:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8008918 <flight_controller_main+0x170>
 8008878:	ee67 7a87 	vmul.f32	s15, s15, s14
 800887c:	eef1 7a67 	vneg.f32	s15, s15
 8008880:	edc7 7a04 	vstr	s15, [r7, #16]
            gyro_data.x = radians(gyro[0]);
 8008884:	edd7 7a08 	vldr	s15, [r7, #32]
 8008888:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800891c <flight_controller_main+0x174>
 800888c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008890:	edc7 7a05 	vstr	s15, [r7, #20]
            gyro_data.y = -radians(gyro[1]);
 8008894:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8008898:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800891c <flight_controller_main+0x174>
 800889c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80088a0:	eef1 7a67 	vneg.f32	s15, s15
 80088a4:	edc7 7a06 	vstr	s15, [r7, #24]
            gyro_data.z = -radians(gyro[2]);
 80088a8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80088ac:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800891c <flight_controller_main+0x174>
 80088b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80088b4:	eef1 7a67 	vneg.f32	s15, s15
 80088b8:	edc7 7a07 	vstr	s15, [r7, #28]
            flight_control_loop_update_imu(&fcl, gyro_data, accel_data);
 80088bc:	ed97 5a02 	vldr	s10, [r7, #8]
 80088c0:	edd7 5a03 	vldr	s11, [r7, #12]
 80088c4:	ed97 6a04 	vldr	s12, [r7, #16]
 80088c8:	edd7 6a05 	vldr	s13, [r7, #20]
 80088cc:	ed97 7a06 	vldr	s14, [r7, #24]
 80088d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80088d4:	eef0 1a45 	vmov.f32	s3, s10
 80088d8:	eeb0 2a65 	vmov.f32	s4, s11
 80088dc:	eef0 2a46 	vmov.f32	s5, s12
 80088e0:	eeb0 0a66 	vmov.f32	s0, s13
 80088e4:	eef0 0a47 	vmov.f32	s1, s14
 80088e8:	eeb0 1a67 	vmov.f32	s2, s15
 80088ec:	4803      	ldr	r0, [pc, #12]	@ (80088fc <flight_controller_main+0x154>)
 80088ee:	f7f9 faff 	bl	8001ef0 <flight_control_loop_update_imu>
        }
        flight_control_loop_tick(&fcl);
 80088f2:	4802      	ldr	r0, [pc, #8]	@ (80088fc <flight_controller_main+0x154>)
 80088f4:	f7f9 f926 	bl	8001b44 <flight_control_loop_tick>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80088f8:	e786      	b.n	8008808 <flight_controller_main+0x60>
 80088fa:	bf00      	nop
 80088fc:	20002828 	.word	0x20002828
 8008900:	20002c90 	.word	0x20002c90
 8008904:	20002ca8 	.word	0x20002ca8
 8008908:	08008649 	.word	0x08008649
 800890c:	080200b0 	.word	0x080200b0
 8008910:	20000338 	.word	0x20000338
 8008914:	080200c4 	.word	0x080200c4
 8008918:	411ce80a 	.word	0x411ce80a
 800891c:	3c8efa35 	.word	0x3c8efa35

08008920 <write_motor_main>:
      }
}


static void write_motor_main(void *arg){
 8008920:	b590      	push	{r4, r7, lr}
 8008922:	b099      	sub	sp, #100	@ 0x64
 8008924:	af02      	add	r7, sp, #8
 8008926:	6078      	str	r0, [r7, #4]
    write_motor_main_h = xTaskGetCurrentTaskHandle();
 8008928:	f00c ff6c 	bl	8015804 <xTaskGetCurrentTaskHandle>
 800892c:	4603      	mov	r3, r0
 800892e:	4a8b      	ldr	r2, [pc, #556]	@ (8008b5c <write_motor_main+0x23c>)
 8008930:	6013      	str	r3, [r2, #0]

    float duty_cycle;

    duty_cycle = esc_pwm_throttle_to_duty_cycle(ESC_PWM_HZ, ESC_PWM_MIN_US, ESC_PWM_MAX_US, 0.0f);
 8008932:	eddf 1a8b 	vldr	s3, [pc, #556]	@ 8008b60 <write_motor_main+0x240>
 8008936:	ed9f 1a8b 	vldr	s2, [pc, #556]	@ 8008b64 <write_motor_main+0x244>
 800893a:	eddf 0a8b 	vldr	s1, [pc, #556]	@ 8008b68 <write_motor_main+0x248>
 800893e:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 8008b6c <write_motor_main+0x24c>
 8008942:	f7ff fcd5 	bl	80082f0 <esc_pwm_throttle_to_duty_cycle>
 8008946:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
 800894a:	2300      	movs	r3, #0
 800894c:	647b      	str	r3, [r7, #68]	@ 0x44
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800894e:	f3ef 8310 	mrs	r3, PRIMASK
 8008952:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8008954:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
#define COMPILER_BARRIER() __asm volatile ("" ::: "memory")


__attribute__((always_inline)) static inline crit_state_t enter_critical(void)
{
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8008956:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 8008958:	b672      	cpsid	i
}
 800895a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800895c:	f3bf 8f4f 	dsb	sy
}
 8008960:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008962:	f3bf 8f6f 	isb	sy
}
 8008966:	bf00      	nop
    __disable_irq();                     // CPSID i (atomic)
    __DSB();
    __ISB();
    COMPILER_BARRIER();
    return old;
 8008968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}

/* Helpers: */
__attribute__((always_inline)) static inline crit_state_t __iBegin_custom(crit_state_t type)
{
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800896a:	63bb      	str	r3, [r7, #56]	@ 0x38
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800896c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800896e:	2b01      	cmp	r3, #1
 8008970:	d001      	beq.n	8008976 <write_motor_main+0x56>
 8008972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008974:	e000      	b.n	8008978 <write_motor_main+0x58>
 8008976:	2300      	movs	r3, #0

	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8008978:	60fb      	str	r3, [r7, #12]
 800897a:	2301      	movs	r3, #1
 800897c:	657b      	str	r3, [r7, #84]	@ 0x54
 800897e:	e029      	b.n	80089d4 <write_motor_main+0xb4>
	{
		pwm_init(&esc_motors[0], MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 8008980:	edd7 0a12 	vldr	s1, [r7, #72]	@ 0x48
 8008984:	ed9f 0a79 	vldr	s0, [pc, #484]	@ 8008b6c <write_motor_main+0x24c>
 8008988:	4b79      	ldr	r3, [pc, #484]	@ (8008b70 <write_motor_main+0x250>)
 800898a:	2200      	movs	r2, #0
 800898c:	4979      	ldr	r1, [pc, #484]	@ (8008b74 <write_motor_main+0x254>)
 800898e:	487a      	ldr	r0, [pc, #488]	@ (8008b78 <write_motor_main+0x258>)
 8008990:	f7ff fb58 	bl	8008044 <pwm_init>
		pwm_init(&esc_motors[1], MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 8008994:	edd7 0a12 	vldr	s1, [r7, #72]	@ 0x48
 8008998:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 8008b6c <write_motor_main+0x24c>
 800899c:	4b74      	ldr	r3, [pc, #464]	@ (8008b70 <write_motor_main+0x250>)
 800899e:	2204      	movs	r2, #4
 80089a0:	4974      	ldr	r1, [pc, #464]	@ (8008b74 <write_motor_main+0x254>)
 80089a2:	4876      	ldr	r0, [pc, #472]	@ (8008b7c <write_motor_main+0x25c>)
 80089a4:	f7ff fb4e 	bl	8008044 <pwm_init>
		pwm_init(&esc_motors[2], MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 80089a8:	edd7 0a12 	vldr	s1, [r7, #72]	@ 0x48
 80089ac:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 8008b6c <write_motor_main+0x24c>
 80089b0:	4b6f      	ldr	r3, [pc, #444]	@ (8008b70 <write_motor_main+0x250>)
 80089b2:	2208      	movs	r2, #8
 80089b4:	496f      	ldr	r1, [pc, #444]	@ (8008b74 <write_motor_main+0x254>)
 80089b6:	4872      	ldr	r0, [pc, #456]	@ (8008b80 <write_motor_main+0x260>)
 80089b8:	f7ff fb44 	bl	8008044 <pwm_init>
		pwm_init(&esc_motors[3], MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 80089bc:	edd7 0a12 	vldr	s1, [r7, #72]	@ 0x48
 80089c0:	ed9f 0a6a 	vldr	s0, [pc, #424]	@ 8008b6c <write_motor_main+0x24c>
 80089c4:	4b6a      	ldr	r3, [pc, #424]	@ (8008b70 <write_motor_main+0x250>)
 80089c6:	220c      	movs	r2, #12
 80089c8:	496a      	ldr	r1, [pc, #424]	@ (8008b74 <write_motor_main+0x254>)
 80089ca:	486e      	ldr	r0, [pc, #440]	@ (8008b84 <write_motor_main+0x264>)
 80089cc:	f7ff fb3a 	bl	8008044 <pwm_init>
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 80089d0:	2300      	movs	r3, #0
 80089d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80089d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1d2      	bne.n	8008980 <write_motor_main+0x60>
 80089da:	f107 030c 	add.w	r3, r7, #12
 80089de:	637b      	str	r3, [r7, #52]	@ 0x34
}

__attribute__((always_inline)) static inline void __iRestore_custom(crit_state_t *sreg)
{
	exit_critical(*sreg);		// restore saved I-bit
 80089e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80089e6:	f3bf 8f5f 	dmb	sy
}
 80089ea:	bf00      	nop
 80089ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f2:	f383 8810 	msr	PRIMASK, r3
}
 80089f6:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80089f8:	f3bf 8f4f 	dsb	sy
}
 80089fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80089fe:	f3bf 8f6f 	isb	sy
}
 8008a02:	bf00      	nop
}
 8008a04:	bf00      	nop
}
 8008a06:	bf00      	nop
	}

    vTaskDelay(pdMS_TO_TICKS(100));
 8008a08:	2064      	movs	r0, #100	@ 0x64
 8008a0a:	f00c fa61 	bl	8014ed0 <vTaskDelay>

    static TimerHandle_t s_writeMotorTimer = NULL;
    if (s_writeMotorTimer == NULL) {
 8008a0e:	4b5e      	ldr	r3, [pc, #376]	@ (8008b88 <write_motor_main+0x268>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10a      	bne.n	8008a2c <write_motor_main+0x10c>
        s_writeMotorTimer = xTimerCreate(
 8008a16:	4b5d      	ldr	r3, [pc, #372]	@ (8008b8c <write_motor_main+0x26c>)
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	2102      	movs	r1, #2
 8008a20:	485b      	ldr	r0, [pc, #364]	@ (8008b90 <write_motor_main+0x270>)
 8008a22:	f00d fa0d 	bl	8015e40 <xTimerCreate>
 8008a26:	4603      	mov	r3, r0
 8008a28:	4a57      	ldr	r2, [pc, #348]	@ (8008b88 <write_motor_main+0x268>)
 8008a2a:	6013      	str	r3, [r2, #0]
            NULL,                             // timer ID used to carry arg
			write_motor_timer_cb                // callback
        );
    }

    if (s_writeMotorTimer != NULL) {
 8008a2c:	4b56      	ldr	r3, [pc, #344]	@ (8008b88 <write_motor_main+0x268>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00b      	beq.n	8008a4c <write_motor_main+0x12c>
        xTimerStart(s_writeMotorTimer, 0);
 8008a34:	4b54      	ldr	r3, [pc, #336]	@ (8008b88 <write_motor_main+0x268>)
 8008a36:	681c      	ldr	r4, [r3, #0]
 8008a38:	f00c fb9c 	bl	8015174 <xTaskGetTickCount>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	2300      	movs	r3, #0
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	2300      	movs	r3, #0
 8008a44:	2101      	movs	r1, #1
 8008a46:	4620      	mov	r0, r4
 8008a48:	f00d fa58 	bl	8015efc <xTimerGenericCommand>
    }


    g_motors_throttle_mutex = xSemaphoreCreateMutex();
 8008a4c:	2001      	movs	r0, #1
 8008a4e:	f00b fb50 	bl	80140f2 <xQueueCreateMutex>
 8008a52:	4603      	mov	r3, r0
 8008a54:	4a4f      	ldr	r2, [pc, #316]	@ (8008b94 <write_motor_main+0x274>)
 8008a56:	6013      	str	r3, [r2, #0]
    //servos_init();
    memset(g_motors_throttle, 0, sizeof(g_motors_throttle));
 8008a58:	2210      	movs	r2, #16
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	484e      	ldr	r0, [pc, #312]	@ (8008b98 <write_motor_main+0x278>)
 8008a5e:	f011 fd61 	bl	801a524 <memset>
    xSemaphoreGive(g_motors_throttle_mutex);
 8008a62:	4b4c      	ldr	r3, [pc, #304]	@ (8008b94 <write_motor_main+0x274>)
 8008a64:	6818      	ldr	r0, [r3, #0]
 8008a66:	2300      	movs	r3, #0
 8008a68:	2200      	movs	r2, #0
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	f00b fb5a 	bl	8014124 <xQueueGenericSend>

    for (;;)
    {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8008a70:	f04f 31ff 	mov.w	r1, #4294967295
 8008a74:	2001      	movs	r0, #1
 8008a76:	f00d f863 	bl	8015b40 <ulTaskNotifyTake>

        xSemaphoreTake(g_motors_throttle_mutex, portMAX_DELAY);
 8008a7a:	4b46      	ldr	r3, [pc, #280]	@ (8008b94 <write_motor_main+0x274>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f04f 31ff 	mov.w	r1, #4294967295
 8008a82:	4618      	mov	r0, r3
 8008a84:	f00b fdd0 	bl	8014628 <xQueueSemaphoreTake>
        flight_control_loop_get_motors_throttle(&fcl, g_motors_throttle);
 8008a88:	4943      	ldr	r1, [pc, #268]	@ (8008b98 <write_motor_main+0x278>)
 8008a8a:	4844      	ldr	r0, [pc, #272]	@ (8008b9c <write_motor_main+0x27c>)
 8008a8c:	f7f9 fa7c 	bl	8001f88 <flight_control_loop_get_motors_throttle>

        for (size_t i = 0; i < 4; i++) {
 8008a90:	2300      	movs	r3, #0
 8008a92:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a94:	e057      	b.n	8008b46 <write_motor_main+0x226>
        	duty_cycle = esc_pwm_throttle_to_duty_cycle(ESC_PWM_HZ, ESC_PWM_MIN_US, ESC_PWM_MAX_US, g_motors_throttle[i]);
 8008a96:	4a40      	ldr	r2, [pc, #256]	@ (8008b98 <write_motor_main+0x278>)
 8008a98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	4413      	add	r3, r2
 8008a9e:	edd3 7a00 	vldr	s15, [r3]
 8008aa2:	eef0 1a67 	vmov.f32	s3, s15
 8008aa6:	ed9f 1a2f 	vldr	s2, [pc, #188]	@ 8008b64 <write_motor_main+0x244>
 8008aaa:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8008b68 <write_motor_main+0x248>
 8008aae:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8008b6c <write_motor_main+0x24c>
 8008ab2:	f7ff fc1d 	bl	80082f0 <esc_pwm_throttle_to_duty_cycle>
 8008ab6:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
 8008aba:	2300      	movs	r3, #0
 8008abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008abe:	f3ef 8310 	mrs	r3, PRIMASK
 8008ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8008ac6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ac8:	b672      	cpsid	i
}
 8008aca:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8008acc:	f3bf 8f4f 	dsb	sy
}
 8008ad0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008ad2:	f3bf 8f6f 	isb	sy
}
 8008ad6:	bf00      	nop
    return old;
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 8008ada:	61fb      	str	r3, [r7, #28]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8008adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d001      	beq.n	8008ae6 <write_motor_main+0x1c6>
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	e000      	b.n	8008ae8 <write_motor_main+0x1c8>
 8008ae6:	2300      	movs	r3, #0
        	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8008ae8:	60bb      	str	r3, [r7, #8]
 8008aea:	2301      	movs	r3, #1
 8008aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008aee:	e00d      	b.n	8008b0c <write_motor_main+0x1ec>
        	{
        		pwm_set_duty(&esc_motors[i], duty_cycle);
 8008af0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008af2:	4613      	mov	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	4413      	add	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4a1f      	ldr	r2, [pc, #124]	@ (8008b78 <write_motor_main+0x258>)
 8008afc:	4413      	add	r3, r2
 8008afe:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7ff fb9c 	bl	8008240 <pwm_set_duty>
        	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8008b08:	2300      	movs	r3, #0
 8008b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1ee      	bne.n	8008af0 <write_motor_main+0x1d0>
 8008b12:	f107 0308 	add.w	r3, r7, #8
 8008b16:	61bb      	str	r3, [r7, #24]
	exit_critical(*sreg);		// restore saved I-bit
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dmb 0xF":::"memory");
 8008b1e:	f3bf 8f5f 	dmb	sy
}
 8008b22:	bf00      	nop
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	f383 8810 	msr	PRIMASK, r3
}
 8008b2e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8008b30:	f3bf 8f4f 	dsb	sy
}
 8008b34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008b36:	f3bf 8f6f 	isb	sy
}
 8008b3a:	bf00      	nop
}
 8008b3c:	bf00      	nop
}
 8008b3e:	bf00      	nop
        for (size_t i = 0; i < 4; i++) {
 8008b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b42:	3301      	adds	r3, #1
 8008b44:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b48:	2b03      	cmp	r3, #3
 8008b4a:	d9a4      	bls.n	8008a96 <write_motor_main+0x176>
        	}
        }
        xSemaphoreGive(g_motors_throttle_mutex);
 8008b4c:	4b11      	ldr	r3, [pc, #68]	@ (8008b94 <write_motor_main+0x274>)
 8008b4e:	6818      	ldr	r0, [r3, #0]
 8008b50:	2300      	movs	r3, #0
 8008b52:	2200      	movs	r2, #0
 8008b54:	2100      	movs	r1, #0
 8008b56:	f00b fae5 	bl	8014124 <xQueueGenericSend>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8008b5a:	e789      	b.n	8008a70 <write_motor_main+0x150>
 8008b5c:	20002c94 	.word	0x20002c94
 8008b60:	00000000 	.word	0x00000000
 8008b64:	44fa0000 	.word	0x44fa0000
 8008b68:	447a0000 	.word	0x447a0000
 8008b6c:	43c80000 	.word	0x43c80000
 8008b70:	0501bd00 	.word	0x0501bd00
 8008b74:	20002d54 	.word	0x20002d54
 8008b78:	20002c40 	.word	0x20002c40
 8008b7c:	20002c54 	.word	0x20002c54
 8008b80:	20002c68 	.word	0x20002c68
 8008b84:	20002c7c 	.word	0x20002c7c
 8008b88:	20002cac 	.word	0x20002cac
 8008b8c:	08008691 	.word	0x08008691
 8008b90:	080200d8 	.word	0x080200d8
 8008b94:	20002c2c 	.word	0x20002c2c
 8008b98:	20002c30 	.word	0x20002c30
 8008b9c:	20002828 	.word	0x20002828

08008ba0 <line_buffer_add_char>:
    }
}

static int line_buffer_add_char(char c, char *buf, size_t buf_size, size_t *len)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60b9      	str	r1, [r7, #8]
 8008ba8:	607a      	str	r2, [r7, #4]
 8008baa:	603b      	str	r3, [r7, #0]
 8008bac:	4603      	mov	r3, r0
 8008bae:	73fb      	strb	r3, [r7, #15]
    // buf: destination buffer
    // buf_size: total buffer capacity
    // len: pointer to current length (persistent between calls)
    // Returns 1 when a full line (ending with \n\r) is complete, 0 otherwise

    if (*len + 1 >= buf_size) {
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d804      	bhi.n	8008bc6 <line_buffer_add_char+0x26>
        // buffer overflow: reset
        *len = 0;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	601a      	str	r2, [r3, #0]
        return 0;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e029      	b.n	8008c1a <line_buffer_add_char+0x7a>
    }

    buf[(*len)++] = c;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	1c59      	adds	r1, r3, #1
 8008bcc:	683a      	ldr	r2, [r7, #0]
 8008bce:	6011      	str	r1, [r2, #0]
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	7bfa      	ldrb	r2, [r7, #15]
 8008bd6:	701a      	strb	r2, [r3, #0]

    // Check for \n\r at the end
    if (*len >= 2) {
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d91b      	bls.n	8008c18 <line_buffer_add_char+0x78>
    	if(buf[*len - 2] == '\r' && buf[*len - 1] == '\n'){
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3b02      	subs	r3, #2
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	4413      	add	r3, r2
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	2b0d      	cmp	r3, #13
 8008bee:	d113      	bne.n	8008c18 <line_buffer_add_char+0x78>
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	2b0a      	cmp	r3, #10
 8008bfe:	d10b      	bne.n	8008c18 <line_buffer_add_char+0x78>
            buf[*len - 2] = '\0'; // terminate string before \n\r
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	3b02      	subs	r3, #2
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	4413      	add	r3, r2
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	701a      	strb	r2, [r3, #0]
            *len = 0;             // reset for next line
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	2200      	movs	r2, #0
 8008c12:	601a      	str	r2, [r3, #0]
            return 1;             // line complete
 8008c14:	2301      	movs	r3, #1
 8008c16:	e000      	b.n	8008c1a <line_buffer_add_char+0x7a>
    	}
    }

    return 0; // line not complete yet
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr
	...

08008c28 <rc_control_main>:

static void rc_control_main(void *arg)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b0ec      	sub	sp, #432	@ 0x1b0
 8008c2c:	af06      	add	r7, sp, #24
 8008c2e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008c32:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8008c36:	6018      	str	r0, [r3, #0]
    uint8_t uart_recv_buffer[64];
    int recv_data;
    char linebuf[256];
    size_t line_len = 0;
 8008c38:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008c3c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8008c40:	2200      	movs	r2, #0
 8008c42:	601a      	str	r2, [r3, #0]

    float target_throttle = 0;
 8008c44:	f04f 0300 	mov.w	r3, #0
 8008c48:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    float temp_target_throttle = 0;
 8008c4c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008c50:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8008c54:	f04f 0200 	mov.w	r2, #0
 8008c58:	601a      	str	r2, [r3, #0]

    coord3D target_attitude = {0};
 8008c5a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008c5e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008c62:	461a      	mov	r2, r3
 8008c64:	2300      	movs	r3, #0
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	6053      	str	r3, [r2, #4]
 8008c6a:	6093      	str	r3, [r2, #8]
    coord3D temp_target_attitude = {0};
 8008c6c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008c70:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8008c74:	461a      	mov	r2, r3
 8008c76:	2300      	movs	r3, #0
 8008c78:	6013      	str	r3, [r2, #0]
 8008c7a:	6053      	str	r3, [r2, #4]
 8008c7c:	6093      	str	r3, [r2, #8]

    float arm_flag = 0;
 8008c7e:	f04f 0300 	mov.w	r3, #0
 8008c82:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
    float temp_arm_flag = 0;
 8008c86:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008c8a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8008c8e:	f04f 0200 	mov.w	r2, #0
 8008c92:	601a      	str	r2, [r3, #0]

    float disarm_flag = 0;
 8008c94:	f04f 0300 	mov.w	r3, #0
 8008c98:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    float temp_disarm_flag = 0;
 8008c9c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008ca0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8008ca4:	f04f 0200 	mov.w	r2, #0
 8008ca8:	601a      	str	r2, [r3, #0]

    int errors = 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
    int current_message_corrupted = 0;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    uint16_t crc_calculated;
    unsigned int crc_received = 0;
 8008cb6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008cba:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	601a      	str	r2, [r3, #0]


  /* Infinite loop */
  for(;;)
  {
	  current_message_corrupted = 1;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
      while (usart1_data_available_for_read() > 0)
 8008cc8:	e078      	b.n	8008dbc <rc_control_main+0x194>
      {
          recv_data = usart1_recv_data((char*)uart_recv_buffer, sizeof(uart_recv_buffer));
 8008cca:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8008cce:	2140      	movs	r1, #64	@ 0x40
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f001 fa85 	bl	800a1e0 <usart1_recv_data>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
          for(int i=0; i<recv_data; i++){
 8008cdc:	2300      	movs	r3, #0
 8008cde:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8008ce2:	e065      	b.n	8008db0 <rc_control_main+0x188>


			  if (line_buffer_add_char(uart_recv_buffer[i], linebuf, sizeof(linebuf), &line_len)) {
 8008ce4:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 8008ce8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8008cec:	4413      	add	r3, r2
 8008cee:	7818      	ldrb	r0, [r3, #0]
 8008cf0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008cf4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8008cf8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008cfc:	f7ff ff50 	bl	8008ba0 <line_buffer_add_char>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d04f      	beq.n	8008da6 <rc_control_main+0x17e>

				  int temp_str_len = strlen(linebuf);
 8008d06:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7f7 fab0 	bl	8000270 <strlen>
 8008d10:	4603      	mov	r3, r0
 8008d12:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
				  temp_str_len -= 6;
 8008d16:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8008d1a:	3b06      	subs	r3, #6
 8008d1c:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
				  crc_calculated = crc16_ccitt_init();
 8008d20:	f7f8 fc33 	bl	800158a <crc16_ccitt_init>
 8008d24:	4603      	mov	r3, r0
 8008d26:	f8a7 3176 	strh.w	r3, [r7, #374]	@ 0x176
				  crc_calculated = crc16_ccitt_add_arr(crc_calculated, (uint8_t*)linebuf, temp_str_len);
 8008d2a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8008d2e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8008d32:	f8b7 3176 	ldrh.w	r3, [r7, #374]	@ 0x176
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7f8 fc63 	bl	8001602 <crc16_ccitt_add_arr>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	f8a7 3176 	strh.w	r3, [r7, #374]	@ 0x176

				  if (sscanf(linebuf, "%f;%f;%f;%f;%f;%f;%x",
 8008d42:	f107 0114 	add.w	r1, r7, #20
 8008d46:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008d4a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8008d4e:	f107 0308 	add.w	r3, r7, #8
 8008d52:	9304      	str	r3, [sp, #16]
 8008d54:	f107 030c 	add.w	r3, r7, #12
 8008d58:	9303      	str	r3, [sp, #12]
 8008d5a:	f107 0310 	add.w	r3, r7, #16
 8008d5e:	9302      	str	r3, [sp, #8]
 8008d60:	f107 0314 	add.w	r3, r7, #20
 8008d64:	3308      	adds	r3, #8
 8008d66:	9301      	str	r3, [sp, #4]
 8008d68:	f107 0314 	add.w	r3, r7, #20
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	460b      	mov	r3, r1
 8008d72:	495c      	ldr	r1, [pc, #368]	@ (8008ee4 <rc_control_main+0x2bc>)
 8008d74:	f011 fab6 	bl	801a2e4 <siscanf>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b07      	cmp	r3, #7
 8008d7c:	d103      	bne.n	8008d86 <rc_control_main+0x15e>
						  &temp_target_attitude.z,
						  &temp_arm_flag,
						  &temp_disarm_flag,
						  &crc_received
						  ) == 7) {
					  current_message_corrupted = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8008d84:	e002      	b.n	8008d8c <rc_control_main+0x164>
					  //printf("%s\n", linebuf);

				  } else {
					  current_message_corrupted = 1;
 8008d86:	2301      	movs	r3, #1
 8008d88:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
//					  printf("%s\n", linebuf);
				  }
				  if(crc_received != (unsigned int)crc_calculated){
 8008d8c:	f8b7 2176 	ldrh.w	r2, [r7, #374]	@ 0x176
 8008d90:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008d94:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d003      	beq.n	8008da6 <rc_control_main+0x17e>
					  current_message_corrupted = 1;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
					  continue;
 8008da4:	bf00      	nop
          for(int i=0; i<recv_data; i++){
 8008da6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8008daa:	3301      	adds	r3, #1
 8008dac:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8008db0:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8008db4:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8008db8:	429a      	cmp	r2, r3
 8008dba:	db93      	blt.n	8008ce4 <rc_control_main+0xbc>
      while (usart1_data_available_for_read() > 0)
 8008dbc:	f001 fa64 	bl	800a288 <usart1_data_available_for_read>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d181      	bne.n	8008cca <rc_control_main+0xa2>
			  }
          }
      }


      if(current_message_corrupted == 0){
 8008dc6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d123      	bne.n	8008e16 <rc_control_main+0x1ee>
    	  errors = 0;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

          target_attitude = temp_target_attitude;
 8008dd4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008dd8:	f5a3 71bc 	sub.w	r1, r3, #376	@ 0x178
 8008ddc:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008de0:	f5a3 72c2 	sub.w	r2, r3, #388	@ 0x184
 8008de4:	460b      	mov	r3, r1
 8008de6:	ca07      	ldmia	r2, {r0, r1, r2}
 8008de8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
          arm_flag = (temp_arm_flag);
 8008dec:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008df0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
          disarm_flag = (temp_disarm_flag);
 8008dfa:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008dfe:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
          target_throttle = temp_target_throttle;
 8008e08:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008e0c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
      }

      errors += current_message_corrupted;
 8008e16:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8008e1a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8008e1e:	4413      	add	r3, r2
 8008e20:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

      if (errors >= (RC_CONTROLLER_HZ / 2.0f)){
 8008e24:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8008e28:	ee07 3a90 	vmov	s15, r3
 8008e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e30:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8008ee8 <rc_control_main+0x2c0>
 8008e34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e3c:	db20      	blt.n	8008e80 <rc_control_main+0x258>
    	  target_attitude.x = 0.0f;
 8008e3e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008e42:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008e46:	f04f 0200 	mov.w	r2, #0
 8008e4a:	601a      	str	r2, [r3, #0]
    	  target_attitude.y = 0.0f;
 8008e4c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008e50:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008e54:	f04f 0200 	mov.w	r2, #0
 8008e58:	605a      	str	r2, [r3, #4]
    	  target_attitude.z = 0.0f;
 8008e5a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008e5e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008e62:	f04f 0200 	mov.w	r2, #0
 8008e66:	609a      	str	r2, [r3, #8]
    	  target_throttle = 0.0f;
 8008e68:	f04f 0300 	mov.w	r3, #0
 8008e6c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    	  disarm_flag = 1.0f;
 8008e70:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8008e74:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    	  arm_flag = 0.0f;
 8008e78:	f04f 0300 	mov.w	r3, #0
 8008e7c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
      }


      if (arm_flag > 0.5f){
 8008e80:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8008e84:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008e88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e90:	dd02      	ble.n	8008e98 <rc_control_main+0x270>
    	  flight_control_loop_arm_esc(&fcl);
 8008e92:	4816      	ldr	r0, [pc, #88]	@ (8008eec <rc_control_main+0x2c4>)
 8008e94:	f7f8 fcc0 	bl	8001818 <flight_control_loop_arm_esc>
      }

      if (disarm_flag > 0.5f){
 8008e98:	edd7 7a63 	vldr	s15, [r7, #396]	@ 0x18c
 8008e9c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008ea0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea8:	dd02      	ble.n	8008eb0 <rc_control_main+0x288>
    	  flight_control_loop_disarm_esc(&fcl);
 8008eaa:	4810      	ldr	r0, [pc, #64]	@ (8008eec <rc_control_main+0x2c4>)
 8008eac:	f7f8 fcd3 	bl	8001856 <flight_control_loop_disarm_esc>
      }

      flight_control_loop_update_rc_control(&fcl, target_attitude, target_throttle);
 8008eb0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008eb4:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008eb8:	edd3 6a00 	vldr	s13, [r3]
 8008ebc:	ed93 7a01 	vldr	s14, [r3, #4]
 8008ec0:	edd3 7a02 	vldr	s15, [r3, #8]
 8008ec4:	edd7 1a65 	vldr	s3, [r7, #404]	@ 0x194
 8008ec8:	eeb0 0a66 	vmov.f32	s0, s13
 8008ecc:	eef0 0a47 	vmov.f32	s1, s14
 8008ed0:	eeb0 1a67 	vmov.f32	s2, s15
 8008ed4:	4805      	ldr	r0, [pc, #20]	@ (8008eec <rc_control_main+0x2c4>)
 8008ed6:	f7f8 ff6b 	bl	8001db0 <flight_control_loop_update_rc_control>

      vTaskDelay(pdMS_TO_TICKS(HzToMilliSec(RC_CONTROLLER_HZ)));
 8008eda:	200a      	movs	r0, #10
 8008edc:	f00b fff8 	bl	8014ed0 <vTaskDelay>
	  current_message_corrupted = 1;
 8008ee0:	e6ef      	b.n	8008cc2 <rc_control_main+0x9a>
 8008ee2:	bf00      	nop
 8008ee4:	080200e8 	.word	0x080200e8
 8008ee8:	42480000 	.word	0x42480000
 8008eec:	20002828 	.word	0x20002828

08008ef0 <print_telemetry_data>:
  }

}


static void print_telemetry_data(void *arg){
 8008ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ef4:	b0aa      	sub	sp, #168	@ 0xa8
 8008ef6:	af06      	add	r7, sp, #24
 8008ef8:	6078      	str	r0, [r7, #4]
    // Get estimated attitude and body frame accel/gyro
	coord3D body_frame_accel, body_frame_gyro;
    coord3D raw_accel, raw_gyro;
	quaternion body_frame_estimated_q;
    float local_motors_throttle[4];
	coord3D target_attitude = { 0 };
 8008efa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008efe:	2200      	movs	r2, #0
 8008f00:	601a      	str	r2, [r3, #0]
 8008f02:	605a      	str	r2, [r3, #4]
 8008f04:	609a      	str	r2, [r3, #8]
	float target_throttle = 0.0f;
 8008f06:	f04f 0300 	mov.w	r3, #0
 8008f0a:	633b      	str	r3, [r7, #48]	@ 0x30

    vTaskDelay(pdMS_TO_TICKS(500));
 8008f0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008f10:	f00b ffde 	bl	8014ed0 <vTaskDelay>

    for (;;)
    {
    #if MUTEX_ESP_ENABLE != 0
        xSemaphoreTake(fcl.imu_mutex, portMAX_DELAY);
 8008f14:	4ba8      	ldr	r3, [pc, #672]	@ (80091b8 <print_telemetry_data+0x2c8>)
 8008f16:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 8008f1a:	f04f 31ff 	mov.w	r1, #4294967295
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f00b fb82 	bl	8014628 <xQueueSemaphoreTake>
    #endif
        imu_get_raw_accel_data(&(fcl.imu), &raw_accel);
 8008f24:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008f28:	4619      	mov	r1, r3
 8008f2a:	48a3      	ldr	r0, [pc, #652]	@ (80091b8 <print_telemetry_data+0x2c8>)
 8008f2c:	f7fa f964 	bl	80031f8 <imu_get_raw_accel_data>
        imu_get_raw_gyro_data(&(fcl.imu), &raw_gyro);
 8008f30:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8008f34:	4619      	mov	r1, r3
 8008f36:	48a0      	ldr	r0, [pc, #640]	@ (80091b8 <print_telemetry_data+0x2c8>)
 8008f38:	f7fa f971 	bl	800321e <imu_get_raw_gyro_data>
        imu_get_estimated_data(&(fcl.imu), &body_frame_estimated_q, &body_frame_accel, &body_frame_gyro);
 8008f3c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8008f40:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8008f44:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8008f48:	489b      	ldr	r0, [pc, #620]	@ (80091b8 <print_telemetry_data+0x2c8>)
 8008f4a:	f7fa f929 	bl	80031a0 <imu_get_estimated_data>
    #if MUTEX_ESP_ENABLE != 0
        xSemaphoreGive(fcl.imu_mutex);
 8008f4e:	4b9a      	ldr	r3, [pc, #616]	@ (80091b8 <print_telemetry_data+0x2c8>)
 8008f50:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	@ 0x3ec
 8008f54:	2300      	movs	r3, #0
 8008f56:	2200      	movs	r2, #0
 8008f58:	2100      	movs	r1, #0
 8008f5a:	f00b f8e3 	bl	8014124 <xQueueGenericSend>
    #endif

        flight_control_loop_get_motors_throttle(&fcl, local_motors_throttle);
 8008f5e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008f62:	4619      	mov	r1, r3
 8008f64:	4894      	ldr	r0, [pc, #592]	@ (80091b8 <print_telemetry_data+0x2c8>)
 8008f66:	f7f9 f80f 	bl	8001f88 <flight_control_loop_get_motors_throttle>
        angles3D angles = quat2angle(&(body_frame_estimated_q));
 8008f6a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7f9 fb22 	bl	80025b8 <quat2angle>
 8008f74:	eef0 6a40 	vmov.f32	s13, s0
 8008f78:	eeb0 7a60 	vmov.f32	s14, s1
 8008f7c:	eef0 7a41 	vmov.f32	s15, s2
 8008f80:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8008f84:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8008f88:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

        printf("%.3f;%.3f;%.3f;", degrees(angles.x), degrees(angles.y), degrees(angles.z));
 8008f8c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8008f90:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80091bc <print_telemetry_data+0x2cc>
 8008f94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f98:	ee17 0a90 	vmov	r0, s15
 8008f9c:	f7f7 fad4 	bl	8000548 <__aeabi_f2d>
 8008fa0:	4680      	mov	r8, r0
 8008fa2:	4689      	mov	r9, r1
 8008fa4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8008fa8:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 80091bc <print_telemetry_data+0x2cc>
 8008fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008fb0:	ee17 0a90 	vmov	r0, s15
 8008fb4:	f7f7 fac8 	bl	8000548 <__aeabi_f2d>
 8008fb8:	4604      	mov	r4, r0
 8008fba:	460d      	mov	r5, r1
 8008fbc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8008fc0:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 80091bc <print_telemetry_data+0x2cc>
 8008fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008fc8:	ee17 0a90 	vmov	r0, s15
 8008fcc:	f7f7 fabc 	bl	8000548 <__aeabi_f2d>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008fd8:	e9cd 4500 	strd	r4, r5, [sp]
 8008fdc:	4642      	mov	r2, r8
 8008fde:	464b      	mov	r3, r9
 8008fe0:	4877      	ldr	r0, [pc, #476]	@ (80091c0 <print_telemetry_data+0x2d0>)
 8008fe2:	f011 f8e5 	bl	801a1b0 <iprintf>
//        printf("%.3f;%.3f;%.3f;", body_frame_accel.x, body_frame_accel.y, body_frame_accel.z);
//        printf("%.3f;%.3f;%.3f;", body_frame_gyro.x, body_frame_gyro.y, body_frame_gyro.z);
//        printf("%.3f;%.3f;%.3f;", raw_accel.x, raw_accel.y, raw_accel.z);
//        printf("%.3f;%.3f;%.3f;", raw_gyro.x, raw_gyro.y, raw_gyro.z);
        printf("%.3f;%.3f;%.3f;%.3f;", local_motors_throttle[0], local_motors_throttle[1], local_motors_throttle[2], local_motors_throttle[3]);
 8008fe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7f7 faad 	bl	8000548 <__aeabi_f2d>
 8008fee:	4682      	mov	sl, r0
 8008ff0:	468b      	mov	fp, r1
 8008ff2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7f7 faa7 	bl	8000548 <__aeabi_f2d>
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	460d      	mov	r5, r1
 8008ffe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009000:	4618      	mov	r0, r3
 8009002:	f7f7 faa1 	bl	8000548 <__aeabi_f2d>
 8009006:	4680      	mov	r8, r0
 8009008:	4689      	mov	r9, r1
 800900a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800900c:	4618      	mov	r0, r3
 800900e:	f7f7 fa9b 	bl	8000548 <__aeabi_f2d>
 8009012:	4602      	mov	r2, r0
 8009014:	460b      	mov	r3, r1
 8009016:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800901a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800901e:	e9cd 4500 	strd	r4, r5, [sp]
 8009022:	4652      	mov	r2, sl
 8009024:	465b      	mov	r3, fp
 8009026:	4867      	ldr	r0, [pc, #412]	@ (80091c4 <print_telemetry_data+0x2d4>)
 8009028:	f011 f8c2 	bl	801a1b0 <iprintf>

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rc_attitude_control_mutex, portMAX_DELAY);
 800902c:	4b62      	ldr	r3, [pc, #392]	@ (80091b8 <print_telemetry_data+0x2c8>)
 800902e:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8009032:	f04f 31ff 	mov.w	r1, #4294967295
 8009036:	4618      	mov	r0, r3
 8009038:	f00b faf6 	bl	8014628 <xQueueSemaphoreTake>
#endif
	rc_attitude_control_get_processed(
 800903c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009040:	f103 0008 	add.w	r0, r3, #8
 8009044:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009048:	1d1a      	adds	r2, r3, #4
 800904a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800904e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	4603      	mov	r3, r0
 8009056:	485c      	ldr	r0, [pc, #368]	@ (80091c8 <print_telemetry_data+0x2d8>)
 8009058:	f7fb fbde 	bl	8004818 <rc_attitude_control_get_processed>
		&(target_attitude.y),
		&(target_attitude.z),
		&target_throttle
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rc_attitude_control_mutex);
 800905c:	4b56      	ldr	r3, [pc, #344]	@ (80091b8 <print_telemetry_data+0x2c8>)
 800905e:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	@ 0x3f8
 8009062:	2300      	movs	r3, #0
 8009064:	2200      	movs	r2, #0
 8009066:	2100      	movs	r1, #0
 8009068:	f00b f85c 	bl	8014124 <xQueueGenericSend>
#endif
	printf("%.3f;%.3f;%.3f;%.3f;", target_attitude.x, target_attitude.y, target_attitude.z, target_throttle);
 800906c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800906e:	4618      	mov	r0, r3
 8009070:	f7f7 fa6a 	bl	8000548 <__aeabi_f2d>
 8009074:	4682      	mov	sl, r0
 8009076:	468b      	mov	fp, r1
 8009078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800907a:	4618      	mov	r0, r3
 800907c:	f7f7 fa64 	bl	8000548 <__aeabi_f2d>
 8009080:	4604      	mov	r4, r0
 8009082:	460d      	mov	r5, r1
 8009084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009086:	4618      	mov	r0, r3
 8009088:	f7f7 fa5e 	bl	8000548 <__aeabi_f2d>
 800908c:	4680      	mov	r8, r0
 800908e:	4689      	mov	r9, r1
 8009090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009092:	4618      	mov	r0, r3
 8009094:	f7f7 fa58 	bl	8000548 <__aeabi_f2d>
 8009098:	4602      	mov	r2, r0
 800909a:	460b      	mov	r3, r1
 800909c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80090a0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80090a4:	e9cd 4500 	strd	r4, r5, [sp]
 80090a8:	4652      	mov	r2, sl
 80090aa:	465b      	mov	r3, fp
 80090ac:	4845      	ldr	r0, [pc, #276]	@ (80091c4 <print_telemetry_data+0x2d4>)
 80090ae:	f011 f87f 	bl	801a1b0 <iprintf>

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.attitude_controller_mutex, portMAX_DELAY);
 80090b2:	4b41      	ldr	r3, [pc, #260]	@ (80091b8 <print_telemetry_data+0x2c8>)
 80090b4:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 80090b8:	f04f 31ff 	mov.w	r1, #4294967295
 80090bc:	4618      	mov	r0, r3
 80090be:	f00b fab3 	bl	8014628 <xQueueSemaphoreTake>
#endif
	float target_roll_rate = 0.0f;
 80090c2:	f04f 0300 	mov.w	r3, #0
 80090c6:	623b      	str	r3, [r7, #32]
	float target_pitch_rate = 0.0f;
 80090c8:	f04f 0300 	mov.w	r3, #0
 80090cc:	61fb      	str	r3, [r7, #28]
	float target_yaw_rate = 0.0f;
 80090ce:	f04f 0300 	mov.w	r3, #0
 80090d2:	61bb      	str	r3, [r7, #24]
	attitude_controller_get_calculated_rate(
 80090d4:	f107 0318 	add.w	r3, r7, #24
 80090d8:	f107 021c 	add.w	r2, r7, #28
 80090dc:	f107 0120 	add.w	r1, r7, #32
 80090e0:	483a      	ldr	r0, [pc, #232]	@ (80091cc <print_telemetry_data+0x2dc>)
 80090e2:	f7f8 fa2c 	bl	800153e <attitude_controller_get_calculated_rate>
		&target_roll_rate,
		&target_pitch_rate,
		&target_yaw_rate
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.attitude_controller_mutex);
 80090e6:	4b34      	ldr	r3, [pc, #208]	@ (80091b8 <print_telemetry_data+0x2c8>)
 80090e8:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 80090ec:	2300      	movs	r3, #0
 80090ee:	2200      	movs	r2, #0
 80090f0:	2100      	movs	r1, #0
 80090f2:	f00b f817 	bl	8014124 <xQueueGenericSend>
#endif
	printf("%.3f;%.3f;%.3f;", target_roll_rate, target_pitch_rate, target_yaw_rate);
 80090f6:	6a3b      	ldr	r3, [r7, #32]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7f7 fa25 	bl	8000548 <__aeabi_f2d>
 80090fe:	4680      	mov	r8, r0
 8009100:	4689      	mov	r9, r1
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	4618      	mov	r0, r3
 8009106:	f7f7 fa1f 	bl	8000548 <__aeabi_f2d>
 800910a:	4604      	mov	r4, r0
 800910c:	460d      	mov	r5, r1
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	4618      	mov	r0, r3
 8009112:	f7f7 fa19 	bl	8000548 <__aeabi_f2d>
 8009116:	4602      	mov	r2, r0
 8009118:	460b      	mov	r3, r1
 800911a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800911e:	e9cd 4500 	strd	r4, r5, [sp]
 8009122:	4642      	mov	r2, r8
 8009124:	464b      	mov	r3, r9
 8009126:	4826      	ldr	r0, [pc, #152]	@ (80091c0 <print_telemetry_data+0x2d0>)
 8009128:	f011 f842 	bl	801a1b0 <iprintf>


#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 800912c:	4b22      	ldr	r3, [pc, #136]	@ (80091b8 <print_telemetry_data+0x2c8>)
 800912e:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 8009132:	f04f 31ff 	mov.w	r1, #4294967295
 8009136:	4618      	mov	r0, r3
 8009138:	f00b fa76 	bl	8014628 <xQueueSemaphoreTake>
#endif
	float pid_roll_output = 0.0f;
 800913c:	f04f 0300 	mov.w	r3, #0
 8009140:	617b      	str	r3, [r7, #20]
	float pid_pitch_output = 0.0f;
 8009142:	f04f 0300 	mov.w	r3, #0
 8009146:	613b      	str	r3, [r7, #16]
	float pid_yaw_output = 0.0f;
 8009148:	f04f 0300 	mov.w	r3, #0
 800914c:	60fb      	str	r3, [r7, #12]
	// Get PID outputs
	rate_controller_get_pid_outputs(
 800914e:	f107 030c 	add.w	r3, r7, #12
 8009152:	f107 0210 	add.w	r2, r7, #16
 8009156:	f107 0114 	add.w	r1, r7, #20
 800915a:	481d      	ldr	r0, [pc, #116]	@ (80091d0 <print_telemetry_data+0x2e0>)
 800915c:	f7fb f8be 	bl	80042dc <rate_controller_get_pid_outputs>
		&pid_roll_output,
		&pid_pitch_output,
		&pid_yaw_output
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rate_controller_mutex);
 8009160:	4b15      	ldr	r3, [pc, #84]	@ (80091b8 <print_telemetry_data+0x2c8>)
 8009162:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 8009166:	2300      	movs	r3, #0
 8009168:	2200      	movs	r2, #0
 800916a:	2100      	movs	r1, #0
 800916c:	f00a ffda 	bl	8014124 <xQueueGenericSend>
#endif
	printf("%.3f;%.3f;%.3f;", pid_roll_output, pid_pitch_output, pid_yaw_output);
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	4618      	mov	r0, r3
 8009174:	f7f7 f9e8 	bl	8000548 <__aeabi_f2d>
 8009178:	4680      	mov	r8, r0
 800917a:	4689      	mov	r9, r1
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	4618      	mov	r0, r3
 8009180:	f7f7 f9e2 	bl	8000548 <__aeabi_f2d>
 8009184:	4604      	mov	r4, r0
 8009186:	460d      	mov	r5, r1
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	4618      	mov	r0, r3
 800918c:	f7f7 f9dc 	bl	8000548 <__aeabi_f2d>
 8009190:	4602      	mov	r2, r0
 8009192:	460b      	mov	r3, r1
 8009194:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009198:	e9cd 4500 	strd	r4, r5, [sp]
 800919c:	4642      	mov	r2, r8
 800919e:	464b      	mov	r3, r9
 80091a0:	4807      	ldr	r0, [pc, #28]	@ (80091c0 <print_telemetry_data+0x2d0>)
 80091a2:	f011 f805 	bl	801a1b0 <iprintf>


    printf("\n");
 80091a6:	200a      	movs	r0, #10
 80091a8:	f011 f814 	bl	801a1d4 <putchar>
    vTaskDelay(pdMS_TO_TICKS(HzToMilliSec(TELEMETRY_TASK_HZ)));
 80091ac:	2032      	movs	r0, #50	@ 0x32
 80091ae:	f00b fe8f 	bl	8014ed0 <vTaskDelay>
    {
 80091b2:	bf00      	nop
 80091b4:	e6ae      	b.n	8008f14 <print_telemetry_data+0x24>
 80091b6:	bf00      	nop
 80091b8:	20002828 	.word	0x20002828
 80091bc:	42652ee1 	.word	0x42652ee1
 80091c0:	08020100 	.word	0x08020100
 80091c4:	08020110 	.word	0x08020110
 80091c8:	20002b18 	.word	0x20002b18
 80091cc:	20002ae4 	.word	0x20002ae4
 80091d0:	2000296c 	.word	0x2000296c

080091d4 <app_main>:

static TaskHandle_t flight_h, write_h, telem_h, read_rc_controller_h;
#define STACK_WORDS(bytes) ((bytes)/sizeof(StackType_t))

void app_main(void *argument)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b088      	sub	sp, #32
 80091d8:	af02      	add	r7, sp, #8
 80091da:	6078      	str	r0, [r7, #4]
    configASSERT(pdPASS == xTaskCreate(flight_controller_main, "flight_controller_main", STACK_WORDS(2048), NULL, 15, &flight_h));
 80091dc:	4b36      	ldr	r3, [pc, #216]	@ (80092b8 <app_main+0xe4>)
 80091de:	9301      	str	r3, [sp, #4]
 80091e0:	230f      	movs	r3, #15
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	2300      	movs	r3, #0
 80091e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091ea:	4934      	ldr	r1, [pc, #208]	@ (80092bc <app_main+0xe8>)
 80091ec:	4834      	ldr	r0, [pc, #208]	@ (80092c0 <app_main+0xec>)
 80091ee:	f00b fd11 	bl	8014c14 <xTaskCreate>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d00b      	beq.n	8009210 <app_main+0x3c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80091f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800920a:	bf00      	nop
 800920c:	bf00      	nop
 800920e:	e7fd      	b.n	800920c <app_main+0x38>
    configASSERT(pdPASS == xTaskCreate(write_motor_main, "write_motor_main", STACK_WORDS(2048), NULL, 14, &write_h));
 8009210:	4b2c      	ldr	r3, [pc, #176]	@ (80092c4 <app_main+0xf0>)
 8009212:	9301      	str	r3, [sp, #4]
 8009214:	230e      	movs	r3, #14
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	2300      	movs	r3, #0
 800921a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800921e:	492a      	ldr	r1, [pc, #168]	@ (80092c8 <app_main+0xf4>)
 8009220:	482a      	ldr	r0, [pc, #168]	@ (80092cc <app_main+0xf8>)
 8009222:	f00b fcf7 	bl	8014c14 <xTaskCreate>
 8009226:	4603      	mov	r3, r0
 8009228:	2b01      	cmp	r3, #1
 800922a:	d00b      	beq.n	8009244 <app_main+0x70>
	__asm volatile
 800922c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009230:	f383 8811 	msr	BASEPRI, r3
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	613b      	str	r3, [r7, #16]
}
 800923e:	bf00      	nop
 8009240:	bf00      	nop
 8009242:	e7fd      	b.n	8009240 <app_main+0x6c>
    configASSERT(pdPASS == xTaskCreate(rc_control_main, "rc_control_main",  STACK_WORDS(2048), NULL, 13, &read_rc_controller_h));
 8009244:	4b22      	ldr	r3, [pc, #136]	@ (80092d0 <app_main+0xfc>)
 8009246:	9301      	str	r3, [sp, #4]
 8009248:	230d      	movs	r3, #13
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	2300      	movs	r3, #0
 800924e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009252:	4920      	ldr	r1, [pc, #128]	@ (80092d4 <app_main+0x100>)
 8009254:	4820      	ldr	r0, [pc, #128]	@ (80092d8 <app_main+0x104>)
 8009256:	f00b fcdd 	bl	8014c14 <xTaskCreate>
 800925a:	4603      	mov	r3, r0
 800925c:	2b01      	cmp	r3, #1
 800925e:	d00b      	beq.n	8009278 <app_main+0xa4>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	60fb      	str	r3, [r7, #12]
}
 8009272:	bf00      	nop
 8009274:	bf00      	nop
 8009276:	e7fd      	b.n	8009274 <app_main+0xa0>
    configASSERT(pdPASS == xTaskCreate(print_telemetry_data, "print_telemetry_data", STACK_WORDS(2048), NULL, 5, &telem_h));
 8009278:	4b18      	ldr	r3, [pc, #96]	@ (80092dc <app_main+0x108>)
 800927a:	9301      	str	r3, [sp, #4]
 800927c:	2305      	movs	r3, #5
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	2300      	movs	r3, #0
 8009282:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009286:	4916      	ldr	r1, [pc, #88]	@ (80092e0 <app_main+0x10c>)
 8009288:	4816      	ldr	r0, [pc, #88]	@ (80092e4 <app_main+0x110>)
 800928a:	f00b fcc3 	bl	8014c14 <xTaskCreate>
 800928e:	4603      	mov	r3, r0
 8009290:	2b01      	cmp	r3, #1
 8009292:	d00b      	beq.n	80092ac <app_main+0xd8>
	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	60bb      	str	r3, [r7, #8]
}
 80092a6:	bf00      	nop
 80092a8:	bf00      	nop
 80092aa:	e7fd      	b.n	80092a8 <app_main+0xd4>

    for (;;) {
        vTaskDelay(pdMS_TO_TICKS(1000));
 80092ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80092b0:	f00b fe0e 	bl	8014ed0 <vTaskDelay>
 80092b4:	e7fa      	b.n	80092ac <app_main+0xd8>
 80092b6:	bf00      	nop
 80092b8:	20002c98 	.word	0x20002c98
 80092bc:	08020128 	.word	0x08020128
 80092c0:	080087a9 	.word	0x080087a9
 80092c4:	20002c9c 	.word	0x20002c9c
 80092c8:	08020140 	.word	0x08020140
 80092cc:	08008921 	.word	0x08008921
 80092d0:	20002ca4 	.word	0x20002ca4
 80092d4:	08020154 	.word	0x08020154
 80092d8:	08008c29 	.word	0x08008c29
 80092dc:	20002ca0 	.word	0x20002ca0
 80092e0:	08020164 	.word	0x08020164
 80092e4:	08008ef1 	.word	0x08008ef1

080092e8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80092ec:	4b17      	ldr	r3, [pc, #92]	@ (800934c <MX_SPI1_Init+0x64>)
 80092ee:	4a18      	ldr	r2, [pc, #96]	@ (8009350 <MX_SPI1_Init+0x68>)
 80092f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80092f2:	4b16      	ldr	r3, [pc, #88]	@ (800934c <MX_SPI1_Init+0x64>)
 80092f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80092f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80092fa:	4b14      	ldr	r3, [pc, #80]	@ (800934c <MX_SPI1_Init+0x64>)
 80092fc:	2200      	movs	r2, #0
 80092fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009300:	4b12      	ldr	r3, [pc, #72]	@ (800934c <MX_SPI1_Init+0x64>)
 8009302:	2200      	movs	r2, #0
 8009304:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8009306:	4b11      	ldr	r3, [pc, #68]	@ (800934c <MX_SPI1_Init+0x64>)
 8009308:	2202      	movs	r2, #2
 800930a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800930c:	4b0f      	ldr	r3, [pc, #60]	@ (800934c <MX_SPI1_Init+0x64>)
 800930e:	2201      	movs	r2, #1
 8009310:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009312:	4b0e      	ldr	r3, [pc, #56]	@ (800934c <MX_SPI1_Init+0x64>)
 8009314:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009318:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800931a:	4b0c      	ldr	r3, [pc, #48]	@ (800934c <MX_SPI1_Init+0x64>)
 800931c:	2220      	movs	r2, #32
 800931e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009320:	4b0a      	ldr	r3, [pc, #40]	@ (800934c <MX_SPI1_Init+0x64>)
 8009322:	2200      	movs	r2, #0
 8009324:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009326:	4b09      	ldr	r3, [pc, #36]	@ (800934c <MX_SPI1_Init+0x64>)
 8009328:	2200      	movs	r2, #0
 800932a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800932c:	4b07      	ldr	r3, [pc, #28]	@ (800934c <MX_SPI1_Init+0x64>)
 800932e:	2200      	movs	r2, #0
 8009330:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8009332:	4b06      	ldr	r3, [pc, #24]	@ (800934c <MX_SPI1_Init+0x64>)
 8009334:	220a      	movs	r2, #10
 8009336:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009338:	4804      	ldr	r0, [pc, #16]	@ (800934c <MX_SPI1_Init+0x64>)
 800933a:	f003 ffbd 	bl	800d2b8 <HAL_SPI_Init>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d001      	beq.n	8009348 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8009344:	f7ff f97a 	bl	800863c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009348:	bf00      	nop
 800934a:	bd80      	pop	{r7, pc}
 800934c:	20002cb0 	.word	0x20002cb0
 8009350:	40013000 	.word	0x40013000

08009354 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b08a      	sub	sp, #40	@ 0x28
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800935c:	f107 0314 	add.w	r3, r7, #20
 8009360:	2200      	movs	r2, #0
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	605a      	str	r2, [r3, #4]
 8009366:	609a      	str	r2, [r3, #8]
 8009368:	60da      	str	r2, [r3, #12]
 800936a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a19      	ldr	r2, [pc, #100]	@ (80093d8 <HAL_SPI_MspInit+0x84>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d12b      	bne.n	80093ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009376:	2300      	movs	r3, #0
 8009378:	613b      	str	r3, [r7, #16]
 800937a:	4b18      	ldr	r3, [pc, #96]	@ (80093dc <HAL_SPI_MspInit+0x88>)
 800937c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800937e:	4a17      	ldr	r2, [pc, #92]	@ (80093dc <HAL_SPI_MspInit+0x88>)
 8009380:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009384:	6453      	str	r3, [r2, #68]	@ 0x44
 8009386:	4b15      	ldr	r3, [pc, #84]	@ (80093dc <HAL_SPI_MspInit+0x88>)
 8009388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800938a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800938e:	613b      	str	r3, [r7, #16]
 8009390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009392:	2300      	movs	r3, #0
 8009394:	60fb      	str	r3, [r7, #12]
 8009396:	4b11      	ldr	r3, [pc, #68]	@ (80093dc <HAL_SPI_MspInit+0x88>)
 8009398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800939a:	4a10      	ldr	r2, [pc, #64]	@ (80093dc <HAL_SPI_MspInit+0x88>)
 800939c:	f043 0301 	orr.w	r3, r3, #1
 80093a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80093a2:	4b0e      	ldr	r3, [pc, #56]	@ (80093dc <HAL_SPI_MspInit+0x88>)
 80093a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093a6:	f003 0301 	and.w	r3, r3, #1
 80093aa:	60fb      	str	r3, [r7, #12]
 80093ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80093ae:	23e0      	movs	r3, #224	@ 0xe0
 80093b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093b2:	2302      	movs	r3, #2
 80093b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093b6:	2300      	movs	r3, #0
 80093b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093ba:	2303      	movs	r3, #3
 80093bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80093be:	2305      	movs	r3, #5
 80093c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093c2:	f107 0314 	add.w	r3, r7, #20
 80093c6:	4619      	mov	r1, r3
 80093c8:	4805      	ldr	r0, [pc, #20]	@ (80093e0 <HAL_SPI_MspInit+0x8c>)
 80093ca:	f001 fda7 	bl	800af1c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80093ce:	bf00      	nop
 80093d0:	3728      	adds	r7, #40	@ 0x28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	40013000 	.word	0x40013000
 80093dc:	40023800 	.word	0x40023800
 80093e0:	40020000 	.word	0x40020000

080093e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093ea:	2300      	movs	r3, #0
 80093ec:	607b      	str	r3, [r7, #4]
 80093ee:	4b12      	ldr	r3, [pc, #72]	@ (8009438 <HAL_MspInit+0x54>)
 80093f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093f2:	4a11      	ldr	r2, [pc, #68]	@ (8009438 <HAL_MspInit+0x54>)
 80093f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80093f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80093fa:	4b0f      	ldr	r3, [pc, #60]	@ (8009438 <HAL_MspInit+0x54>)
 80093fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009402:	607b      	str	r3, [r7, #4]
 8009404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009406:	2300      	movs	r3, #0
 8009408:	603b      	str	r3, [r7, #0]
 800940a:	4b0b      	ldr	r3, [pc, #44]	@ (8009438 <HAL_MspInit+0x54>)
 800940c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800940e:	4a0a      	ldr	r2, [pc, #40]	@ (8009438 <HAL_MspInit+0x54>)
 8009410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009414:	6413      	str	r3, [r2, #64]	@ 0x40
 8009416:	4b08      	ldr	r3, [pc, #32]	@ (8009438 <HAL_MspInit+0x54>)
 8009418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800941a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800941e:	603b      	str	r3, [r7, #0]
 8009420:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009422:	2200      	movs	r2, #0
 8009424:	210f      	movs	r1, #15
 8009426:	f06f 0001 	mvn.w	r0, #1
 800942a:	f001 f8df 	bl	800a5ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800942e:	bf00      	nop
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	40023800 	.word	0x40023800

0800943c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b08c      	sub	sp, #48	@ 0x30
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8009444:	2300      	movs	r3, #0
 8009446:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8009448:	2300      	movs	r3, #0
 800944a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800944c:	2300      	movs	r3, #0
 800944e:	60bb      	str	r3, [r7, #8]
 8009450:	4b2f      	ldr	r3, [pc, #188]	@ (8009510 <HAL_InitTick+0xd4>)
 8009452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009454:	4a2e      	ldr	r2, [pc, #184]	@ (8009510 <HAL_InitTick+0xd4>)
 8009456:	f043 0301 	orr.w	r3, r3, #1
 800945a:	6453      	str	r3, [r2, #68]	@ 0x44
 800945c:	4b2c      	ldr	r3, [pc, #176]	@ (8009510 <HAL_InitTick+0xd4>)
 800945e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009460:	f003 0301 	and.w	r3, r3, #1
 8009464:	60bb      	str	r3, [r7, #8]
 8009466:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009468:	f107 020c 	add.w	r2, r7, #12
 800946c:	f107 0310 	add.w	r3, r7, #16
 8009470:	4611      	mov	r1, r2
 8009472:	4618      	mov	r0, r3
 8009474:	f003 feee 	bl	800d254 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8009478:	f003 fed8 	bl	800d22c <HAL_RCC_GetPCLK2Freq>
 800947c:	4603      	mov	r3, r0
 800947e:	005b      	lsls	r3, r3, #1
 8009480:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8009482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009484:	4a23      	ldr	r2, [pc, #140]	@ (8009514 <HAL_InitTick+0xd8>)
 8009486:	fba2 2303 	umull	r2, r3, r2, r3
 800948a:	0c9b      	lsrs	r3, r3, #18
 800948c:	3b01      	subs	r3, #1
 800948e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8009490:	4b21      	ldr	r3, [pc, #132]	@ (8009518 <HAL_InitTick+0xdc>)
 8009492:	4a22      	ldr	r2, [pc, #136]	@ (800951c <HAL_InitTick+0xe0>)
 8009494:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8009496:	4b20      	ldr	r3, [pc, #128]	@ (8009518 <HAL_InitTick+0xdc>)
 8009498:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800949c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800949e:	4a1e      	ldr	r2, [pc, #120]	@ (8009518 <HAL_InitTick+0xdc>)
 80094a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80094a4:	4b1c      	ldr	r3, [pc, #112]	@ (8009518 <HAL_InitTick+0xdc>)
 80094a6:	2200      	movs	r2, #0
 80094a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094aa:	4b1b      	ldr	r3, [pc, #108]	@ (8009518 <HAL_InitTick+0xdc>)
 80094ac:	2200      	movs	r2, #0
 80094ae:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80094b0:	4b19      	ldr	r3, [pc, #100]	@ (8009518 <HAL_InitTick+0xdc>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80094b6:	4818      	ldr	r0, [pc, #96]	@ (8009518 <HAL_InitTick+0xdc>)
 80094b8:	f004 fcd0 	bl	800de5c <HAL_TIM_Base_Init>
 80094bc:	4603      	mov	r3, r0
 80094be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80094c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d11b      	bne.n	8009502 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80094ca:	4813      	ldr	r0, [pc, #76]	@ (8009518 <HAL_InitTick+0xdc>)
 80094cc:	f004 fd7e 	bl	800dfcc <HAL_TIM_Base_Start_IT>
 80094d0:	4603      	mov	r3, r0
 80094d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80094d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d111      	bne.n	8009502 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80094de:	2019      	movs	r0, #25
 80094e0:	f001 f8a0 	bl	800a624 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b0f      	cmp	r3, #15
 80094e8:	d808      	bhi.n	80094fc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80094ea:	2200      	movs	r2, #0
 80094ec:	6879      	ldr	r1, [r7, #4]
 80094ee:	2019      	movs	r0, #25
 80094f0:	f001 f87c 	bl	800a5ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80094f4:	4a0a      	ldr	r2, [pc, #40]	@ (8009520 <HAL_InitTick+0xe4>)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6013      	str	r3, [r2, #0]
 80094fa:	e002      	b.n	8009502 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8009502:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009506:	4618      	mov	r0, r3
 8009508:	3730      	adds	r7, #48	@ 0x30
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	40023800 	.word	0x40023800
 8009514:	431bde83 	.word	0x431bde83
 8009518:	20002d08 	.word	0x20002d08
 800951c:	40010000 	.word	0x40010000
 8009520:	20000058 	.word	0x20000058

08009524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009524:	b480      	push	{r7}
 8009526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009528:	bf00      	nop
 800952a:	e7fd      	b.n	8009528 <NMI_Handler+0x4>

0800952c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800952c:	b480      	push	{r7}
 800952e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009530:	bf00      	nop
 8009532:	e7fd      	b.n	8009530 <HardFault_Handler+0x4>

08009534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009534:	b480      	push	{r7}
 8009536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009538:	bf00      	nop
 800953a:	e7fd      	b.n	8009538 <MemManage_Handler+0x4>

0800953c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800953c:	b480      	push	{r7}
 800953e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009540:	bf00      	nop
 8009542:	e7fd      	b.n	8009540 <BusFault_Handler+0x4>

08009544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009544:	b480      	push	{r7}
 8009546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009548:	bf00      	nop
 800954a:	e7fd      	b.n	8009548 <UsageFault_Handler+0x4>

0800954c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800954c:	b480      	push	{r7}
 800954e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009550:	bf00      	nop
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
	...

0800955c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009560:	4802      	ldr	r0, [pc, #8]	@ (800956c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8009562:	f004 ff23 	bl	800e3ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009566:	bf00      	nop
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	20002d08 	.word	0x20002d08

08009570 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8009574:	4802      	ldr	r0, [pc, #8]	@ (8009580 <TIM4_IRQHandler+0x10>)
 8009576:	f004 ff19 	bl	800e3ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800957a:	bf00      	nop
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	20002d9c 	.word	0x20002d9c

08009584 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800958a:	480e      	ldr	r0, [pc, #56]	@ (80095c4 <USART1_IRQHandler+0x40>)
 800958c:	f005 fe74 	bl	800f278 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 8009590:	4b0c      	ldr	r3, [pc, #48]	@ (80095c4 <USART1_IRQHandler+0x40>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f003 0310 	and.w	r3, r3, #16
 800959a:	2b10      	cmp	r3, #16
 800959c:	d10d      	bne.n	80095ba <USART1_IRQHandler+0x36>
  {
      __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800959e:	2300      	movs	r3, #0
 80095a0:	607b      	str	r3, [r7, #4]
 80095a2:	4b08      	ldr	r3, [pc, #32]	@ (80095c4 <USART1_IRQHandler+0x40>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	607b      	str	r3, [r7, #4]
 80095aa:	4b06      	ldr	r3, [pc, #24]	@ (80095c4 <USART1_IRQHandler+0x40>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	607b      	str	r3, [r7, #4]
 80095b2:	687b      	ldr	r3, [r7, #4]
      HAL_UART_IDLECallback(&huart1);
 80095b4:	4803      	ldr	r0, [pc, #12]	@ (80095c4 <USART1_IRQHandler+0x40>)
 80095b6:	f000 fc0d 	bl	8009dd4 <HAL_UART_IDLECallback>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 80095ba:	bf00      	nop
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	20003e8c 	.word	0x20003e8c

080095c8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80095cc:	4802      	ldr	r0, [pc, #8]	@ (80095d8 <DMA2_Stream2_IRQHandler+0x10>)
 80095ce:	f001 fa3b 	bl	800aa48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80095d2:	bf00      	nop
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	20003ed4 	.word	0x20003ed4

080095dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80095e0:	4802      	ldr	r0, [pc, #8]	@ (80095ec <OTG_FS_IRQHandler+0x10>)
 80095e2:	f002 f890 	bl	800b706 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80095e6:	bf00      	nop
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	20009e60 	.word	0x20009e60

080095f0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80095f4:	4802      	ldr	r0, [pc, #8]	@ (8009600 <DMA2_Stream7_IRQHandler+0x10>)
 80095f6:	f001 fa27 	bl	800aa48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80095fa:	bf00      	nop
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	20003f34 	.word	0x20003f34

08009604 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009604:	b480      	push	{r7}
 8009606:	af00      	add	r7, sp, #0
  return 1;
 8009608:	2301      	movs	r3, #1
}
 800960a:	4618      	mov	r0, r3
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <_kill>:

int _kill(int pid, int sig)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800961e:	f011 f831 	bl	801a684 <__errno>
 8009622:	4603      	mov	r3, r0
 8009624:	2216      	movs	r2, #22
 8009626:	601a      	str	r2, [r3, #0]
  return -1;
 8009628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800962c:	4618      	mov	r0, r3
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <_exit>:

void _exit (int status)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800963c:	f04f 31ff 	mov.w	r1, #4294967295
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f7ff ffe7 	bl	8009614 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009646:	bf00      	nop
 8009648:	e7fd      	b.n	8009646 <_exit+0x12>

0800964a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b086      	sub	sp, #24
 800964e:	af00      	add	r7, sp, #0
 8009650:	60f8      	str	r0, [r7, #12]
 8009652:	60b9      	str	r1, [r7, #8]
 8009654:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009656:	2300      	movs	r3, #0
 8009658:	617b      	str	r3, [r7, #20]
 800965a:	e00a      	b.n	8009672 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800965c:	f3af 8000 	nop.w
 8009660:	4601      	mov	r1, r0
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	1c5a      	adds	r2, r3, #1
 8009666:	60ba      	str	r2, [r7, #8]
 8009668:	b2ca      	uxtb	r2, r1
 800966a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	3301      	adds	r3, #1
 8009670:	617b      	str	r3, [r7, #20]
 8009672:	697a      	ldr	r2, [r7, #20]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	429a      	cmp	r2, r3
 8009678:	dbf0      	blt.n	800965c <_read+0x12>
  }

  return len;
 800967a:	687b      	ldr	r3, [r7, #4]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3718      	adds	r7, #24
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <_close>:
  }
  return len;
}

int _close(int file)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800968c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009690:	4618      	mov	r0, r3
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80096ac:	605a      	str	r2, [r3, #4]
  return 0;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <_isatty>:

int _isatty(int file)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80096c4:	2301      	movs	r3, #1
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	370c      	adds	r7, #12
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80096d2:	b480      	push	{r7}
 80096d4:	b085      	sub	sp, #20
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	60f8      	str	r0, [r7, #12]
 80096da:	60b9      	str	r1, [r7, #8]
 80096dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3714      	adds	r7, #20
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b086      	sub	sp, #24
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80096f4:	4a14      	ldr	r2, [pc, #80]	@ (8009748 <_sbrk+0x5c>)
 80096f6:	4b15      	ldr	r3, [pc, #84]	@ (800974c <_sbrk+0x60>)
 80096f8:	1ad3      	subs	r3, r2, r3
 80096fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009700:	4b13      	ldr	r3, [pc, #76]	@ (8009750 <_sbrk+0x64>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d102      	bne.n	800970e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009708:	4b11      	ldr	r3, [pc, #68]	@ (8009750 <_sbrk+0x64>)
 800970a:	4a12      	ldr	r2, [pc, #72]	@ (8009754 <_sbrk+0x68>)
 800970c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800970e:	4b10      	ldr	r3, [pc, #64]	@ (8009750 <_sbrk+0x64>)
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4413      	add	r3, r2
 8009716:	693a      	ldr	r2, [r7, #16]
 8009718:	429a      	cmp	r2, r3
 800971a:	d207      	bcs.n	800972c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800971c:	f010 ffb2 	bl	801a684 <__errno>
 8009720:	4603      	mov	r3, r0
 8009722:	220c      	movs	r2, #12
 8009724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009726:	f04f 33ff 	mov.w	r3, #4294967295
 800972a:	e009      	b.n	8009740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800972c:	4b08      	ldr	r3, [pc, #32]	@ (8009750 <_sbrk+0x64>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009732:	4b07      	ldr	r3, [pc, #28]	@ (8009750 <_sbrk+0x64>)
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4413      	add	r3, r2
 800973a:	4a05      	ldr	r2, [pc, #20]	@ (8009750 <_sbrk+0x64>)
 800973c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800973e:	68fb      	ldr	r3, [r7, #12]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3718      	adds	r7, #24
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	20020000 	.word	0x20020000
 800974c:	00000400 	.word	0x00000400
 8009750:	20002d50 	.word	0x20002d50
 8009754:	2000a6b0 	.word	0x2000a6b0

08009758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009758:	b480      	push	{r7}
 800975a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800975c:	4b06      	ldr	r3, [pc, #24]	@ (8009778 <SystemInit+0x20>)
 800975e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009762:	4a05      	ldr	r2, [pc, #20]	@ (8009778 <SystemInit+0x20>)
 8009764:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009768:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800976c:	bf00      	nop
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	e000ed00 	.word	0xe000ed00

0800977c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b08e      	sub	sp, #56	@ 0x38
 8009780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009782:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009786:	2200      	movs	r2, #0
 8009788:	601a      	str	r2, [r3, #0]
 800978a:	605a      	str	r2, [r3, #4]
 800978c:	609a      	str	r2, [r3, #8]
 800978e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009790:	f107 0320 	add.w	r3, r7, #32
 8009794:	2200      	movs	r2, #0
 8009796:	601a      	str	r2, [r3, #0]
 8009798:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800979a:	1d3b      	adds	r3, r7, #4
 800979c:	2200      	movs	r2, #0
 800979e:	601a      	str	r2, [r3, #0]
 80097a0:	605a      	str	r2, [r3, #4]
 80097a2:	609a      	str	r2, [r3, #8]
 80097a4:	60da      	str	r2, [r3, #12]
 80097a6:	611a      	str	r2, [r3, #16]
 80097a8:	615a      	str	r2, [r3, #20]
 80097aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80097ac:	4b3d      	ldr	r3, [pc, #244]	@ (80098a4 <MX_TIM2_Init+0x128>)
 80097ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80097b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80097b4:	4b3b      	ldr	r3, [pc, #236]	@ (80098a4 <MX_TIM2_Init+0x128>)
 80097b6:	2200      	movs	r2, #0
 80097b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80097ba:	4b3a      	ldr	r3, [pc, #232]	@ (80098a4 <MX_TIM2_Init+0x128>)
 80097bc:	2200      	movs	r2, #0
 80097be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80097c0:	4b38      	ldr	r3, [pc, #224]	@ (80098a4 <MX_TIM2_Init+0x128>)
 80097c2:	2200      	movs	r2, #0
 80097c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80097c6:	4b37      	ldr	r3, [pc, #220]	@ (80098a4 <MX_TIM2_Init+0x128>)
 80097c8:	2200      	movs	r2, #0
 80097ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80097cc:	4b35      	ldr	r3, [pc, #212]	@ (80098a4 <MX_TIM2_Init+0x128>)
 80097ce:	2280      	movs	r2, #128	@ 0x80
 80097d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80097d2:	4834      	ldr	r0, [pc, #208]	@ (80098a4 <MX_TIM2_Init+0x128>)
 80097d4:	f004 fb42 	bl	800de5c <HAL_TIM_Base_Init>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80097de:	f7fe ff2d 	bl	800863c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80097e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80097e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80097e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80097ec:	4619      	mov	r1, r3
 80097ee:	482d      	ldr	r0, [pc, #180]	@ (80098a4 <MX_TIM2_Init+0x128>)
 80097f0:	f004 ff8e 	bl	800e710 <HAL_TIM_ConfigClockSource>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80097fa:	f7fe ff1f 	bl	800863c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80097fe:	4829      	ldr	r0, [pc, #164]	@ (80098a4 <MX_TIM2_Init+0x128>)
 8009800:	f004 fc54 	bl	800e0ac <HAL_TIM_PWM_Init>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d001      	beq.n	800980e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800980a:	f7fe ff17 	bl	800863c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800980e:	2300      	movs	r3, #0
 8009810:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009812:	2300      	movs	r3, #0
 8009814:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009816:	f107 0320 	add.w	r3, r7, #32
 800981a:	4619      	mov	r1, r3
 800981c:	4821      	ldr	r0, [pc, #132]	@ (80098a4 <MX_TIM2_Init+0x128>)
 800981e:	f005 fb83 	bl	800ef28 <HAL_TIMEx_MasterConfigSynchronization>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d001      	beq.n	800982c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8009828:	f7fe ff08 	bl	800863c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800982c:	2360      	movs	r3, #96	@ 0x60
 800982e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009830:	2300      	movs	r3, #0
 8009832:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009834:	2300      	movs	r3, #0
 8009836:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009838:	2300      	movs	r3, #0
 800983a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800983c:	1d3b      	adds	r3, r7, #4
 800983e:	2200      	movs	r2, #0
 8009840:	4619      	mov	r1, r3
 8009842:	4818      	ldr	r0, [pc, #96]	@ (80098a4 <MX_TIM2_Init+0x128>)
 8009844:	f004 fea2 	bl	800e58c <HAL_TIM_PWM_ConfigChannel>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d001      	beq.n	8009852 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800984e:	f7fe fef5 	bl	800863c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009852:	1d3b      	adds	r3, r7, #4
 8009854:	2204      	movs	r2, #4
 8009856:	4619      	mov	r1, r3
 8009858:	4812      	ldr	r0, [pc, #72]	@ (80098a4 <MX_TIM2_Init+0x128>)
 800985a:	f004 fe97 	bl	800e58c <HAL_TIM_PWM_ConfigChannel>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8009864:	f7fe feea 	bl	800863c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009868:	1d3b      	adds	r3, r7, #4
 800986a:	2208      	movs	r2, #8
 800986c:	4619      	mov	r1, r3
 800986e:	480d      	ldr	r0, [pc, #52]	@ (80098a4 <MX_TIM2_Init+0x128>)
 8009870:	f004 fe8c 	bl	800e58c <HAL_TIM_PWM_ConfigChannel>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d001      	beq.n	800987e <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 800987a:	f7fe fedf 	bl	800863c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800987e:	1d3b      	adds	r3, r7, #4
 8009880:	220c      	movs	r2, #12
 8009882:	4619      	mov	r1, r3
 8009884:	4807      	ldr	r0, [pc, #28]	@ (80098a4 <MX_TIM2_Init+0x128>)
 8009886:	f004 fe81 	bl	800e58c <HAL_TIM_PWM_ConfigChannel>
 800988a:	4603      	mov	r3, r0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d001      	beq.n	8009894 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8009890:	f7fe fed4 	bl	800863c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8009894:	4803      	ldr	r0, [pc, #12]	@ (80098a4 <MX_TIM2_Init+0x128>)
 8009896:	f000 f897 	bl	80099c8 <HAL_TIM_MspPostInit>

}
 800989a:	bf00      	nop
 800989c:	3738      	adds	r7, #56	@ 0x38
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	20002d54 	.word	0x20002d54

080098a8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80098ae:	f107 0308 	add.w	r3, r7, #8
 80098b2:	2200      	movs	r2, #0
 80098b4:	601a      	str	r2, [r3, #0]
 80098b6:	605a      	str	r2, [r3, #4]
 80098b8:	609a      	str	r2, [r3, #8]
 80098ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80098bc:	463b      	mov	r3, r7
 80098be:	2200      	movs	r2, #0
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80098c4:	4b20      	ldr	r3, [pc, #128]	@ (8009948 <MX_TIM4_Init+0xa0>)
 80098c6:	4a21      	ldr	r2, [pc, #132]	@ (800994c <MX_TIM4_Init+0xa4>)
 80098c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80098ca:	4b1f      	ldr	r3, [pc, #124]	@ (8009948 <MX_TIM4_Init+0xa0>)
 80098cc:	2253      	movs	r2, #83	@ 0x53
 80098ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80098d0:	4b1d      	ldr	r3, [pc, #116]	@ (8009948 <MX_TIM4_Init+0xa0>)
 80098d2:	2200      	movs	r2, #0
 80098d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80098d6:	4b1c      	ldr	r3, [pc, #112]	@ (8009948 <MX_TIM4_Init+0xa0>)
 80098d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80098dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80098de:	4b1a      	ldr	r3, [pc, #104]	@ (8009948 <MX_TIM4_Init+0xa0>)
 80098e0:	2200      	movs	r2, #0
 80098e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80098e4:	4b18      	ldr	r3, [pc, #96]	@ (8009948 <MX_TIM4_Init+0xa0>)
 80098e6:	2200      	movs	r2, #0
 80098e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80098ea:	4817      	ldr	r0, [pc, #92]	@ (8009948 <MX_TIM4_Init+0xa0>)
 80098ec:	f004 fab6 	bl	800de5c <HAL_TIM_Base_Init>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80098f6:	f7fe fea1 	bl	800863c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80098fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80098fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8009900:	f107 0308 	add.w	r3, r7, #8
 8009904:	4619      	mov	r1, r3
 8009906:	4810      	ldr	r0, [pc, #64]	@ (8009948 <MX_TIM4_Init+0xa0>)
 8009908:	f004 ff02 	bl	800e710 <HAL_TIM_ConfigClockSource>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d001      	beq.n	8009916 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8009912:	f7fe fe93 	bl	800863c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009916:	2300      	movs	r3, #0
 8009918:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800991a:	2300      	movs	r3, #0
 800991c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800991e:	463b      	mov	r3, r7
 8009920:	4619      	mov	r1, r3
 8009922:	4809      	ldr	r0, [pc, #36]	@ (8009948 <MX_TIM4_Init+0xa0>)
 8009924:	f005 fb00 	bl	800ef28 <HAL_TIMEx_MasterConfigSynchronization>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800992e:	f7fe fe85 	bl	800863c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8009932:	4805      	ldr	r0, [pc, #20]	@ (8009948 <MX_TIM4_Init+0xa0>)
 8009934:	f004 fb4a 	bl	800dfcc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 8009938:	4803      	ldr	r0, [pc, #12]	@ (8009948 <MX_TIM4_Init+0xa0>)
 800993a:	f004 fadf 	bl	800defc <HAL_TIM_Base_Start>
  /* USER CODE END TIM4_Init 2 */

}
 800993e:	bf00      	nop
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	20002d9c 	.word	0x20002d9c
 800994c:	40000800 	.word	0x40000800

08009950 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009960:	d10e      	bne.n	8009980 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009962:	2300      	movs	r3, #0
 8009964:	60fb      	str	r3, [r7, #12]
 8009966:	4b16      	ldr	r3, [pc, #88]	@ (80099c0 <HAL_TIM_Base_MspInit+0x70>)
 8009968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800996a:	4a15      	ldr	r2, [pc, #84]	@ (80099c0 <HAL_TIM_Base_MspInit+0x70>)
 800996c:	f043 0301 	orr.w	r3, r3, #1
 8009970:	6413      	str	r3, [r2, #64]	@ 0x40
 8009972:	4b13      	ldr	r3, [pc, #76]	@ (80099c0 <HAL_TIM_Base_MspInit+0x70>)
 8009974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009976:	f003 0301 	and.w	r3, r3, #1
 800997a:	60fb      	str	r3, [r7, #12]
 800997c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800997e:	e01a      	b.n	80099b6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a0f      	ldr	r2, [pc, #60]	@ (80099c4 <HAL_TIM_Base_MspInit+0x74>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d115      	bne.n	80099b6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800998a:	2300      	movs	r3, #0
 800998c:	60bb      	str	r3, [r7, #8]
 800998e:	4b0c      	ldr	r3, [pc, #48]	@ (80099c0 <HAL_TIM_Base_MspInit+0x70>)
 8009990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009992:	4a0b      	ldr	r2, [pc, #44]	@ (80099c0 <HAL_TIM_Base_MspInit+0x70>)
 8009994:	f043 0304 	orr.w	r3, r3, #4
 8009998:	6413      	str	r3, [r2, #64]	@ 0x40
 800999a:	4b09      	ldr	r3, [pc, #36]	@ (80099c0 <HAL_TIM_Base_MspInit+0x70>)
 800999c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800999e:	f003 0304 	and.w	r3, r3, #4
 80099a2:	60bb      	str	r3, [r7, #8]
 80099a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80099a6:	2200      	movs	r2, #0
 80099a8:	2105      	movs	r1, #5
 80099aa:	201e      	movs	r0, #30
 80099ac:	f000 fe1e 	bl	800a5ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80099b0:	201e      	movs	r0, #30
 80099b2:	f000 fe37 	bl	800a624 <HAL_NVIC_EnableIRQ>
}
 80099b6:	bf00      	nop
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	40023800 	.word	0x40023800
 80099c4:	40000800 	.word	0x40000800

080099c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b08a      	sub	sp, #40	@ 0x28
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099d0:	f107 0314 	add.w	r3, r7, #20
 80099d4:	2200      	movs	r2, #0
 80099d6:	601a      	str	r2, [r3, #0]
 80099d8:	605a      	str	r2, [r3, #4]
 80099da:	609a      	str	r2, [r3, #8]
 80099dc:	60da      	str	r2, [r3, #12]
 80099de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099e8:	d13c      	bne.n	8009a64 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80099ea:	2300      	movs	r3, #0
 80099ec:	613b      	str	r3, [r7, #16]
 80099ee:	4b1f      	ldr	r3, [pc, #124]	@ (8009a6c <HAL_TIM_MspPostInit+0xa4>)
 80099f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099f2:	4a1e      	ldr	r2, [pc, #120]	@ (8009a6c <HAL_TIM_MspPostInit+0xa4>)
 80099f4:	f043 0301 	orr.w	r3, r3, #1
 80099f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80099fa:	4b1c      	ldr	r3, [pc, #112]	@ (8009a6c <HAL_TIM_MspPostInit+0xa4>)
 80099fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099fe:	f003 0301 	and.w	r3, r3, #1
 8009a02:	613b      	str	r3, [r7, #16]
 8009a04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a06:	2300      	movs	r3, #0
 8009a08:	60fb      	str	r3, [r7, #12]
 8009a0a:	4b18      	ldr	r3, [pc, #96]	@ (8009a6c <HAL_TIM_MspPostInit+0xa4>)
 8009a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a0e:	4a17      	ldr	r2, [pc, #92]	@ (8009a6c <HAL_TIM_MspPostInit+0xa4>)
 8009a10:	f043 0302 	orr.w	r3, r3, #2
 8009a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8009a16:	4b15      	ldr	r3, [pc, #84]	@ (8009a6c <HAL_TIM_MspPostInit+0xa4>)
 8009a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a1a:	f003 0302 	and.w	r3, r3, #2
 8009a1e:	60fb      	str	r3, [r7, #12]
 8009a20:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8009a22:	f248 030c 	movw	r3, #32780	@ 0x800c
 8009a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a28:	2302      	movs	r3, #2
 8009a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8009a30:	2301      	movs	r3, #1
 8009a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009a34:	2301      	movs	r3, #1
 8009a36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a38:	f107 0314 	add.w	r3, r7, #20
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	480c      	ldr	r0, [pc, #48]	@ (8009a70 <HAL_TIM_MspPostInit+0xa8>)
 8009a40:	f001 fa6c 	bl	800af1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009a44:	2308      	movs	r3, #8
 8009a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a48:	2302      	movs	r3, #2
 8009a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8009a50:	2301      	movs	r3, #1
 8009a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009a54:	2301      	movs	r3, #1
 8009a56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a58:	f107 0314 	add.w	r3, r7, #20
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	4805      	ldr	r0, [pc, #20]	@ (8009a74 <HAL_TIM_MspPostInit+0xac>)
 8009a60:	f001 fa5c 	bl	800af1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8009a64:	bf00      	nop
 8009a66:	3728      	adds	r7, #40	@ 0x28
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	40023800 	.word	0x40023800
 8009a70:	40020000 	.word	0x40020000
 8009a74:	40020400 	.word	0x40020400

08009a78 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
	ring_buffer_init(&usart1_tx_ring_buffer, usart1_tx_buffer, USART1_TX_BUFFER_SIZE);
 8009a7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a82:	4929      	ldr	r1, [pc, #164]	@ (8009b28 <MX_USART1_UART_Init+0xb0>)
 8009a84:	4829      	ldr	r0, [pc, #164]	@ (8009b2c <MX_USART1_UART_Init+0xb4>)
 8009a86:	f7fe f897 	bl	8007bb8 <ring_buffer_init>
	ring_buffer_init(&usart1_rx_ring_buffer, usart1_rx_buffer, USART1_RX_BUFFER_SIZE);
 8009a8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a8e:	4928      	ldr	r1, [pc, #160]	@ (8009b30 <MX_USART1_UART_Init+0xb8>)
 8009a90:	4828      	ldr	r0, [pc, #160]	@ (8009b34 <MX_USART1_UART_Init+0xbc>)
 8009a92:	f7fe f891 	bl	8007bb8 <ring_buffer_init>
	usart1_last_tx_size = 0;
 8009a96:	4b28      	ldr	r3, [pc, #160]	@ (8009b38 <MX_USART1_UART_Init+0xc0>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	801a      	strh	r2, [r3, #0]
	usart1_last_rx_len = 0;
 8009a9c:	4b27      	ldr	r3, [pc, #156]	@ (8009b3c <MX_USART1_UART_Init+0xc4>)
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009aa2:	4b27      	ldr	r3, [pc, #156]	@ (8009b40 <MX_USART1_UART_Init+0xc8>)
 8009aa4:	4a27      	ldr	r2, [pc, #156]	@ (8009b44 <MX_USART1_UART_Init+0xcc>)
 8009aa6:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009aa8:	4b25      	ldr	r3, [pc, #148]	@ (8009b40 <MX_USART1_UART_Init+0xc8>)
 8009aaa:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009aae:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009ab0:	4b23      	ldr	r3, [pc, #140]	@ (8009b40 <MX_USART1_UART_Init+0xc8>)
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009ab6:	4b22      	ldr	r3, [pc, #136]	@ (8009b40 <MX_USART1_UART_Init+0xc8>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009abc:	4b20      	ldr	r3, [pc, #128]	@ (8009b40 <MX_USART1_UART_Init+0xc8>)
 8009abe:	2200      	movs	r2, #0
 8009ac0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8009b40 <MX_USART1_UART_Init+0xc8>)
 8009ac4:	220c      	movs	r2, #12
 8009ac6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8009b40 <MX_USART1_UART_Init+0xc8>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8009ace:	4b1c      	ldr	r3, [pc, #112]	@ (8009b40 <MX_USART1_UART_Init+0xc8>)
 8009ad0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009ad6:	481a      	ldr	r0, [pc, #104]	@ (8009b40 <MX_USART1_UART_Init+0xc8>)
 8009ad8:	f005 fab6 	bl	800f048 <HAL_UART_Init>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d001      	beq.n	8009ae6 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8009ae2:	f7fe fdab 	bl	800863c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  uint16_t rx_buffer_remaining_free = (uint16_t)ring_buffer_linear_free_space(&usart1_rx_ring_buffer);
 8009ae6:	4813      	ldr	r0, [pc, #76]	@ (8009b34 <MX_USART1_UART_Init+0xbc>)
 8009ae8:	f7fe f8bd 	bl	8007c66 <ring_buffer_linear_free_space>
 8009aec:	4603      	mov	r3, r0
 8009aee:	80fb      	strh	r3, [r7, #6]
  uint8_t *write_ptr = ring_buffer_write_ptr(&usart1_rx_ring_buffer);
 8009af0:	4810      	ldr	r0, [pc, #64]	@ (8009b34 <MX_USART1_UART_Init+0xbc>)
 8009af2:	f7fe f8fa 	bl	8007cea <ring_buffer_write_ptr>
 8009af6:	6038      	str	r0, [r7, #0]
//   usart1_last_rx_len = rx_buffer_remaining_free;
//   HAL_UART_Receive_DMA(&huart1, write_ptr, rx_buffer_remaining_free);

  HAL_UART_Receive_DMA(&huart1, usart1_dma_rx, RX_DMA_BUF_SIZE);
 8009af8:	2280      	movs	r2, #128	@ 0x80
 8009afa:	4913      	ldr	r1, [pc, #76]	@ (8009b48 <MX_USART1_UART_Init+0xd0>)
 8009afc:	4810      	ldr	r0, [pc, #64]	@ (8009b40 <MX_USART1_UART_Init+0xc8>)
 8009afe:	f005 fb95 	bl	800f22c <HAL_UART_Receive_DMA>
  usart1_last_rx_len = RX_DMA_BUF_SIZE;
 8009b02:	4b0e      	ldr	r3, [pc, #56]	@ (8009b3c <MX_USART1_UART_Init+0xc4>)
 8009b04:	2280      	movs	r2, #128	@ 0x80
 8009b06:	801a      	strh	r2, [r3, #0]
  usart1_dma_last_pos = 0;
 8009b08:	4b10      	ldr	r3, [pc, #64]	@ (8009b4c <MX_USART1_UART_Init+0xd4>)
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	801a      	strh	r2, [r3, #0]

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8009b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8009b40 <MX_USART1_UART_Init+0xc8>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68da      	ldr	r2, [r3, #12]
 8009b14:	4b0a      	ldr	r3, [pc, #40]	@ (8009b40 <MX_USART1_UART_Init+0xc8>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f042 0210 	orr.w	r2, r2, #16
 8009b1c:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 8009b1e:	bf00      	nop
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	200035e4 	.word	0x200035e4
 8009b2c:	20003de4 	.word	0x20003de4
 8009b30:	20002de4 	.word	0x20002de4
 8009b34:	20003df4 	.word	0x20003df4
 8009b38:	20003e04 	.word	0x20003e04
 8009b3c:	20003e06 	.word	0x20003e06
 8009b40:	20003e8c 	.word	0x20003e8c
 8009b44:	40011000 	.word	0x40011000
 8009b48:	20003e08 	.word	0x20003e08
 8009b4c:	20003e88 	.word	0x20003e88

08009b50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b08a      	sub	sp, #40	@ 0x28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b58:	f107 0314 	add.w	r3, r7, #20
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	601a      	str	r2, [r3, #0]
 8009b60:	605a      	str	r2, [r3, #4]
 8009b62:	609a      	str	r2, [r3, #8]
 8009b64:	60da      	str	r2, [r3, #12]
 8009b66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a4c      	ldr	r2, [pc, #304]	@ (8009ca0 <HAL_UART_MspInit+0x150>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	f040 8092 	bne.w	8009c98 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009b74:	2300      	movs	r3, #0
 8009b76:	613b      	str	r3, [r7, #16]
 8009b78:	4b4a      	ldr	r3, [pc, #296]	@ (8009ca4 <HAL_UART_MspInit+0x154>)
 8009b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b7c:	4a49      	ldr	r2, [pc, #292]	@ (8009ca4 <HAL_UART_MspInit+0x154>)
 8009b7e:	f043 0310 	orr.w	r3, r3, #16
 8009b82:	6453      	str	r3, [r2, #68]	@ 0x44
 8009b84:	4b47      	ldr	r3, [pc, #284]	@ (8009ca4 <HAL_UART_MspInit+0x154>)
 8009b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b88:	f003 0310 	and.w	r3, r3, #16
 8009b8c:	613b      	str	r3, [r7, #16]
 8009b8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b90:	2300      	movs	r3, #0
 8009b92:	60fb      	str	r3, [r7, #12]
 8009b94:	4b43      	ldr	r3, [pc, #268]	@ (8009ca4 <HAL_UART_MspInit+0x154>)
 8009b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b98:	4a42      	ldr	r2, [pc, #264]	@ (8009ca4 <HAL_UART_MspInit+0x154>)
 8009b9a:	f043 0301 	orr.w	r3, r3, #1
 8009b9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ba0:	4b40      	ldr	r3, [pc, #256]	@ (8009ca4 <HAL_UART_MspInit+0x154>)
 8009ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ba4:	f003 0301 	and.w	r3, r3, #1
 8009ba8:	60fb      	str	r3, [r7, #12]
 8009baa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009bac:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8009bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bb2:	2302      	movs	r3, #2
 8009bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009bbe:	2307      	movs	r3, #7
 8009bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bc2:	f107 0314 	add.w	r3, r7, #20
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	4837      	ldr	r0, [pc, #220]	@ (8009ca8 <HAL_UART_MspInit+0x158>)
 8009bca:	f001 f9a7 	bl	800af1c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8009bce:	4b37      	ldr	r3, [pc, #220]	@ (8009cac <HAL_UART_MspInit+0x15c>)
 8009bd0:	4a37      	ldr	r2, [pc, #220]	@ (8009cb0 <HAL_UART_MspInit+0x160>)
 8009bd2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8009bd4:	4b35      	ldr	r3, [pc, #212]	@ (8009cac <HAL_UART_MspInit+0x15c>)
 8009bd6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009bda:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009bdc:	4b33      	ldr	r3, [pc, #204]	@ (8009cac <HAL_UART_MspInit+0x15c>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009be2:	4b32      	ldr	r3, [pc, #200]	@ (8009cac <HAL_UART_MspInit+0x15c>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009be8:	4b30      	ldr	r3, [pc, #192]	@ (8009cac <HAL_UART_MspInit+0x15c>)
 8009bea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009bee:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8009cac <HAL_UART_MspInit+0x15c>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8009cac <HAL_UART_MspInit+0x15c>)
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8009bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8009cac <HAL_UART_MspInit+0x15c>)
 8009bfe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009c02:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009c04:	4b29      	ldr	r3, [pc, #164]	@ (8009cac <HAL_UART_MspInit+0x15c>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009c0a:	4b28      	ldr	r3, [pc, #160]	@ (8009cac <HAL_UART_MspInit+0x15c>)
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8009c10:	4826      	ldr	r0, [pc, #152]	@ (8009cac <HAL_UART_MspInit+0x15c>)
 8009c12:	f000 fd23 	bl	800a65c <HAL_DMA_Init>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d001      	beq.n	8009c20 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8009c1c:	f7fe fd0e 	bl	800863c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a22      	ldr	r2, [pc, #136]	@ (8009cac <HAL_UART_MspInit+0x15c>)
 8009c24:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009c26:	4a21      	ldr	r2, [pc, #132]	@ (8009cac <HAL_UART_MspInit+0x15c>)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8009c2c:	4b21      	ldr	r3, [pc, #132]	@ (8009cb4 <HAL_UART_MspInit+0x164>)
 8009c2e:	4a22      	ldr	r2, [pc, #136]	@ (8009cb8 <HAL_UART_MspInit+0x168>)
 8009c30:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8009c32:	4b20      	ldr	r3, [pc, #128]	@ (8009cb4 <HAL_UART_MspInit+0x164>)
 8009c34:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009c38:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8009cb4 <HAL_UART_MspInit+0x164>)
 8009c3c:	2240      	movs	r2, #64	@ 0x40
 8009c3e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009c40:	4b1c      	ldr	r3, [pc, #112]	@ (8009cb4 <HAL_UART_MspInit+0x164>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009c46:	4b1b      	ldr	r3, [pc, #108]	@ (8009cb4 <HAL_UART_MspInit+0x164>)
 8009c48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009c4c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009c4e:	4b19      	ldr	r3, [pc, #100]	@ (8009cb4 <HAL_UART_MspInit+0x164>)
 8009c50:	2200      	movs	r2, #0
 8009c52:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009c54:	4b17      	ldr	r3, [pc, #92]	@ (8009cb4 <HAL_UART_MspInit+0x164>)
 8009c56:	2200      	movs	r2, #0
 8009c58:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8009c5a:	4b16      	ldr	r3, [pc, #88]	@ (8009cb4 <HAL_UART_MspInit+0x164>)
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009c60:	4b14      	ldr	r3, [pc, #80]	@ (8009cb4 <HAL_UART_MspInit+0x164>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009c66:	4b13      	ldr	r3, [pc, #76]	@ (8009cb4 <HAL_UART_MspInit+0x164>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8009c6c:	4811      	ldr	r0, [pc, #68]	@ (8009cb4 <HAL_UART_MspInit+0x164>)
 8009c6e:	f000 fcf5 	bl	800a65c <HAL_DMA_Init>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d001      	beq.n	8009c7c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8009c78:	f7fe fce0 	bl	800863c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8009cb4 <HAL_UART_MspInit+0x164>)
 8009c80:	639a      	str	r2, [r3, #56]	@ 0x38
 8009c82:	4a0c      	ldr	r2, [pc, #48]	@ (8009cb4 <HAL_UART_MspInit+0x164>)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8009c88:	2200      	movs	r2, #0
 8009c8a:	2105      	movs	r1, #5
 8009c8c:	2025      	movs	r0, #37	@ 0x25
 8009c8e:	f000 fcad 	bl	800a5ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009c92:	2025      	movs	r0, #37	@ 0x25
 8009c94:	f000 fcc6 	bl	800a624 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8009c98:	bf00      	nop
 8009c9a:	3728      	adds	r7, #40	@ 0x28
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	40011000 	.word	0x40011000
 8009ca4:	40023800 	.word	0x40023800
 8009ca8:	40020000 	.word	0x40020000
 8009cac:	20003ed4 	.word	0x20003ed4
 8009cb0:	40026440 	.word	0x40026440
 8009cb4:	20003f34 	.word	0x20003f34
 8009cb8:	400264b8 	.word	0x400264b8

08009cbc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a15      	ldr	r2, [pc, #84]	@ (8009d20 <HAL_UART_MspDeInit+0x64>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d123      	bne.n	8009d16 <HAL_UART_MspDeInit+0x5a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8009cce:	4b15      	ldr	r3, [pc, #84]	@ (8009d24 <HAL_UART_MspDeInit+0x68>)
 8009cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cd2:	4a14      	ldr	r2, [pc, #80]	@ (8009d24 <HAL_UART_MspDeInit+0x68>)
 8009cd4:	f023 0310 	bic.w	r3, r3, #16
 8009cd8:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8009cda:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009cde:	4812      	ldr	r0, [pc, #72]	@ (8009d28 <HAL_UART_MspDeInit+0x6c>)
 8009ce0:	f001 fab8 	bl	800b254 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f000 fd65 	bl	800a7b8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f000 fd60 	bl	800a7b8 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8009cf8:	2025      	movs	r0, #37	@ 0x25
 8009cfa:	f000 fca1 	bl	800a640 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */
	usart1_last_tx_size = 0;
 8009cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8009d2c <HAL_UART_MspDeInit+0x70>)
 8009d00:	2200      	movs	r2, #0
 8009d02:	801a      	strh	r2, [r3, #0]
	usart1_last_rx_len = 0;
 8009d04:	4b0a      	ldr	r3, [pc, #40]	@ (8009d30 <HAL_UART_MspDeInit+0x74>)
 8009d06:	2200      	movs	r2, #0
 8009d08:	801a      	strh	r2, [r3, #0]
	ring_buffer_clear(&usart1_tx_ring_buffer);
 8009d0a:	480a      	ldr	r0, [pc, #40]	@ (8009d34 <HAL_UART_MspDeInit+0x78>)
 8009d0c:	f7fe f8e1 	bl	8007ed2 <ring_buffer_clear>
	ring_buffer_clear(&usart1_rx_ring_buffer);
 8009d10:	4809      	ldr	r0, [pc, #36]	@ (8009d38 <HAL_UART_MspDeInit+0x7c>)
 8009d12:	f7fe f8de 	bl	8007ed2 <ring_buffer_clear>
  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8009d16:	bf00      	nop
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	40011000 	.word	0x40011000
 8009d24:	40023800 	.word	0x40023800
 8009d28:	40020000 	.word	0x40020000
 8009d2c:	20003e04 	.word	0x20003e04
 8009d30:	20003e06 	.word	0x20003e06
 8009d34:	20003de4 	.word	0x20003de4
 8009d38:	20003df4 	.word	0x20003df4

08009d3c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b086      	sub	sp, #24
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a19      	ldr	r2, [pc, #100]	@ (8009db0 <HAL_UART_TxCpltCallback+0x74>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d12b      	bne.n	8009da6 <HAL_UART_TxCpltCallback+0x6a>
    {

    	if(huart1.gState == HAL_UART_STATE_READY)
 8009d4e:	4b19      	ldr	r3, [pc, #100]	@ (8009db4 <HAL_UART_TxCpltCallback+0x78>)
 8009d50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	2b20      	cmp	r3, #32
 8009d58:	d125      	bne.n	8009da6 <HAL_UART_TxCpltCallback+0x6a>
    	{
			// Advance tail for previously sent chunk
			ring_buffer_advance_tail(&usart1_tx_ring_buffer, usart1_last_tx_size);
 8009d5a:	4b17      	ldr	r3, [pc, #92]	@ (8009db8 <HAL_UART_TxCpltCallback+0x7c>)
 8009d5c:	881b      	ldrh	r3, [r3, #0]
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	4619      	mov	r1, r3
 8009d62:	4816      	ldr	r0, [pc, #88]	@ (8009dbc <HAL_UART_TxCpltCallback+0x80>)
 8009d64:	f7fe f895 	bl	8007e92 <ring_buffer_advance_tail>

			size_t linear_used = ring_buffer_linear_used_space(&usart1_tx_ring_buffer);
 8009d68:	4814      	ldr	r0, [pc, #80]	@ (8009dbc <HAL_UART_TxCpltCallback+0x80>)
 8009d6a:	f7fd ffa3 	bl	8007cb4 <ring_buffer_linear_used_space>
 8009d6e:	6178      	str	r0, [r7, #20]
			uint16_t frame_size = MIN(linear_used, USART1_TX_CHUNK_SIZE);
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	2b80      	cmp	r3, #128	@ 0x80
 8009d74:	bf28      	it	cs
 8009d76:	2380      	movcs	r3, #128	@ 0x80
 8009d78:	827b      	strh	r3, [r7, #18]
			uint8_t *next_chunk = ring_buffer_read_ptr(&usart1_tx_ring_buffer);
 8009d7a:	4810      	ldr	r0, [pc, #64]	@ (8009dbc <HAL_UART_TxCpltCallback+0x80>)
 8009d7c:	f7fd ffc4 	bl	8007d08 <ring_buffer_read_ptr>
 8009d80:	60f8      	str	r0, [r7, #12]
			usart1_last_tx_size = frame_size;
 8009d82:	4a0d      	ldr	r2, [pc, #52]	@ (8009db8 <HAL_UART_TxCpltCallback+0x7c>)
 8009d84:	8a7b      	ldrh	r3, [r7, #18]
 8009d86:	8013      	strh	r3, [r2, #0]

			if (frame_size > 0)
 8009d88:	8a7b      	ldrh	r3, [r7, #18]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00b      	beq.n	8009da6 <HAL_UART_TxCpltCallback+0x6a>
			{
		        if (HAL_UART_Transmit_DMA(huart, next_chunk, frame_size) != HAL_OK) {
 8009d8e:	8a7b      	ldrh	r3, [r7, #18]
 8009d90:	461a      	mov	r2, r3
 8009d92:	68f9      	ldr	r1, [r7, #12]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f005 f9d9 	bl	800f14c <HAL_UART_Transmit_DMA>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d002      	beq.n	8009da6 <HAL_UART_TxCpltCallback+0x6a>
		            usart1_last_tx_size = 0;
 8009da0:	4b05      	ldr	r3, [pc, #20]	@ (8009db8 <HAL_UART_TxCpltCallback+0x7c>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	801a      	strh	r2, [r3, #0]
				//HAL_UART_Transmit_IT(huart, next_chunk, frame_size);
				// Do NOT advance tail here. Advance it next time, after TX completes.
			}
    	}
    }
}
 8009da6:	bf00      	nop
 8009da8:	3718      	adds	r7, #24
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	40011000 	.word	0x40011000
 8009db4:	20003e8c 	.word	0x20003e8c
 8009db8:	20003e04 	.word	0x20003e04
 8009dbc:	20003de4 	.word	0x20003de4

08009dc0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
    {
    }
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <HAL_UART_IDLECallback>:




void HAL_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1){
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a26      	ldr	r2, [pc, #152]	@ (8009e7c <HAL_UART_IDLECallback+0xa8>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d147      	bne.n	8009e76 <HAL_UART_IDLECallback+0xa2>

    // Position DMA has written up to (bytes received so far)
    int dma_pos = (int)(RX_DMA_BUF_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx));
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8009df2:	617b      	str	r3, [r7, #20]

    if (dma_pos == usart1_dma_last_pos) return; // nothing new
 8009df4:	4b22      	ldr	r3, [pc, #136]	@ (8009e80 <HAL_UART_IDLECallback+0xac>)
 8009df6:	881b      	ldrh	r3, [r3, #0]
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d038      	beq.n	8009e74 <HAL_UART_IDLECallback+0xa0>

    if (dma_pos > usart1_dma_last_pos) {
 8009e02:	4b1f      	ldr	r3, [pc, #124]	@ (8009e80 <HAL_UART_IDLECallback+0xac>)
 8009e04:	881b      	ldrh	r3, [r3, #0]
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	461a      	mov	r2, r3
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	dd12      	ble.n	8009e36 <HAL_UART_IDLECallback+0x62>
        // linear chunk
        size_t len = dma_pos - usart1_dma_last_pos;
 8009e10:	4b1b      	ldr	r3, [pc, #108]	@ (8009e80 <HAL_UART_IDLECallback+0xac>)
 8009e12:	881b      	ldrh	r3, [r3, #0]
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	461a      	mov	r2, r3
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	1a9b      	subs	r3, r3, r2
 8009e1c:	60fb      	str	r3, [r7, #12]
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], len);
 8009e1e:	4b18      	ldr	r3, [pc, #96]	@ (8009e80 <HAL_UART_IDLECallback+0xac>)
 8009e20:	881b      	ldrh	r3, [r3, #0]
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 8009e26:	4b17      	ldr	r3, [pc, #92]	@ (8009e84 <HAL_UART_IDLECallback+0xb0>)
 8009e28:	4413      	add	r3, r2
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	4816      	ldr	r0, [pc, #88]	@ (8009e88 <HAL_UART_IDLECallback+0xb4>)
 8009e30:	f7fd ff79 	bl	8007d26 <ring_buffer_enqueue_arr>
 8009e34:	e019      	b.n	8009e6a <HAL_UART_IDLECallback+0x96>
    } else {
        // wrapped: tail then head
        size_t tail_len = RX_DMA_BUF_SIZE - usart1_dma_last_pos;
 8009e36:	4b12      	ldr	r3, [pc, #72]	@ (8009e80 <HAL_UART_IDLECallback+0xac>)
 8009e38:	881b      	ldrh	r3, [r3, #0]
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8009e40:	613b      	str	r3, [r7, #16]
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], tail_len);
 8009e42:	4b0f      	ldr	r3, [pc, #60]	@ (8009e80 <HAL_UART_IDLECallback+0xac>)
 8009e44:	881b      	ldrh	r3, [r3, #0]
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 8009e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8009e84 <HAL_UART_IDLECallback+0xb0>)
 8009e4c:	4413      	add	r3, r2
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	4619      	mov	r1, r3
 8009e52:	480d      	ldr	r0, [pc, #52]	@ (8009e88 <HAL_UART_IDLECallback+0xb4>)
 8009e54:	f7fd ff67 	bl	8007d26 <ring_buffer_enqueue_arr>
        if (dma_pos) {
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d005      	beq.n	8009e6a <HAL_UART_IDLECallback+0x96>
        	ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	461a      	mov	r2, r3
 8009e62:	4908      	ldr	r1, [pc, #32]	@ (8009e84 <HAL_UART_IDLECallback+0xb0>)
 8009e64:	4808      	ldr	r0, [pc, #32]	@ (8009e88 <HAL_UART_IDLECallback+0xb4>)
 8009e66:	f7fd ff5e 	bl	8007d26 <ring_buffer_enqueue_arr>
                              &usart1_dma_rx[0], dma_pos);
        }
    }

    usart1_dma_last_pos = dma_pos;
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	4b04      	ldr	r3, [pc, #16]	@ (8009e80 <HAL_UART_IDLECallback+0xac>)
 8009e70:	801a      	strh	r2, [r3, #0]
 8009e72:	e000      	b.n	8009e76 <HAL_UART_IDLECallback+0xa2>
    if (dma_pos == usart1_dma_last_pos) return; // nothing new
 8009e74:	bf00      	nop
    }
}
 8009e76:	3718      	adds	r7, #24
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	40011000 	.word	0x40011000
 8009e80:	20003e88 	.word	0x20003e88
 8009e84:	20003e08 	.word	0x20003e08
 8009e88:	20003df4 	.word	0x20003df4

08009e8c <usart1_read_dma_buffer>:


void usart1_read_dma_buffer()
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b08c      	sub	sp, #48	@ 0x30
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	2300      	movs	r3, #0
 8009e94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009e96:	f3ef 8310 	mrs	r3, PRIMASK
 8009e9a:	61bb      	str	r3, [r7, #24]
  return(result);
 8009e9c:	69bb      	ldr	r3, [r7, #24]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8009e9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ea0:	b672      	cpsid	i
}
 8009ea2:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009ea4:	f3bf 8f4f 	dsb	sy
}
 8009ea8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009eaa:	f3bf 8f6f 	isb	sy
}
 8009eae:	bf00      	nop
    return old;
 8009eb0:	697b      	ldr	r3, [r7, #20]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 8009eb2:	613b      	str	r3, [r7, #16]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d001      	beq.n	8009ebe <usart1_read_dma_buffer+0x32>
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	e000      	b.n	8009ec0 <usart1_read_dma_buffer+0x34>
 8009ebe:	2300      	movs	r3, #0
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8009ec0:	603b      	str	r3, [r7, #0]
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ec6:	e049      	b.n	8009f5c <usart1_read_dma_buffer+0xd0>
	{
    // Position DMA has written up to (bytes received so far)
    int dma_pos = (int)(RX_DMA_BUF_SIZE - __HAL_DMA_GET_COUNTER(huart1.hdmarx));
 8009ec8:	4b33      	ldr	r3, [pc, #204]	@ (8009f98 <usart1_read_dma_buffer+0x10c>)
 8009eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8009ed4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (dma_pos == usart1_dma_last_pos) return; // nothing new
 8009ed6:	4b31      	ldr	r3, [pc, #196]	@ (8009f9c <usart1_read_dma_buffer+0x110>)
 8009ed8:	881b      	ldrh	r3, [r3, #0]
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	461a      	mov	r2, r3
 8009ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d101      	bne.n	8009ee8 <usart1_read_dma_buffer+0x5c>
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	e03d      	b.n	8009f64 <usart1_read_dma_buffer+0xd8>

    if (dma_pos > usart1_dma_last_pos) {
 8009ee8:	4b2c      	ldr	r3, [pc, #176]	@ (8009f9c <usart1_read_dma_buffer+0x110>)
 8009eea:	881b      	ldrh	r3, [r3, #0]
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	461a      	mov	r2, r3
 8009ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	dd12      	ble.n	8009f1c <usart1_read_dma_buffer+0x90>
        // linear chunk
        size_t len = dma_pos - usart1_dma_last_pos;
 8009ef6:	4b29      	ldr	r3, [pc, #164]	@ (8009f9c <usart1_read_dma_buffer+0x110>)
 8009ef8:	881b      	ldrh	r3, [r3, #0]
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	461a      	mov	r2, r3
 8009efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f00:	1a9b      	subs	r3, r3, r2
 8009f02:	623b      	str	r3, [r7, #32]
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], len);
 8009f04:	4b25      	ldr	r3, [pc, #148]	@ (8009f9c <usart1_read_dma_buffer+0x110>)
 8009f06:	881b      	ldrh	r3, [r3, #0]
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 8009f0c:	4b24      	ldr	r3, [pc, #144]	@ (8009fa0 <usart1_read_dma_buffer+0x114>)
 8009f0e:	4413      	add	r3, r2
 8009f10:	6a3a      	ldr	r2, [r7, #32]
 8009f12:	4619      	mov	r1, r3
 8009f14:	4823      	ldr	r0, [pc, #140]	@ (8009fa4 <usart1_read_dma_buffer+0x118>)
 8009f16:	f7fd ff06 	bl	8007d26 <ring_buffer_enqueue_arr>
 8009f1a:	e019      	b.n	8009f50 <usart1_read_dma_buffer+0xc4>
    } else {
        // wrapped: tail then head
        size_t tail_len = RX_DMA_BUF_SIZE - usart1_dma_last_pos;
 8009f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8009f9c <usart1_read_dma_buffer+0x110>)
 8009f1e:	881b      	ldrh	r3, [r3, #0]
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8009f26:	627b      	str	r3, [r7, #36]	@ 0x24
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], tail_len);
 8009f28:	4b1c      	ldr	r3, [pc, #112]	@ (8009f9c <usart1_read_dma_buffer+0x110>)
 8009f2a:	881b      	ldrh	r3, [r3, #0]
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 8009f30:	4b1b      	ldr	r3, [pc, #108]	@ (8009fa0 <usart1_read_dma_buffer+0x114>)
 8009f32:	4413      	add	r3, r2
 8009f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f36:	4619      	mov	r1, r3
 8009f38:	481a      	ldr	r0, [pc, #104]	@ (8009fa4 <usart1_read_dma_buffer+0x118>)
 8009f3a:	f7fd fef4 	bl	8007d26 <ring_buffer_enqueue_arr>
        if (dma_pos) {
 8009f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d005      	beq.n	8009f50 <usart1_read_dma_buffer+0xc4>
        	ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 8009f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f46:	461a      	mov	r2, r3
 8009f48:	4915      	ldr	r1, [pc, #84]	@ (8009fa0 <usart1_read_dma_buffer+0x114>)
 8009f4a:	4816      	ldr	r0, [pc, #88]	@ (8009fa4 <usart1_read_dma_buffer+0x118>)
 8009f4c:	f7fd feeb 	bl	8007d26 <ring_buffer_enqueue_arr>
                              &usart1_dma_rx[0], dma_pos);
        }
    }

    usart1_dma_last_pos = dma_pos;
 8009f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	4b11      	ldr	r3, [pc, #68]	@ (8009f9c <usart1_read_dma_buffer+0x110>)
 8009f56:	801a      	strh	r2, [r3, #0]
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8009f58:	2300      	movs	r3, #0
 8009f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d1b2      	bne.n	8009ec8 <usart1_read_dma_buffer+0x3c>
 8009f62:	2301      	movs	r3, #1
 8009f64:	463a      	mov	r2, r7
 8009f66:	60fa      	str	r2, [r7, #12]
	exit_critical(*sreg);		// restore saved I-bit
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	6812      	ldr	r2, [r2, #0]
 8009f6c:	60ba      	str	r2, [r7, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 8009f6e:	f3bf 8f5f 	dmb	sy
}
 8009f72:	bf00      	nop
 8009f74:	68ba      	ldr	r2, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	f382 8810 	msr	PRIMASK, r2
}
 8009f7e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009f80:	f3bf 8f4f 	dsb	sy
}
 8009f84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009f86:	f3bf 8f6f 	isb	sy
}
 8009f8a:	bf00      	nop
}
 8009f8c:	bf00      	nop
}
 8009f8e:	bf00      	nop
 8009f90:	2b01      	cmp	r3, #1
	}
}
 8009f92:	3730      	adds	r7, #48	@ 0x30
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	20003e8c 	.word	0x20003e8c
 8009f9c:	20003e88 	.word	0x20003e88
 8009fa0:	20003e08 	.word	0x20003e08
 8009fa4:	20003df4 	.word	0x20003df4

08009fa8 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a04      	ldr	r2, [pc, #16]	@ (8009fc8 <HAL_UART_ErrorCallback+0x20>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d101      	bne.n	8009fbe <HAL_UART_ErrorCallback+0x16>
    {
        // Handle TX/RX recovery here
        //usart1_recover();
        usart1_restart();
 8009fba:	f000 f877 	bl	800a0ac <usart1_restart>
    }
}
 8009fbe:	bf00      	nop
 8009fc0:	3708      	adds	r7, #8
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	40011000 	.word	0x40011000

08009fcc <usart1_start_tx_if_idle>:


void usart1_start_tx_if_idle(int force_state)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b08e      	sub	sp, #56	@ 0x38
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8009fdc:	623b      	str	r3, [r7, #32]
  return(result);
 8009fde:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8009fe0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009fe2:	b672      	cpsid	i
}
 8009fe4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009fe6:	f3bf 8f4f 	dsb	sy
}
 8009fea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009fec:	f3bf 8f6f 	isb	sy
}
 8009ff0:	bf00      	nop
    return old;
 8009ff2:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 8009ff4:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d001      	beq.n	800a000 <usart1_start_tx_if_idle+0x34>
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	e000      	b.n	800a002 <usart1_start_tx_if_idle+0x36>
 800a000:	2300      	movs	r3, #0
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a002:	60bb      	str	r3, [r7, #8]
 800a004:	2301      	movs	r3, #1
 800a006:	637b      	str	r3, [r7, #52]	@ 0x34
 800a008:	e02c      	b.n	800a064 <usart1_start_tx_if_idle+0x98>
	{
		if (((huart1.gState == HAL_UART_STATE_READY) || force_state != 0) && ring_buffer_used_space(&usart1_tx_ring_buffer) > 0)
 800a00a:	4b25      	ldr	r3, [pc, #148]	@ (800a0a0 <usart1_start_tx_if_idle+0xd4>)
 800a00c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a010:	b2db      	uxtb	r3, r3
 800a012:	2b20      	cmp	r3, #32
 800a014:	d002      	beq.n	800a01c <usart1_start_tx_if_idle+0x50>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d021      	beq.n	800a060 <usart1_start_tx_if_idle+0x94>
 800a01c:	4821      	ldr	r0, [pc, #132]	@ (800a0a4 <usart1_start_tx_if_idle+0xd8>)
 800a01e:	f7fd fe09 	bl	8007c34 <ring_buffer_used_space>
 800a022:	4603      	mov	r3, r0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d01b      	beq.n	800a060 <usart1_start_tx_if_idle+0x94>
		{

			size_t linear_used = ring_buffer_linear_used_space(&usart1_tx_ring_buffer);
 800a028:	481e      	ldr	r0, [pc, #120]	@ (800a0a4 <usart1_start_tx_if_idle+0xd8>)
 800a02a:	f7fd fe43 	bl	8007cb4 <ring_buffer_linear_used_space>
 800a02e:	6338      	str	r0, [r7, #48]	@ 0x30
			uint16_t frame_size = MIN(linear_used, USART1_TX_CHUNK_SIZE);
 800a030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a032:	2b80      	cmp	r3, #128	@ 0x80
 800a034:	bf28      	it	cs
 800a036:	2380      	movcs	r3, #128	@ 0x80
 800a038:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			uint8_t *data = ring_buffer_read_ptr(&usart1_tx_ring_buffer);
 800a03a:	481a      	ldr	r0, [pc, #104]	@ (800a0a4 <usart1_start_tx_if_idle+0xd8>)
 800a03c:	f7fd fe64 	bl	8007d08 <ring_buffer_read_ptr>
 800a040:	62b8      	str	r0, [r7, #40]	@ 0x28

			usart1_last_tx_size = frame_size;
 800a042:	4a19      	ldr	r2, [pc, #100]	@ (800a0a8 <usart1_start_tx_if_idle+0xdc>)
 800a044:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a046:	8013      	strh	r3, [r2, #0]

			//EXIT_CRITICAL();
			if (HAL_UART_Transmit_DMA(&huart1, data, frame_size) != HAL_OK) {
 800a048:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a04a:	461a      	mov	r2, r3
 800a04c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a04e:	4814      	ldr	r0, [pc, #80]	@ (800a0a0 <usart1_start_tx_if_idle+0xd4>)
 800a050:	f005 f87c 	bl	800f14c <HAL_UART_Transmit_DMA>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d002      	beq.n	800a060 <usart1_start_tx_if_idle+0x94>
				//ENTER_CRITICAL();
				usart1_last_tx_size = 0;
 800a05a:	4b13      	ldr	r3, [pc, #76]	@ (800a0a8 <usart1_start_tx_if_idle+0xdc>)
 800a05c:	2200      	movs	r2, #0
 800a05e:	801a      	strh	r2, [r3, #0]
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a060:	2300      	movs	r3, #0
 800a062:	637b      	str	r3, [r7, #52]	@ 0x34
 800a064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1cf      	bne.n	800a00a <usart1_start_tx_if_idle+0x3e>
 800a06a:	f107 0308 	add.w	r3, r7, #8
 800a06e:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 800a076:	f3bf 8f5f 	dmb	sy
}
 800a07a:	bf00      	nop
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f383 8810 	msr	PRIMASK, r3
}
 800a086:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a088:	f3bf 8f4f 	dsb	sy
}
 800a08c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a08e:	f3bf 8f6f 	isb	sy
}
 800a092:	bf00      	nop
}
 800a094:	bf00      	nop
}
 800a096:	bf00      	nop
		else
		{
			//EXIT_CRITICAL();
		}
	}
}
 800a098:	bf00      	nop
 800a09a:	3738      	adds	r7, #56	@ 0x38
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	20003e8c 	.word	0x20003e8c
 800a0a4:	20003de4 	.word	0x20003de4
 800a0a8:	20003e04 	.word	0x20003e04

0800a0ac <usart1_restart>:
  usart1_dma_last_pos = 0;
}


void usart1_restart(void)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
    // 1. Deinit UART (also unlinks DMA internally)
    HAL_UART_DeInit(&huart1);
 800a0b2:	481b      	ldr	r0, [pc, #108]	@ (800a120 <usart1_restart+0x74>)
 800a0b4:	f005 f818 	bl	800f0e8 <HAL_UART_DeInit>

    // 2. Deinit DMA streams manually
    HAL_DMA_DeInit(huart1.hdmarx);
 800a0b8:	4b19      	ldr	r3, [pc, #100]	@ (800a120 <usart1_restart+0x74>)
 800a0ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 fb7b 	bl	800a7b8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart1.hdmatx);
 800a0c2:	4b17      	ldr	r3, [pc, #92]	@ (800a120 <usart1_restart+0x74>)
 800a0c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 fb76 	bl	800a7b8 <HAL_DMA_DeInit>

    // 3. Reset USART1 peripheral
    __HAL_RCC_USART1_FORCE_RESET();
 800a0cc:	4b15      	ldr	r3, [pc, #84]	@ (800a124 <usart1_restart+0x78>)
 800a0ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0d0:	4a14      	ldr	r2, [pc, #80]	@ (800a124 <usart1_restart+0x78>)
 800a0d2:	f043 0310 	orr.w	r3, r3, #16
 800a0d6:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_RCC_USART1_RELEASE_RESET();
 800a0d8:	4b12      	ldr	r3, [pc, #72]	@ (800a124 <usart1_restart+0x78>)
 800a0da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0dc:	4a11      	ldr	r2, [pc, #68]	@ (800a124 <usart1_restart+0x78>)
 800a0de:	f023 0310 	bic.w	r3, r3, #16
 800a0e2:	6253      	str	r3, [r2, #36]	@ 0x24

    // 4. Reinit USART1 and DMA
    MX_USART1_UART_Init();  // Reinitializes UART and links DMA
 800a0e4:	f7ff fcc8 	bl	8009a78 <MX_USART1_UART_Init>
    //MX_DMA_Init();          // Only needed if you have a custom DMA init function

    // 5. Restart RX DMA if needed
    uint16_t space = ring_buffer_linear_free_space(&usart1_rx_ring_buffer);
 800a0e8:	480f      	ldr	r0, [pc, #60]	@ (800a128 <usart1_restart+0x7c>)
 800a0ea:	f7fd fdbc 	bl	8007c66 <ring_buffer_linear_free_space>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	80fb      	strh	r3, [r7, #6]
    uint8_t *write_ptr = ring_buffer_write_ptr(&usart1_rx_ring_buffer);
 800a0f2:	480d      	ldr	r0, [pc, #52]	@ (800a128 <usart1_restart+0x7c>)
 800a0f4:	f7fd fdf9 	bl	8007cea <ring_buffer_write_ptr>
 800a0f8:	6038      	str	r0, [r7, #0]
    // usart1_last_rx_len = space;
    // HAL_UART_Receive_DMA(&huart1, write_ptr, space);

      HAL_UART_Receive_DMA(&huart1, usart1_dma_rx, RX_DMA_BUF_SIZE);
 800a0fa:	2280      	movs	r2, #128	@ 0x80
 800a0fc:	490b      	ldr	r1, [pc, #44]	@ (800a12c <usart1_restart+0x80>)
 800a0fe:	4808      	ldr	r0, [pc, #32]	@ (800a120 <usart1_restart+0x74>)
 800a100:	f005 f894 	bl	800f22c <HAL_UART_Receive_DMA>
  usart1_last_rx_len = RX_DMA_BUF_SIZE;
 800a104:	4b0a      	ldr	r3, [pc, #40]	@ (800a130 <usart1_restart+0x84>)
 800a106:	2280      	movs	r2, #128	@ 0x80
 800a108:	801a      	strh	r2, [r3, #0]
  usart1_dma_last_pos = 0;
 800a10a:	4b0a      	ldr	r3, [pc, #40]	@ (800a134 <usart1_restart+0x88>)
 800a10c:	2200      	movs	r2, #0
 800a10e:	801a      	strh	r2, [r3, #0]

    usart1_start_tx_if_idle(1);
 800a110:	2001      	movs	r0, #1
 800a112:	f7ff ff5b 	bl	8009fcc <usart1_start_tx_if_idle>
}
 800a116:	bf00      	nop
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	20003e8c 	.word	0x20003e8c
 800a124:	40023800 	.word	0x40023800
 800a128:	20003df4 	.word	0x20003df4
 800a12c:	20003e08 	.word	0x20003e08
 800a130:	20003e06 	.word	0x20003e06
 800a134:	20003e88 	.word	0x20003e88

0800a138 <usart1_send_data>:




size_t usart1_send_data(char* data, size_t len)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b08c      	sub	sp, #48	@ 0x30
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
    if (data == NULL || len == 0) {
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d002      	beq.n	800a14e <usart1_send_data+0x16>
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d101      	bne.n	800a152 <usart1_send_data+0x1a>
        return 0;
 800a14e:	2300      	movs	r3, #0
 800a150:	e040      	b.n	800a1d4 <usart1_send_data+0x9c>
 800a152:	2300      	movs	r3, #0
 800a154:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a156:	f3ef 8310 	mrs	r3, PRIMASK
 800a15a:	623b      	str	r3, [r7, #32]
  return(result);
 800a15c:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800a15e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a160:	b672      	cpsid	i
}
 800a162:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a164:	f3bf 8f4f 	dsb	sy
}
 800a168:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a16a:	f3bf 8f6f 	isb	sy
}
 800a16e:	bf00      	nop
    return old;
 800a170:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800a172:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800a174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a176:	2b01      	cmp	r3, #1
 800a178:	d001      	beq.n	800a17e <usart1_send_data+0x46>
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	e000      	b.n	800a180 <usart1_send_data+0x48>
 800a17e:	2300      	movs	r3, #0
    }
    size_t bytes_written;
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a180:	60bb      	str	r3, [r7, #8]
 800a182:	2301      	movs	r3, #1
 800a184:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a186:	e007      	b.n	800a198 <usart1_send_data+0x60>
    {
        // Try to enqueue data
    	bytes_written = ring_buffer_enqueue_arr(&usart1_tx_ring_buffer, (uint8_t*)data, len);
 800a188:	683a      	ldr	r2, [r7, #0]
 800a18a:	6879      	ldr	r1, [r7, #4]
 800a18c:	4813      	ldr	r0, [pc, #76]	@ (800a1dc <usart1_send_data+0xa4>)
 800a18e:	f7fd fdca 	bl	8007d26 <ring_buffer_enqueue_arr>
 800a192:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a194:	2300      	movs	r3, #0
 800a196:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1f4      	bne.n	800a188 <usart1_send_data+0x50>
 800a19e:	f107 0308 	add.w	r3, r7, #8
 800a1a2:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 800a1aa:	f3bf 8f5f 	dmb	sy
}
 800a1ae:	bf00      	nop
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f383 8810 	msr	PRIMASK, r3
}
 800a1ba:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a1bc:	f3bf 8f4f 	dsb	sy
}
 800a1c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a1c2:	f3bf 8f6f 	isb	sy
}
 800a1c6:	bf00      	nop
}
 800a1c8:	bf00      	nop
}
 800a1ca:	bf00      	nop
    }

    usart1_start_tx_if_idle(0);
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	f7ff fefd 	bl	8009fcc <usart1_start_tx_if_idle>

    return bytes_written;
 800a1d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3730      	adds	r7, #48	@ 0x30
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	20003de4 	.word	0x20003de4

0800a1e0 <usart1_recv_data>:

size_t usart1_recv_data(char* out_buf, size_t max_len)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b08c      	sub	sp, #48	@ 0x30
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
    if (out_buf == NULL || max_len == 0) {
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d002      	beq.n	800a1f6 <usart1_recv_data+0x16>
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d101      	bne.n	800a1fa <usart1_recv_data+0x1a>
        return 0;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	e03f      	b.n	800a27a <usart1_recv_data+0x9a>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a1fe:	f3ef 8310 	mrs	r3, PRIMASK
 800a202:	623b      	str	r3, [r7, #32]
  return(result);
 800a204:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800a206:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a208:	b672      	cpsid	i
}
 800a20a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a20c:	f3bf 8f4f 	dsb	sy
}
 800a210:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a212:	f3bf 8f6f 	isb	sy
}
 800a216:	bf00      	nop
    return old;
 800a218:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800a21a:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800a21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d001      	beq.n	800a226 <usart1_recv_data+0x46>
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	e000      	b.n	800a228 <usart1_recv_data+0x48>
 800a226:	2300      	movs	r3, #0
    }
    size_t bytes_read;
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a228:	60bb      	str	r3, [r7, #8]
 800a22a:	2301      	movs	r3, #1
 800a22c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a22e:	e009      	b.n	800a244 <usart1_recv_data+0x64>
    {
        usart1_read_dma_buffer();
 800a230:	f7ff fe2c 	bl	8009e8c <usart1_read_dma_buffer>
    	bytes_read = ring_buffer_dequeue_arr(&usart1_rx_ring_buffer, (uint8_t*)out_buf, max_len);
 800a234:	683a      	ldr	r2, [r7, #0]
 800a236:	6879      	ldr	r1, [r7, #4]
 800a238:	4812      	ldr	r0, [pc, #72]	@ (800a284 <usart1_recv_data+0xa4>)
 800a23a:	f7fd fdce 	bl	8007dda <ring_buffer_dequeue_arr>
 800a23e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a240:	2300      	movs	r3, #0
 800a242:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1f2      	bne.n	800a230 <usart1_recv_data+0x50>
 800a24a:	f107 0308 	add.w	r3, r7, #8
 800a24e:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 800a256:	f3bf 8f5f 	dmb	sy
}
 800a25a:	bf00      	nop
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f383 8810 	msr	PRIMASK, r3
}
 800a266:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a268:	f3bf 8f4f 	dsb	sy
}
 800a26c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a26e:	f3bf 8f6f 	isb	sy
}
 800a272:	bf00      	nop
}
 800a274:	bf00      	nop
}
 800a276:	bf00      	nop
    }

    return bytes_read;
 800a278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3730      	adds	r7, #48	@ 0x30
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	20003df4 	.word	0x20003df4

0800a288 <usart1_data_available_for_read>:

size_t usart1_data_available_for_read()
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b08a      	sub	sp, #40	@ 0x28
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	2300      	movs	r3, #0
 800a290:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a292:	f3ef 8310 	mrs	r3, PRIMASK
 800a296:	61bb      	str	r3, [r7, #24]
  return(result);
 800a298:	69bb      	ldr	r3, [r7, #24]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800a29a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a29c:	b672      	cpsid	i
}
 800a29e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a2a0:	f3bf 8f4f 	dsb	sy
}
 800a2a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a2a6:	f3bf 8f6f 	isb	sy
}
 800a2aa:	bf00      	nop
    return old;
 800a2ac:	697b      	ldr	r3, [r7, #20]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800a2ae:	613b      	str	r3, [r7, #16]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d001      	beq.n	800a2ba <usart1_data_available_for_read+0x32>
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	e000      	b.n	800a2bc <usart1_data_available_for_read+0x34>
 800a2ba:	2300      	movs	r3, #0
	size_t used;

    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a2bc:	603b      	str	r3, [r7, #0]
 800a2be:	2301      	movs	r3, #1
 800a2c0:	623b      	str	r3, [r7, #32]
 800a2c2:	e007      	b.n	800a2d4 <usart1_data_available_for_read+0x4c>
    {
        usart1_read_dma_buffer();
 800a2c4:	f7ff fde2 	bl	8009e8c <usart1_read_dma_buffer>
    	used = ring_buffer_used_space(&usart1_rx_ring_buffer);
 800a2c8:	4811      	ldr	r0, [pc, #68]	@ (800a310 <usart1_data_available_for_read+0x88>)
 800a2ca:	f7fd fcb3 	bl	8007c34 <ring_buffer_used_space>
 800a2ce:	6278      	str	r0, [r7, #36]	@ 0x24
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	623b      	str	r3, [r7, #32]
 800a2d4:	6a3b      	ldr	r3, [r7, #32]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1f4      	bne.n	800a2c4 <usart1_data_available_for_read+0x3c>
 800a2da:	463b      	mov	r3, r7
 800a2dc:	60fb      	str	r3, [r7, #12]
	exit_critical(*sreg);		// restore saved I-bit
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 800a2e4:	f3bf 8f5f 	dmb	sy
}
 800a2e8:	bf00      	nop
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f383 8810 	msr	PRIMASK, r3
}
 800a2f4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a2f6:	f3bf 8f4f 	dsb	sy
}
 800a2fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a2fc:	f3bf 8f6f 	isb	sy
}
 800a300:	bf00      	nop
}
 800a302:	bf00      	nop
}
 800a304:	bf00      	nop
    }

    return used;
 800a306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3728      	adds	r7, #40	@ 0x28
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	20003df4 	.word	0x20003df4

0800a314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a314:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a34c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800a318:	f7ff fa1e 	bl	8009758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a31c:	480c      	ldr	r0, [pc, #48]	@ (800a350 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a31e:	490d      	ldr	r1, [pc, #52]	@ (800a354 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a320:	4a0d      	ldr	r2, [pc, #52]	@ (800a358 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a324:	e002      	b.n	800a32c <LoopCopyDataInit>

0800a326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a32a:	3304      	adds	r3, #4

0800a32c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a32c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a32e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a330:	d3f9      	bcc.n	800a326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a332:	4a0a      	ldr	r2, [pc, #40]	@ (800a35c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a334:	4c0a      	ldr	r4, [pc, #40]	@ (800a360 <LoopFillZerobss+0x22>)
  movs r3, #0
 800a336:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a338:	e001      	b.n	800a33e <LoopFillZerobss>

0800a33a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a33a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a33c:	3204      	adds	r2, #4

0800a33e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a33e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a340:	d3fb      	bcc.n	800a33a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800a342:	f010 f9a5 	bl	801a690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a346:	f7fe f8df 	bl	8008508 <main>
  bx  lr    
 800a34a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a34c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a354:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 800a358:	08020af4 	.word	0x08020af4
  ldr r2, =_sbss
 800a35c:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 800a360:	2000a6b0 	.word	0x2000a6b0

0800a364 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a364:	e7fe      	b.n	800a364 <ADC_IRQHandler>
	...

0800a368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a36c:	4b0e      	ldr	r3, [pc, #56]	@ (800a3a8 <HAL_Init+0x40>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a0d      	ldr	r2, [pc, #52]	@ (800a3a8 <HAL_Init+0x40>)
 800a372:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a376:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a378:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a8 <HAL_Init+0x40>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a0a      	ldr	r2, [pc, #40]	@ (800a3a8 <HAL_Init+0x40>)
 800a37e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a382:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a384:	4b08      	ldr	r3, [pc, #32]	@ (800a3a8 <HAL_Init+0x40>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a07      	ldr	r2, [pc, #28]	@ (800a3a8 <HAL_Init+0x40>)
 800a38a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a38e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a390:	2003      	movs	r0, #3
 800a392:	f000 f920 	bl	800a5d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a396:	200f      	movs	r0, #15
 800a398:	f7ff f850 	bl	800943c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a39c:	f7ff f822 	bl	80093e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	40023c00 	.word	0x40023c00

0800a3ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a3b0:	4b06      	ldr	r3, [pc, #24]	@ (800a3cc <HAL_IncTick+0x20>)
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	4b06      	ldr	r3, [pc, #24]	@ (800a3d0 <HAL_IncTick+0x24>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	4a04      	ldr	r2, [pc, #16]	@ (800a3d0 <HAL_IncTick+0x24>)
 800a3be:	6013      	str	r3, [r2, #0]
}
 800a3c0:	bf00      	nop
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	2000005c 	.word	0x2000005c
 800a3d0:	20003f94 	.word	0x20003f94

0800a3d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	af00      	add	r7, sp, #0
  return uwTick;
 800a3d8:	4b03      	ldr	r3, [pc, #12]	@ (800a3e8 <HAL_GetTick+0x14>)
 800a3da:	681b      	ldr	r3, [r3, #0]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	20003f94 	.word	0x20003f94

0800a3ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a3f4:	f7ff ffee 	bl	800a3d4 <HAL_GetTick>
 800a3f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a404:	d005      	beq.n	800a412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a406:	4b0a      	ldr	r3, [pc, #40]	@ (800a430 <HAL_Delay+0x44>)
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	461a      	mov	r2, r3
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	4413      	add	r3, r2
 800a410:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a412:	bf00      	nop
 800a414:	f7ff ffde 	bl	800a3d4 <HAL_GetTick>
 800a418:	4602      	mov	r2, r0
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	429a      	cmp	r2, r3
 800a422:	d8f7      	bhi.n	800a414 <HAL_Delay+0x28>
  {
  }
}
 800a424:	bf00      	nop
 800a426:	bf00      	nop
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	2000005c 	.word	0x2000005c

0800a434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f003 0307 	and.w	r3, r3, #7
 800a442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a444:	4b0c      	ldr	r3, [pc, #48]	@ (800a478 <__NVIC_SetPriorityGrouping+0x44>)
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a450:	4013      	ands	r3, r2
 800a452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a45c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a466:	4a04      	ldr	r2, [pc, #16]	@ (800a478 <__NVIC_SetPriorityGrouping+0x44>)
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	60d3      	str	r3, [r2, #12]
}
 800a46c:	bf00      	nop
 800a46e:	3714      	adds	r7, #20
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	e000ed00 	.word	0xe000ed00

0800a47c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a47c:	b480      	push	{r7}
 800a47e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a480:	4b04      	ldr	r3, [pc, #16]	@ (800a494 <__NVIC_GetPriorityGrouping+0x18>)
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	0a1b      	lsrs	r3, r3, #8
 800a486:	f003 0307 	and.w	r3, r3, #7
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr
 800a494:	e000ed00 	.word	0xe000ed00

0800a498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	4603      	mov	r3, r0
 800a4a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a4a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	db0b      	blt.n	800a4c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a4aa:	79fb      	ldrb	r3, [r7, #7]
 800a4ac:	f003 021f 	and.w	r2, r3, #31
 800a4b0:	4907      	ldr	r1, [pc, #28]	@ (800a4d0 <__NVIC_EnableIRQ+0x38>)
 800a4b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4b6:	095b      	lsrs	r3, r3, #5
 800a4b8:	2001      	movs	r0, #1
 800a4ba:	fa00 f202 	lsl.w	r2, r0, r2
 800a4be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a4c2:	bf00      	nop
 800a4c4:	370c      	adds	r7, #12
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	e000e100 	.word	0xe000e100

0800a4d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	4603      	mov	r3, r0
 800a4dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a4de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	db12      	blt.n	800a50c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a4e6:	79fb      	ldrb	r3, [r7, #7]
 800a4e8:	f003 021f 	and.w	r2, r3, #31
 800a4ec:	490a      	ldr	r1, [pc, #40]	@ (800a518 <__NVIC_DisableIRQ+0x44>)
 800a4ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4f2:	095b      	lsrs	r3, r3, #5
 800a4f4:	2001      	movs	r0, #1
 800a4f6:	fa00 f202 	lsl.w	r2, r0, r2
 800a4fa:	3320      	adds	r3, #32
 800a4fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a500:	f3bf 8f4f 	dsb	sy
}
 800a504:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a506:	f3bf 8f6f 	isb	sy
}
 800a50a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr
 800a518:	e000e100 	.word	0xe000e100

0800a51c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	4603      	mov	r3, r0
 800a524:	6039      	str	r1, [r7, #0]
 800a526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	db0a      	blt.n	800a546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	b2da      	uxtb	r2, r3
 800a534:	490c      	ldr	r1, [pc, #48]	@ (800a568 <__NVIC_SetPriority+0x4c>)
 800a536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a53a:	0112      	lsls	r2, r2, #4
 800a53c:	b2d2      	uxtb	r2, r2
 800a53e:	440b      	add	r3, r1
 800a540:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a544:	e00a      	b.n	800a55c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	4908      	ldr	r1, [pc, #32]	@ (800a56c <__NVIC_SetPriority+0x50>)
 800a54c:	79fb      	ldrb	r3, [r7, #7]
 800a54e:	f003 030f 	and.w	r3, r3, #15
 800a552:	3b04      	subs	r3, #4
 800a554:	0112      	lsls	r2, r2, #4
 800a556:	b2d2      	uxtb	r2, r2
 800a558:	440b      	add	r3, r1
 800a55a:	761a      	strb	r2, [r3, #24]
}
 800a55c:	bf00      	nop
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr
 800a568:	e000e100 	.word	0xe000e100
 800a56c:	e000ed00 	.word	0xe000ed00

0800a570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a570:	b480      	push	{r7}
 800a572:	b089      	sub	sp, #36	@ 0x24
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f003 0307 	and.w	r3, r3, #7
 800a582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	f1c3 0307 	rsb	r3, r3, #7
 800a58a:	2b04      	cmp	r3, #4
 800a58c:	bf28      	it	cs
 800a58e:	2304      	movcs	r3, #4
 800a590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	3304      	adds	r3, #4
 800a596:	2b06      	cmp	r3, #6
 800a598:	d902      	bls.n	800a5a0 <NVIC_EncodePriority+0x30>
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	3b03      	subs	r3, #3
 800a59e:	e000      	b.n	800a5a2 <NVIC_EncodePriority+0x32>
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ae:	43da      	mvns	r2, r3
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	401a      	ands	r2, r3
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a5b8:	f04f 31ff 	mov.w	r1, #4294967295
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	fa01 f303 	lsl.w	r3, r1, r3
 800a5c2:	43d9      	mvns	r1, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5c8:	4313      	orrs	r3, r2
         );
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3724      	adds	r7, #36	@ 0x24
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr

0800a5d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b082      	sub	sp, #8
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f7ff ff28 	bl	800a434 <__NVIC_SetPriorityGrouping>
}
 800a5e4:	bf00      	nop
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b086      	sub	sp, #24
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	607a      	str	r2, [r7, #4]
 800a5f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a5fe:	f7ff ff3d 	bl	800a47c <__NVIC_GetPriorityGrouping>
 800a602:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	68b9      	ldr	r1, [r7, #8]
 800a608:	6978      	ldr	r0, [r7, #20]
 800a60a:	f7ff ffb1 	bl	800a570 <NVIC_EncodePriority>
 800a60e:	4602      	mov	r2, r0
 800a610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a614:	4611      	mov	r1, r2
 800a616:	4618      	mov	r0, r3
 800a618:	f7ff ff80 	bl	800a51c <__NVIC_SetPriority>
}
 800a61c:	bf00      	nop
 800a61e:	3718      	adds	r7, #24
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	4603      	mov	r3, r0
 800a62c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a62e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a632:	4618      	mov	r0, r3
 800a634:	f7ff ff30 	bl	800a498 <__NVIC_EnableIRQ>
}
 800a638:	bf00      	nop
 800a63a:	3708      	adds	r7, #8
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	4603      	mov	r3, r0
 800a648:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a64a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a64e:	4618      	mov	r0, r3
 800a650:	f7ff ff40 	bl	800a4d4 <__NVIC_DisableIRQ>
}
 800a654:	bf00      	nop
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b086      	sub	sp, #24
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a664:	2300      	movs	r3, #0
 800a666:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a668:	f7ff feb4 	bl	800a3d4 <HAL_GetTick>
 800a66c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d101      	bne.n	800a678 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	e099      	b.n	800a7ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2202      	movs	r2, #2
 800a67c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f022 0201 	bic.w	r2, r2, #1
 800a696:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a698:	e00f      	b.n	800a6ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a69a:	f7ff fe9b 	bl	800a3d4 <HAL_GetTick>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	1ad3      	subs	r3, r2, r3
 800a6a4:	2b05      	cmp	r3, #5
 800a6a6:	d908      	bls.n	800a6ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2220      	movs	r2, #32
 800a6ac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2203      	movs	r2, #3
 800a6b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800a6b6:	2303      	movs	r3, #3
 800a6b8:	e078      	b.n	800a7ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f003 0301 	and.w	r3, r3, #1
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d1e8      	bne.n	800a69a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a6d0:	697a      	ldr	r2, [r7, #20]
 800a6d2:	4b38      	ldr	r3, [pc, #224]	@ (800a7b4 <HAL_DMA_Init+0x158>)
 800a6d4:	4013      	ands	r3, r2
 800a6d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685a      	ldr	r2, [r3, #4]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a6e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	691b      	ldr	r3, [r3, #16]
 800a6ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6a1b      	ldr	r3, [r3, #32]
 800a704:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a706:	697a      	ldr	r2, [r7, #20]
 800a708:	4313      	orrs	r3, r2
 800a70a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a710:	2b04      	cmp	r3, #4
 800a712:	d107      	bne.n	800a724 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a71c:	4313      	orrs	r3, r2
 800a71e:	697a      	ldr	r2, [r7, #20]
 800a720:	4313      	orrs	r3, r2
 800a722:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	697a      	ldr	r2, [r7, #20]
 800a72a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	695b      	ldr	r3, [r3, #20]
 800a732:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	f023 0307 	bic.w	r3, r3, #7
 800a73a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a740:	697a      	ldr	r2, [r7, #20]
 800a742:	4313      	orrs	r3, r2
 800a744:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a74a:	2b04      	cmp	r3, #4
 800a74c:	d117      	bne.n	800a77e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a752:	697a      	ldr	r2, [r7, #20]
 800a754:	4313      	orrs	r3, r2
 800a756:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d00e      	beq.n	800a77e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 fb5f 	bl	800ae24 <DMA_CheckFifoParam>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d008      	beq.n	800a77e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2240      	movs	r2, #64	@ 0x40
 800a770:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2201      	movs	r2, #1
 800a776:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800a77a:	2301      	movs	r3, #1
 800a77c:	e016      	b.n	800a7ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	697a      	ldr	r2, [r7, #20]
 800a784:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 fb16 	bl	800adb8 <DMA_CalcBaseAndBitshift>
 800a78c:	4603      	mov	r3, r0
 800a78e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a794:	223f      	movs	r2, #63	@ 0x3f
 800a796:	409a      	lsls	r2, r3
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3718      	adds	r7, #24
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	f010803f 	.word	0xf010803f

0800a7b8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d101      	bne.n	800a7ca <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e050      	b.n	800a86c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d101      	bne.n	800a7da <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800a7d6:	2302      	movs	r3, #2
 800a7d8:	e048      	b.n	800a86c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f022 0201 	bic.w	r2, r2, #1
 800a7e8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2200      	movs	r2, #0
 800a800:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2200      	movs	r2, #0
 800a808:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2200      	movs	r2, #0
 800a810:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2221      	movs	r2, #33	@ 0x21
 800a818:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 facc 	bl	800adb8 <DMA_CalcBaseAndBitshift>
 800a820:	4603      	mov	r3, r0
 800a822:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a84c:	223f      	movs	r2, #63	@ 0x3f
 800a84e:	409a      	lsls	r2, r3
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a86a:	2300      	movs	r3, #0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b086      	sub	sp, #24
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
 800a880:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a882:	2300      	movs	r3, #0
 800a884:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a88a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a892:	2b01      	cmp	r3, #1
 800a894:	d101      	bne.n	800a89a <HAL_DMA_Start_IT+0x26>
 800a896:	2302      	movs	r3, #2
 800a898:	e040      	b.n	800a91c <HAL_DMA_Start_IT+0xa8>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d12f      	bne.n	800a90e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2202      	movs	r2, #2
 800a8b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	68b9      	ldr	r1, [r7, #8]
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f000 fa4a 	bl	800ad5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8cc:	223f      	movs	r2, #63	@ 0x3f
 800a8ce:	409a      	lsls	r2, r3
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f042 0216 	orr.w	r2, r2, #22
 800a8e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d007      	beq.n	800a8fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f042 0208 	orr.w	r2, r2, #8
 800a8fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f042 0201 	orr.w	r2, r2, #1
 800a90a:	601a      	str	r2, [r3, #0]
 800a90c:	e005      	b.n	800a91a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a916:	2302      	movs	r3, #2
 800a918:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a91a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3718      	adds	r7, #24
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a930:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a932:	f7ff fd4f 	bl	800a3d4 <HAL_GetTick>
 800a936:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	2b02      	cmp	r3, #2
 800a942:	d008      	beq.n	800a956 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2280      	movs	r2, #128	@ 0x80
 800a948:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	e052      	b.n	800a9fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f022 0216 	bic.w	r2, r2, #22
 800a964:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	695a      	ldr	r2, [r3, #20]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a974:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d103      	bne.n	800a986 <HAL_DMA_Abort+0x62>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a982:	2b00      	cmp	r3, #0
 800a984:	d007      	beq.n	800a996 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f022 0208 	bic.w	r2, r2, #8
 800a994:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f022 0201 	bic.w	r2, r2, #1
 800a9a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a9a6:	e013      	b.n	800a9d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a9a8:	f7ff fd14 	bl	800a3d4 <HAL_GetTick>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	1ad3      	subs	r3, r2, r3
 800a9b2:	2b05      	cmp	r3, #5
 800a9b4:	d90c      	bls.n	800a9d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2220      	movs	r2, #32
 800a9ba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2203      	movs	r2, #3
 800a9c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	e015      	b.n	800a9fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f003 0301 	and.w	r3, r3, #1
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1e4      	bne.n	800a9a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9e2:	223f      	movs	r2, #63	@ 0x3f
 800a9e4:	409a      	lsls	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	d004      	beq.n	800aa22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2280      	movs	r2, #128	@ 0x80
 800aa1c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e00c      	b.n	800aa3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2205      	movs	r2, #5
 800aa26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f022 0201 	bic.w	r2, r2, #1
 800aa38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800aa50:	2300      	movs	r3, #0
 800aa52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800aa54:	4b8e      	ldr	r3, [pc, #568]	@ (800ac90 <HAL_DMA_IRQHandler+0x248>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a8e      	ldr	r2, [pc, #568]	@ (800ac94 <HAL_DMA_IRQHandler+0x24c>)
 800aa5a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa5e:	0a9b      	lsrs	r3, r3, #10
 800aa60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa72:	2208      	movs	r2, #8
 800aa74:	409a      	lsls	r2, r3
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	4013      	ands	r3, r2
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d01a      	beq.n	800aab4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 0304 	and.w	r3, r3, #4
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d013      	beq.n	800aab4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f022 0204 	bic.w	r2, r2, #4
 800aa9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aaa0:	2208      	movs	r2, #8
 800aaa2:	409a      	lsls	r2, r3
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaac:	f043 0201 	orr.w	r2, r3, #1
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aab8:	2201      	movs	r2, #1
 800aaba:	409a      	lsls	r2, r3
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	4013      	ands	r3, r2
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d012      	beq.n	800aaea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	695b      	ldr	r3, [r3, #20]
 800aaca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00b      	beq.n	800aaea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aad6:	2201      	movs	r2, #1
 800aad8:	409a      	lsls	r2, r3
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aae2:	f043 0202 	orr.w	r2, r3, #2
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aaee:	2204      	movs	r2, #4
 800aaf0:	409a      	lsls	r2, r3
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	4013      	ands	r3, r2
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d012      	beq.n	800ab20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 0302 	and.w	r3, r3, #2
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d00b      	beq.n	800ab20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab0c:	2204      	movs	r2, #4
 800ab0e:	409a      	lsls	r2, r3
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab18:	f043 0204 	orr.w	r2, r3, #4
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab24:	2210      	movs	r2, #16
 800ab26:	409a      	lsls	r2, r3
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d043      	beq.n	800abb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f003 0308 	and.w	r3, r3, #8
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d03c      	beq.n	800abb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab42:	2210      	movs	r2, #16
 800ab44:	409a      	lsls	r2, r3
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d018      	beq.n	800ab8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d108      	bne.n	800ab78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d024      	beq.n	800abb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	4798      	blx	r3
 800ab76:	e01f      	b.n	800abb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d01b      	beq.n	800abb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	4798      	blx	r3
 800ab88:	e016      	b.n	800abb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d107      	bne.n	800aba8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f022 0208 	bic.w	r2, r2, #8
 800aba6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abac:	2b00      	cmp	r3, #0
 800abae:	d003      	beq.n	800abb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abbc:	2220      	movs	r2, #32
 800abbe:	409a      	lsls	r2, r3
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	4013      	ands	r3, r2
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f000 808f 	beq.w	800ace8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f003 0310 	and.w	r3, r3, #16
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	f000 8087 	beq.w	800ace8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abde:	2220      	movs	r2, #32
 800abe0:	409a      	lsls	r2, r3
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b05      	cmp	r3, #5
 800abf0:	d136      	bne.n	800ac60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f022 0216 	bic.w	r2, r2, #22
 800ac00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	695a      	ldr	r2, [r3, #20]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ac10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d103      	bne.n	800ac22 <HAL_DMA_IRQHandler+0x1da>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d007      	beq.n	800ac32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f022 0208 	bic.w	r2, r2, #8
 800ac30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac36:	223f      	movs	r2, #63	@ 0x3f
 800ac38:	409a      	lsls	r2, r3
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2201      	movs	r2, #1
 800ac42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d07e      	beq.n	800ad54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	4798      	blx	r3
        }
        return;
 800ac5e:	e079      	b.n	800ad54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d01d      	beq.n	800acaa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10d      	bne.n	800ac98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d031      	beq.n	800ace8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	4798      	blx	r3
 800ac8c:	e02c      	b.n	800ace8 <HAL_DMA_IRQHandler+0x2a0>
 800ac8e:	bf00      	nop
 800ac90:	20000054 	.word	0x20000054
 800ac94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d023      	beq.n	800ace8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	4798      	blx	r3
 800aca8:	e01e      	b.n	800ace8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d10f      	bne.n	800acd8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f022 0210 	bic.w	r2, r2, #16
 800acc6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d003      	beq.n	800ace8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acec:	2b00      	cmp	r3, #0
 800acee:	d032      	beq.n	800ad56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acf4:	f003 0301 	and.w	r3, r3, #1
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d022      	beq.n	800ad42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2205      	movs	r2, #5
 800ad00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f022 0201 	bic.w	r2, r2, #1
 800ad12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	3301      	adds	r3, #1
 800ad18:	60bb      	str	r3, [r7, #8]
 800ad1a:	697a      	ldr	r2, [r7, #20]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d307      	bcc.n	800ad30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f003 0301 	and.w	r3, r3, #1
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d1f2      	bne.n	800ad14 <HAL_DMA_IRQHandler+0x2cc>
 800ad2e:	e000      	b.n	800ad32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800ad30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2201      	movs	r2, #1
 800ad36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d005      	beq.n	800ad56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	4798      	blx	r3
 800ad52:	e000      	b.n	800ad56 <HAL_DMA_IRQHandler+0x30e>
        return;
 800ad54:	bf00      	nop
    }
  }
}
 800ad56:	3718      	adds	r7, #24
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
 800ad68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800ad78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	683a      	ldr	r2, [r7, #0]
 800ad80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	2b40      	cmp	r3, #64	@ 0x40
 800ad88:	d108      	bne.n	800ad9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ad9a:	e007      	b.n	800adac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	68ba      	ldr	r2, [r7, #8]
 800ada2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	60da      	str	r2, [r3, #12]
}
 800adac:	bf00      	nop
 800adae:	3714      	adds	r7, #20
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800adb8:	b480      	push	{r7}
 800adba:	b085      	sub	sp, #20
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	3b10      	subs	r3, #16
 800adc8:	4a14      	ldr	r2, [pc, #80]	@ (800ae1c <DMA_CalcBaseAndBitshift+0x64>)
 800adca:	fba2 2303 	umull	r2, r3, r2, r3
 800adce:	091b      	lsrs	r3, r3, #4
 800add0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800add2:	4a13      	ldr	r2, [pc, #76]	@ (800ae20 <DMA_CalcBaseAndBitshift+0x68>)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	4413      	add	r3, r2
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	461a      	mov	r2, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2b03      	cmp	r3, #3
 800ade4:	d909      	bls.n	800adfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800adee:	f023 0303 	bic.w	r3, r3, #3
 800adf2:	1d1a      	adds	r2, r3, #4
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	659a      	str	r2, [r3, #88]	@ 0x58
 800adf8:	e007      	b.n	800ae0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800ae02:	f023 0303 	bic.w	r3, r3, #3
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3714      	adds	r7, #20
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	aaaaaaab 	.word	0xaaaaaaab
 800ae20:	08020278 	.word	0x08020278

0800ae24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	699b      	ldr	r3, [r3, #24]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d11f      	bne.n	800ae7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	2b03      	cmp	r3, #3
 800ae42:	d856      	bhi.n	800aef2 <DMA_CheckFifoParam+0xce>
 800ae44:	a201      	add	r2, pc, #4	@ (adr r2, 800ae4c <DMA_CheckFifoParam+0x28>)
 800ae46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae4a:	bf00      	nop
 800ae4c:	0800ae5d 	.word	0x0800ae5d
 800ae50:	0800ae6f 	.word	0x0800ae6f
 800ae54:	0800ae5d 	.word	0x0800ae5d
 800ae58:	0800aef3 	.word	0x0800aef3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d046      	beq.n	800aef6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae6c:	e043      	b.n	800aef6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800ae76:	d140      	bne.n	800aefa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae7c:	e03d      	b.n	800aefa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	699b      	ldr	r3, [r3, #24]
 800ae82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae86:	d121      	bne.n	800aecc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	2b03      	cmp	r3, #3
 800ae8c:	d837      	bhi.n	800aefe <DMA_CheckFifoParam+0xda>
 800ae8e:	a201      	add	r2, pc, #4	@ (adr r2, 800ae94 <DMA_CheckFifoParam+0x70>)
 800ae90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae94:	0800aea5 	.word	0x0800aea5
 800ae98:	0800aeab 	.word	0x0800aeab
 800ae9c:	0800aea5 	.word	0x0800aea5
 800aea0:	0800aebd 	.word	0x0800aebd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aea4:	2301      	movs	r3, #1
 800aea6:	73fb      	strb	r3, [r7, #15]
      break;
 800aea8:	e030      	b.n	800af0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d025      	beq.n	800af02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aeba:	e022      	b.n	800af02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800aec4:	d11f      	bne.n	800af06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aeca:	e01c      	b.n	800af06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d903      	bls.n	800aeda <DMA_CheckFifoParam+0xb6>
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	2b03      	cmp	r3, #3
 800aed6:	d003      	beq.n	800aee0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aed8:	e018      	b.n	800af0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	73fb      	strb	r3, [r7, #15]
      break;
 800aede:	e015      	b.n	800af0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d00e      	beq.n	800af0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800aeec:	2301      	movs	r3, #1
 800aeee:	73fb      	strb	r3, [r7, #15]
      break;
 800aef0:	e00b      	b.n	800af0a <DMA_CheckFifoParam+0xe6>
      break;
 800aef2:	bf00      	nop
 800aef4:	e00a      	b.n	800af0c <DMA_CheckFifoParam+0xe8>
      break;
 800aef6:	bf00      	nop
 800aef8:	e008      	b.n	800af0c <DMA_CheckFifoParam+0xe8>
      break;
 800aefa:	bf00      	nop
 800aefc:	e006      	b.n	800af0c <DMA_CheckFifoParam+0xe8>
      break;
 800aefe:	bf00      	nop
 800af00:	e004      	b.n	800af0c <DMA_CheckFifoParam+0xe8>
      break;
 800af02:	bf00      	nop
 800af04:	e002      	b.n	800af0c <DMA_CheckFifoParam+0xe8>
      break;   
 800af06:	bf00      	nop
 800af08:	e000      	b.n	800af0c <DMA_CheckFifoParam+0xe8>
      break;
 800af0a:	bf00      	nop
    }
  } 
  
  return status; 
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3714      	adds	r7, #20
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop

0800af1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b089      	sub	sp, #36	@ 0x24
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800af26:	2300      	movs	r3, #0
 800af28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800af2a:	2300      	movs	r3, #0
 800af2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800af2e:	2300      	movs	r3, #0
 800af30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800af32:	2300      	movs	r3, #0
 800af34:	61fb      	str	r3, [r7, #28]
 800af36:	e16b      	b.n	800b210 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800af38:	2201      	movs	r2, #1
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	fa02 f303 	lsl.w	r3, r2, r3
 800af40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	697a      	ldr	r2, [r7, #20]
 800af48:	4013      	ands	r3, r2
 800af4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800af4c:	693a      	ldr	r2, [r7, #16]
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	429a      	cmp	r2, r3
 800af52:	f040 815a 	bne.w	800b20a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	f003 0303 	and.w	r3, r3, #3
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d005      	beq.n	800af6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800af6a:	2b02      	cmp	r3, #2
 800af6c:	d130      	bne.n	800afd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	005b      	lsls	r3, r3, #1
 800af78:	2203      	movs	r2, #3
 800af7a:	fa02 f303 	lsl.w	r3, r2, r3
 800af7e:	43db      	mvns	r3, r3
 800af80:	69ba      	ldr	r2, [r7, #24]
 800af82:	4013      	ands	r3, r2
 800af84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	68da      	ldr	r2, [r3, #12]
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	005b      	lsls	r3, r3, #1
 800af8e:	fa02 f303 	lsl.w	r3, r2, r3
 800af92:	69ba      	ldr	r2, [r7, #24]
 800af94:	4313      	orrs	r3, r2
 800af96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	69ba      	ldr	r2, [r7, #24]
 800af9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800afa4:	2201      	movs	r2, #1
 800afa6:	69fb      	ldr	r3, [r7, #28]
 800afa8:	fa02 f303 	lsl.w	r3, r2, r3
 800afac:	43db      	mvns	r3, r3
 800afae:	69ba      	ldr	r2, [r7, #24]
 800afb0:	4013      	ands	r3, r2
 800afb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	091b      	lsrs	r3, r3, #4
 800afba:	f003 0201 	and.w	r2, r3, #1
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	fa02 f303 	lsl.w	r3, r2, r3
 800afc4:	69ba      	ldr	r2, [r7, #24]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	69ba      	ldr	r2, [r7, #24]
 800afce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	f003 0303 	and.w	r3, r3, #3
 800afd8:	2b03      	cmp	r3, #3
 800afda:	d017      	beq.n	800b00c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	005b      	lsls	r3, r3, #1
 800afe6:	2203      	movs	r2, #3
 800afe8:	fa02 f303 	lsl.w	r3, r2, r3
 800afec:	43db      	mvns	r3, r3
 800afee:	69ba      	ldr	r2, [r7, #24]
 800aff0:	4013      	ands	r3, r2
 800aff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	689a      	ldr	r2, [r3, #8]
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	005b      	lsls	r3, r3, #1
 800affc:	fa02 f303 	lsl.w	r3, r2, r3
 800b000:	69ba      	ldr	r2, [r7, #24]
 800b002:	4313      	orrs	r3, r2
 800b004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	69ba      	ldr	r2, [r7, #24]
 800b00a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	f003 0303 	and.w	r3, r3, #3
 800b014:	2b02      	cmp	r3, #2
 800b016:	d123      	bne.n	800b060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	08da      	lsrs	r2, r3, #3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	3208      	adds	r2, #8
 800b020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b026:	69fb      	ldr	r3, [r7, #28]
 800b028:	f003 0307 	and.w	r3, r3, #7
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	220f      	movs	r2, #15
 800b030:	fa02 f303 	lsl.w	r3, r2, r3
 800b034:	43db      	mvns	r3, r3
 800b036:	69ba      	ldr	r2, [r7, #24]
 800b038:	4013      	ands	r3, r2
 800b03a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	691a      	ldr	r2, [r3, #16]
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	f003 0307 	and.w	r3, r3, #7
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	fa02 f303 	lsl.w	r3, r2, r3
 800b04c:	69ba      	ldr	r2, [r7, #24]
 800b04e:	4313      	orrs	r3, r2
 800b050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	08da      	lsrs	r2, r3, #3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	3208      	adds	r2, #8
 800b05a:	69b9      	ldr	r1, [r7, #24]
 800b05c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	005b      	lsls	r3, r3, #1
 800b06a:	2203      	movs	r2, #3
 800b06c:	fa02 f303 	lsl.w	r3, r2, r3
 800b070:	43db      	mvns	r3, r3
 800b072:	69ba      	ldr	r2, [r7, #24]
 800b074:	4013      	ands	r3, r2
 800b076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	f003 0203 	and.w	r2, r3, #3
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	005b      	lsls	r3, r3, #1
 800b084:	fa02 f303 	lsl.w	r3, r2, r3
 800b088:	69ba      	ldr	r2, [r7, #24]
 800b08a:	4313      	orrs	r3, r2
 800b08c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	69ba      	ldr	r2, [r7, #24]
 800b092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f000 80b4 	beq.w	800b20a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	60fb      	str	r3, [r7, #12]
 800b0a6:	4b60      	ldr	r3, [pc, #384]	@ (800b228 <HAL_GPIO_Init+0x30c>)
 800b0a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0aa:	4a5f      	ldr	r2, [pc, #380]	@ (800b228 <HAL_GPIO_Init+0x30c>)
 800b0ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b0b0:	6453      	str	r3, [r2, #68]	@ 0x44
 800b0b2:	4b5d      	ldr	r3, [pc, #372]	@ (800b228 <HAL_GPIO_Init+0x30c>)
 800b0b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b0ba:	60fb      	str	r3, [r7, #12]
 800b0bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b0be:	4a5b      	ldr	r2, [pc, #364]	@ (800b22c <HAL_GPIO_Init+0x310>)
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	089b      	lsrs	r3, r3, #2
 800b0c4:	3302      	adds	r3, #2
 800b0c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	f003 0303 	and.w	r3, r3, #3
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	220f      	movs	r2, #15
 800b0d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0da:	43db      	mvns	r3, r3
 800b0dc:	69ba      	ldr	r2, [r7, #24]
 800b0de:	4013      	ands	r3, r2
 800b0e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a52      	ldr	r2, [pc, #328]	@ (800b230 <HAL_GPIO_Init+0x314>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d02b      	beq.n	800b142 <HAL_GPIO_Init+0x226>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a51      	ldr	r2, [pc, #324]	@ (800b234 <HAL_GPIO_Init+0x318>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d025      	beq.n	800b13e <HAL_GPIO_Init+0x222>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a50      	ldr	r2, [pc, #320]	@ (800b238 <HAL_GPIO_Init+0x31c>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d01f      	beq.n	800b13a <HAL_GPIO_Init+0x21e>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a4f      	ldr	r2, [pc, #316]	@ (800b23c <HAL_GPIO_Init+0x320>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d019      	beq.n	800b136 <HAL_GPIO_Init+0x21a>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a4e      	ldr	r2, [pc, #312]	@ (800b240 <HAL_GPIO_Init+0x324>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d013      	beq.n	800b132 <HAL_GPIO_Init+0x216>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4a4d      	ldr	r2, [pc, #308]	@ (800b244 <HAL_GPIO_Init+0x328>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d00d      	beq.n	800b12e <HAL_GPIO_Init+0x212>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	4a4c      	ldr	r2, [pc, #304]	@ (800b248 <HAL_GPIO_Init+0x32c>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d007      	beq.n	800b12a <HAL_GPIO_Init+0x20e>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	4a4b      	ldr	r2, [pc, #300]	@ (800b24c <HAL_GPIO_Init+0x330>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d101      	bne.n	800b126 <HAL_GPIO_Init+0x20a>
 800b122:	2307      	movs	r3, #7
 800b124:	e00e      	b.n	800b144 <HAL_GPIO_Init+0x228>
 800b126:	2308      	movs	r3, #8
 800b128:	e00c      	b.n	800b144 <HAL_GPIO_Init+0x228>
 800b12a:	2306      	movs	r3, #6
 800b12c:	e00a      	b.n	800b144 <HAL_GPIO_Init+0x228>
 800b12e:	2305      	movs	r3, #5
 800b130:	e008      	b.n	800b144 <HAL_GPIO_Init+0x228>
 800b132:	2304      	movs	r3, #4
 800b134:	e006      	b.n	800b144 <HAL_GPIO_Init+0x228>
 800b136:	2303      	movs	r3, #3
 800b138:	e004      	b.n	800b144 <HAL_GPIO_Init+0x228>
 800b13a:	2302      	movs	r3, #2
 800b13c:	e002      	b.n	800b144 <HAL_GPIO_Init+0x228>
 800b13e:	2301      	movs	r3, #1
 800b140:	e000      	b.n	800b144 <HAL_GPIO_Init+0x228>
 800b142:	2300      	movs	r3, #0
 800b144:	69fa      	ldr	r2, [r7, #28]
 800b146:	f002 0203 	and.w	r2, r2, #3
 800b14a:	0092      	lsls	r2, r2, #2
 800b14c:	4093      	lsls	r3, r2
 800b14e:	69ba      	ldr	r2, [r7, #24]
 800b150:	4313      	orrs	r3, r2
 800b152:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b154:	4935      	ldr	r1, [pc, #212]	@ (800b22c <HAL_GPIO_Init+0x310>)
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	089b      	lsrs	r3, r3, #2
 800b15a:	3302      	adds	r3, #2
 800b15c:	69ba      	ldr	r2, [r7, #24]
 800b15e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b162:	4b3b      	ldr	r3, [pc, #236]	@ (800b250 <HAL_GPIO_Init+0x334>)
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	43db      	mvns	r3, r3
 800b16c:	69ba      	ldr	r2, [r7, #24]
 800b16e:	4013      	ands	r3, r2
 800b170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d003      	beq.n	800b186 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b17e:	69ba      	ldr	r2, [r7, #24]
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	4313      	orrs	r3, r2
 800b184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b186:	4a32      	ldr	r2, [pc, #200]	@ (800b250 <HAL_GPIO_Init+0x334>)
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b18c:	4b30      	ldr	r3, [pc, #192]	@ (800b250 <HAL_GPIO_Init+0x334>)
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	43db      	mvns	r3, r3
 800b196:	69ba      	ldr	r2, [r7, #24]
 800b198:	4013      	ands	r3, r2
 800b19a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d003      	beq.n	800b1b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b1a8:	69ba      	ldr	r2, [r7, #24]
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b1b0:	4a27      	ldr	r2, [pc, #156]	@ (800b250 <HAL_GPIO_Init+0x334>)
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b1b6:	4b26      	ldr	r3, [pc, #152]	@ (800b250 <HAL_GPIO_Init+0x334>)
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	43db      	mvns	r3, r3
 800b1c0:	69ba      	ldr	r2, [r7, #24]
 800b1c2:	4013      	ands	r3, r2
 800b1c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d003      	beq.n	800b1da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b1d2:	69ba      	ldr	r2, [r7, #24]
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b1da:	4a1d      	ldr	r2, [pc, #116]	@ (800b250 <HAL_GPIO_Init+0x334>)
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b1e0:	4b1b      	ldr	r3, [pc, #108]	@ (800b250 <HAL_GPIO_Init+0x334>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	43db      	mvns	r3, r3
 800b1ea:	69ba      	ldr	r2, [r7, #24]
 800b1ec:	4013      	ands	r3, r2
 800b1ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d003      	beq.n	800b204 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b1fc:	69ba      	ldr	r2, [r7, #24]
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	4313      	orrs	r3, r2
 800b202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b204:	4a12      	ldr	r2, [pc, #72]	@ (800b250 <HAL_GPIO_Init+0x334>)
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	3301      	adds	r3, #1
 800b20e:	61fb      	str	r3, [r7, #28]
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	2b0f      	cmp	r3, #15
 800b214:	f67f ae90 	bls.w	800af38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b218:	bf00      	nop
 800b21a:	bf00      	nop
 800b21c:	3724      	adds	r7, #36	@ 0x24
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr
 800b226:	bf00      	nop
 800b228:	40023800 	.word	0x40023800
 800b22c:	40013800 	.word	0x40013800
 800b230:	40020000 	.word	0x40020000
 800b234:	40020400 	.word	0x40020400
 800b238:	40020800 	.word	0x40020800
 800b23c:	40020c00 	.word	0x40020c00
 800b240:	40021000 	.word	0x40021000
 800b244:	40021400 	.word	0x40021400
 800b248:	40021800 	.word	0x40021800
 800b24c:	40021c00 	.word	0x40021c00
 800b250:	40013c00 	.word	0x40013c00

0800b254 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b254:	b480      	push	{r7}
 800b256:	b087      	sub	sp, #28
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b25e:	2300      	movs	r3, #0
 800b260:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800b262:	2300      	movs	r3, #0
 800b264:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800b266:	2300      	movs	r3, #0
 800b268:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b26a:	2300      	movs	r3, #0
 800b26c:	617b      	str	r3, [r7, #20]
 800b26e:	e0cd      	b.n	800b40c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b270:	2201      	movs	r2, #1
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	fa02 f303 	lsl.w	r3, r2, r3
 800b278:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	4013      	ands	r3, r2
 800b280:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800b282:	68fa      	ldr	r2, [r7, #12]
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	429a      	cmp	r2, r3
 800b288:	f040 80bd 	bne.w	800b406 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b28c:	4a65      	ldr	r2, [pc, #404]	@ (800b424 <HAL_GPIO_DeInit+0x1d0>)
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	089b      	lsrs	r3, r3, #2
 800b292:	3302      	adds	r3, #2
 800b294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b298:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	f003 0303 	and.w	r3, r3, #3
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	220f      	movs	r2, #15
 800b2a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b2a8:	68ba      	ldr	r2, [r7, #8]
 800b2aa:	4013      	ands	r3, r2
 800b2ac:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a5d      	ldr	r2, [pc, #372]	@ (800b428 <HAL_GPIO_DeInit+0x1d4>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d02b      	beq.n	800b30e <HAL_GPIO_DeInit+0xba>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a5c      	ldr	r2, [pc, #368]	@ (800b42c <HAL_GPIO_DeInit+0x1d8>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d025      	beq.n	800b30a <HAL_GPIO_DeInit+0xb6>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a5b      	ldr	r2, [pc, #364]	@ (800b430 <HAL_GPIO_DeInit+0x1dc>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d01f      	beq.n	800b306 <HAL_GPIO_DeInit+0xb2>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a5a      	ldr	r2, [pc, #360]	@ (800b434 <HAL_GPIO_DeInit+0x1e0>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d019      	beq.n	800b302 <HAL_GPIO_DeInit+0xae>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a59      	ldr	r2, [pc, #356]	@ (800b438 <HAL_GPIO_DeInit+0x1e4>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d013      	beq.n	800b2fe <HAL_GPIO_DeInit+0xaa>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a58      	ldr	r2, [pc, #352]	@ (800b43c <HAL_GPIO_DeInit+0x1e8>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d00d      	beq.n	800b2fa <HAL_GPIO_DeInit+0xa6>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a57      	ldr	r2, [pc, #348]	@ (800b440 <HAL_GPIO_DeInit+0x1ec>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d007      	beq.n	800b2f6 <HAL_GPIO_DeInit+0xa2>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a56      	ldr	r2, [pc, #344]	@ (800b444 <HAL_GPIO_DeInit+0x1f0>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d101      	bne.n	800b2f2 <HAL_GPIO_DeInit+0x9e>
 800b2ee:	2307      	movs	r3, #7
 800b2f0:	e00e      	b.n	800b310 <HAL_GPIO_DeInit+0xbc>
 800b2f2:	2308      	movs	r3, #8
 800b2f4:	e00c      	b.n	800b310 <HAL_GPIO_DeInit+0xbc>
 800b2f6:	2306      	movs	r3, #6
 800b2f8:	e00a      	b.n	800b310 <HAL_GPIO_DeInit+0xbc>
 800b2fa:	2305      	movs	r3, #5
 800b2fc:	e008      	b.n	800b310 <HAL_GPIO_DeInit+0xbc>
 800b2fe:	2304      	movs	r3, #4
 800b300:	e006      	b.n	800b310 <HAL_GPIO_DeInit+0xbc>
 800b302:	2303      	movs	r3, #3
 800b304:	e004      	b.n	800b310 <HAL_GPIO_DeInit+0xbc>
 800b306:	2302      	movs	r3, #2
 800b308:	e002      	b.n	800b310 <HAL_GPIO_DeInit+0xbc>
 800b30a:	2301      	movs	r3, #1
 800b30c:	e000      	b.n	800b310 <HAL_GPIO_DeInit+0xbc>
 800b30e:	2300      	movs	r3, #0
 800b310:	697a      	ldr	r2, [r7, #20]
 800b312:	f002 0203 	and.w	r2, r2, #3
 800b316:	0092      	lsls	r2, r2, #2
 800b318:	4093      	lsls	r3, r2
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d132      	bne.n	800b386 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b320:	4b49      	ldr	r3, [pc, #292]	@ (800b448 <HAL_GPIO_DeInit+0x1f4>)
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	43db      	mvns	r3, r3
 800b328:	4947      	ldr	r1, [pc, #284]	@ (800b448 <HAL_GPIO_DeInit+0x1f4>)
 800b32a:	4013      	ands	r3, r2
 800b32c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b32e:	4b46      	ldr	r3, [pc, #280]	@ (800b448 <HAL_GPIO_DeInit+0x1f4>)
 800b330:	685a      	ldr	r2, [r3, #4]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	43db      	mvns	r3, r3
 800b336:	4944      	ldr	r1, [pc, #272]	@ (800b448 <HAL_GPIO_DeInit+0x1f4>)
 800b338:	4013      	ands	r3, r2
 800b33a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b33c:	4b42      	ldr	r3, [pc, #264]	@ (800b448 <HAL_GPIO_DeInit+0x1f4>)
 800b33e:	68da      	ldr	r2, [r3, #12]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	43db      	mvns	r3, r3
 800b344:	4940      	ldr	r1, [pc, #256]	@ (800b448 <HAL_GPIO_DeInit+0x1f4>)
 800b346:	4013      	ands	r3, r2
 800b348:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b34a:	4b3f      	ldr	r3, [pc, #252]	@ (800b448 <HAL_GPIO_DeInit+0x1f4>)
 800b34c:	689a      	ldr	r2, [r3, #8]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	43db      	mvns	r3, r3
 800b352:	493d      	ldr	r1, [pc, #244]	@ (800b448 <HAL_GPIO_DeInit+0x1f4>)
 800b354:	4013      	ands	r3, r2
 800b356:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	f003 0303 	and.w	r3, r3, #3
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	220f      	movs	r2, #15
 800b362:	fa02 f303 	lsl.w	r3, r2, r3
 800b366:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b368:	4a2e      	ldr	r2, [pc, #184]	@ (800b424 <HAL_GPIO_DeInit+0x1d0>)
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	089b      	lsrs	r3, r3, #2
 800b36e:	3302      	adds	r3, #2
 800b370:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	43da      	mvns	r2, r3
 800b378:	482a      	ldr	r0, [pc, #168]	@ (800b424 <HAL_GPIO_DeInit+0x1d0>)
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	089b      	lsrs	r3, r3, #2
 800b37e:	400a      	ands	r2, r1
 800b380:	3302      	adds	r3, #2
 800b382:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	005b      	lsls	r3, r3, #1
 800b38e:	2103      	movs	r1, #3
 800b390:	fa01 f303 	lsl.w	r3, r1, r3
 800b394:	43db      	mvns	r3, r3
 800b396:	401a      	ands	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	08da      	lsrs	r2, r3, #3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	3208      	adds	r2, #8
 800b3a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	f003 0307 	and.w	r3, r3, #7
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	220f      	movs	r2, #15
 800b3b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b3b6:	43db      	mvns	r3, r3
 800b3b8:	697a      	ldr	r2, [r7, #20]
 800b3ba:	08d2      	lsrs	r2, r2, #3
 800b3bc:	4019      	ands	r1, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	3208      	adds	r2, #8
 800b3c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	68da      	ldr	r2, [r3, #12]
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	005b      	lsls	r3, r3, #1
 800b3ce:	2103      	movs	r1, #3
 800b3d0:	fa01 f303 	lsl.w	r3, r1, r3
 800b3d4:	43db      	mvns	r3, r3
 800b3d6:	401a      	ands	r2, r3
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	685a      	ldr	r2, [r3, #4]
 800b3e0:	2101      	movs	r1, #1
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	fa01 f303 	lsl.w	r3, r1, r3
 800b3e8:	43db      	mvns	r3, r3
 800b3ea:	401a      	ands	r2, r3
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	689a      	ldr	r2, [r3, #8]
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	005b      	lsls	r3, r3, #1
 800b3f8:	2103      	movs	r1, #3
 800b3fa:	fa01 f303 	lsl.w	r3, r1, r3
 800b3fe:	43db      	mvns	r3, r3
 800b400:	401a      	ands	r2, r3
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	3301      	adds	r3, #1
 800b40a:	617b      	str	r3, [r7, #20]
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	2b0f      	cmp	r3, #15
 800b410:	f67f af2e 	bls.w	800b270 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800b414:	bf00      	nop
 800b416:	bf00      	nop
 800b418:	371c      	adds	r7, #28
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	40013800 	.word	0x40013800
 800b428:	40020000 	.word	0x40020000
 800b42c:	40020400 	.word	0x40020400
 800b430:	40020800 	.word	0x40020800
 800b434:	40020c00 	.word	0x40020c00
 800b438:	40021000 	.word	0x40021000
 800b43c:	40021400 	.word	0x40021400
 800b440:	40021800 	.word	0x40021800
 800b444:	40021c00 	.word	0x40021c00
 800b448:	40013c00 	.word	0x40013c00

0800b44c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	460b      	mov	r3, r1
 800b456:	807b      	strh	r3, [r7, #2]
 800b458:	4613      	mov	r3, r2
 800b45a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b45c:	787b      	ldrb	r3, [r7, #1]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d003      	beq.n	800b46a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b462:	887a      	ldrh	r2, [r7, #2]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b468:	e003      	b.n	800b472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b46a:	887b      	ldrh	r3, [r7, #2]
 800b46c:	041a      	lsls	r2, r3, #16
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	619a      	str	r2, [r3, #24]
}
 800b472:	bf00      	nop
 800b474:	370c      	adds	r7, #12
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr

0800b47e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b47e:	b580      	push	{r7, lr}
 800b480:	b086      	sub	sp, #24
 800b482:	af02      	add	r7, sp, #8
 800b484:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d101      	bne.n	800b490 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	e101      	b.n	800b694 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d106      	bne.n	800b4b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f00b fe54 	bl	8017158 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2203      	movs	r2, #3
 800b4b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b4be:	d102      	bne.n	800b4c6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f005 f8cb 	bl	8010666 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6818      	ldr	r0, [r3, #0]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	7c1a      	ldrb	r2, [r3, #16]
 800b4d8:	f88d 2000 	strb.w	r2, [sp]
 800b4dc:	3304      	adds	r3, #4
 800b4de:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b4e0:	f004 ffaa 	bl	8010438 <USB_CoreInit>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d005      	beq.n	800b4f6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2202      	movs	r2, #2
 800b4ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	e0ce      	b.n	800b694 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f005 f8c3 	bl	8010688 <USB_SetCurrentMode>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d005      	beq.n	800b514 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2202      	movs	r2, #2
 800b50c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b510:	2301      	movs	r3, #1
 800b512:	e0bf      	b.n	800b694 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b514:	2300      	movs	r3, #0
 800b516:	73fb      	strb	r3, [r7, #15]
 800b518:	e04a      	b.n	800b5b0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b51a:	7bfa      	ldrb	r2, [r7, #15]
 800b51c:	6879      	ldr	r1, [r7, #4]
 800b51e:	4613      	mov	r3, r2
 800b520:	00db      	lsls	r3, r3, #3
 800b522:	4413      	add	r3, r2
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	440b      	add	r3, r1
 800b528:	3315      	adds	r3, #21
 800b52a:	2201      	movs	r2, #1
 800b52c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b52e:	7bfa      	ldrb	r2, [r7, #15]
 800b530:	6879      	ldr	r1, [r7, #4]
 800b532:	4613      	mov	r3, r2
 800b534:	00db      	lsls	r3, r3, #3
 800b536:	4413      	add	r3, r2
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	440b      	add	r3, r1
 800b53c:	3314      	adds	r3, #20
 800b53e:	7bfa      	ldrb	r2, [r7, #15]
 800b540:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b542:	7bfa      	ldrb	r2, [r7, #15]
 800b544:	7bfb      	ldrb	r3, [r7, #15]
 800b546:	b298      	uxth	r0, r3
 800b548:	6879      	ldr	r1, [r7, #4]
 800b54a:	4613      	mov	r3, r2
 800b54c:	00db      	lsls	r3, r3, #3
 800b54e:	4413      	add	r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	440b      	add	r3, r1
 800b554:	332e      	adds	r3, #46	@ 0x2e
 800b556:	4602      	mov	r2, r0
 800b558:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b55a:	7bfa      	ldrb	r2, [r7, #15]
 800b55c:	6879      	ldr	r1, [r7, #4]
 800b55e:	4613      	mov	r3, r2
 800b560:	00db      	lsls	r3, r3, #3
 800b562:	4413      	add	r3, r2
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	440b      	add	r3, r1
 800b568:	3318      	adds	r3, #24
 800b56a:	2200      	movs	r2, #0
 800b56c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b56e:	7bfa      	ldrb	r2, [r7, #15]
 800b570:	6879      	ldr	r1, [r7, #4]
 800b572:	4613      	mov	r3, r2
 800b574:	00db      	lsls	r3, r3, #3
 800b576:	4413      	add	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	440b      	add	r3, r1
 800b57c:	331c      	adds	r3, #28
 800b57e:	2200      	movs	r2, #0
 800b580:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b582:	7bfa      	ldrb	r2, [r7, #15]
 800b584:	6879      	ldr	r1, [r7, #4]
 800b586:	4613      	mov	r3, r2
 800b588:	00db      	lsls	r3, r3, #3
 800b58a:	4413      	add	r3, r2
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	440b      	add	r3, r1
 800b590:	3320      	adds	r3, #32
 800b592:	2200      	movs	r2, #0
 800b594:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b596:	7bfa      	ldrb	r2, [r7, #15]
 800b598:	6879      	ldr	r1, [r7, #4]
 800b59a:	4613      	mov	r3, r2
 800b59c:	00db      	lsls	r3, r3, #3
 800b59e:	4413      	add	r3, r2
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	440b      	add	r3, r1
 800b5a4:	3324      	adds	r3, #36	@ 0x24
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b5aa:	7bfb      	ldrb	r3, [r7, #15]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	73fb      	strb	r3, [r7, #15]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	791b      	ldrb	r3, [r3, #4]
 800b5b4:	7bfa      	ldrb	r2, [r7, #15]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d3af      	bcc.n	800b51a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	73fb      	strb	r3, [r7, #15]
 800b5be:	e044      	b.n	800b64a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b5c0:	7bfa      	ldrb	r2, [r7, #15]
 800b5c2:	6879      	ldr	r1, [r7, #4]
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	00db      	lsls	r3, r3, #3
 800b5c8:	4413      	add	r3, r2
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	440b      	add	r3, r1
 800b5ce:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b5d6:	7bfa      	ldrb	r2, [r7, #15]
 800b5d8:	6879      	ldr	r1, [r7, #4]
 800b5da:	4613      	mov	r3, r2
 800b5dc:	00db      	lsls	r3, r3, #3
 800b5de:	4413      	add	r3, r2
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	440b      	add	r3, r1
 800b5e4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800b5e8:	7bfa      	ldrb	r2, [r7, #15]
 800b5ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b5ec:	7bfa      	ldrb	r2, [r7, #15]
 800b5ee:	6879      	ldr	r1, [r7, #4]
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	00db      	lsls	r3, r3, #3
 800b5f4:	4413      	add	r3, r2
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	440b      	add	r3, r1
 800b5fa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b5fe:	2200      	movs	r2, #0
 800b600:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b602:	7bfa      	ldrb	r2, [r7, #15]
 800b604:	6879      	ldr	r1, [r7, #4]
 800b606:	4613      	mov	r3, r2
 800b608:	00db      	lsls	r3, r3, #3
 800b60a:	4413      	add	r3, r2
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	440b      	add	r3, r1
 800b610:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800b614:	2200      	movs	r2, #0
 800b616:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b618:	7bfa      	ldrb	r2, [r7, #15]
 800b61a:	6879      	ldr	r1, [r7, #4]
 800b61c:	4613      	mov	r3, r2
 800b61e:	00db      	lsls	r3, r3, #3
 800b620:	4413      	add	r3, r2
 800b622:	009b      	lsls	r3, r3, #2
 800b624:	440b      	add	r3, r1
 800b626:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b62a:	2200      	movs	r2, #0
 800b62c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b62e:	7bfa      	ldrb	r2, [r7, #15]
 800b630:	6879      	ldr	r1, [r7, #4]
 800b632:	4613      	mov	r3, r2
 800b634:	00db      	lsls	r3, r3, #3
 800b636:	4413      	add	r3, r2
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	440b      	add	r3, r1
 800b63c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b640:	2200      	movs	r2, #0
 800b642:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b644:	7bfb      	ldrb	r3, [r7, #15]
 800b646:	3301      	adds	r3, #1
 800b648:	73fb      	strb	r3, [r7, #15]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	791b      	ldrb	r3, [r3, #4]
 800b64e:	7bfa      	ldrb	r2, [r7, #15]
 800b650:	429a      	cmp	r2, r3
 800b652:	d3b5      	bcc.n	800b5c0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6818      	ldr	r0, [r3, #0]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	7c1a      	ldrb	r2, [r3, #16]
 800b65c:	f88d 2000 	strb.w	r2, [sp]
 800b660:	3304      	adds	r3, #4
 800b662:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b664:	f005 f85c 	bl	8010720 <USB_DevInit>
 800b668:	4603      	mov	r3, r0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d005      	beq.n	800b67a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2202      	movs	r2, #2
 800b672:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b676:	2301      	movs	r3, #1
 800b678:	e00c      	b.n	800b694 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2201      	movs	r2, #1
 800b684:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4618      	mov	r0, r3
 800b68e:	f006 f8a6 	bl	80117de <USB_DevDisconnect>

  return HAL_OK;
 800b692:	2300      	movs	r3, #0
}
 800b694:	4618      	mov	r0, r3
 800b696:	3710      	adds	r7, #16
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d101      	bne.n	800b6b8 <HAL_PCD_Start+0x1c>
 800b6b4:	2302      	movs	r3, #2
 800b6b6:	e022      	b.n	800b6fe <HAL_PCD_Start+0x62>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d009      	beq.n	800b6e0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d105      	bne.n	800b6e0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f004 ffad 	bl	8010644 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f006 f854 	bl	801179c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b706:	b590      	push	{r4, r7, lr}
 800b708:	b08d      	sub	sp, #52	@ 0x34
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b714:	6a3b      	ldr	r3, [r7, #32]
 800b716:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4618      	mov	r0, r3
 800b71e:	f006 f912 	bl	8011946 <USB_GetMode>
 800b722:	4603      	mov	r3, r0
 800b724:	2b00      	cmp	r3, #0
 800b726:	f040 848c 	bne.w	800c042 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4618      	mov	r0, r3
 800b730:	f006 f876 	bl	8011820 <USB_ReadInterrupts>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	f000 8482 	beq.w	800c040 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b742:	689b      	ldr	r3, [r3, #8]
 800b744:	0a1b      	lsrs	r3, r3, #8
 800b746:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4618      	mov	r0, r3
 800b756:	f006 f863 	bl	8011820 <USB_ReadInterrupts>
 800b75a:	4603      	mov	r3, r0
 800b75c:	f003 0302 	and.w	r3, r3, #2
 800b760:	2b02      	cmp	r3, #2
 800b762:	d107      	bne.n	800b774 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	695a      	ldr	r2, [r3, #20]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f002 0202 	and.w	r2, r2, #2
 800b772:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4618      	mov	r0, r3
 800b77a:	f006 f851 	bl	8011820 <USB_ReadInterrupts>
 800b77e:	4603      	mov	r3, r0
 800b780:	f003 0310 	and.w	r3, r3, #16
 800b784:	2b10      	cmp	r3, #16
 800b786:	d161      	bne.n	800b84c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	699a      	ldr	r2, [r3, #24]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f022 0210 	bic.w	r2, r2, #16
 800b796:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800b798:	6a3b      	ldr	r3, [r7, #32]
 800b79a:	6a1b      	ldr	r3, [r3, #32]
 800b79c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	f003 020f 	and.w	r2, r3, #15
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	00db      	lsls	r3, r3, #3
 800b7a8:	4413      	add	r3, r2
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	4413      	add	r3, r2
 800b7b4:	3304      	adds	r3, #4
 800b7b6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b7be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b7c2:	d124      	bne.n	800b80e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b7c4:	69ba      	ldr	r2, [r7, #24]
 800b7c6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800b7ca:	4013      	ands	r3, r2
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d035      	beq.n	800b83c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	091b      	lsrs	r3, r3, #4
 800b7d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b7da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	6a38      	ldr	r0, [r7, #32]
 800b7e4:	f005 fe88 	bl	80114f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	68da      	ldr	r2, [r3, #12]
 800b7ec:	69bb      	ldr	r3, [r7, #24]
 800b7ee:	091b      	lsrs	r3, r3, #4
 800b7f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b7f4:	441a      	add	r2, r3
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	695a      	ldr	r2, [r3, #20]
 800b7fe:	69bb      	ldr	r3, [r7, #24]
 800b800:	091b      	lsrs	r3, r3, #4
 800b802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b806:	441a      	add	r2, r3
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	615a      	str	r2, [r3, #20]
 800b80c:	e016      	b.n	800b83c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800b80e:	69bb      	ldr	r3, [r7, #24]
 800b810:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b814:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b818:	d110      	bne.n	800b83c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b820:	2208      	movs	r2, #8
 800b822:	4619      	mov	r1, r3
 800b824:	6a38      	ldr	r0, [r7, #32]
 800b826:	f005 fe67 	bl	80114f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	695a      	ldr	r2, [r3, #20]
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	091b      	lsrs	r3, r3, #4
 800b832:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b836:	441a      	add	r2, r3
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	699a      	ldr	r2, [r3, #24]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f042 0210 	orr.w	r2, r2, #16
 800b84a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4618      	mov	r0, r3
 800b852:	f005 ffe5 	bl	8011820 <USB_ReadInterrupts>
 800b856:	4603      	mov	r3, r0
 800b858:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b85c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b860:	f040 80a7 	bne.w	800b9b2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800b864:	2300      	movs	r3, #0
 800b866:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4618      	mov	r0, r3
 800b86e:	f005 ffea 	bl	8011846 <USB_ReadDevAllOutEpInterrupt>
 800b872:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800b874:	e099      	b.n	800b9aa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b878:	f003 0301 	and.w	r3, r3, #1
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f000 808e 	beq.w	800b99e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b888:	b2d2      	uxtb	r2, r2
 800b88a:	4611      	mov	r1, r2
 800b88c:	4618      	mov	r0, r3
 800b88e:	f006 f80e 	bl	80118ae <USB_ReadDevOutEPInterrupt>
 800b892:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	f003 0301 	and.w	r3, r3, #1
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00c      	beq.n	800b8b8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a0:	015a      	lsls	r2, r3, #5
 800b8a2:	69fb      	ldr	r3, [r7, #28]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b8b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 fea4 	bl	800c600 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	f003 0308 	and.w	r3, r3, #8
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d00c      	beq.n	800b8dc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c4:	015a      	lsls	r2, r3, #5
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	2308      	movs	r3, #8
 800b8d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b8d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 ff7a 	bl	800c7d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	f003 0310 	and.w	r3, r3, #16
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d008      	beq.n	800b8f8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e8:	015a      	lsls	r2, r3, #5
 800b8ea:	69fb      	ldr	r3, [r7, #28]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	2310      	movs	r3, #16
 800b8f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	f003 0302 	and.w	r3, r3, #2
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d030      	beq.n	800b964 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b902:	6a3b      	ldr	r3, [r7, #32]
 800b904:	695b      	ldr	r3, [r3, #20]
 800b906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b90a:	2b80      	cmp	r3, #128	@ 0x80
 800b90c:	d109      	bne.n	800b922 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	69fa      	ldr	r2, [r7, #28]
 800b918:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b91c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b920:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b924:	4613      	mov	r3, r2
 800b926:	00db      	lsls	r3, r3, #3
 800b928:	4413      	add	r3, r2
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	4413      	add	r3, r2
 800b934:	3304      	adds	r3, #4
 800b936:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	78db      	ldrb	r3, [r3, #3]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d108      	bne.n	800b952 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	2200      	movs	r2, #0
 800b944:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	4619      	mov	r1, r3
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f00b fd09 	bl	8017364 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b954:	015a      	lsls	r2, r3, #5
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	4413      	add	r3, r2
 800b95a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b95e:	461a      	mov	r2, r3
 800b960:	2302      	movs	r3, #2
 800b962:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	f003 0320 	and.w	r3, r3, #32
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d008      	beq.n	800b980 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b970:	015a      	lsls	r2, r3, #5
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	4413      	add	r3, r2
 800b976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b97a:	461a      	mov	r2, r3
 800b97c:	2320      	movs	r3, #32
 800b97e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b986:	2b00      	cmp	r3, #0
 800b988:	d009      	beq.n	800b99e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b98c:	015a      	lsls	r2, r3, #5
 800b98e:	69fb      	ldr	r3, [r7, #28]
 800b990:	4413      	add	r3, r2
 800b992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b996:	461a      	mov	r2, r3
 800b998:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b99c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a6:	085b      	lsrs	r3, r3, #1
 800b9a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f47f af62 	bne.w	800b876 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f005 ff32 	bl	8011820 <USB_ReadInterrupts>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b9c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b9c6:	f040 80db 	bne.w	800bb80 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f005 ff53 	bl	801187a <USB_ReadDevAllInEpInterrupt>
 800b9d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800b9da:	e0cd      	b.n	800bb78 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9de:	f003 0301 	and.w	r3, r3, #1
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	f000 80c2 	beq.w	800bb6c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9ee:	b2d2      	uxtb	r2, r2
 800b9f0:	4611      	mov	r1, r2
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f005 ff79 	bl	80118ea <USB_ReadDevInEPInterrupt>
 800b9f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	f003 0301 	and.w	r3, r3, #1
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d057      	beq.n	800bab4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ba04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba06:	f003 030f 	and.w	r3, r3, #15
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba10:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	43db      	mvns	r3, r3
 800ba1e:	69f9      	ldr	r1, [r7, #28]
 800ba20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ba24:	4013      	ands	r3, r2
 800ba26:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800ba28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2a:	015a      	lsls	r2, r3, #5
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	4413      	add	r3, r2
 800ba30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba34:	461a      	mov	r2, r3
 800ba36:	2301      	movs	r3, #1
 800ba38:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	799b      	ldrb	r3, [r3, #6]
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d132      	bne.n	800baa8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800ba42:	6879      	ldr	r1, [r7, #4]
 800ba44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba46:	4613      	mov	r3, r2
 800ba48:	00db      	lsls	r3, r3, #3
 800ba4a:	4413      	add	r3, r2
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	440b      	add	r3, r1
 800ba50:	3320      	adds	r3, #32
 800ba52:	6819      	ldr	r1, [r3, #0]
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba58:	4613      	mov	r3, r2
 800ba5a:	00db      	lsls	r3, r3, #3
 800ba5c:	4413      	add	r3, r2
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	4403      	add	r3, r0
 800ba62:	331c      	adds	r3, #28
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4419      	add	r1, r3
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba6c:	4613      	mov	r3, r2
 800ba6e:	00db      	lsls	r3, r3, #3
 800ba70:	4413      	add	r3, r2
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	4403      	add	r3, r0
 800ba76:	3320      	adds	r3, #32
 800ba78:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800ba7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d113      	bne.n	800baa8 <HAL_PCD_IRQHandler+0x3a2>
 800ba80:	6879      	ldr	r1, [r7, #4]
 800ba82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba84:	4613      	mov	r3, r2
 800ba86:	00db      	lsls	r3, r3, #3
 800ba88:	4413      	add	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	440b      	add	r3, r1
 800ba8e:	3324      	adds	r3, #36	@ 0x24
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d108      	bne.n	800baa8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6818      	ldr	r0, [r3, #0]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800baa0:	461a      	mov	r2, r3
 800baa2:	2101      	movs	r1, #1
 800baa4:	f005 ff80 	bl	80119a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800baa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	4619      	mov	r1, r3
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f00b fbd3 	bl	801725a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	f003 0308 	and.w	r3, r3, #8
 800baba:	2b00      	cmp	r3, #0
 800babc:	d008      	beq.n	800bad0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800babe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac0:	015a      	lsls	r2, r3, #5
 800bac2:	69fb      	ldr	r3, [r7, #28]
 800bac4:	4413      	add	r3, r2
 800bac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800baca:	461a      	mov	r2, r3
 800bacc:	2308      	movs	r3, #8
 800bace:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	f003 0310 	and.w	r3, r3, #16
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d008      	beq.n	800baec <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800bada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800badc:	015a      	lsls	r2, r3, #5
 800bade:	69fb      	ldr	r3, [r7, #28]
 800bae0:	4413      	add	r3, r2
 800bae2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bae6:	461a      	mov	r2, r3
 800bae8:	2310      	movs	r3, #16
 800baea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d008      	beq.n	800bb08 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800baf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf8:	015a      	lsls	r2, r3, #5
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	4413      	add	r3, r2
 800bafe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb02:	461a      	mov	r2, r3
 800bb04:	2340      	movs	r3, #64	@ 0x40
 800bb06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	f003 0302 	and.w	r3, r3, #2
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d023      	beq.n	800bb5a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800bb12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb14:	6a38      	ldr	r0, [r7, #32]
 800bb16:	f004 ff67 	bl	80109e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800bb1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb1c:	4613      	mov	r3, r2
 800bb1e:	00db      	lsls	r3, r3, #3
 800bb20:	4413      	add	r3, r2
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	3310      	adds	r3, #16
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	4413      	add	r3, r2
 800bb2a:	3304      	adds	r3, #4
 800bb2c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	78db      	ldrb	r3, [r3, #3]
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d108      	bne.n	800bb48 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	4619      	mov	r1, r3
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f00b fc20 	bl	8017388 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800bb48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4a:	015a      	lsls	r2, r3, #5
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	4413      	add	r3, r2
 800bb50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb54:	461a      	mov	r2, r3
 800bb56:	2302      	movs	r3, #2
 800bb58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d003      	beq.n	800bb6c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800bb64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 fcbd 	bl	800c4e6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800bb6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb6e:	3301      	adds	r3, #1
 800bb70:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800bb72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb74:	085b      	lsrs	r3, r3, #1
 800bb76:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800bb78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	f47f af2e 	bne.w	800b9dc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4618      	mov	r0, r3
 800bb86:	f005 fe4b 	bl	8011820 <USB_ReadInterrupts>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb94:	d122      	bne.n	800bbdc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bb96:	69fb      	ldr	r3, [r7, #28]
 800bb98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	69fa      	ldr	r2, [r7, #28]
 800bba0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bba4:	f023 0301 	bic.w	r3, r3, #1
 800bba8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d108      	bne.n	800bbc6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 fea4 	bl	800c90c <HAL_PCDEx_LPM_Callback>
 800bbc4:	e002      	b.n	800bbcc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f00b fbbe 	bl	8017348 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	695a      	ldr	r2, [r3, #20]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800bbda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f005 fe1d 	bl	8011820 <USB_ReadInterrupts>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bbec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bbf0:	d112      	bne.n	800bc18 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	f003 0301 	and.w	r3, r3, #1
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d102      	bne.n	800bc08 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f00b fb7a 	bl	80172fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	695a      	ldr	r2, [r3, #20]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800bc16:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f005 fdff 	bl	8011820 <USB_ReadInterrupts>
 800bc22:	4603      	mov	r3, r0
 800bc24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bc28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc2c:	f040 80b7 	bne.w	800bd9e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	69fa      	ldr	r2, [r7, #28]
 800bc3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc3e:	f023 0301 	bic.w	r3, r3, #1
 800bc42:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2110      	movs	r1, #16
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f004 fecc 	bl	80109e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bc50:	2300      	movs	r3, #0
 800bc52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc54:	e046      	b.n	800bce4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800bc56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc58:	015a      	lsls	r2, r3, #5
 800bc5a:	69fb      	ldr	r3, [r7, #28]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc62:	461a      	mov	r2, r3
 800bc64:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bc68:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bc6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc6c:	015a      	lsls	r2, r3, #5
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	4413      	add	r3, r2
 800bc72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc7a:	0151      	lsls	r1, r2, #5
 800bc7c:	69fa      	ldr	r2, [r7, #28]
 800bc7e:	440a      	add	r2, r1
 800bc80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc84:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bc88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800bc8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc8c:	015a      	lsls	r2, r3, #5
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	4413      	add	r3, r2
 800bc92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc96:	461a      	mov	r2, r3
 800bc98:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bc9c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bc9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bca0:	015a      	lsls	r2, r3, #5
 800bca2:	69fb      	ldr	r3, [r7, #28]
 800bca4:	4413      	add	r3, r2
 800bca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcae:	0151      	lsls	r1, r2, #5
 800bcb0:	69fa      	ldr	r2, [r7, #28]
 800bcb2:	440a      	add	r2, r1
 800bcb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bcb8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bcbc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bcbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcc0:	015a      	lsls	r2, r3, #5
 800bcc2:	69fb      	ldr	r3, [r7, #28]
 800bcc4:	4413      	add	r3, r2
 800bcc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcce:	0151      	lsls	r1, r2, #5
 800bcd0:	69fa      	ldr	r2, [r7, #28]
 800bcd2:	440a      	add	r2, r1
 800bcd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bcd8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bcdc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bcde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce0:	3301      	adds	r3, #1
 800bce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	791b      	ldrb	r3, [r3, #4]
 800bce8:	461a      	mov	r2, r3
 800bcea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d3b2      	bcc.n	800bc56 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcf6:	69db      	ldr	r3, [r3, #28]
 800bcf8:	69fa      	ldr	r2, [r7, #28]
 800bcfa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bcfe:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800bd02:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	7bdb      	ldrb	r3, [r3, #15]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d016      	beq.n	800bd3a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800bd0c:	69fb      	ldr	r3, [r7, #28]
 800bd0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd16:	69fa      	ldr	r2, [r7, #28]
 800bd18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd1c:	f043 030b 	orr.w	r3, r3, #11
 800bd20:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd2c:	69fa      	ldr	r2, [r7, #28]
 800bd2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd32:	f043 030b 	orr.w	r3, r3, #11
 800bd36:	6453      	str	r3, [r2, #68]	@ 0x44
 800bd38:	e015      	b.n	800bd66 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd40:	695b      	ldr	r3, [r3, #20]
 800bd42:	69fa      	ldr	r2, [r7, #28]
 800bd44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd48:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800bd4c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800bd50:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800bd52:	69fb      	ldr	r3, [r7, #28]
 800bd54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	69fa      	ldr	r2, [r7, #28]
 800bd5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd60:	f043 030b 	orr.w	r3, r3, #11
 800bd64:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800bd66:	69fb      	ldr	r3, [r7, #28]
 800bd68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	69fa      	ldr	r2, [r7, #28]
 800bd70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd74:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800bd78:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6818      	ldr	r0, [r3, #0]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bd88:	461a      	mov	r2, r3
 800bd8a:	f005 fe0d 	bl	80119a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	695a      	ldr	r2, [r3, #20]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800bd9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	4618      	mov	r0, r3
 800bda4:	f005 fd3c 	bl	8011820 <USB_ReadInterrupts>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bdae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bdb2:	d123      	bne.n	800bdfc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f005 fdd2 	bl	8011962 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f004 fe89 	bl	8010ada <USB_GetDevSpeed>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	461a      	mov	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681c      	ldr	r4, [r3, #0]
 800bdd4:	f001 fa0a 	bl	800d1ec <HAL_RCC_GetHCLKFreq>
 800bdd8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bdde:	461a      	mov	r2, r3
 800bde0:	4620      	mov	r0, r4
 800bde2:	f004 fb8d 	bl	8010500 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f00b fa5f 	bl	80172aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	695a      	ldr	r2, [r3, #20]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800bdfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4618      	mov	r0, r3
 800be02:	f005 fd0d 	bl	8011820 <USB_ReadInterrupts>
 800be06:	4603      	mov	r3, r0
 800be08:	f003 0308 	and.w	r3, r3, #8
 800be0c:	2b08      	cmp	r3, #8
 800be0e:	d10a      	bne.n	800be26 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f00b fa3c 	bl	801728e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	695a      	ldr	r2, [r3, #20]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f002 0208 	and.w	r2, r2, #8
 800be24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4618      	mov	r0, r3
 800be2c:	f005 fcf8 	bl	8011820 <USB_ReadInterrupts>
 800be30:	4603      	mov	r3, r0
 800be32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be36:	2b80      	cmp	r3, #128	@ 0x80
 800be38:	d123      	bne.n	800be82 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800be3a:	6a3b      	ldr	r3, [r7, #32]
 800be3c:	699b      	ldr	r3, [r3, #24]
 800be3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800be42:	6a3b      	ldr	r3, [r7, #32]
 800be44:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800be46:	2301      	movs	r3, #1
 800be48:	627b      	str	r3, [r7, #36]	@ 0x24
 800be4a:	e014      	b.n	800be76 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800be4c:	6879      	ldr	r1, [r7, #4]
 800be4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be50:	4613      	mov	r3, r2
 800be52:	00db      	lsls	r3, r3, #3
 800be54:	4413      	add	r3, r2
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	440b      	add	r3, r1
 800be5a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	2b01      	cmp	r3, #1
 800be62:	d105      	bne.n	800be70 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800be64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be66:	b2db      	uxtb	r3, r3
 800be68:	4619      	mov	r1, r3
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 fb0a 	bl	800c484 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800be70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be72:	3301      	adds	r3, #1
 800be74:	627b      	str	r3, [r7, #36]	@ 0x24
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	791b      	ldrb	r3, [r3, #4]
 800be7a:	461a      	mov	r2, r3
 800be7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be7e:	4293      	cmp	r3, r2
 800be80:	d3e4      	bcc.n	800be4c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4618      	mov	r0, r3
 800be88:	f005 fcca 	bl	8011820 <USB_ReadInterrupts>
 800be8c:	4603      	mov	r3, r0
 800be8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800be92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be96:	d13c      	bne.n	800bf12 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800be98:	2301      	movs	r3, #1
 800be9a:	627b      	str	r3, [r7, #36]	@ 0x24
 800be9c:	e02b      	b.n	800bef6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800be9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bea0:	015a      	lsls	r2, r3, #5
 800bea2:	69fb      	ldr	r3, [r7, #28]
 800bea4:	4413      	add	r3, r2
 800bea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800beae:	6879      	ldr	r1, [r7, #4]
 800beb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800beb2:	4613      	mov	r3, r2
 800beb4:	00db      	lsls	r3, r3, #3
 800beb6:	4413      	add	r3, r2
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	440b      	add	r3, r1
 800bebc:	3318      	adds	r3, #24
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d115      	bne.n	800bef0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800bec4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	da12      	bge.n	800bef0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800beca:	6879      	ldr	r1, [r7, #4]
 800becc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bece:	4613      	mov	r3, r2
 800bed0:	00db      	lsls	r3, r3, #3
 800bed2:	4413      	add	r3, r2
 800bed4:	009b      	lsls	r3, r3, #2
 800bed6:	440b      	add	r3, r1
 800bed8:	3317      	adds	r3, #23
 800beda:	2201      	movs	r2, #1
 800bedc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800bede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	4619      	mov	r1, r3
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 faca 	bl	800c484 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef2:	3301      	adds	r3, #1
 800bef4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	791b      	ldrb	r3, [r3, #4]
 800befa:	461a      	mov	r2, r3
 800befc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befe:	4293      	cmp	r3, r2
 800bf00:	d3cd      	bcc.n	800be9e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	695a      	ldr	r2, [r3, #20]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800bf10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f005 fc82 	bl	8011820 <USB_ReadInterrupts>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bf22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bf26:	d156      	bne.n	800bfd6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bf28:	2301      	movs	r3, #1
 800bf2a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf2c:	e045      	b.n	800bfba <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800bf2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf30:	015a      	lsls	r2, r3, #5
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	4413      	add	r3, r2
 800bf36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bf3e:	6879      	ldr	r1, [r7, #4]
 800bf40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf42:	4613      	mov	r3, r2
 800bf44:	00db      	lsls	r3, r3, #3
 800bf46:	4413      	add	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	440b      	add	r3, r1
 800bf4c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d12e      	bne.n	800bfb4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bf56:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	da2b      	bge.n	800bfb4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800bf68:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d121      	bne.n	800bfb4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800bf70:	6879      	ldr	r1, [r7, #4]
 800bf72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf74:	4613      	mov	r3, r2
 800bf76:	00db      	lsls	r3, r3, #3
 800bf78:	4413      	add	r3, r2
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	440b      	add	r3, r1
 800bf7e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800bf82:	2201      	movs	r2, #1
 800bf84:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800bf86:	6a3b      	ldr	r3, [r7, #32]
 800bf88:	699b      	ldr	r3, [r3, #24]
 800bf8a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bf8e:	6a3b      	ldr	r3, [r7, #32]
 800bf90:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800bf92:	6a3b      	ldr	r3, [r7, #32]
 800bf94:	695b      	ldr	r3, [r3, #20]
 800bf96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d10a      	bne.n	800bfb4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	69fa      	ldr	r2, [r7, #28]
 800bfa8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bfac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bfb0:	6053      	str	r3, [r2, #4]
            break;
 800bfb2:	e008      	b.n	800bfc6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bfb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	791b      	ldrb	r3, [r3, #4]
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d3b3      	bcc.n	800bf2e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	695a      	ldr	r2, [r3, #20]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800bfd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f005 fc20 	bl	8011820 <USB_ReadInterrupts>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bfe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfea:	d10a      	bne.n	800c002 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f00b f9dd 	bl	80173ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	695a      	ldr	r2, [r3, #20]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800c000:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4618      	mov	r0, r3
 800c008:	f005 fc0a 	bl	8011820 <USB_ReadInterrupts>
 800c00c:	4603      	mov	r3, r0
 800c00e:	f003 0304 	and.w	r3, r3, #4
 800c012:	2b04      	cmp	r3, #4
 800c014:	d115      	bne.n	800c042 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	f003 0304 	and.w	r3, r3, #4
 800c024:	2b00      	cmp	r3, #0
 800c026:	d002      	beq.n	800c02e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f00b f9cd 	bl	80173c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	6859      	ldr	r1, [r3, #4]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	69ba      	ldr	r2, [r7, #24]
 800c03a:	430a      	orrs	r2, r1
 800c03c:	605a      	str	r2, [r3, #4]
 800c03e:	e000      	b.n	800c042 <HAL_PCD_IRQHandler+0x93c>
      return;
 800c040:	bf00      	nop
    }
  }
}
 800c042:	3734      	adds	r7, #52	@ 0x34
 800c044:	46bd      	mov	sp, r7
 800c046:	bd90      	pop	{r4, r7, pc}

0800c048 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	460b      	mov	r3, r1
 800c052:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d101      	bne.n	800c062 <HAL_PCD_SetAddress+0x1a>
 800c05e:	2302      	movs	r3, #2
 800c060:	e012      	b.n	800c088 <HAL_PCD_SetAddress+0x40>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2201      	movs	r2, #1
 800c066:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	78fa      	ldrb	r2, [r7, #3]
 800c06e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	78fa      	ldrb	r2, [r7, #3]
 800c076:	4611      	mov	r1, r2
 800c078:	4618      	mov	r0, r3
 800c07a:	f005 fb69 	bl	8011750 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c086:	2300      	movs	r3, #0
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3708      	adds	r7, #8
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	4608      	mov	r0, r1
 800c09a:	4611      	mov	r1, r2
 800c09c:	461a      	mov	r2, r3
 800c09e:	4603      	mov	r3, r0
 800c0a0:	70fb      	strb	r3, [r7, #3]
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	803b      	strh	r3, [r7, #0]
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c0ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	da0f      	bge.n	800c0d6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c0b6:	78fb      	ldrb	r3, [r7, #3]
 800c0b8:	f003 020f 	and.w	r2, r3, #15
 800c0bc:	4613      	mov	r3, r2
 800c0be:	00db      	lsls	r3, r3, #3
 800c0c0:	4413      	add	r3, r2
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	3310      	adds	r3, #16
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	4413      	add	r3, r2
 800c0ca:	3304      	adds	r3, #4
 800c0cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	705a      	strb	r2, [r3, #1]
 800c0d4:	e00f      	b.n	800c0f6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c0d6:	78fb      	ldrb	r3, [r7, #3]
 800c0d8:	f003 020f 	and.w	r2, r3, #15
 800c0dc:	4613      	mov	r3, r2
 800c0de:	00db      	lsls	r3, r3, #3
 800c0e0:	4413      	add	r3, r2
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	3304      	adds	r3, #4
 800c0ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c0f6:	78fb      	ldrb	r3, [r7, #3]
 800c0f8:	f003 030f 	and.w	r3, r3, #15
 800c0fc:	b2da      	uxtb	r2, r3
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800c102:	883b      	ldrh	r3, [r7, #0]
 800c104:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	78ba      	ldrb	r2, [r7, #2]
 800c110:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	785b      	ldrb	r3, [r3, #1]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d004      	beq.n	800c124 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	461a      	mov	r2, r3
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c124:	78bb      	ldrb	r3, [r7, #2]
 800c126:	2b02      	cmp	r3, #2
 800c128:	d102      	bne.n	800c130 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2200      	movs	r2, #0
 800c12e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c136:	2b01      	cmp	r3, #1
 800c138:	d101      	bne.n	800c13e <HAL_PCD_EP_Open+0xae>
 800c13a:	2302      	movs	r3, #2
 800c13c:	e00e      	b.n	800c15c <HAL_PCD_EP_Open+0xcc>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2201      	movs	r2, #1
 800c142:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	68f9      	ldr	r1, [r7, #12]
 800c14c:	4618      	mov	r0, r3
 800c14e:	f004 fce9 	bl	8010b24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800c15a:	7afb      	ldrb	r3, [r7, #11]
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3710      	adds	r7, #16
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	460b      	mov	r3, r1
 800c16e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c174:	2b00      	cmp	r3, #0
 800c176:	da0f      	bge.n	800c198 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c178:	78fb      	ldrb	r3, [r7, #3]
 800c17a:	f003 020f 	and.w	r2, r3, #15
 800c17e:	4613      	mov	r3, r2
 800c180:	00db      	lsls	r3, r3, #3
 800c182:	4413      	add	r3, r2
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	3310      	adds	r3, #16
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	4413      	add	r3, r2
 800c18c:	3304      	adds	r3, #4
 800c18e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2201      	movs	r2, #1
 800c194:	705a      	strb	r2, [r3, #1]
 800c196:	e00f      	b.n	800c1b8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c198:	78fb      	ldrb	r3, [r7, #3]
 800c19a:	f003 020f 	and.w	r2, r3, #15
 800c19e:	4613      	mov	r3, r2
 800c1a0:	00db      	lsls	r3, r3, #3
 800c1a2:	4413      	add	r3, r2
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c1aa:	687a      	ldr	r2, [r7, #4]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	3304      	adds	r3, #4
 800c1b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c1b8:	78fb      	ldrb	r3, [r7, #3]
 800c1ba:	f003 030f 	and.w	r3, r3, #15
 800c1be:	b2da      	uxtb	r2, r3
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c1ca:	2b01      	cmp	r3, #1
 800c1cc:	d101      	bne.n	800c1d2 <HAL_PCD_EP_Close+0x6e>
 800c1ce:	2302      	movs	r3, #2
 800c1d0:	e00e      	b.n	800c1f0 <HAL_PCD_EP_Close+0x8c>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	68f9      	ldr	r1, [r7, #12]
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f004 fd27 	bl	8010c34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800c1ee:	2300      	movs	r3, #0
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3710      	adds	r7, #16
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b086      	sub	sp, #24
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	607a      	str	r2, [r7, #4]
 800c202:	603b      	str	r3, [r7, #0]
 800c204:	460b      	mov	r3, r1
 800c206:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c208:	7afb      	ldrb	r3, [r7, #11]
 800c20a:	f003 020f 	and.w	r2, r3, #15
 800c20e:	4613      	mov	r3, r2
 800c210:	00db      	lsls	r3, r3, #3
 800c212:	4413      	add	r3, r2
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c21a:	68fa      	ldr	r2, [r7, #12]
 800c21c:	4413      	add	r3, r2
 800c21e:	3304      	adds	r3, #4
 800c220:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	683a      	ldr	r2, [r7, #0]
 800c22c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	2200      	movs	r2, #0
 800c232:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	2200      	movs	r2, #0
 800c238:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c23a:	7afb      	ldrb	r3, [r7, #11]
 800c23c:	f003 030f 	and.w	r3, r3, #15
 800c240:	b2da      	uxtb	r2, r3
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	799b      	ldrb	r3, [r3, #6]
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d102      	bne.n	800c254 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6818      	ldr	r0, [r3, #0]
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	799b      	ldrb	r3, [r3, #6]
 800c25c:	461a      	mov	r2, r3
 800c25e:	6979      	ldr	r1, [r7, #20]
 800c260:	f004 fdc4 	bl	8010dec <USB_EPStartXfer>

  return HAL_OK;
 800c264:	2300      	movs	r3, #0
}
 800c266:	4618      	mov	r0, r3
 800c268:	3718      	adds	r7, #24
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c26e:	b480      	push	{r7}
 800c270:	b083      	sub	sp, #12
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
 800c276:	460b      	mov	r3, r1
 800c278:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c27a:	78fb      	ldrb	r3, [r7, #3]
 800c27c:	f003 020f 	and.w	r2, r3, #15
 800c280:	6879      	ldr	r1, [r7, #4]
 800c282:	4613      	mov	r3, r2
 800c284:	00db      	lsls	r3, r3, #3
 800c286:	4413      	add	r3, r2
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	440b      	add	r3, r1
 800c28c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800c290:	681b      	ldr	r3, [r3, #0]
}
 800c292:	4618      	mov	r0, r3
 800c294:	370c      	adds	r7, #12
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr

0800c29e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c29e:	b580      	push	{r7, lr}
 800c2a0:	b086      	sub	sp, #24
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	60f8      	str	r0, [r7, #12]
 800c2a6:	607a      	str	r2, [r7, #4]
 800c2a8:	603b      	str	r3, [r7, #0]
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c2ae:	7afb      	ldrb	r3, [r7, #11]
 800c2b0:	f003 020f 	and.w	r2, r3, #15
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	00db      	lsls	r3, r3, #3
 800c2b8:	4413      	add	r3, r2
 800c2ba:	009b      	lsls	r3, r3, #2
 800c2bc:	3310      	adds	r3, #16
 800c2be:	68fa      	ldr	r2, [r7, #12]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	3304      	adds	r3, #4
 800c2c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	683a      	ldr	r2, [r7, #0]
 800c2d0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	2201      	movs	r2, #1
 800c2dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c2de:	7afb      	ldrb	r3, [r7, #11]
 800c2e0:	f003 030f 	and.w	r3, r3, #15
 800c2e4:	b2da      	uxtb	r2, r3
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	799b      	ldrb	r3, [r3, #6]
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d102      	bne.n	800c2f8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6818      	ldr	r0, [r3, #0]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	799b      	ldrb	r3, [r3, #6]
 800c300:	461a      	mov	r2, r3
 800c302:	6979      	ldr	r1, [r7, #20]
 800c304:	f004 fd72 	bl	8010dec <USB_EPStartXfer>

  return HAL_OK;
 800c308:	2300      	movs	r3, #0
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3718      	adds	r7, #24
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c312:	b580      	push	{r7, lr}
 800c314:	b084      	sub	sp, #16
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
 800c31a:	460b      	mov	r3, r1
 800c31c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c31e:	78fb      	ldrb	r3, [r7, #3]
 800c320:	f003 030f 	and.w	r3, r3, #15
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	7912      	ldrb	r2, [r2, #4]
 800c328:	4293      	cmp	r3, r2
 800c32a:	d901      	bls.n	800c330 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c32c:	2301      	movs	r3, #1
 800c32e:	e04f      	b.n	800c3d0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c334:	2b00      	cmp	r3, #0
 800c336:	da0f      	bge.n	800c358 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c338:	78fb      	ldrb	r3, [r7, #3]
 800c33a:	f003 020f 	and.w	r2, r3, #15
 800c33e:	4613      	mov	r3, r2
 800c340:	00db      	lsls	r3, r3, #3
 800c342:	4413      	add	r3, r2
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	3310      	adds	r3, #16
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	4413      	add	r3, r2
 800c34c:	3304      	adds	r3, #4
 800c34e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2201      	movs	r2, #1
 800c354:	705a      	strb	r2, [r3, #1]
 800c356:	e00d      	b.n	800c374 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c358:	78fa      	ldrb	r2, [r7, #3]
 800c35a:	4613      	mov	r3, r2
 800c35c:	00db      	lsls	r3, r3, #3
 800c35e:	4413      	add	r3, r2
 800c360:	009b      	lsls	r3, r3, #2
 800c362:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	4413      	add	r3, r2
 800c36a:	3304      	adds	r3, #4
 800c36c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2200      	movs	r2, #0
 800c372:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2201      	movs	r2, #1
 800c378:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c37a:	78fb      	ldrb	r3, [r7, #3]
 800c37c:	f003 030f 	and.w	r3, r3, #15
 800c380:	b2da      	uxtb	r2, r3
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d101      	bne.n	800c394 <HAL_PCD_EP_SetStall+0x82>
 800c390:	2302      	movs	r3, #2
 800c392:	e01d      	b.n	800c3d0 <HAL_PCD_EP_SetStall+0xbe>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2201      	movs	r2, #1
 800c398:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	68f9      	ldr	r1, [r7, #12]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f005 f900 	bl	80115a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c3a8:	78fb      	ldrb	r3, [r7, #3]
 800c3aa:	f003 030f 	and.w	r3, r3, #15
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d109      	bne.n	800c3c6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6818      	ldr	r0, [r3, #0]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	7999      	ldrb	r1, [r3, #6]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	f005 faf1 	bl	80119a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c3e4:	78fb      	ldrb	r3, [r7, #3]
 800c3e6:	f003 030f 	and.w	r3, r3, #15
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	7912      	ldrb	r2, [r2, #4]
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d901      	bls.n	800c3f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e042      	b.n	800c47c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c3f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	da0f      	bge.n	800c41e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c3fe:	78fb      	ldrb	r3, [r7, #3]
 800c400:	f003 020f 	and.w	r2, r3, #15
 800c404:	4613      	mov	r3, r2
 800c406:	00db      	lsls	r3, r3, #3
 800c408:	4413      	add	r3, r2
 800c40a:	009b      	lsls	r3, r3, #2
 800c40c:	3310      	adds	r3, #16
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	4413      	add	r3, r2
 800c412:	3304      	adds	r3, #4
 800c414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2201      	movs	r2, #1
 800c41a:	705a      	strb	r2, [r3, #1]
 800c41c:	e00f      	b.n	800c43e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c41e:	78fb      	ldrb	r3, [r7, #3]
 800c420:	f003 020f 	and.w	r2, r3, #15
 800c424:	4613      	mov	r3, r2
 800c426:	00db      	lsls	r3, r3, #3
 800c428:	4413      	add	r3, r2
 800c42a:	009b      	lsls	r3, r3, #2
 800c42c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	4413      	add	r3, r2
 800c434:	3304      	adds	r3, #4
 800c436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2200      	movs	r2, #0
 800c43c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2200      	movs	r2, #0
 800c442:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c444:	78fb      	ldrb	r3, [r7, #3]
 800c446:	f003 030f 	and.w	r3, r3, #15
 800c44a:	b2da      	uxtb	r2, r3
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c456:	2b01      	cmp	r3, #1
 800c458:	d101      	bne.n	800c45e <HAL_PCD_EP_ClrStall+0x86>
 800c45a:	2302      	movs	r3, #2
 800c45c:	e00e      	b.n	800c47c <HAL_PCD_EP_ClrStall+0xa4>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2201      	movs	r2, #1
 800c462:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	68f9      	ldr	r1, [r7, #12]
 800c46c:	4618      	mov	r0, r3
 800c46e:	f005 f909 	bl	8011684 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c47a:	2300      	movs	r3, #0
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3710      	adds	r7, #16
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	460b      	mov	r3, r1
 800c48e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800c490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c494:	2b00      	cmp	r3, #0
 800c496:	da0c      	bge.n	800c4b2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c498:	78fb      	ldrb	r3, [r7, #3]
 800c49a:	f003 020f 	and.w	r2, r3, #15
 800c49e:	4613      	mov	r3, r2
 800c4a0:	00db      	lsls	r3, r3, #3
 800c4a2:	4413      	add	r3, r2
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	3310      	adds	r3, #16
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	3304      	adds	r3, #4
 800c4ae:	60fb      	str	r3, [r7, #12]
 800c4b0:	e00c      	b.n	800c4cc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c4b2:	78fb      	ldrb	r3, [r7, #3]
 800c4b4:	f003 020f 	and.w	r2, r3, #15
 800c4b8:	4613      	mov	r3, r2
 800c4ba:	00db      	lsls	r3, r3, #3
 800c4bc:	4413      	add	r3, r2
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	4413      	add	r3, r2
 800c4c8:	3304      	adds	r3, #4
 800c4ca:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68f9      	ldr	r1, [r7, #12]
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f004 ff28 	bl	8011328 <USB_EPStopXfer>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	72fb      	strb	r3, [r7, #11]

  return ret;
 800c4dc:	7afb      	ldrb	r3, [r7, #11]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3710      	adds	r7, #16
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b08a      	sub	sp, #40	@ 0x28
 800c4ea:	af02      	add	r7, sp, #8
 800c4ec:	6078      	str	r0, [r7, #4]
 800c4ee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c4fa:	683a      	ldr	r2, [r7, #0]
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	00db      	lsls	r3, r3, #3
 800c500:	4413      	add	r3, r2
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	3310      	adds	r3, #16
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	4413      	add	r3, r2
 800c50a:	3304      	adds	r3, #4
 800c50c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	695a      	ldr	r2, [r3, #20]
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	691b      	ldr	r3, [r3, #16]
 800c516:	429a      	cmp	r2, r3
 800c518:	d901      	bls.n	800c51e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c51a:	2301      	movs	r3, #1
 800c51c:	e06b      	b.n	800c5f6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	691a      	ldr	r2, [r3, #16]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	695b      	ldr	r3, [r3, #20]
 800c526:	1ad3      	subs	r3, r2, r3
 800c528:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	689b      	ldr	r3, [r3, #8]
 800c52e:	69fa      	ldr	r2, [r7, #28]
 800c530:	429a      	cmp	r2, r3
 800c532:	d902      	bls.n	800c53a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c53a:	69fb      	ldr	r3, [r7, #28]
 800c53c:	3303      	adds	r3, #3
 800c53e:	089b      	lsrs	r3, r3, #2
 800c540:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c542:	e02a      	b.n	800c59a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	691a      	ldr	r2, [r3, #16]
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	695b      	ldr	r3, [r3, #20]
 800c54c:	1ad3      	subs	r3, r2, r3
 800c54e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	689b      	ldr	r3, [r3, #8]
 800c554:	69fa      	ldr	r2, [r7, #28]
 800c556:	429a      	cmp	r2, r3
 800c558:	d902      	bls.n	800c560 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	689b      	ldr	r3, [r3, #8]
 800c55e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	3303      	adds	r3, #3
 800c564:	089b      	lsrs	r3, r3, #2
 800c566:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	68d9      	ldr	r1, [r3, #12]
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	b2da      	uxtb	r2, r3
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c578:	9300      	str	r3, [sp, #0]
 800c57a:	4603      	mov	r3, r0
 800c57c:	6978      	ldr	r0, [r7, #20]
 800c57e:	f004 ff7d 	bl	801147c <USB_WritePacket>

    ep->xfer_buff  += len;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	68da      	ldr	r2, [r3, #12]
 800c586:	69fb      	ldr	r3, [r7, #28]
 800c588:	441a      	add	r2, r3
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	695a      	ldr	r2, [r3, #20]
 800c592:	69fb      	ldr	r3, [r7, #28]
 800c594:	441a      	add	r2, r3
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	015a      	lsls	r2, r3, #5
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5a6:	699b      	ldr	r3, [r3, #24]
 800c5a8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c5aa:	69ba      	ldr	r2, [r7, #24]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d809      	bhi.n	800c5c4 <PCD_WriteEmptyTxFifo+0xde>
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	695a      	ldr	r2, [r3, #20]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d203      	bcs.n	800c5c4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	691b      	ldr	r3, [r3, #16]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d1bf      	bne.n	800c544 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	691a      	ldr	r2, [r3, #16]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	695b      	ldr	r3, [r3, #20]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d811      	bhi.n	800c5f4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	f003 030f 	and.w	r3, r3, #15
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c5dc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c5e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	43db      	mvns	r3, r3
 800c5ea:	6939      	ldr	r1, [r7, #16]
 800c5ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c5f0:	4013      	ands	r3, r2
 800c5f2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3720      	adds	r7, #32
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
	...

0800c600 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b088      	sub	sp, #32
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c614:	69fb      	ldr	r3, [r7, #28]
 800c616:	333c      	adds	r3, #60	@ 0x3c
 800c618:	3304      	adds	r3, #4
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	015a      	lsls	r2, r3, #5
 800c622:	69bb      	ldr	r3, [r7, #24]
 800c624:	4413      	add	r3, r2
 800c626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	799b      	ldrb	r3, [r3, #6]
 800c632:	2b01      	cmp	r3, #1
 800c634:	d17b      	bne.n	800c72e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	f003 0308 	and.w	r3, r3, #8
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d015      	beq.n	800c66c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	4a61      	ldr	r2, [pc, #388]	@ (800c7c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c644:	4293      	cmp	r3, r2
 800c646:	f240 80b9 	bls.w	800c7bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c650:	2b00      	cmp	r3, #0
 800c652:	f000 80b3 	beq.w	800c7bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	015a      	lsls	r2, r3, #5
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	4413      	add	r3, r2
 800c65e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c662:	461a      	mov	r2, r3
 800c664:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c668:	6093      	str	r3, [r2, #8]
 800c66a:	e0a7      	b.n	800c7bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	f003 0320 	and.w	r3, r3, #32
 800c672:	2b00      	cmp	r3, #0
 800c674:	d009      	beq.n	800c68a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	015a      	lsls	r2, r3, #5
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	4413      	add	r3, r2
 800c67e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c682:	461a      	mov	r2, r3
 800c684:	2320      	movs	r3, #32
 800c686:	6093      	str	r3, [r2, #8]
 800c688:	e098      	b.n	800c7bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c690:	2b00      	cmp	r3, #0
 800c692:	f040 8093 	bne.w	800c7bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	4a4b      	ldr	r2, [pc, #300]	@ (800c7c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d90f      	bls.n	800c6be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d00a      	beq.n	800c6be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	015a      	lsls	r2, r3, #5
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6ba:	6093      	str	r3, [r2, #8]
 800c6bc:	e07e      	b.n	800c7bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800c6be:	683a      	ldr	r2, [r7, #0]
 800c6c0:	4613      	mov	r3, r2
 800c6c2:	00db      	lsls	r3, r3, #3
 800c6c4:	4413      	add	r3, r2
 800c6c6:	009b      	lsls	r3, r3, #2
 800c6c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	4413      	add	r3, r2
 800c6d0:	3304      	adds	r3, #4
 800c6d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	6a1a      	ldr	r2, [r3, #32]
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	0159      	lsls	r1, r3, #5
 800c6dc:	69bb      	ldr	r3, [r7, #24]
 800c6de:	440b      	add	r3, r1
 800c6e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6e4:	691b      	ldr	r3, [r3, #16]
 800c6e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c6ea:	1ad2      	subs	r2, r2, r3
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d114      	bne.n	800c720 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d109      	bne.n	800c712 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6818      	ldr	r0, [r3, #0]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c708:	461a      	mov	r2, r3
 800c70a:	2101      	movs	r1, #1
 800c70c:	f005 f94c 	bl	80119a8 <USB_EP0_OutStart>
 800c710:	e006      	b.n	800c720 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	68da      	ldr	r2, [r3, #12]
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	695b      	ldr	r3, [r3, #20]
 800c71a:	441a      	add	r2, r3
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	b2db      	uxtb	r3, r3
 800c724:	4619      	mov	r1, r3
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f00a fd7c 	bl	8017224 <HAL_PCD_DataOutStageCallback>
 800c72c:	e046      	b.n	800c7bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	4a26      	ldr	r2, [pc, #152]	@ (800c7cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d124      	bne.n	800c780 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d00a      	beq.n	800c756 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	015a      	lsls	r2, r3, #5
 800c744:	69bb      	ldr	r3, [r7, #24]
 800c746:	4413      	add	r3, r2
 800c748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c74c:	461a      	mov	r2, r3
 800c74e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c752:	6093      	str	r3, [r2, #8]
 800c754:	e032      	b.n	800c7bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	f003 0320 	and.w	r3, r3, #32
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d008      	beq.n	800c772 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	015a      	lsls	r2, r3, #5
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	4413      	add	r3, r2
 800c768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c76c:	461a      	mov	r2, r3
 800c76e:	2320      	movs	r3, #32
 800c770:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	b2db      	uxtb	r3, r3
 800c776:	4619      	mov	r1, r3
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f00a fd53 	bl	8017224 <HAL_PCD_DataOutStageCallback>
 800c77e:	e01d      	b.n	800c7bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d114      	bne.n	800c7b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 800c786:	6879      	ldr	r1, [r7, #4]
 800c788:	683a      	ldr	r2, [r7, #0]
 800c78a:	4613      	mov	r3, r2
 800c78c:	00db      	lsls	r3, r3, #3
 800c78e:	4413      	add	r3, r2
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	440b      	add	r3, r1
 800c794:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d108      	bne.n	800c7b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6818      	ldr	r0, [r3, #0]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	2100      	movs	r1, #0
 800c7ac:	f005 f8fc 	bl	80119a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	b2db      	uxtb	r3, r3
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f00a fd34 	bl	8017224 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c7bc:	2300      	movs	r3, #0
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3720      	adds	r7, #32
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	4f54300a 	.word	0x4f54300a
 800c7cc:	4f54310a 	.word	0x4f54310a

0800c7d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b086      	sub	sp, #24
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	333c      	adds	r3, #60	@ 0x3c
 800c7e8:	3304      	adds	r3, #4
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	015a      	lsls	r2, r3, #5
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7fa:	689b      	ldr	r3, [r3, #8]
 800c7fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	4a15      	ldr	r2, [pc, #84]	@ (800c858 <PCD_EP_OutSetupPacket_int+0x88>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d90e      	bls.n	800c824 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d009      	beq.n	800c824 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	015a      	lsls	r2, r3, #5
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	4413      	add	r3, r2
 800c818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c81c:	461a      	mov	r2, r3
 800c81e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c822:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f00a fceb 	bl	8017200 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	4a0a      	ldr	r2, [pc, #40]	@ (800c858 <PCD_EP_OutSetupPacket_int+0x88>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d90c      	bls.n	800c84c <PCD_EP_OutSetupPacket_int+0x7c>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	799b      	ldrb	r3, [r3, #6]
 800c836:	2b01      	cmp	r3, #1
 800c838:	d108      	bne.n	800c84c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6818      	ldr	r0, [r3, #0]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c844:	461a      	mov	r2, r3
 800c846:	2101      	movs	r1, #1
 800c848:	f005 f8ae 	bl	80119a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c84c:	2300      	movs	r3, #0
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3718      	adds	r7, #24
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	4f54300a 	.word	0x4f54300a

0800c85c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b085      	sub	sp, #20
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	460b      	mov	r3, r1
 800c866:	70fb      	strb	r3, [r7, #3]
 800c868:	4613      	mov	r3, r2
 800c86a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c872:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c874:	78fb      	ldrb	r3, [r7, #3]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d107      	bne.n	800c88a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c87a:	883b      	ldrh	r3, [r7, #0]
 800c87c:	0419      	lsls	r1, r3, #16
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	430a      	orrs	r2, r1
 800c886:	629a      	str	r2, [r3, #40]	@ 0x28
 800c888:	e028      	b.n	800c8dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c890:	0c1b      	lsrs	r3, r3, #16
 800c892:	68ba      	ldr	r2, [r7, #8]
 800c894:	4413      	add	r3, r2
 800c896:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c898:	2300      	movs	r3, #0
 800c89a:	73fb      	strb	r3, [r7, #15]
 800c89c:	e00d      	b.n	800c8ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	7bfb      	ldrb	r3, [r7, #15]
 800c8a4:	3340      	adds	r3, #64	@ 0x40
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	4413      	add	r3, r2
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	0c1b      	lsrs	r3, r3, #16
 800c8ae:	68ba      	ldr	r2, [r7, #8]
 800c8b0:	4413      	add	r3, r2
 800c8b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c8b4:	7bfb      	ldrb	r3, [r7, #15]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	73fb      	strb	r3, [r7, #15]
 800c8ba:	7bfa      	ldrb	r2, [r7, #15]
 800c8bc:	78fb      	ldrb	r3, [r7, #3]
 800c8be:	3b01      	subs	r3, #1
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d3ec      	bcc.n	800c89e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c8c4:	883b      	ldrh	r3, [r7, #0]
 800c8c6:	0418      	lsls	r0, r3, #16
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6819      	ldr	r1, [r3, #0]
 800c8cc:	78fb      	ldrb	r3, [r7, #3]
 800c8ce:	3b01      	subs	r3, #1
 800c8d0:	68ba      	ldr	r2, [r7, #8]
 800c8d2:	4302      	orrs	r2, r0
 800c8d4:	3340      	adds	r3, #64	@ 0x40
 800c8d6:	009b      	lsls	r3, r3, #2
 800c8d8:	440b      	add	r3, r1
 800c8da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c8dc:	2300      	movs	r3, #0
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3714      	adds	r7, #20
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr

0800c8ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c8ea:	b480      	push	{r7}
 800c8ec:	b083      	sub	sp, #12
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
 800c8f2:	460b      	mov	r3, r1
 800c8f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	887a      	ldrh	r2, [r7, #2]
 800c8fc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c8fe:	2300      	movs	r3, #0
}
 800c900:	4618      	mov	r0, r3
 800c902:	370c      	adds	r7, #12
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr

0800c90c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	460b      	mov	r3, r1
 800c916:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c918:	bf00      	nop
 800c91a:	370c      	adds	r7, #12
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b086      	sub	sp, #24
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d101      	bne.n	800c936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c932:	2301      	movs	r3, #1
 800c934:	e267      	b.n	800ce06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f003 0301 	and.w	r3, r3, #1
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d075      	beq.n	800ca2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c942:	4b88      	ldr	r3, [pc, #544]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800c944:	689b      	ldr	r3, [r3, #8]
 800c946:	f003 030c 	and.w	r3, r3, #12
 800c94a:	2b04      	cmp	r3, #4
 800c94c:	d00c      	beq.n	800c968 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c94e:	4b85      	ldr	r3, [pc, #532]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c956:	2b08      	cmp	r3, #8
 800c958:	d112      	bne.n	800c980 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c95a:	4b82      	ldr	r3, [pc, #520]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c962:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c966:	d10b      	bne.n	800c980 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c968:	4b7e      	ldr	r3, [pc, #504]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c970:	2b00      	cmp	r3, #0
 800c972:	d05b      	beq.n	800ca2c <HAL_RCC_OscConfig+0x108>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d157      	bne.n	800ca2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c97c:	2301      	movs	r3, #1
 800c97e:	e242      	b.n	800ce06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c988:	d106      	bne.n	800c998 <HAL_RCC_OscConfig+0x74>
 800c98a:	4b76      	ldr	r3, [pc, #472]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4a75      	ldr	r2, [pc, #468]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800c990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c994:	6013      	str	r3, [r2, #0]
 800c996:	e01d      	b.n	800c9d4 <HAL_RCC_OscConfig+0xb0>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c9a0:	d10c      	bne.n	800c9bc <HAL_RCC_OscConfig+0x98>
 800c9a2:	4b70      	ldr	r3, [pc, #448]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4a6f      	ldr	r2, [pc, #444]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800c9a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c9ac:	6013      	str	r3, [r2, #0]
 800c9ae:	4b6d      	ldr	r3, [pc, #436]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4a6c      	ldr	r2, [pc, #432]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800c9b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c9b8:	6013      	str	r3, [r2, #0]
 800c9ba:	e00b      	b.n	800c9d4 <HAL_RCC_OscConfig+0xb0>
 800c9bc:	4b69      	ldr	r3, [pc, #420]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a68      	ldr	r2, [pc, #416]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800c9c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c9c6:	6013      	str	r3, [r2, #0]
 800c9c8:	4b66      	ldr	r3, [pc, #408]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a65      	ldr	r2, [pc, #404]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800c9ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c9d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d013      	beq.n	800ca04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c9dc:	f7fd fcfa 	bl	800a3d4 <HAL_GetTick>
 800c9e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c9e2:	e008      	b.n	800c9f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c9e4:	f7fd fcf6 	bl	800a3d4 <HAL_GetTick>
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	1ad3      	subs	r3, r2, r3
 800c9ee:	2b64      	cmp	r3, #100	@ 0x64
 800c9f0:	d901      	bls.n	800c9f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c9f2:	2303      	movs	r3, #3
 800c9f4:	e207      	b.n	800ce06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c9f6:	4b5b      	ldr	r3, [pc, #364]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d0f0      	beq.n	800c9e4 <HAL_RCC_OscConfig+0xc0>
 800ca02:	e014      	b.n	800ca2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca04:	f7fd fce6 	bl	800a3d4 <HAL_GetTick>
 800ca08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca0a:	e008      	b.n	800ca1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca0c:	f7fd fce2 	bl	800a3d4 <HAL_GetTick>
 800ca10:	4602      	mov	r2, r0
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	1ad3      	subs	r3, r2, r3
 800ca16:	2b64      	cmp	r3, #100	@ 0x64
 800ca18:	d901      	bls.n	800ca1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ca1a:	2303      	movs	r3, #3
 800ca1c:	e1f3      	b.n	800ce06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca1e:	4b51      	ldr	r3, [pc, #324]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d1f0      	bne.n	800ca0c <HAL_RCC_OscConfig+0xe8>
 800ca2a:	e000      	b.n	800ca2e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f003 0302 	and.w	r3, r3, #2
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d063      	beq.n	800cb02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ca3a:	4b4a      	ldr	r3, [pc, #296]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	f003 030c 	and.w	r3, r3, #12
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d00b      	beq.n	800ca5e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ca46:	4b47      	ldr	r3, [pc, #284]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ca4e:	2b08      	cmp	r3, #8
 800ca50:	d11c      	bne.n	800ca8c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ca52:	4b44      	ldr	r3, [pc, #272]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d116      	bne.n	800ca8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ca5e:	4b41      	ldr	r3, [pc, #260]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f003 0302 	and.w	r3, r3, #2
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d005      	beq.n	800ca76 <HAL_RCC_OscConfig+0x152>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	68db      	ldr	r3, [r3, #12]
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	d001      	beq.n	800ca76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ca72:	2301      	movs	r3, #1
 800ca74:	e1c7      	b.n	800ce06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca76:	4b3b      	ldr	r3, [pc, #236]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	691b      	ldr	r3, [r3, #16]
 800ca82:	00db      	lsls	r3, r3, #3
 800ca84:	4937      	ldr	r1, [pc, #220]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800ca86:	4313      	orrs	r3, r2
 800ca88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ca8a:	e03a      	b.n	800cb02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d020      	beq.n	800cad6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ca94:	4b34      	ldr	r3, [pc, #208]	@ (800cb68 <HAL_RCC_OscConfig+0x244>)
 800ca96:	2201      	movs	r2, #1
 800ca98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca9a:	f7fd fc9b 	bl	800a3d4 <HAL_GetTick>
 800ca9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800caa0:	e008      	b.n	800cab4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800caa2:	f7fd fc97 	bl	800a3d4 <HAL_GetTick>
 800caa6:	4602      	mov	r2, r0
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	1ad3      	subs	r3, r2, r3
 800caac:	2b02      	cmp	r3, #2
 800caae:	d901      	bls.n	800cab4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800cab0:	2303      	movs	r3, #3
 800cab2:	e1a8      	b.n	800ce06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cab4:	4b2b      	ldr	r3, [pc, #172]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f003 0302 	and.w	r3, r3, #2
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d0f0      	beq.n	800caa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cac0:	4b28      	ldr	r3, [pc, #160]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	691b      	ldr	r3, [r3, #16]
 800cacc:	00db      	lsls	r3, r3, #3
 800cace:	4925      	ldr	r1, [pc, #148]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800cad0:	4313      	orrs	r3, r2
 800cad2:	600b      	str	r3, [r1, #0]
 800cad4:	e015      	b.n	800cb02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cad6:	4b24      	ldr	r3, [pc, #144]	@ (800cb68 <HAL_RCC_OscConfig+0x244>)
 800cad8:	2200      	movs	r2, #0
 800cada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cadc:	f7fd fc7a 	bl	800a3d4 <HAL_GetTick>
 800cae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cae2:	e008      	b.n	800caf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cae4:	f7fd fc76 	bl	800a3d4 <HAL_GetTick>
 800cae8:	4602      	mov	r2, r0
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	1ad3      	subs	r3, r2, r3
 800caee:	2b02      	cmp	r3, #2
 800caf0:	d901      	bls.n	800caf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800caf2:	2303      	movs	r3, #3
 800caf4:	e187      	b.n	800ce06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800caf6:	4b1b      	ldr	r3, [pc, #108]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f003 0302 	and.w	r3, r3, #2
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d1f0      	bne.n	800cae4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f003 0308 	and.w	r3, r3, #8
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d036      	beq.n	800cb7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	695b      	ldr	r3, [r3, #20]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d016      	beq.n	800cb44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cb16:	4b15      	ldr	r3, [pc, #84]	@ (800cb6c <HAL_RCC_OscConfig+0x248>)
 800cb18:	2201      	movs	r2, #1
 800cb1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb1c:	f7fd fc5a 	bl	800a3d4 <HAL_GetTick>
 800cb20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cb22:	e008      	b.n	800cb36 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb24:	f7fd fc56 	bl	800a3d4 <HAL_GetTick>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	1ad3      	subs	r3, r2, r3
 800cb2e:	2b02      	cmp	r3, #2
 800cb30:	d901      	bls.n	800cb36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800cb32:	2303      	movs	r3, #3
 800cb34:	e167      	b.n	800ce06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cb36:	4b0b      	ldr	r3, [pc, #44]	@ (800cb64 <HAL_RCC_OscConfig+0x240>)
 800cb38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb3a:	f003 0302 	and.w	r3, r3, #2
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d0f0      	beq.n	800cb24 <HAL_RCC_OscConfig+0x200>
 800cb42:	e01b      	b.n	800cb7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cb44:	4b09      	ldr	r3, [pc, #36]	@ (800cb6c <HAL_RCC_OscConfig+0x248>)
 800cb46:	2200      	movs	r2, #0
 800cb48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cb4a:	f7fd fc43 	bl	800a3d4 <HAL_GetTick>
 800cb4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cb50:	e00e      	b.n	800cb70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb52:	f7fd fc3f 	bl	800a3d4 <HAL_GetTick>
 800cb56:	4602      	mov	r2, r0
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	1ad3      	subs	r3, r2, r3
 800cb5c:	2b02      	cmp	r3, #2
 800cb5e:	d907      	bls.n	800cb70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800cb60:	2303      	movs	r3, #3
 800cb62:	e150      	b.n	800ce06 <HAL_RCC_OscConfig+0x4e2>
 800cb64:	40023800 	.word	0x40023800
 800cb68:	42470000 	.word	0x42470000
 800cb6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cb70:	4b88      	ldr	r3, [pc, #544]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800cb72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb74:	f003 0302 	and.w	r3, r3, #2
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d1ea      	bne.n	800cb52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f003 0304 	and.w	r3, r3, #4
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	f000 8097 	beq.w	800ccb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cb8e:	4b81      	ldr	r3, [pc, #516]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800cb90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d10f      	bne.n	800cbba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	60bb      	str	r3, [r7, #8]
 800cb9e:	4b7d      	ldr	r3, [pc, #500]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800cba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cba2:	4a7c      	ldr	r2, [pc, #496]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800cba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cba8:	6413      	str	r3, [r2, #64]	@ 0x40
 800cbaa:	4b7a      	ldr	r3, [pc, #488]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800cbac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cbb2:	60bb      	str	r3, [r7, #8]
 800cbb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cbba:	4b77      	ldr	r3, [pc, #476]	@ (800cd98 <HAL_RCC_OscConfig+0x474>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d118      	bne.n	800cbf8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cbc6:	4b74      	ldr	r3, [pc, #464]	@ (800cd98 <HAL_RCC_OscConfig+0x474>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	4a73      	ldr	r2, [pc, #460]	@ (800cd98 <HAL_RCC_OscConfig+0x474>)
 800cbcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cbd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cbd2:	f7fd fbff 	bl	800a3d4 <HAL_GetTick>
 800cbd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cbd8:	e008      	b.n	800cbec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cbda:	f7fd fbfb 	bl	800a3d4 <HAL_GetTick>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	1ad3      	subs	r3, r2, r3
 800cbe4:	2b02      	cmp	r3, #2
 800cbe6:	d901      	bls.n	800cbec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800cbe8:	2303      	movs	r3, #3
 800cbea:	e10c      	b.n	800ce06 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cbec:	4b6a      	ldr	r3, [pc, #424]	@ (800cd98 <HAL_RCC_OscConfig+0x474>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d0f0      	beq.n	800cbda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	2b01      	cmp	r3, #1
 800cbfe:	d106      	bne.n	800cc0e <HAL_RCC_OscConfig+0x2ea>
 800cc00:	4b64      	ldr	r3, [pc, #400]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800cc02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc04:	4a63      	ldr	r2, [pc, #396]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800cc06:	f043 0301 	orr.w	r3, r3, #1
 800cc0a:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc0c:	e01c      	b.n	800cc48 <HAL_RCC_OscConfig+0x324>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	689b      	ldr	r3, [r3, #8]
 800cc12:	2b05      	cmp	r3, #5
 800cc14:	d10c      	bne.n	800cc30 <HAL_RCC_OscConfig+0x30c>
 800cc16:	4b5f      	ldr	r3, [pc, #380]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800cc18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc1a:	4a5e      	ldr	r2, [pc, #376]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800cc1c:	f043 0304 	orr.w	r3, r3, #4
 800cc20:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc22:	4b5c      	ldr	r3, [pc, #368]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800cc24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc26:	4a5b      	ldr	r2, [pc, #364]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800cc28:	f043 0301 	orr.w	r3, r3, #1
 800cc2c:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc2e:	e00b      	b.n	800cc48 <HAL_RCC_OscConfig+0x324>
 800cc30:	4b58      	ldr	r3, [pc, #352]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800cc32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc34:	4a57      	ldr	r2, [pc, #348]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800cc36:	f023 0301 	bic.w	r3, r3, #1
 800cc3a:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc3c:	4b55      	ldr	r3, [pc, #340]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800cc3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc40:	4a54      	ldr	r2, [pc, #336]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800cc42:	f023 0304 	bic.w	r3, r3, #4
 800cc46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	689b      	ldr	r3, [r3, #8]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d015      	beq.n	800cc7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc50:	f7fd fbc0 	bl	800a3d4 <HAL_GetTick>
 800cc54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc56:	e00a      	b.n	800cc6e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc58:	f7fd fbbc 	bl	800a3d4 <HAL_GetTick>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	1ad3      	subs	r3, r2, r3
 800cc62:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d901      	bls.n	800cc6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800cc6a:	2303      	movs	r3, #3
 800cc6c:	e0cb      	b.n	800ce06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc6e:	4b49      	ldr	r3, [pc, #292]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800cc70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc72:	f003 0302 	and.w	r3, r3, #2
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d0ee      	beq.n	800cc58 <HAL_RCC_OscConfig+0x334>
 800cc7a:	e014      	b.n	800cca6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cc7c:	f7fd fbaa 	bl	800a3d4 <HAL_GetTick>
 800cc80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cc82:	e00a      	b.n	800cc9a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc84:	f7fd fba6 	bl	800a3d4 <HAL_GetTick>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	1ad3      	subs	r3, r2, r3
 800cc8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d901      	bls.n	800cc9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800cc96:	2303      	movs	r3, #3
 800cc98:	e0b5      	b.n	800ce06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cc9a:	4b3e      	ldr	r3, [pc, #248]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800cc9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc9e:	f003 0302 	and.w	r3, r3, #2
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d1ee      	bne.n	800cc84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cca6:	7dfb      	ldrb	r3, [r7, #23]
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d105      	bne.n	800ccb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ccac:	4b39      	ldr	r3, [pc, #228]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800ccae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccb0:	4a38      	ldr	r2, [pc, #224]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800ccb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ccb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	699b      	ldr	r3, [r3, #24]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	f000 80a1 	beq.w	800ce04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ccc2:	4b34      	ldr	r3, [pc, #208]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	f003 030c 	and.w	r3, r3, #12
 800ccca:	2b08      	cmp	r3, #8
 800cccc:	d05c      	beq.n	800cd88 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	699b      	ldr	r3, [r3, #24]
 800ccd2:	2b02      	cmp	r3, #2
 800ccd4:	d141      	bne.n	800cd5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ccd6:	4b31      	ldr	r3, [pc, #196]	@ (800cd9c <HAL_RCC_OscConfig+0x478>)
 800ccd8:	2200      	movs	r2, #0
 800ccda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ccdc:	f7fd fb7a 	bl	800a3d4 <HAL_GetTick>
 800cce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cce2:	e008      	b.n	800ccf6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cce4:	f7fd fb76 	bl	800a3d4 <HAL_GetTick>
 800cce8:	4602      	mov	r2, r0
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	1ad3      	subs	r3, r2, r3
 800ccee:	2b02      	cmp	r3, #2
 800ccf0:	d901      	bls.n	800ccf6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ccf2:	2303      	movs	r3, #3
 800ccf4:	e087      	b.n	800ce06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ccf6:	4b27      	ldr	r3, [pc, #156]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d1f0      	bne.n	800cce4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	69da      	ldr	r2, [r3, #28]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6a1b      	ldr	r3, [r3, #32]
 800cd0a:	431a      	orrs	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd10:	019b      	lsls	r3, r3, #6
 800cd12:	431a      	orrs	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd18:	085b      	lsrs	r3, r3, #1
 800cd1a:	3b01      	subs	r3, #1
 800cd1c:	041b      	lsls	r3, r3, #16
 800cd1e:	431a      	orrs	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd24:	061b      	lsls	r3, r3, #24
 800cd26:	491b      	ldr	r1, [pc, #108]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cd2c:	4b1b      	ldr	r3, [pc, #108]	@ (800cd9c <HAL_RCC_OscConfig+0x478>)
 800cd2e:	2201      	movs	r2, #1
 800cd30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cd32:	f7fd fb4f 	bl	800a3d4 <HAL_GetTick>
 800cd36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cd38:	e008      	b.n	800cd4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd3a:	f7fd fb4b 	bl	800a3d4 <HAL_GetTick>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	1ad3      	subs	r3, r2, r3
 800cd44:	2b02      	cmp	r3, #2
 800cd46:	d901      	bls.n	800cd4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800cd48:	2303      	movs	r3, #3
 800cd4a:	e05c      	b.n	800ce06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cd4c:	4b11      	ldr	r3, [pc, #68]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d0f0      	beq.n	800cd3a <HAL_RCC_OscConfig+0x416>
 800cd58:	e054      	b.n	800ce04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd5a:	4b10      	ldr	r3, [pc, #64]	@ (800cd9c <HAL_RCC_OscConfig+0x478>)
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cd60:	f7fd fb38 	bl	800a3d4 <HAL_GetTick>
 800cd64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd66:	e008      	b.n	800cd7a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd68:	f7fd fb34 	bl	800a3d4 <HAL_GetTick>
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	1ad3      	subs	r3, r2, r3
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	d901      	bls.n	800cd7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800cd76:	2303      	movs	r3, #3
 800cd78:	e045      	b.n	800ce06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd7a:	4b06      	ldr	r3, [pc, #24]	@ (800cd94 <HAL_RCC_OscConfig+0x470>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d1f0      	bne.n	800cd68 <HAL_RCC_OscConfig+0x444>
 800cd86:	e03d      	b.n	800ce04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	699b      	ldr	r3, [r3, #24]
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d107      	bne.n	800cda0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800cd90:	2301      	movs	r3, #1
 800cd92:	e038      	b.n	800ce06 <HAL_RCC_OscConfig+0x4e2>
 800cd94:	40023800 	.word	0x40023800
 800cd98:	40007000 	.word	0x40007000
 800cd9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800cda0:	4b1b      	ldr	r3, [pc, #108]	@ (800ce10 <HAL_RCC_OscConfig+0x4ec>)
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	699b      	ldr	r3, [r3, #24]
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	d028      	beq.n	800ce00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d121      	bne.n	800ce00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d11a      	bne.n	800ce00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cdca:	68fa      	ldr	r2, [r7, #12]
 800cdcc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800cdd0:	4013      	ands	r3, r2
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800cdd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d111      	bne.n	800ce00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cde6:	085b      	lsrs	r3, r3, #1
 800cde8:	3b01      	subs	r3, #1
 800cdea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d107      	bne.n	800ce00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d001      	beq.n	800ce04 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ce00:	2301      	movs	r3, #1
 800ce02:	e000      	b.n	800ce06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ce04:	2300      	movs	r3, #0
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3718      	adds	r7, #24
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	40023800 	.word	0x40023800

0800ce14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b084      	sub	sp, #16
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d101      	bne.n	800ce28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ce24:	2301      	movs	r3, #1
 800ce26:	e0cc      	b.n	800cfc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ce28:	4b68      	ldr	r3, [pc, #416]	@ (800cfcc <HAL_RCC_ClockConfig+0x1b8>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f003 0307 	and.w	r3, r3, #7
 800ce30:	683a      	ldr	r2, [r7, #0]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d90c      	bls.n	800ce50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ce36:	4b65      	ldr	r3, [pc, #404]	@ (800cfcc <HAL_RCC_ClockConfig+0x1b8>)
 800ce38:	683a      	ldr	r2, [r7, #0]
 800ce3a:	b2d2      	uxtb	r2, r2
 800ce3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ce3e:	4b63      	ldr	r3, [pc, #396]	@ (800cfcc <HAL_RCC_ClockConfig+0x1b8>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f003 0307 	and.w	r3, r3, #7
 800ce46:	683a      	ldr	r2, [r7, #0]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d001      	beq.n	800ce50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	e0b8      	b.n	800cfc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f003 0302 	and.w	r3, r3, #2
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d020      	beq.n	800ce9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f003 0304 	and.w	r3, r3, #4
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d005      	beq.n	800ce74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ce68:	4b59      	ldr	r3, [pc, #356]	@ (800cfd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	4a58      	ldr	r2, [pc, #352]	@ (800cfd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ce6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ce72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f003 0308 	and.w	r3, r3, #8
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d005      	beq.n	800ce8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ce80:	4b53      	ldr	r3, [pc, #332]	@ (800cfd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ce82:	689b      	ldr	r3, [r3, #8]
 800ce84:	4a52      	ldr	r2, [pc, #328]	@ (800cfd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ce86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ce8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ce8c:	4b50      	ldr	r3, [pc, #320]	@ (800cfd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ce8e:	689b      	ldr	r3, [r3, #8]
 800ce90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	689b      	ldr	r3, [r3, #8]
 800ce98:	494d      	ldr	r1, [pc, #308]	@ (800cfd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f003 0301 	and.w	r3, r3, #1
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d044      	beq.n	800cf34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d107      	bne.n	800cec2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ceb2:	4b47      	ldr	r3, [pc, #284]	@ (800cfd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d119      	bne.n	800cef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cebe:	2301      	movs	r3, #1
 800cec0:	e07f      	b.n	800cfc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	685b      	ldr	r3, [r3, #4]
 800cec6:	2b02      	cmp	r3, #2
 800cec8:	d003      	beq.n	800ced2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cece:	2b03      	cmp	r3, #3
 800ced0:	d107      	bne.n	800cee2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ced2:	4b3f      	ldr	r3, [pc, #252]	@ (800cfd0 <HAL_RCC_ClockConfig+0x1bc>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d109      	bne.n	800cef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cede:	2301      	movs	r3, #1
 800cee0:	e06f      	b.n	800cfc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cee2:	4b3b      	ldr	r3, [pc, #236]	@ (800cfd0 <HAL_RCC_ClockConfig+0x1bc>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f003 0302 	and.w	r3, r3, #2
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d101      	bne.n	800cef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ceee:	2301      	movs	r3, #1
 800cef0:	e067      	b.n	800cfc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cef2:	4b37      	ldr	r3, [pc, #220]	@ (800cfd0 <HAL_RCC_ClockConfig+0x1bc>)
 800cef4:	689b      	ldr	r3, [r3, #8]
 800cef6:	f023 0203 	bic.w	r2, r3, #3
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	4934      	ldr	r1, [pc, #208]	@ (800cfd0 <HAL_RCC_ClockConfig+0x1bc>)
 800cf00:	4313      	orrs	r3, r2
 800cf02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cf04:	f7fd fa66 	bl	800a3d4 <HAL_GetTick>
 800cf08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cf0a:	e00a      	b.n	800cf22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cf0c:	f7fd fa62 	bl	800a3d4 <HAL_GetTick>
 800cf10:	4602      	mov	r2, r0
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	1ad3      	subs	r3, r2, r3
 800cf16:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d901      	bls.n	800cf22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cf1e:	2303      	movs	r3, #3
 800cf20:	e04f      	b.n	800cfc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cf22:	4b2b      	ldr	r3, [pc, #172]	@ (800cfd0 <HAL_RCC_ClockConfig+0x1bc>)
 800cf24:	689b      	ldr	r3, [r3, #8]
 800cf26:	f003 020c 	and.w	r2, r3, #12
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	009b      	lsls	r3, r3, #2
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d1eb      	bne.n	800cf0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cf34:	4b25      	ldr	r3, [pc, #148]	@ (800cfcc <HAL_RCC_ClockConfig+0x1b8>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f003 0307 	and.w	r3, r3, #7
 800cf3c:	683a      	ldr	r2, [r7, #0]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d20c      	bcs.n	800cf5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf42:	4b22      	ldr	r3, [pc, #136]	@ (800cfcc <HAL_RCC_ClockConfig+0x1b8>)
 800cf44:	683a      	ldr	r2, [r7, #0]
 800cf46:	b2d2      	uxtb	r2, r2
 800cf48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf4a:	4b20      	ldr	r3, [pc, #128]	@ (800cfcc <HAL_RCC_ClockConfig+0x1b8>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f003 0307 	and.w	r3, r3, #7
 800cf52:	683a      	ldr	r2, [r7, #0]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d001      	beq.n	800cf5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	e032      	b.n	800cfc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f003 0304 	and.w	r3, r3, #4
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d008      	beq.n	800cf7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cf68:	4b19      	ldr	r3, [pc, #100]	@ (800cfd0 <HAL_RCC_ClockConfig+0x1bc>)
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	4916      	ldr	r1, [pc, #88]	@ (800cfd0 <HAL_RCC_ClockConfig+0x1bc>)
 800cf76:	4313      	orrs	r3, r2
 800cf78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f003 0308 	and.w	r3, r3, #8
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d009      	beq.n	800cf9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cf86:	4b12      	ldr	r3, [pc, #72]	@ (800cfd0 <HAL_RCC_ClockConfig+0x1bc>)
 800cf88:	689b      	ldr	r3, [r3, #8]
 800cf8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	691b      	ldr	r3, [r3, #16]
 800cf92:	00db      	lsls	r3, r3, #3
 800cf94:	490e      	ldr	r1, [pc, #56]	@ (800cfd0 <HAL_RCC_ClockConfig+0x1bc>)
 800cf96:	4313      	orrs	r3, r2
 800cf98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cf9a:	f000 f821 	bl	800cfe0 <HAL_RCC_GetSysClockFreq>
 800cf9e:	4602      	mov	r2, r0
 800cfa0:	4b0b      	ldr	r3, [pc, #44]	@ (800cfd0 <HAL_RCC_ClockConfig+0x1bc>)
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	091b      	lsrs	r3, r3, #4
 800cfa6:	f003 030f 	and.w	r3, r3, #15
 800cfaa:	490a      	ldr	r1, [pc, #40]	@ (800cfd4 <HAL_RCC_ClockConfig+0x1c0>)
 800cfac:	5ccb      	ldrb	r3, [r1, r3]
 800cfae:	fa22 f303 	lsr.w	r3, r2, r3
 800cfb2:	4a09      	ldr	r2, [pc, #36]	@ (800cfd8 <HAL_RCC_ClockConfig+0x1c4>)
 800cfb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800cfb6:	4b09      	ldr	r3, [pc, #36]	@ (800cfdc <HAL_RCC_ClockConfig+0x1c8>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7fc fa3e 	bl	800943c <HAL_InitTick>

  return HAL_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	40023c00 	.word	0x40023c00
 800cfd0:	40023800 	.word	0x40023800
 800cfd4:	08020260 	.word	0x08020260
 800cfd8:	20000054 	.word	0x20000054
 800cfdc:	20000058 	.word	0x20000058

0800cfe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cfe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cfe4:	b094      	sub	sp, #80	@ 0x50
 800cfe6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800cfec:	2300      	movs	r3, #0
 800cfee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800cff0:	2300      	movs	r3, #0
 800cff2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800cff4:	2300      	movs	r3, #0
 800cff6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cff8:	4b79      	ldr	r3, [pc, #484]	@ (800d1e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800cffa:	689b      	ldr	r3, [r3, #8]
 800cffc:	f003 030c 	and.w	r3, r3, #12
 800d000:	2b08      	cmp	r3, #8
 800d002:	d00d      	beq.n	800d020 <HAL_RCC_GetSysClockFreq+0x40>
 800d004:	2b08      	cmp	r3, #8
 800d006:	f200 80e1 	bhi.w	800d1cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d002      	beq.n	800d014 <HAL_RCC_GetSysClockFreq+0x34>
 800d00e:	2b04      	cmp	r3, #4
 800d010:	d003      	beq.n	800d01a <HAL_RCC_GetSysClockFreq+0x3a>
 800d012:	e0db      	b.n	800d1cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d014:	4b73      	ldr	r3, [pc, #460]	@ (800d1e4 <HAL_RCC_GetSysClockFreq+0x204>)
 800d016:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800d018:	e0db      	b.n	800d1d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d01a:	4b73      	ldr	r3, [pc, #460]	@ (800d1e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800d01c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800d01e:	e0d8      	b.n	800d1d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d020:	4b6f      	ldr	r3, [pc, #444]	@ (800d1e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d028:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d02a:	4b6d      	ldr	r3, [pc, #436]	@ (800d1e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d032:	2b00      	cmp	r3, #0
 800d034:	d063      	beq.n	800d0fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d036:	4b6a      	ldr	r3, [pc, #424]	@ (800d1e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	099b      	lsrs	r3, r3, #6
 800d03c:	2200      	movs	r2, #0
 800d03e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d040:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800d042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d048:	633b      	str	r3, [r7, #48]	@ 0x30
 800d04a:	2300      	movs	r3, #0
 800d04c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d04e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800d052:	4622      	mov	r2, r4
 800d054:	462b      	mov	r3, r5
 800d056:	f04f 0000 	mov.w	r0, #0
 800d05a:	f04f 0100 	mov.w	r1, #0
 800d05e:	0159      	lsls	r1, r3, #5
 800d060:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d064:	0150      	lsls	r0, r2, #5
 800d066:	4602      	mov	r2, r0
 800d068:	460b      	mov	r3, r1
 800d06a:	4621      	mov	r1, r4
 800d06c:	1a51      	subs	r1, r2, r1
 800d06e:	6139      	str	r1, [r7, #16]
 800d070:	4629      	mov	r1, r5
 800d072:	eb63 0301 	sbc.w	r3, r3, r1
 800d076:	617b      	str	r3, [r7, #20]
 800d078:	f04f 0200 	mov.w	r2, #0
 800d07c:	f04f 0300 	mov.w	r3, #0
 800d080:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d084:	4659      	mov	r1, fp
 800d086:	018b      	lsls	r3, r1, #6
 800d088:	4651      	mov	r1, sl
 800d08a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d08e:	4651      	mov	r1, sl
 800d090:	018a      	lsls	r2, r1, #6
 800d092:	4651      	mov	r1, sl
 800d094:	ebb2 0801 	subs.w	r8, r2, r1
 800d098:	4659      	mov	r1, fp
 800d09a:	eb63 0901 	sbc.w	r9, r3, r1
 800d09e:	f04f 0200 	mov.w	r2, #0
 800d0a2:	f04f 0300 	mov.w	r3, #0
 800d0a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d0aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d0ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d0b2:	4690      	mov	r8, r2
 800d0b4:	4699      	mov	r9, r3
 800d0b6:	4623      	mov	r3, r4
 800d0b8:	eb18 0303 	adds.w	r3, r8, r3
 800d0bc:	60bb      	str	r3, [r7, #8]
 800d0be:	462b      	mov	r3, r5
 800d0c0:	eb49 0303 	adc.w	r3, r9, r3
 800d0c4:	60fb      	str	r3, [r7, #12]
 800d0c6:	f04f 0200 	mov.w	r2, #0
 800d0ca:	f04f 0300 	mov.w	r3, #0
 800d0ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d0d2:	4629      	mov	r1, r5
 800d0d4:	024b      	lsls	r3, r1, #9
 800d0d6:	4621      	mov	r1, r4
 800d0d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800d0dc:	4621      	mov	r1, r4
 800d0de:	024a      	lsls	r2, r1, #9
 800d0e0:	4610      	mov	r0, r2
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d0ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d0ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d0f0:	f7f3 fdca 	bl	8000c88 <__aeabi_uldivmod>
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	460b      	mov	r3, r1
 800d0f8:	4613      	mov	r3, r2
 800d0fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d0fc:	e058      	b.n	800d1b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d0fe:	4b38      	ldr	r3, [pc, #224]	@ (800d1e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	099b      	lsrs	r3, r3, #6
 800d104:	2200      	movs	r2, #0
 800d106:	4618      	mov	r0, r3
 800d108:	4611      	mov	r1, r2
 800d10a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800d10e:	623b      	str	r3, [r7, #32]
 800d110:	2300      	movs	r3, #0
 800d112:	627b      	str	r3, [r7, #36]	@ 0x24
 800d114:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d118:	4642      	mov	r2, r8
 800d11a:	464b      	mov	r3, r9
 800d11c:	f04f 0000 	mov.w	r0, #0
 800d120:	f04f 0100 	mov.w	r1, #0
 800d124:	0159      	lsls	r1, r3, #5
 800d126:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d12a:	0150      	lsls	r0, r2, #5
 800d12c:	4602      	mov	r2, r0
 800d12e:	460b      	mov	r3, r1
 800d130:	4641      	mov	r1, r8
 800d132:	ebb2 0a01 	subs.w	sl, r2, r1
 800d136:	4649      	mov	r1, r9
 800d138:	eb63 0b01 	sbc.w	fp, r3, r1
 800d13c:	f04f 0200 	mov.w	r2, #0
 800d140:	f04f 0300 	mov.w	r3, #0
 800d144:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800d148:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800d14c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800d150:	ebb2 040a 	subs.w	r4, r2, sl
 800d154:	eb63 050b 	sbc.w	r5, r3, fp
 800d158:	f04f 0200 	mov.w	r2, #0
 800d15c:	f04f 0300 	mov.w	r3, #0
 800d160:	00eb      	lsls	r3, r5, #3
 800d162:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d166:	00e2      	lsls	r2, r4, #3
 800d168:	4614      	mov	r4, r2
 800d16a:	461d      	mov	r5, r3
 800d16c:	4643      	mov	r3, r8
 800d16e:	18e3      	adds	r3, r4, r3
 800d170:	603b      	str	r3, [r7, #0]
 800d172:	464b      	mov	r3, r9
 800d174:	eb45 0303 	adc.w	r3, r5, r3
 800d178:	607b      	str	r3, [r7, #4]
 800d17a:	f04f 0200 	mov.w	r2, #0
 800d17e:	f04f 0300 	mov.w	r3, #0
 800d182:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d186:	4629      	mov	r1, r5
 800d188:	028b      	lsls	r3, r1, #10
 800d18a:	4621      	mov	r1, r4
 800d18c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d190:	4621      	mov	r1, r4
 800d192:	028a      	lsls	r2, r1, #10
 800d194:	4610      	mov	r0, r2
 800d196:	4619      	mov	r1, r3
 800d198:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d19a:	2200      	movs	r2, #0
 800d19c:	61bb      	str	r3, [r7, #24]
 800d19e:	61fa      	str	r2, [r7, #28]
 800d1a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d1a4:	f7f3 fd70 	bl	8000c88 <__aeabi_uldivmod>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800d1b0:	4b0b      	ldr	r3, [pc, #44]	@ (800d1e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	0c1b      	lsrs	r3, r3, #16
 800d1b6:	f003 0303 	and.w	r3, r3, #3
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	005b      	lsls	r3, r3, #1
 800d1be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800d1c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d1c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800d1ca:	e002      	b.n	800d1d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d1cc:	4b05      	ldr	r3, [pc, #20]	@ (800d1e4 <HAL_RCC_GetSysClockFreq+0x204>)
 800d1ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800d1d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d1d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3750      	adds	r7, #80	@ 0x50
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d1de:	bf00      	nop
 800d1e0:	40023800 	.word	0x40023800
 800d1e4:	00f42400 	.word	0x00f42400
 800d1e8:	007a1200 	.word	0x007a1200

0800d1ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d1f0:	4b03      	ldr	r3, [pc, #12]	@ (800d200 <HAL_RCC_GetHCLKFreq+0x14>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr
 800d1fe:	bf00      	nop
 800d200:	20000054 	.word	0x20000054

0800d204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d208:	f7ff fff0 	bl	800d1ec <HAL_RCC_GetHCLKFreq>
 800d20c:	4602      	mov	r2, r0
 800d20e:	4b05      	ldr	r3, [pc, #20]	@ (800d224 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d210:	689b      	ldr	r3, [r3, #8]
 800d212:	0a9b      	lsrs	r3, r3, #10
 800d214:	f003 0307 	and.w	r3, r3, #7
 800d218:	4903      	ldr	r1, [pc, #12]	@ (800d228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d21a:	5ccb      	ldrb	r3, [r1, r3]
 800d21c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d220:	4618      	mov	r0, r3
 800d222:	bd80      	pop	{r7, pc}
 800d224:	40023800 	.word	0x40023800
 800d228:	08020270 	.word	0x08020270

0800d22c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d230:	f7ff ffdc 	bl	800d1ec <HAL_RCC_GetHCLKFreq>
 800d234:	4602      	mov	r2, r0
 800d236:	4b05      	ldr	r3, [pc, #20]	@ (800d24c <HAL_RCC_GetPCLK2Freq+0x20>)
 800d238:	689b      	ldr	r3, [r3, #8]
 800d23a:	0b5b      	lsrs	r3, r3, #13
 800d23c:	f003 0307 	and.w	r3, r3, #7
 800d240:	4903      	ldr	r1, [pc, #12]	@ (800d250 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d242:	5ccb      	ldrb	r3, [r1, r3]
 800d244:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d248:	4618      	mov	r0, r3
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	40023800 	.word	0x40023800
 800d250:	08020270 	.word	0x08020270

0800d254 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d254:	b480      	push	{r7}
 800d256:	b083      	sub	sp, #12
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	220f      	movs	r2, #15
 800d262:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d264:	4b12      	ldr	r3, [pc, #72]	@ (800d2b0 <HAL_RCC_GetClockConfig+0x5c>)
 800d266:	689b      	ldr	r3, [r3, #8]
 800d268:	f003 0203 	and.w	r2, r3, #3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d270:	4b0f      	ldr	r3, [pc, #60]	@ (800d2b0 <HAL_RCC_GetClockConfig+0x5c>)
 800d272:	689b      	ldr	r3, [r3, #8]
 800d274:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d27c:	4b0c      	ldr	r3, [pc, #48]	@ (800d2b0 <HAL_RCC_GetClockConfig+0x5c>)
 800d27e:	689b      	ldr	r3, [r3, #8]
 800d280:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800d288:	4b09      	ldr	r3, [pc, #36]	@ (800d2b0 <HAL_RCC_GetClockConfig+0x5c>)
 800d28a:	689b      	ldr	r3, [r3, #8]
 800d28c:	08db      	lsrs	r3, r3, #3
 800d28e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d296:	4b07      	ldr	r3, [pc, #28]	@ (800d2b4 <HAL_RCC_GetClockConfig+0x60>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f003 0207 	and.w	r2, r3, #7
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	601a      	str	r2, [r3, #0]
}
 800d2a2:	bf00      	nop
 800d2a4:	370c      	adds	r7, #12
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr
 800d2ae:	bf00      	nop
 800d2b0:	40023800 	.word	0x40023800
 800d2b4:	40023c00 	.word	0x40023c00

0800d2b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d101      	bne.n	800d2ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	e07b      	b.n	800d3c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d108      	bne.n	800d2e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d2da:	d009      	beq.n	800d2f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	61da      	str	r2, [r3, #28]
 800d2e2:	e005      	b.n	800d2f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d2fc:	b2db      	uxtb	r3, r3
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d106      	bne.n	800d310 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2200      	movs	r2, #0
 800d306:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f7fc f822 	bl	8009354 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2202      	movs	r2, #2
 800d314:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	681a      	ldr	r2, [r3, #0]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d326:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d338:	431a      	orrs	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d342:	431a      	orrs	r2, r3
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	691b      	ldr	r3, [r3, #16]
 800d348:	f003 0302 	and.w	r3, r3, #2
 800d34c:	431a      	orrs	r2, r3
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	695b      	ldr	r3, [r3, #20]
 800d352:	f003 0301 	and.w	r3, r3, #1
 800d356:	431a      	orrs	r2, r3
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	699b      	ldr	r3, [r3, #24]
 800d35c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d360:	431a      	orrs	r2, r3
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	69db      	ldr	r3, [r3, #28]
 800d366:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d36a:	431a      	orrs	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6a1b      	ldr	r3, [r3, #32]
 800d370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d374:	ea42 0103 	orr.w	r1, r2, r3
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d37c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	430a      	orrs	r2, r1
 800d386:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	699b      	ldr	r3, [r3, #24]
 800d38c:	0c1b      	lsrs	r3, r3, #16
 800d38e:	f003 0104 	and.w	r1, r3, #4
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d396:	f003 0210 	and.w	r2, r3, #16
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	430a      	orrs	r2, r1
 800d3a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	69da      	ldr	r2, [r3, #28]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d3b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800d3c0:	2300      	movs	r3, #0
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3708      	adds	r7, #8
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}

0800d3ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d3ca:	b580      	push	{r7, lr}
 800d3cc:	b088      	sub	sp, #32
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	60f8      	str	r0, [r7, #12]
 800d3d2:	60b9      	str	r1, [r7, #8]
 800d3d4:	603b      	str	r3, [r7, #0]
 800d3d6:	4613      	mov	r3, r2
 800d3d8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d3da:	f7fc fffb 	bl	800a3d4 <HAL_GetTick>
 800d3de:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800d3e0:	88fb      	ldrh	r3, [r7, #6]
 800d3e2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d3ea:	b2db      	uxtb	r3, r3
 800d3ec:	2b01      	cmp	r3, #1
 800d3ee:	d001      	beq.n	800d3f4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800d3f0:	2302      	movs	r3, #2
 800d3f2:	e12a      	b.n	800d64a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d002      	beq.n	800d400 <HAL_SPI_Transmit+0x36>
 800d3fa:	88fb      	ldrh	r3, [r7, #6]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d101      	bne.n	800d404 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800d400:	2301      	movs	r3, #1
 800d402:	e122      	b.n	800d64a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d40a:	2b01      	cmp	r3, #1
 800d40c:	d101      	bne.n	800d412 <HAL_SPI_Transmit+0x48>
 800d40e:	2302      	movs	r3, #2
 800d410:	e11b      	b.n	800d64a <HAL_SPI_Transmit+0x280>
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2201      	movs	r2, #1
 800d416:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2203      	movs	r2, #3
 800d41e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2200      	movs	r2, #0
 800d426:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	68ba      	ldr	r2, [r7, #8]
 800d42c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	88fa      	ldrh	r2, [r7, #6]
 800d432:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	88fa      	ldrh	r2, [r7, #6]
 800d438:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2200      	movs	r2, #0
 800d43e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	2200      	movs	r2, #0
 800d444:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2200      	movs	r2, #0
 800d44a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2200      	movs	r2, #0
 800d450:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2200      	movs	r2, #0
 800d456:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	689b      	ldr	r3, [r3, #8]
 800d45c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d460:	d10f      	bne.n	800d482 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d470:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	681a      	ldr	r2, [r3, #0]
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d480:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d48c:	2b40      	cmp	r3, #64	@ 0x40
 800d48e:	d007      	beq.n	800d4a0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	681a      	ldr	r2, [r3, #0]
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d49e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	68db      	ldr	r3, [r3, #12]
 800d4a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d4a8:	d152      	bne.n	800d550 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d002      	beq.n	800d4b8 <HAL_SPI_Transmit+0xee>
 800d4b2:	8b7b      	ldrh	r3, [r7, #26]
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d145      	bne.n	800d544 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4bc:	881a      	ldrh	r2, [r3, #0]
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4c8:	1c9a      	adds	r2, r3, #2
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	3b01      	subs	r3, #1
 800d4d6:	b29a      	uxth	r2, r3
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d4dc:	e032      	b.n	800d544 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	689b      	ldr	r3, [r3, #8]
 800d4e4:	f003 0302 	and.w	r3, r3, #2
 800d4e8:	2b02      	cmp	r3, #2
 800d4ea:	d112      	bne.n	800d512 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4f0:	881a      	ldrh	r2, [r3, #0]
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4fc:	1c9a      	adds	r2, r3, #2
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d506:	b29b      	uxth	r3, r3
 800d508:	3b01      	subs	r3, #1
 800d50a:	b29a      	uxth	r2, r3
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	86da      	strh	r2, [r3, #54]	@ 0x36
 800d510:	e018      	b.n	800d544 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d512:	f7fc ff5f 	bl	800a3d4 <HAL_GetTick>
 800d516:	4602      	mov	r2, r0
 800d518:	69fb      	ldr	r3, [r7, #28]
 800d51a:	1ad3      	subs	r3, r2, r3
 800d51c:	683a      	ldr	r2, [r7, #0]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d803      	bhi.n	800d52a <HAL_SPI_Transmit+0x160>
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d528:	d102      	bne.n	800d530 <HAL_SPI_Transmit+0x166>
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d109      	bne.n	800d544 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2201      	movs	r2, #1
 800d534:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2200      	movs	r2, #0
 800d53c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d540:	2303      	movs	r3, #3
 800d542:	e082      	b.n	800d64a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d548:	b29b      	uxth	r3, r3
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d1c7      	bne.n	800d4de <HAL_SPI_Transmit+0x114>
 800d54e:	e053      	b.n	800d5f8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d002      	beq.n	800d55e <HAL_SPI_Transmit+0x194>
 800d558:	8b7b      	ldrh	r3, [r7, #26]
 800d55a:	2b01      	cmp	r3, #1
 800d55c:	d147      	bne.n	800d5ee <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	330c      	adds	r3, #12
 800d568:	7812      	ldrb	r2, [r2, #0]
 800d56a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d570:	1c5a      	adds	r2, r3, #1
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d57a:	b29b      	uxth	r3, r3
 800d57c:	3b01      	subs	r3, #1
 800d57e:	b29a      	uxth	r2, r3
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d584:	e033      	b.n	800d5ee <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	689b      	ldr	r3, [r3, #8]
 800d58c:	f003 0302 	and.w	r3, r3, #2
 800d590:	2b02      	cmp	r3, #2
 800d592:	d113      	bne.n	800d5bc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	330c      	adds	r3, #12
 800d59e:	7812      	ldrb	r2, [r2, #0]
 800d5a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5a6:	1c5a      	adds	r2, r3, #1
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	3b01      	subs	r3, #1
 800d5b4:	b29a      	uxth	r2, r3
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	86da      	strh	r2, [r3, #54]	@ 0x36
 800d5ba:	e018      	b.n	800d5ee <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d5bc:	f7fc ff0a 	bl	800a3d4 <HAL_GetTick>
 800d5c0:	4602      	mov	r2, r0
 800d5c2:	69fb      	ldr	r3, [r7, #28]
 800d5c4:	1ad3      	subs	r3, r2, r3
 800d5c6:	683a      	ldr	r2, [r7, #0]
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d803      	bhi.n	800d5d4 <HAL_SPI_Transmit+0x20a>
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5d2:	d102      	bne.n	800d5da <HAL_SPI_Transmit+0x210>
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d109      	bne.n	800d5ee <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2201      	movs	r2, #1
 800d5de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d5ea:	2303      	movs	r3, #3
 800d5ec:	e02d      	b.n	800d64a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d5f2:	b29b      	uxth	r3, r3
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d1c6      	bne.n	800d586 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d5f8:	69fa      	ldr	r2, [r7, #28]
 800d5fa:	6839      	ldr	r1, [r7, #0]
 800d5fc:	68f8      	ldr	r0, [r7, #12]
 800d5fe:	f000 fbd9 	bl	800ddb4 <SPI_EndRxTxTransaction>
 800d602:	4603      	mov	r3, r0
 800d604:	2b00      	cmp	r3, #0
 800d606:	d002      	beq.n	800d60e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2220      	movs	r2, #32
 800d60c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	689b      	ldr	r3, [r3, #8]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d10a      	bne.n	800d62c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d616:	2300      	movs	r3, #0
 800d618:	617b      	str	r3, [r7, #20]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	68db      	ldr	r3, [r3, #12]
 800d620:	617b      	str	r3, [r7, #20]
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	689b      	ldr	r3, [r3, #8]
 800d628:	617b      	str	r3, [r7, #20]
 800d62a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2201      	movs	r2, #1
 800d630:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2200      	movs	r2, #0
 800d638:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d640:	2b00      	cmp	r3, #0
 800d642:	d001      	beq.n	800d648 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800d644:	2301      	movs	r3, #1
 800d646:	e000      	b.n	800d64a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800d648:	2300      	movs	r3, #0
  }
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3720      	adds	r7, #32
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}

0800d652 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d652:	b580      	push	{r7, lr}
 800d654:	b088      	sub	sp, #32
 800d656:	af02      	add	r7, sp, #8
 800d658:	60f8      	str	r0, [r7, #12]
 800d65a:	60b9      	str	r1, [r7, #8]
 800d65c:	603b      	str	r3, [r7, #0]
 800d65e:	4613      	mov	r3, r2
 800d660:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d001      	beq.n	800d672 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800d66e:	2302      	movs	r3, #2
 800d670:	e104      	b.n	800d87c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d67a:	d112      	bne.n	800d6a2 <HAL_SPI_Receive+0x50>
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d10e      	bne.n	800d6a2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2204      	movs	r2, #4
 800d688:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d68c:	88fa      	ldrh	r2, [r7, #6]
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	9300      	str	r3, [sp, #0]
 800d692:	4613      	mov	r3, r2
 800d694:	68ba      	ldr	r2, [r7, #8]
 800d696:	68b9      	ldr	r1, [r7, #8]
 800d698:	68f8      	ldr	r0, [r7, #12]
 800d69a:	f000 f8f3 	bl	800d884 <HAL_SPI_TransmitReceive>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	e0ec      	b.n	800d87c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d6a2:	f7fc fe97 	bl	800a3d4 <HAL_GetTick>
 800d6a6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d002      	beq.n	800d6b4 <HAL_SPI_Receive+0x62>
 800d6ae:	88fb      	ldrh	r3, [r7, #6]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d101      	bne.n	800d6b8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	e0e1      	b.n	800d87c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d101      	bne.n	800d6c6 <HAL_SPI_Receive+0x74>
 800d6c2:	2302      	movs	r3, #2
 800d6c4:	e0da      	b.n	800d87c <HAL_SPI_Receive+0x22a>
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2201      	movs	r2, #1
 800d6ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2204      	movs	r2, #4
 800d6d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	68ba      	ldr	r2, [r7, #8]
 800d6e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	88fa      	ldrh	r2, [r7, #6]
 800d6e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	88fa      	ldrh	r2, [r7, #6]
 800d6ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2200      	movs	r2, #0
 800d704:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2200      	movs	r2, #0
 800d70a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	689b      	ldr	r3, [r3, #8]
 800d710:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d714:	d10f      	bne.n	800d736 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	681a      	ldr	r2, [r3, #0]
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d724:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d734:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d740:	2b40      	cmp	r3, #64	@ 0x40
 800d742:	d007      	beq.n	800d754 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	681a      	ldr	r2, [r3, #0]
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d752:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	68db      	ldr	r3, [r3, #12]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d170      	bne.n	800d83e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d75c:	e035      	b.n	800d7ca <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	f003 0301 	and.w	r3, r3, #1
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d115      	bne.n	800d798 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f103 020c 	add.w	r2, r3, #12
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d778:	7812      	ldrb	r2, [r2, #0]
 800d77a:	b2d2      	uxtb	r2, r2
 800d77c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d782:	1c5a      	adds	r2, r3, #1
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	3b01      	subs	r3, #1
 800d790:	b29a      	uxth	r2, r3
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d796:	e018      	b.n	800d7ca <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d798:	f7fc fe1c 	bl	800a3d4 <HAL_GetTick>
 800d79c:	4602      	mov	r2, r0
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	1ad3      	subs	r3, r2, r3
 800d7a2:	683a      	ldr	r2, [r7, #0]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d803      	bhi.n	800d7b0 <HAL_SPI_Receive+0x15e>
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ae:	d102      	bne.n	800d7b6 <HAL_SPI_Receive+0x164>
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d109      	bne.n	800d7ca <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2201      	movs	r2, #1
 800d7ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d7c6:	2303      	movs	r3, #3
 800d7c8:	e058      	b.n	800d87c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d1c4      	bne.n	800d75e <HAL_SPI_Receive+0x10c>
 800d7d4:	e038      	b.n	800d848 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	689b      	ldr	r3, [r3, #8]
 800d7dc:	f003 0301 	and.w	r3, r3, #1
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d113      	bne.n	800d80c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	68da      	ldr	r2, [r3, #12]
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7ee:	b292      	uxth	r2, r2
 800d7f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7f6:	1c9a      	adds	r2, r3, #2
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d800:	b29b      	uxth	r3, r3
 800d802:	3b01      	subs	r3, #1
 800d804:	b29a      	uxth	r2, r3
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d80a:	e018      	b.n	800d83e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d80c:	f7fc fde2 	bl	800a3d4 <HAL_GetTick>
 800d810:	4602      	mov	r2, r0
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	1ad3      	subs	r3, r2, r3
 800d816:	683a      	ldr	r2, [r7, #0]
 800d818:	429a      	cmp	r2, r3
 800d81a:	d803      	bhi.n	800d824 <HAL_SPI_Receive+0x1d2>
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d822:	d102      	bne.n	800d82a <HAL_SPI_Receive+0x1d8>
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d109      	bne.n	800d83e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2201      	movs	r2, #1
 800d82e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2200      	movs	r2, #0
 800d836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d83a:	2303      	movs	r3, #3
 800d83c:	e01e      	b.n	800d87c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d842:	b29b      	uxth	r3, r3
 800d844:	2b00      	cmp	r3, #0
 800d846:	d1c6      	bne.n	800d7d6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d848:	697a      	ldr	r2, [r7, #20]
 800d84a:	6839      	ldr	r1, [r7, #0]
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	f000 fa4b 	bl	800dce8 <SPI_EndRxTransaction>
 800d852:	4603      	mov	r3, r0
 800d854:	2b00      	cmp	r3, #0
 800d856:	d002      	beq.n	800d85e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2220      	movs	r2, #32
 800d85c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2201      	movs	r2, #1
 800d862:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2200      	movs	r2, #0
 800d86a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d872:	2b00      	cmp	r3, #0
 800d874:	d001      	beq.n	800d87a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800d876:	2301      	movs	r3, #1
 800d878:	e000      	b.n	800d87c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800d87a:	2300      	movs	r3, #0
  }
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3718      	adds	r7, #24
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b08a      	sub	sp, #40	@ 0x28
 800d888:	af00      	add	r7, sp, #0
 800d88a:	60f8      	str	r0, [r7, #12]
 800d88c:	60b9      	str	r1, [r7, #8]
 800d88e:	607a      	str	r2, [r7, #4]
 800d890:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d892:	2301      	movs	r3, #1
 800d894:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d896:	f7fc fd9d 	bl	800a3d4 <HAL_GetTick>
 800d89a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d8a2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	685b      	ldr	r3, [r3, #4]
 800d8a8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800d8aa:	887b      	ldrh	r3, [r7, #2]
 800d8ac:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d8ae:	7ffb      	ldrb	r3, [r7, #31]
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	d00c      	beq.n	800d8ce <HAL_SPI_TransmitReceive+0x4a>
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d8ba:	d106      	bne.n	800d8ca <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	689b      	ldr	r3, [r3, #8]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d102      	bne.n	800d8ca <HAL_SPI_TransmitReceive+0x46>
 800d8c4:	7ffb      	ldrb	r3, [r7, #31]
 800d8c6:	2b04      	cmp	r3, #4
 800d8c8:	d001      	beq.n	800d8ce <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800d8ca:	2302      	movs	r3, #2
 800d8cc:	e17f      	b.n	800dbce <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d005      	beq.n	800d8e0 <HAL_SPI_TransmitReceive+0x5c>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d002      	beq.n	800d8e0 <HAL_SPI_TransmitReceive+0x5c>
 800d8da:	887b      	ldrh	r3, [r7, #2]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d101      	bne.n	800d8e4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	e174      	b.n	800dbce <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d8ea:	2b01      	cmp	r3, #1
 800d8ec:	d101      	bne.n	800d8f2 <HAL_SPI_TransmitReceive+0x6e>
 800d8ee:	2302      	movs	r3, #2
 800d8f0:	e16d      	b.n	800dbce <HAL_SPI_TransmitReceive+0x34a>
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d900:	b2db      	uxtb	r3, r3
 800d902:	2b04      	cmp	r3, #4
 800d904:	d003      	beq.n	800d90e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2205      	movs	r2, #5
 800d90a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2200      	movs	r2, #0
 800d912:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	687a      	ldr	r2, [r7, #4]
 800d918:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	887a      	ldrh	r2, [r7, #2]
 800d91e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	887a      	ldrh	r2, [r7, #2]
 800d924:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	68ba      	ldr	r2, [r7, #8]
 800d92a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	887a      	ldrh	r2, [r7, #2]
 800d930:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	887a      	ldrh	r2, [r7, #2]
 800d936:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2200      	movs	r2, #0
 800d93c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2200      	movs	r2, #0
 800d942:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d94e:	2b40      	cmp	r3, #64	@ 0x40
 800d950:	d007      	beq.n	800d962 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d960:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d96a:	d17e      	bne.n	800da6a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d002      	beq.n	800d97a <HAL_SPI_TransmitReceive+0xf6>
 800d974:	8afb      	ldrh	r3, [r7, #22]
 800d976:	2b01      	cmp	r3, #1
 800d978:	d16c      	bne.n	800da54 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d97e:	881a      	ldrh	r2, [r3, #0]
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d98a:	1c9a      	adds	r2, r3, #2
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d994:	b29b      	uxth	r3, r3
 800d996:	3b01      	subs	r3, #1
 800d998:	b29a      	uxth	r2, r3
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d99e:	e059      	b.n	800da54 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	689b      	ldr	r3, [r3, #8]
 800d9a6:	f003 0302 	and.w	r3, r3, #2
 800d9aa:	2b02      	cmp	r3, #2
 800d9ac:	d11b      	bne.n	800d9e6 <HAL_SPI_TransmitReceive+0x162>
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d016      	beq.n	800d9e6 <HAL_SPI_TransmitReceive+0x162>
 800d9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	d113      	bne.n	800d9e6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9c2:	881a      	ldrh	r2, [r3, #0]
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9ce:	1c9a      	adds	r2, r3, #2
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	3b01      	subs	r3, #1
 800d9dc:	b29a      	uxth	r2, r3
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	689b      	ldr	r3, [r3, #8]
 800d9ec:	f003 0301 	and.w	r3, r3, #1
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d119      	bne.n	800da28 <HAL_SPI_TransmitReceive+0x1a4>
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d014      	beq.n	800da28 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	68da      	ldr	r2, [r3, #12]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da08:	b292      	uxth	r2, r2
 800da0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da10:	1c9a      	adds	r2, r3, #2
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800da1a:	b29b      	uxth	r3, r3
 800da1c:	3b01      	subs	r3, #1
 800da1e:	b29a      	uxth	r2, r3
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800da24:	2301      	movs	r3, #1
 800da26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800da28:	f7fc fcd4 	bl	800a3d4 <HAL_GetTick>
 800da2c:	4602      	mov	r2, r0
 800da2e:	6a3b      	ldr	r3, [r7, #32]
 800da30:	1ad3      	subs	r3, r2, r3
 800da32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da34:	429a      	cmp	r2, r3
 800da36:	d80d      	bhi.n	800da54 <HAL_SPI_TransmitReceive+0x1d0>
 800da38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da3e:	d009      	beq.n	800da54 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2201      	movs	r2, #1
 800da44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2200      	movs	r2, #0
 800da4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800da50:	2303      	movs	r3, #3
 800da52:	e0bc      	b.n	800dbce <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800da58:	b29b      	uxth	r3, r3
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d1a0      	bne.n	800d9a0 <HAL_SPI_TransmitReceive+0x11c>
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800da62:	b29b      	uxth	r3, r3
 800da64:	2b00      	cmp	r3, #0
 800da66:	d19b      	bne.n	800d9a0 <HAL_SPI_TransmitReceive+0x11c>
 800da68:	e082      	b.n	800db70 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d002      	beq.n	800da78 <HAL_SPI_TransmitReceive+0x1f4>
 800da72:	8afb      	ldrh	r3, [r7, #22]
 800da74:	2b01      	cmp	r3, #1
 800da76:	d171      	bne.n	800db5c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	330c      	adds	r3, #12
 800da82:	7812      	ldrb	r2, [r2, #0]
 800da84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da8a:	1c5a      	adds	r2, r3, #1
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800da94:	b29b      	uxth	r3, r3
 800da96:	3b01      	subs	r3, #1
 800da98:	b29a      	uxth	r2, r3
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800da9e:	e05d      	b.n	800db5c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	689b      	ldr	r3, [r3, #8]
 800daa6:	f003 0302 	and.w	r3, r3, #2
 800daaa:	2b02      	cmp	r3, #2
 800daac:	d11c      	bne.n	800dae8 <HAL_SPI_TransmitReceive+0x264>
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d017      	beq.n	800dae8 <HAL_SPI_TransmitReceive+0x264>
 800dab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daba:	2b01      	cmp	r3, #1
 800dabc:	d114      	bne.n	800dae8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	330c      	adds	r3, #12
 800dac8:	7812      	ldrb	r2, [r2, #0]
 800daca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dad0:	1c5a      	adds	r2, r3, #1
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800dada:	b29b      	uxth	r3, r3
 800dadc:	3b01      	subs	r3, #1
 800dade:	b29a      	uxth	r2, r3
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dae4:	2300      	movs	r3, #0
 800dae6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	689b      	ldr	r3, [r3, #8]
 800daee:	f003 0301 	and.w	r3, r3, #1
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d119      	bne.n	800db2a <HAL_SPI_TransmitReceive+0x2a6>
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dafa:	b29b      	uxth	r3, r3
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d014      	beq.n	800db2a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	68da      	ldr	r2, [r3, #12]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db0a:	b2d2      	uxtb	r2, r2
 800db0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db12:	1c5a      	adds	r2, r3, #1
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	3b01      	subs	r3, #1
 800db20:	b29a      	uxth	r2, r3
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800db26:	2301      	movs	r3, #1
 800db28:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800db2a:	f7fc fc53 	bl	800a3d4 <HAL_GetTick>
 800db2e:	4602      	mov	r2, r0
 800db30:	6a3b      	ldr	r3, [r7, #32]
 800db32:	1ad3      	subs	r3, r2, r3
 800db34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db36:	429a      	cmp	r2, r3
 800db38:	d803      	bhi.n	800db42 <HAL_SPI_TransmitReceive+0x2be>
 800db3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db40:	d102      	bne.n	800db48 <HAL_SPI_TransmitReceive+0x2c4>
 800db42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db44:	2b00      	cmp	r3, #0
 800db46:	d109      	bne.n	800db5c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	2201      	movs	r2, #1
 800db4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	2200      	movs	r2, #0
 800db54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800db58:	2303      	movs	r3, #3
 800db5a:	e038      	b.n	800dbce <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800db60:	b29b      	uxth	r3, r3
 800db62:	2b00      	cmp	r3, #0
 800db64:	d19c      	bne.n	800daa0 <HAL_SPI_TransmitReceive+0x21c>
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d197      	bne.n	800daa0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800db70:	6a3a      	ldr	r2, [r7, #32]
 800db72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800db74:	68f8      	ldr	r0, [r7, #12]
 800db76:	f000 f91d 	bl	800ddb4 <SPI_EndRxTxTransaction>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d008      	beq.n	800db92 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	2220      	movs	r2, #32
 800db84:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	2200      	movs	r2, #0
 800db8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800db8e:	2301      	movs	r3, #1
 800db90:	e01d      	b.n	800dbce <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	689b      	ldr	r3, [r3, #8]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d10a      	bne.n	800dbb0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800db9a:	2300      	movs	r3, #0
 800db9c:	613b      	str	r3, [r7, #16]
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	613b      	str	r3, [r7, #16]
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	689b      	ldr	r3, [r3, #8]
 800dbac:	613b      	str	r3, [r7, #16]
 800dbae:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d001      	beq.n	800dbcc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800dbc8:	2301      	movs	r3, #1
 800dbca:	e000      	b.n	800dbce <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800dbcc:	2300      	movs	r3, #0
  }
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3728      	adds	r7, #40	@ 0x28
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
	...

0800dbd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b088      	sub	sp, #32
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	60f8      	str	r0, [r7, #12]
 800dbe0:	60b9      	str	r1, [r7, #8]
 800dbe2:	603b      	str	r3, [r7, #0]
 800dbe4:	4613      	mov	r3, r2
 800dbe6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800dbe8:	f7fc fbf4 	bl	800a3d4 <HAL_GetTick>
 800dbec:	4602      	mov	r2, r0
 800dbee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbf0:	1a9b      	subs	r3, r3, r2
 800dbf2:	683a      	ldr	r2, [r7, #0]
 800dbf4:	4413      	add	r3, r2
 800dbf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800dbf8:	f7fc fbec 	bl	800a3d4 <HAL_GetTick>
 800dbfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800dbfe:	4b39      	ldr	r3, [pc, #228]	@ (800dce4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	015b      	lsls	r3, r3, #5
 800dc04:	0d1b      	lsrs	r3, r3, #20
 800dc06:	69fa      	ldr	r2, [r7, #28]
 800dc08:	fb02 f303 	mul.w	r3, r2, r3
 800dc0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dc0e:	e054      	b.n	800dcba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc16:	d050      	beq.n	800dcba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dc18:	f7fc fbdc 	bl	800a3d4 <HAL_GetTick>
 800dc1c:	4602      	mov	r2, r0
 800dc1e:	69bb      	ldr	r3, [r7, #24]
 800dc20:	1ad3      	subs	r3, r2, r3
 800dc22:	69fa      	ldr	r2, [r7, #28]
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d902      	bls.n	800dc2e <SPI_WaitFlagStateUntilTimeout+0x56>
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d13d      	bne.n	800dcaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	685a      	ldr	r2, [r3, #4]
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800dc3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dc46:	d111      	bne.n	800dc6c <SPI_WaitFlagStateUntilTimeout+0x94>
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	689b      	ldr	r3, [r3, #8]
 800dc4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dc50:	d004      	beq.n	800dc5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	689b      	ldr	r3, [r3, #8]
 800dc56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dc5a:	d107      	bne.n	800dc6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	681a      	ldr	r2, [r3, #0]
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dc6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dc74:	d10f      	bne.n	800dc96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	681a      	ldr	r2, [r3, #0]
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800dc84:	601a      	str	r2, [r3, #0]
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dc94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2201      	movs	r2, #1
 800dc9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	2200      	movs	r2, #0
 800dca2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800dca6:	2303      	movs	r3, #3
 800dca8:	e017      	b.n	800dcda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d101      	bne.n	800dcb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	3b01      	subs	r3, #1
 800dcb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	689a      	ldr	r2, [r3, #8]
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	4013      	ands	r3, r2
 800dcc4:	68ba      	ldr	r2, [r7, #8]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	bf0c      	ite	eq
 800dcca:	2301      	moveq	r3, #1
 800dccc:	2300      	movne	r3, #0
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	79fb      	ldrb	r3, [r7, #7]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d19b      	bne.n	800dc10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800dcd8:	2300      	movs	r3, #0
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3720      	adds	r7, #32
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	20000054 	.word	0x20000054

0800dce8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b086      	sub	sp, #24
 800dcec:	af02      	add	r7, sp, #8
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	60b9      	str	r1, [r7, #8]
 800dcf2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dcfc:	d111      	bne.n	800dd22 <SPI_EndRxTransaction+0x3a>
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	689b      	ldr	r3, [r3, #8]
 800dd02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dd06:	d004      	beq.n	800dd12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	689b      	ldr	r3, [r3, #8]
 800dd0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd10:	d107      	bne.n	800dd22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	681a      	ldr	r2, [r3, #0]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dd20:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dd2a:	d12a      	bne.n	800dd82 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	689b      	ldr	r3, [r3, #8]
 800dd30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd34:	d012      	beq.n	800dd5c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	9300      	str	r3, [sp, #0]
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	2180      	movs	r1, #128	@ 0x80
 800dd40:	68f8      	ldr	r0, [r7, #12]
 800dd42:	f7ff ff49 	bl	800dbd8 <SPI_WaitFlagStateUntilTimeout>
 800dd46:	4603      	mov	r3, r0
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d02d      	beq.n	800dda8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd50:	f043 0220 	orr.w	r2, r3, #32
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800dd58:	2303      	movs	r3, #3
 800dd5a:	e026      	b.n	800ddaa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	9300      	str	r3, [sp, #0]
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	2200      	movs	r2, #0
 800dd64:	2101      	movs	r1, #1
 800dd66:	68f8      	ldr	r0, [r7, #12]
 800dd68:	f7ff ff36 	bl	800dbd8 <SPI_WaitFlagStateUntilTimeout>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d01a      	beq.n	800dda8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd76:	f043 0220 	orr.w	r2, r3, #32
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800dd7e:	2303      	movs	r3, #3
 800dd80:	e013      	b.n	800ddaa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	9300      	str	r3, [sp, #0]
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	2200      	movs	r2, #0
 800dd8a:	2101      	movs	r1, #1
 800dd8c:	68f8      	ldr	r0, [r7, #12]
 800dd8e:	f7ff ff23 	bl	800dbd8 <SPI_WaitFlagStateUntilTimeout>
 800dd92:	4603      	mov	r3, r0
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d007      	beq.n	800dda8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd9c:	f043 0220 	orr.w	r2, r3, #32
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800dda4:	2303      	movs	r3, #3
 800dda6:	e000      	b.n	800ddaa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800dda8:	2300      	movs	r3, #0
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3710      	adds	r7, #16
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}
	...

0800ddb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b088      	sub	sp, #32
 800ddb8:	af02      	add	r7, sp, #8
 800ddba:	60f8      	str	r0, [r7, #12]
 800ddbc:	60b9      	str	r1, [r7, #8]
 800ddbe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	9300      	str	r3, [sp, #0]
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	2102      	movs	r1, #2
 800ddca:	68f8      	ldr	r0, [r7, #12]
 800ddcc:	f7ff ff04 	bl	800dbd8 <SPI_WaitFlagStateUntilTimeout>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d007      	beq.n	800dde6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddda:	f043 0220 	orr.w	r2, r3, #32
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800dde2:	2303      	movs	r3, #3
 800dde4:	e032      	b.n	800de4c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800dde6:	4b1b      	ldr	r3, [pc, #108]	@ (800de54 <SPI_EndRxTxTransaction+0xa0>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4a1b      	ldr	r2, [pc, #108]	@ (800de58 <SPI_EndRxTxTransaction+0xa4>)
 800ddec:	fba2 2303 	umull	r2, r3, r2, r3
 800ddf0:	0d5b      	lsrs	r3, r3, #21
 800ddf2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ddf6:	fb02 f303 	mul.w	r3, r2, r3
 800ddfa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800de04:	d112      	bne.n	800de2c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	9300      	str	r3, [sp, #0]
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	2200      	movs	r2, #0
 800de0e:	2180      	movs	r1, #128	@ 0x80
 800de10:	68f8      	ldr	r0, [r7, #12]
 800de12:	f7ff fee1 	bl	800dbd8 <SPI_WaitFlagStateUntilTimeout>
 800de16:	4603      	mov	r3, r0
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d016      	beq.n	800de4a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de20:	f043 0220 	orr.w	r2, r3, #32
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800de28:	2303      	movs	r3, #3
 800de2a:	e00f      	b.n	800de4c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d00a      	beq.n	800de48 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	3b01      	subs	r3, #1
 800de36:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	689b      	ldr	r3, [r3, #8]
 800de3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de42:	2b80      	cmp	r3, #128	@ 0x80
 800de44:	d0f2      	beq.n	800de2c <SPI_EndRxTxTransaction+0x78>
 800de46:	e000      	b.n	800de4a <SPI_EndRxTxTransaction+0x96>
        break;
 800de48:	bf00      	nop
  }

  return HAL_OK;
 800de4a:	2300      	movs	r3, #0
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3718      	adds	r7, #24
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}
 800de54:	20000054 	.word	0x20000054
 800de58:	165e9f81 	.word	0x165e9f81

0800de5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d101      	bne.n	800de6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800de6a:	2301      	movs	r3, #1
 800de6c:	e041      	b.n	800def2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800de74:	b2db      	uxtb	r3, r3
 800de76:	2b00      	cmp	r3, #0
 800de78:	d106      	bne.n	800de88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2200      	movs	r2, #0
 800de7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f7fb fd64 	bl	8009950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2202      	movs	r2, #2
 800de8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	3304      	adds	r3, #4
 800de98:	4619      	mov	r1, r3
 800de9a:	4610      	mov	r0, r2
 800de9c:	f000 fd28 	bl	800e8f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2201      	movs	r2, #1
 800dea4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2201      	movs	r2, #1
 800deac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2201      	movs	r2, #1
 800deb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2201      	movs	r2, #1
 800debc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2201      	movs	r2, #1
 800dec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2201      	movs	r2, #1
 800decc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2201      	movs	r2, #1
 800ded4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2201      	movs	r2, #1
 800dedc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2201      	movs	r2, #1
 800dee4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2201      	movs	r2, #1
 800deec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800def0:	2300      	movs	r3, #0
}
 800def2:	4618      	mov	r0, r3
 800def4:	3708      	adds	r7, #8
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
	...

0800defc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800defc:	b480      	push	{r7}
 800defe:	b085      	sub	sp, #20
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d001      	beq.n	800df14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800df10:	2301      	movs	r3, #1
 800df12:	e046      	b.n	800dfa2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2202      	movs	r2, #2
 800df18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4a23      	ldr	r2, [pc, #140]	@ (800dfb0 <HAL_TIM_Base_Start+0xb4>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d022      	beq.n	800df6c <HAL_TIM_Base_Start+0x70>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df2e:	d01d      	beq.n	800df6c <HAL_TIM_Base_Start+0x70>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4a1f      	ldr	r2, [pc, #124]	@ (800dfb4 <HAL_TIM_Base_Start+0xb8>)
 800df36:	4293      	cmp	r3, r2
 800df38:	d018      	beq.n	800df6c <HAL_TIM_Base_Start+0x70>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4a1e      	ldr	r2, [pc, #120]	@ (800dfb8 <HAL_TIM_Base_Start+0xbc>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d013      	beq.n	800df6c <HAL_TIM_Base_Start+0x70>
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a1c      	ldr	r2, [pc, #112]	@ (800dfbc <HAL_TIM_Base_Start+0xc0>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d00e      	beq.n	800df6c <HAL_TIM_Base_Start+0x70>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	4a1b      	ldr	r2, [pc, #108]	@ (800dfc0 <HAL_TIM_Base_Start+0xc4>)
 800df54:	4293      	cmp	r3, r2
 800df56:	d009      	beq.n	800df6c <HAL_TIM_Base_Start+0x70>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	4a19      	ldr	r2, [pc, #100]	@ (800dfc4 <HAL_TIM_Base_Start+0xc8>)
 800df5e:	4293      	cmp	r3, r2
 800df60:	d004      	beq.n	800df6c <HAL_TIM_Base_Start+0x70>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	4a18      	ldr	r2, [pc, #96]	@ (800dfc8 <HAL_TIM_Base_Start+0xcc>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d111      	bne.n	800df90 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	689b      	ldr	r3, [r3, #8]
 800df72:	f003 0307 	and.w	r3, r3, #7
 800df76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2b06      	cmp	r3, #6
 800df7c:	d010      	beq.n	800dfa0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	681a      	ldr	r2, [r3, #0]
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f042 0201 	orr.w	r2, r2, #1
 800df8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df8e:	e007      	b.n	800dfa0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	681a      	ldr	r2, [r3, #0]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f042 0201 	orr.w	r2, r2, #1
 800df9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dfa0:	2300      	movs	r3, #0
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3714      	adds	r7, #20
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfac:	4770      	bx	lr
 800dfae:	bf00      	nop
 800dfb0:	40010000 	.word	0x40010000
 800dfb4:	40000400 	.word	0x40000400
 800dfb8:	40000800 	.word	0x40000800
 800dfbc:	40000c00 	.word	0x40000c00
 800dfc0:	40010400 	.word	0x40010400
 800dfc4:	40014000 	.word	0x40014000
 800dfc8:	40001800 	.word	0x40001800

0800dfcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b085      	sub	sp, #20
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dfda:	b2db      	uxtb	r3, r3
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d001      	beq.n	800dfe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	e04e      	b.n	800e082 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2202      	movs	r2, #2
 800dfe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	68da      	ldr	r2, [r3, #12]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f042 0201 	orr.w	r2, r2, #1
 800dffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4a23      	ldr	r2, [pc, #140]	@ (800e090 <HAL_TIM_Base_Start_IT+0xc4>)
 800e002:	4293      	cmp	r3, r2
 800e004:	d022      	beq.n	800e04c <HAL_TIM_Base_Start_IT+0x80>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e00e:	d01d      	beq.n	800e04c <HAL_TIM_Base_Start_IT+0x80>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4a1f      	ldr	r2, [pc, #124]	@ (800e094 <HAL_TIM_Base_Start_IT+0xc8>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d018      	beq.n	800e04c <HAL_TIM_Base_Start_IT+0x80>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4a1e      	ldr	r2, [pc, #120]	@ (800e098 <HAL_TIM_Base_Start_IT+0xcc>)
 800e020:	4293      	cmp	r3, r2
 800e022:	d013      	beq.n	800e04c <HAL_TIM_Base_Start_IT+0x80>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	4a1c      	ldr	r2, [pc, #112]	@ (800e09c <HAL_TIM_Base_Start_IT+0xd0>)
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d00e      	beq.n	800e04c <HAL_TIM_Base_Start_IT+0x80>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	4a1b      	ldr	r2, [pc, #108]	@ (800e0a0 <HAL_TIM_Base_Start_IT+0xd4>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d009      	beq.n	800e04c <HAL_TIM_Base_Start_IT+0x80>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	4a19      	ldr	r2, [pc, #100]	@ (800e0a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d004      	beq.n	800e04c <HAL_TIM_Base_Start_IT+0x80>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	4a18      	ldr	r2, [pc, #96]	@ (800e0a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800e048:	4293      	cmp	r3, r2
 800e04a:	d111      	bne.n	800e070 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	689b      	ldr	r3, [r3, #8]
 800e052:	f003 0307 	and.w	r3, r3, #7
 800e056:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2b06      	cmp	r3, #6
 800e05c:	d010      	beq.n	800e080 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f042 0201 	orr.w	r2, r2, #1
 800e06c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e06e:	e007      	b.n	800e080 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	681a      	ldr	r2, [r3, #0]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f042 0201 	orr.w	r2, r2, #1
 800e07e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e080:	2300      	movs	r3, #0
}
 800e082:	4618      	mov	r0, r3
 800e084:	3714      	adds	r7, #20
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr
 800e08e:	bf00      	nop
 800e090:	40010000 	.word	0x40010000
 800e094:	40000400 	.word	0x40000400
 800e098:	40000800 	.word	0x40000800
 800e09c:	40000c00 	.word	0x40000c00
 800e0a0:	40010400 	.word	0x40010400
 800e0a4:	40014000 	.word	0x40014000
 800e0a8:	40001800 	.word	0x40001800

0800e0ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d101      	bne.n	800e0be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	e041      	b.n	800e142 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d106      	bne.n	800e0d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 f88d 	bl	800e1f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2202      	movs	r2, #2
 800e0dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681a      	ldr	r2, [r3, #0]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	3304      	adds	r3, #4
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	4610      	mov	r0, r2
 800e0ec:	f000 fc00 	bl	800e8f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2201      	movs	r2, #1
 800e104:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2201      	movs	r2, #1
 800e10c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2201      	movs	r2, #1
 800e114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2201      	movs	r2, #1
 800e11c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2201      	movs	r2, #1
 800e124:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2201      	movs	r2, #1
 800e12c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2201      	movs	r2, #1
 800e134:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2201      	movs	r2, #1
 800e13c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e140:	2300      	movs	r3, #0
}
 800e142:	4618      	mov	r0, r3
 800e144:	3708      	adds	r7, #8
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}

0800e14a <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800e14a:	b580      	push	{r7, lr}
 800e14c:	b082      	sub	sp, #8
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2202      	movs	r2, #2
 800e156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	6a1a      	ldr	r2, [r3, #32]
 800e160:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e164:	4013      	ands	r3, r2
 800e166:	2b00      	cmp	r3, #0
 800e168:	d10f      	bne.n	800e18a <HAL_TIM_PWM_DeInit+0x40>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	6a1a      	ldr	r2, [r3, #32]
 800e170:	f240 4344 	movw	r3, #1092	@ 0x444
 800e174:	4013      	ands	r3, r2
 800e176:	2b00      	cmp	r3, #0
 800e178:	d107      	bne.n	800e18a <HAL_TIM_PWM_DeInit+0x40>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	f022 0201 	bic.w	r2, r2, #1
 800e188:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 f83b 	bl	800e206 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2200      	movs	r2, #0
 800e194:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2200      	movs	r2, #0
 800e19c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e1e8:	2300      	movs	r3, #0
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3708      	adds	r7, #8
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}

0800e1f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e1f2:	b480      	push	{r7}
 800e1f4:	b083      	sub	sp, #12
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e1fa:	bf00      	nop
 800e1fc:	370c      	adds	r7, #12
 800e1fe:	46bd      	mov	sp, r7
 800e200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e204:	4770      	bx	lr

0800e206 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800e206:	b480      	push	{r7}
 800e208:	b083      	sub	sp, #12
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800e20e:	bf00      	nop
 800e210:	370c      	adds	r7, #12
 800e212:	46bd      	mov	sp, r7
 800e214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e218:	4770      	bx	lr
	...

0800e21c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b084      	sub	sp, #16
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d109      	bne.n	800e240 <HAL_TIM_PWM_Start+0x24>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e232:	b2db      	uxtb	r3, r3
 800e234:	2b01      	cmp	r3, #1
 800e236:	bf14      	ite	ne
 800e238:	2301      	movne	r3, #1
 800e23a:	2300      	moveq	r3, #0
 800e23c:	b2db      	uxtb	r3, r3
 800e23e:	e022      	b.n	800e286 <HAL_TIM_PWM_Start+0x6a>
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	2b04      	cmp	r3, #4
 800e244:	d109      	bne.n	800e25a <HAL_TIM_PWM_Start+0x3e>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	2b01      	cmp	r3, #1
 800e250:	bf14      	ite	ne
 800e252:	2301      	movne	r3, #1
 800e254:	2300      	moveq	r3, #0
 800e256:	b2db      	uxtb	r3, r3
 800e258:	e015      	b.n	800e286 <HAL_TIM_PWM_Start+0x6a>
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	2b08      	cmp	r3, #8
 800e25e:	d109      	bne.n	800e274 <HAL_TIM_PWM_Start+0x58>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e266:	b2db      	uxtb	r3, r3
 800e268:	2b01      	cmp	r3, #1
 800e26a:	bf14      	ite	ne
 800e26c:	2301      	movne	r3, #1
 800e26e:	2300      	moveq	r3, #0
 800e270:	b2db      	uxtb	r3, r3
 800e272:	e008      	b.n	800e286 <HAL_TIM_PWM_Start+0x6a>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e27a:	b2db      	uxtb	r3, r3
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	bf14      	ite	ne
 800e280:	2301      	movne	r3, #1
 800e282:	2300      	moveq	r3, #0
 800e284:	b2db      	uxtb	r3, r3
 800e286:	2b00      	cmp	r3, #0
 800e288:	d001      	beq.n	800e28e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800e28a:	2301      	movs	r3, #1
 800e28c:	e07c      	b.n	800e388 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d104      	bne.n	800e29e <HAL_TIM_PWM_Start+0x82>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2202      	movs	r2, #2
 800e298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e29c:	e013      	b.n	800e2c6 <HAL_TIM_PWM_Start+0xaa>
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	2b04      	cmp	r3, #4
 800e2a2:	d104      	bne.n	800e2ae <HAL_TIM_PWM_Start+0x92>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2202      	movs	r2, #2
 800e2a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e2ac:	e00b      	b.n	800e2c6 <HAL_TIM_PWM_Start+0xaa>
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	2b08      	cmp	r3, #8
 800e2b2:	d104      	bne.n	800e2be <HAL_TIM_PWM_Start+0xa2>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2202      	movs	r2, #2
 800e2b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e2bc:	e003      	b.n	800e2c6 <HAL_TIM_PWM_Start+0xaa>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2202      	movs	r2, #2
 800e2c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	6839      	ldr	r1, [r7, #0]
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f000 fe04 	bl	800eedc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	4a2d      	ldr	r2, [pc, #180]	@ (800e390 <HAL_TIM_PWM_Start+0x174>)
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d004      	beq.n	800e2e8 <HAL_TIM_PWM_Start+0xcc>
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	4a2c      	ldr	r2, [pc, #176]	@ (800e394 <HAL_TIM_PWM_Start+0x178>)
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	d101      	bne.n	800e2ec <HAL_TIM_PWM_Start+0xd0>
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	e000      	b.n	800e2ee <HAL_TIM_PWM_Start+0xd2>
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d007      	beq.n	800e302 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e300:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	4a22      	ldr	r2, [pc, #136]	@ (800e390 <HAL_TIM_PWM_Start+0x174>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d022      	beq.n	800e352 <HAL_TIM_PWM_Start+0x136>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e314:	d01d      	beq.n	800e352 <HAL_TIM_PWM_Start+0x136>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	4a1f      	ldr	r2, [pc, #124]	@ (800e398 <HAL_TIM_PWM_Start+0x17c>)
 800e31c:	4293      	cmp	r3, r2
 800e31e:	d018      	beq.n	800e352 <HAL_TIM_PWM_Start+0x136>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4a1d      	ldr	r2, [pc, #116]	@ (800e39c <HAL_TIM_PWM_Start+0x180>)
 800e326:	4293      	cmp	r3, r2
 800e328:	d013      	beq.n	800e352 <HAL_TIM_PWM_Start+0x136>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	4a1c      	ldr	r2, [pc, #112]	@ (800e3a0 <HAL_TIM_PWM_Start+0x184>)
 800e330:	4293      	cmp	r3, r2
 800e332:	d00e      	beq.n	800e352 <HAL_TIM_PWM_Start+0x136>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4a16      	ldr	r2, [pc, #88]	@ (800e394 <HAL_TIM_PWM_Start+0x178>)
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d009      	beq.n	800e352 <HAL_TIM_PWM_Start+0x136>
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	4a18      	ldr	r2, [pc, #96]	@ (800e3a4 <HAL_TIM_PWM_Start+0x188>)
 800e344:	4293      	cmp	r3, r2
 800e346:	d004      	beq.n	800e352 <HAL_TIM_PWM_Start+0x136>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	4a16      	ldr	r2, [pc, #88]	@ (800e3a8 <HAL_TIM_PWM_Start+0x18c>)
 800e34e:	4293      	cmp	r3, r2
 800e350:	d111      	bne.n	800e376 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	689b      	ldr	r3, [r3, #8]
 800e358:	f003 0307 	and.w	r3, r3, #7
 800e35c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2b06      	cmp	r3, #6
 800e362:	d010      	beq.n	800e386 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f042 0201 	orr.w	r2, r2, #1
 800e372:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e374:	e007      	b.n	800e386 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	681a      	ldr	r2, [r3, #0]
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	f042 0201 	orr.w	r2, r2, #1
 800e384:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e386:	2300      	movs	r3, #0
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3710      	adds	r7, #16
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	40010000 	.word	0x40010000
 800e394:	40010400 	.word	0x40010400
 800e398:	40000400 	.word	0x40000400
 800e39c:	40000800 	.word	0x40000800
 800e3a0:	40000c00 	.word	0x40000c00
 800e3a4:	40014000 	.word	0x40014000
 800e3a8:	40001800 	.word	0x40001800

0800e3ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b084      	sub	sp, #16
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	68db      	ldr	r3, [r3, #12]
 800e3ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	691b      	ldr	r3, [r3, #16]
 800e3c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	f003 0302 	and.w	r3, r3, #2
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d020      	beq.n	800e410 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f003 0302 	and.w	r3, r3, #2
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d01b      	beq.n	800e410 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f06f 0202 	mvn.w	r2, #2
 800e3e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2201      	movs	r2, #1
 800e3e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	699b      	ldr	r3, [r3, #24]
 800e3ee:	f003 0303 	and.w	r3, r3, #3
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d003      	beq.n	800e3fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f000 fa5b 	bl	800e8b2 <HAL_TIM_IC_CaptureCallback>
 800e3fc:	e005      	b.n	800e40a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f000 fa4d 	bl	800e89e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f000 fa5e 	bl	800e8c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2200      	movs	r2, #0
 800e40e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	f003 0304 	and.w	r3, r3, #4
 800e416:	2b00      	cmp	r3, #0
 800e418:	d020      	beq.n	800e45c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	f003 0304 	and.w	r3, r3, #4
 800e420:	2b00      	cmp	r3, #0
 800e422:	d01b      	beq.n	800e45c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	f06f 0204 	mvn.w	r2, #4
 800e42c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2202      	movs	r2, #2
 800e432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	699b      	ldr	r3, [r3, #24]
 800e43a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d003      	beq.n	800e44a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f000 fa35 	bl	800e8b2 <HAL_TIM_IC_CaptureCallback>
 800e448:	e005      	b.n	800e456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f000 fa27 	bl	800e89e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f000 fa38 	bl	800e8c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2200      	movs	r2, #0
 800e45a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	f003 0308 	and.w	r3, r3, #8
 800e462:	2b00      	cmp	r3, #0
 800e464:	d020      	beq.n	800e4a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f003 0308 	and.w	r3, r3, #8
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d01b      	beq.n	800e4a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f06f 0208 	mvn.w	r2, #8
 800e478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2204      	movs	r2, #4
 800e47e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	69db      	ldr	r3, [r3, #28]
 800e486:	f003 0303 	and.w	r3, r3, #3
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d003      	beq.n	800e496 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f000 fa0f 	bl	800e8b2 <HAL_TIM_IC_CaptureCallback>
 800e494:	e005      	b.n	800e4a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f000 fa01 	bl	800e89e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f000 fa12 	bl	800e8c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	f003 0310 	and.w	r3, r3, #16
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d020      	beq.n	800e4f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	f003 0310 	and.w	r3, r3, #16
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d01b      	beq.n	800e4f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f06f 0210 	mvn.w	r2, #16
 800e4c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2208      	movs	r2, #8
 800e4ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	69db      	ldr	r3, [r3, #28]
 800e4d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d003      	beq.n	800e4e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f000 f9e9 	bl	800e8b2 <HAL_TIM_IC_CaptureCallback>
 800e4e0:	e005      	b.n	800e4ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f000 f9db 	bl	800e89e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f000 f9ec 	bl	800e8c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	f003 0301 	and.w	r3, r3, #1
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d00c      	beq.n	800e518 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f003 0301 	and.w	r3, r3, #1
 800e504:	2b00      	cmp	r3, #0
 800e506:	d007      	beq.n	800e518 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f06f 0201 	mvn.w	r2, #1
 800e510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f7fa f880 	bl	8008618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d00c      	beq.n	800e53c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d007      	beq.n	800e53c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800e534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f000 fd7c 	bl	800f034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e542:	2b00      	cmp	r3, #0
 800e544:	d00c      	beq.n	800e560 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d007      	beq.n	800e560 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f000 f9bd 	bl	800e8da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	f003 0320 	and.w	r3, r3, #32
 800e566:	2b00      	cmp	r3, #0
 800e568:	d00c      	beq.n	800e584 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	f003 0320 	and.w	r3, r3, #32
 800e570:	2b00      	cmp	r3, #0
 800e572:	d007      	beq.n	800e584 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f06f 0220 	mvn.w	r2, #32
 800e57c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f000 fd4e 	bl	800f020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e584:	bf00      	nop
 800e586:	3710      	adds	r7, #16
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b086      	sub	sp, #24
 800e590:	af00      	add	r7, sp, #0
 800e592:	60f8      	str	r0, [r7, #12]
 800e594:	60b9      	str	r1, [r7, #8]
 800e596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e598:	2300      	movs	r3, #0
 800e59a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e5a2:	2b01      	cmp	r3, #1
 800e5a4:	d101      	bne.n	800e5aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e5a6:	2302      	movs	r3, #2
 800e5a8:	e0ae      	b.n	800e708 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2b0c      	cmp	r3, #12
 800e5b6:	f200 809f 	bhi.w	800e6f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800e5ba:	a201      	add	r2, pc, #4	@ (adr r2, 800e5c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c0:	0800e5f5 	.word	0x0800e5f5
 800e5c4:	0800e6f9 	.word	0x0800e6f9
 800e5c8:	0800e6f9 	.word	0x0800e6f9
 800e5cc:	0800e6f9 	.word	0x0800e6f9
 800e5d0:	0800e635 	.word	0x0800e635
 800e5d4:	0800e6f9 	.word	0x0800e6f9
 800e5d8:	0800e6f9 	.word	0x0800e6f9
 800e5dc:	0800e6f9 	.word	0x0800e6f9
 800e5e0:	0800e677 	.word	0x0800e677
 800e5e4:	0800e6f9 	.word	0x0800e6f9
 800e5e8:	0800e6f9 	.word	0x0800e6f9
 800e5ec:	0800e6f9 	.word	0x0800e6f9
 800e5f0:	0800e6b7 	.word	0x0800e6b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	68b9      	ldr	r1, [r7, #8]
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f000 fa24 	bl	800ea48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	699a      	ldr	r2, [r3, #24]
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f042 0208 	orr.w	r2, r2, #8
 800e60e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	699a      	ldr	r2, [r3, #24]
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	f022 0204 	bic.w	r2, r2, #4
 800e61e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	6999      	ldr	r1, [r3, #24]
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	691a      	ldr	r2, [r3, #16]
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	430a      	orrs	r2, r1
 800e630:	619a      	str	r2, [r3, #24]
      break;
 800e632:	e064      	b.n	800e6fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	68b9      	ldr	r1, [r7, #8]
 800e63a:	4618      	mov	r0, r3
 800e63c:	f000 fa74 	bl	800eb28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	699a      	ldr	r2, [r3, #24]
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e64e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	699a      	ldr	r2, [r3, #24]
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e65e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	6999      	ldr	r1, [r3, #24]
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	691b      	ldr	r3, [r3, #16]
 800e66a:	021a      	lsls	r2, r3, #8
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	430a      	orrs	r2, r1
 800e672:	619a      	str	r2, [r3, #24]
      break;
 800e674:	e043      	b.n	800e6fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	68b9      	ldr	r1, [r7, #8]
 800e67c:	4618      	mov	r0, r3
 800e67e:	f000 fac9 	bl	800ec14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	69da      	ldr	r2, [r3, #28]
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	f042 0208 	orr.w	r2, r2, #8
 800e690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	69da      	ldr	r2, [r3, #28]
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f022 0204 	bic.w	r2, r2, #4
 800e6a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	69d9      	ldr	r1, [r3, #28]
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	691a      	ldr	r2, [r3, #16]
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	430a      	orrs	r2, r1
 800e6b2:	61da      	str	r2, [r3, #28]
      break;
 800e6b4:	e023      	b.n	800e6fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	68b9      	ldr	r1, [r7, #8]
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f000 fb1d 	bl	800ecfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	69da      	ldr	r2, [r3, #28]
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e6d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	69da      	ldr	r2, [r3, #28]
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e6e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	69d9      	ldr	r1, [r3, #28]
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	691b      	ldr	r3, [r3, #16]
 800e6ec:	021a      	lsls	r2, r3, #8
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	430a      	orrs	r2, r1
 800e6f4:	61da      	str	r2, [r3, #28]
      break;
 800e6f6:	e002      	b.n	800e6fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	75fb      	strb	r3, [r7, #23]
      break;
 800e6fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2200      	movs	r2, #0
 800e702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e706:	7dfb      	ldrb	r3, [r7, #23]
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3718      	adds	r7, #24
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b084      	sub	sp, #16
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
 800e718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e71a:	2300      	movs	r3, #0
 800e71c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e724:	2b01      	cmp	r3, #1
 800e726:	d101      	bne.n	800e72c <HAL_TIM_ConfigClockSource+0x1c>
 800e728:	2302      	movs	r3, #2
 800e72a:	e0b4      	b.n	800e896 <HAL_TIM_ConfigClockSource+0x186>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2201      	movs	r2, #1
 800e730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2202      	movs	r2, #2
 800e738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	689b      	ldr	r3, [r3, #8]
 800e742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e74a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e752:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	68ba      	ldr	r2, [r7, #8]
 800e75a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e764:	d03e      	beq.n	800e7e4 <HAL_TIM_ConfigClockSource+0xd4>
 800e766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e76a:	f200 8087 	bhi.w	800e87c <HAL_TIM_ConfigClockSource+0x16c>
 800e76e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e772:	f000 8086 	beq.w	800e882 <HAL_TIM_ConfigClockSource+0x172>
 800e776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e77a:	d87f      	bhi.n	800e87c <HAL_TIM_ConfigClockSource+0x16c>
 800e77c:	2b70      	cmp	r3, #112	@ 0x70
 800e77e:	d01a      	beq.n	800e7b6 <HAL_TIM_ConfigClockSource+0xa6>
 800e780:	2b70      	cmp	r3, #112	@ 0x70
 800e782:	d87b      	bhi.n	800e87c <HAL_TIM_ConfigClockSource+0x16c>
 800e784:	2b60      	cmp	r3, #96	@ 0x60
 800e786:	d050      	beq.n	800e82a <HAL_TIM_ConfigClockSource+0x11a>
 800e788:	2b60      	cmp	r3, #96	@ 0x60
 800e78a:	d877      	bhi.n	800e87c <HAL_TIM_ConfigClockSource+0x16c>
 800e78c:	2b50      	cmp	r3, #80	@ 0x50
 800e78e:	d03c      	beq.n	800e80a <HAL_TIM_ConfigClockSource+0xfa>
 800e790:	2b50      	cmp	r3, #80	@ 0x50
 800e792:	d873      	bhi.n	800e87c <HAL_TIM_ConfigClockSource+0x16c>
 800e794:	2b40      	cmp	r3, #64	@ 0x40
 800e796:	d058      	beq.n	800e84a <HAL_TIM_ConfigClockSource+0x13a>
 800e798:	2b40      	cmp	r3, #64	@ 0x40
 800e79a:	d86f      	bhi.n	800e87c <HAL_TIM_ConfigClockSource+0x16c>
 800e79c:	2b30      	cmp	r3, #48	@ 0x30
 800e79e:	d064      	beq.n	800e86a <HAL_TIM_ConfigClockSource+0x15a>
 800e7a0:	2b30      	cmp	r3, #48	@ 0x30
 800e7a2:	d86b      	bhi.n	800e87c <HAL_TIM_ConfigClockSource+0x16c>
 800e7a4:	2b20      	cmp	r3, #32
 800e7a6:	d060      	beq.n	800e86a <HAL_TIM_ConfigClockSource+0x15a>
 800e7a8:	2b20      	cmp	r3, #32
 800e7aa:	d867      	bhi.n	800e87c <HAL_TIM_ConfigClockSource+0x16c>
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d05c      	beq.n	800e86a <HAL_TIM_ConfigClockSource+0x15a>
 800e7b0:	2b10      	cmp	r3, #16
 800e7b2:	d05a      	beq.n	800e86a <HAL_TIM_ConfigClockSource+0x15a>
 800e7b4:	e062      	b.n	800e87c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e7c6:	f000 fb69 	bl	800ee9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	689b      	ldr	r3, [r3, #8]
 800e7d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e7d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	68ba      	ldr	r2, [r7, #8]
 800e7e0:	609a      	str	r2, [r3, #8]
      break;
 800e7e2:	e04f      	b.n	800e884 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e7f4:	f000 fb52 	bl	800ee9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	689a      	ldr	r2, [r3, #8]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e806:	609a      	str	r2, [r3, #8]
      break;
 800e808:	e03c      	b.n	800e884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e816:	461a      	mov	r2, r3
 800e818:	f000 fac6 	bl	800eda8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	2150      	movs	r1, #80	@ 0x50
 800e822:	4618      	mov	r0, r3
 800e824:	f000 fb1f 	bl	800ee66 <TIM_ITRx_SetConfig>
      break;
 800e828:	e02c      	b.n	800e884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e836:	461a      	mov	r2, r3
 800e838:	f000 fae5 	bl	800ee06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	2160      	movs	r1, #96	@ 0x60
 800e842:	4618      	mov	r0, r3
 800e844:	f000 fb0f 	bl	800ee66 <TIM_ITRx_SetConfig>
      break;
 800e848:	e01c      	b.n	800e884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e856:	461a      	mov	r2, r3
 800e858:	f000 faa6 	bl	800eda8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	2140      	movs	r1, #64	@ 0x40
 800e862:	4618      	mov	r0, r3
 800e864:	f000 faff 	bl	800ee66 <TIM_ITRx_SetConfig>
      break;
 800e868:	e00c      	b.n	800e884 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	4619      	mov	r1, r3
 800e874:	4610      	mov	r0, r2
 800e876:	f000 faf6 	bl	800ee66 <TIM_ITRx_SetConfig>
      break;
 800e87a:	e003      	b.n	800e884 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e87c:	2301      	movs	r3, #1
 800e87e:	73fb      	strb	r3, [r7, #15]
      break;
 800e880:	e000      	b.n	800e884 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e882:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2201      	movs	r2, #1
 800e888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2200      	movs	r2, #0
 800e890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e894:	7bfb      	ldrb	r3, [r7, #15]
}
 800e896:	4618      	mov	r0, r3
 800e898:	3710      	adds	r7, #16
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}

0800e89e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e89e:	b480      	push	{r7}
 800e8a0:	b083      	sub	sp, #12
 800e8a2:	af00      	add	r7, sp, #0
 800e8a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e8a6:	bf00      	nop
 800e8a8:	370c      	adds	r7, #12
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b0:	4770      	bx	lr

0800e8b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e8b2:	b480      	push	{r7}
 800e8b4:	b083      	sub	sp, #12
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e8ba:	bf00      	nop
 800e8bc:	370c      	adds	r7, #12
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c4:	4770      	bx	lr

0800e8c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e8c6:	b480      	push	{r7}
 800e8c8:	b083      	sub	sp, #12
 800e8ca:	af00      	add	r7, sp, #0
 800e8cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e8ce:	bf00      	nop
 800e8d0:	370c      	adds	r7, #12
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d8:	4770      	bx	lr

0800e8da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e8da:	b480      	push	{r7}
 800e8dc:	b083      	sub	sp, #12
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e8e2:	bf00      	nop
 800e8e4:	370c      	adds	r7, #12
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ec:	4770      	bx	lr
	...

0800e8f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	b085      	sub	sp, #20
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	4a46      	ldr	r2, [pc, #280]	@ (800ea1c <TIM_Base_SetConfig+0x12c>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d013      	beq.n	800e930 <TIM_Base_SetConfig+0x40>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e90e:	d00f      	beq.n	800e930 <TIM_Base_SetConfig+0x40>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	4a43      	ldr	r2, [pc, #268]	@ (800ea20 <TIM_Base_SetConfig+0x130>)
 800e914:	4293      	cmp	r3, r2
 800e916:	d00b      	beq.n	800e930 <TIM_Base_SetConfig+0x40>
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	4a42      	ldr	r2, [pc, #264]	@ (800ea24 <TIM_Base_SetConfig+0x134>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d007      	beq.n	800e930 <TIM_Base_SetConfig+0x40>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	4a41      	ldr	r2, [pc, #260]	@ (800ea28 <TIM_Base_SetConfig+0x138>)
 800e924:	4293      	cmp	r3, r2
 800e926:	d003      	beq.n	800e930 <TIM_Base_SetConfig+0x40>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	4a40      	ldr	r2, [pc, #256]	@ (800ea2c <TIM_Base_SetConfig+0x13c>)
 800e92c:	4293      	cmp	r3, r2
 800e92e:	d108      	bne.n	800e942 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	685b      	ldr	r3, [r3, #4]
 800e93c:	68fa      	ldr	r2, [r7, #12]
 800e93e:	4313      	orrs	r3, r2
 800e940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	4a35      	ldr	r2, [pc, #212]	@ (800ea1c <TIM_Base_SetConfig+0x12c>)
 800e946:	4293      	cmp	r3, r2
 800e948:	d02b      	beq.n	800e9a2 <TIM_Base_SetConfig+0xb2>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e950:	d027      	beq.n	800e9a2 <TIM_Base_SetConfig+0xb2>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	4a32      	ldr	r2, [pc, #200]	@ (800ea20 <TIM_Base_SetConfig+0x130>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d023      	beq.n	800e9a2 <TIM_Base_SetConfig+0xb2>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	4a31      	ldr	r2, [pc, #196]	@ (800ea24 <TIM_Base_SetConfig+0x134>)
 800e95e:	4293      	cmp	r3, r2
 800e960:	d01f      	beq.n	800e9a2 <TIM_Base_SetConfig+0xb2>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	4a30      	ldr	r2, [pc, #192]	@ (800ea28 <TIM_Base_SetConfig+0x138>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d01b      	beq.n	800e9a2 <TIM_Base_SetConfig+0xb2>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4a2f      	ldr	r2, [pc, #188]	@ (800ea2c <TIM_Base_SetConfig+0x13c>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d017      	beq.n	800e9a2 <TIM_Base_SetConfig+0xb2>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	4a2e      	ldr	r2, [pc, #184]	@ (800ea30 <TIM_Base_SetConfig+0x140>)
 800e976:	4293      	cmp	r3, r2
 800e978:	d013      	beq.n	800e9a2 <TIM_Base_SetConfig+0xb2>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	4a2d      	ldr	r2, [pc, #180]	@ (800ea34 <TIM_Base_SetConfig+0x144>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d00f      	beq.n	800e9a2 <TIM_Base_SetConfig+0xb2>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	4a2c      	ldr	r2, [pc, #176]	@ (800ea38 <TIM_Base_SetConfig+0x148>)
 800e986:	4293      	cmp	r3, r2
 800e988:	d00b      	beq.n	800e9a2 <TIM_Base_SetConfig+0xb2>
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	4a2b      	ldr	r2, [pc, #172]	@ (800ea3c <TIM_Base_SetConfig+0x14c>)
 800e98e:	4293      	cmp	r3, r2
 800e990:	d007      	beq.n	800e9a2 <TIM_Base_SetConfig+0xb2>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	4a2a      	ldr	r2, [pc, #168]	@ (800ea40 <TIM_Base_SetConfig+0x150>)
 800e996:	4293      	cmp	r3, r2
 800e998:	d003      	beq.n	800e9a2 <TIM_Base_SetConfig+0xb2>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	4a29      	ldr	r2, [pc, #164]	@ (800ea44 <TIM_Base_SetConfig+0x154>)
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	d108      	bne.n	800e9b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e9a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	68db      	ldr	r3, [r3, #12]
 800e9ae:	68fa      	ldr	r2, [r7, #12]
 800e9b0:	4313      	orrs	r3, r2
 800e9b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	695b      	ldr	r3, [r3, #20]
 800e9be:	4313      	orrs	r3, r2
 800e9c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	68fa      	ldr	r2, [r7, #12]
 800e9c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	689a      	ldr	r2, [r3, #8]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	681a      	ldr	r2, [r3, #0]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	4a10      	ldr	r2, [pc, #64]	@ (800ea1c <TIM_Base_SetConfig+0x12c>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d003      	beq.n	800e9e8 <TIM_Base_SetConfig+0xf8>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	4a12      	ldr	r2, [pc, #72]	@ (800ea2c <TIM_Base_SetConfig+0x13c>)
 800e9e4:	4293      	cmp	r3, r2
 800e9e6:	d103      	bne.n	800e9f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	691a      	ldr	r2, [r3, #16]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	691b      	ldr	r3, [r3, #16]
 800e9fa:	f003 0301 	and.w	r3, r3, #1
 800e9fe:	2b01      	cmp	r3, #1
 800ea00:	d105      	bne.n	800ea0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	691b      	ldr	r3, [r3, #16]
 800ea06:	f023 0201 	bic.w	r2, r3, #1
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	611a      	str	r2, [r3, #16]
  }
}
 800ea0e:	bf00      	nop
 800ea10:	3714      	adds	r7, #20
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr
 800ea1a:	bf00      	nop
 800ea1c:	40010000 	.word	0x40010000
 800ea20:	40000400 	.word	0x40000400
 800ea24:	40000800 	.word	0x40000800
 800ea28:	40000c00 	.word	0x40000c00
 800ea2c:	40010400 	.word	0x40010400
 800ea30:	40014000 	.word	0x40014000
 800ea34:	40014400 	.word	0x40014400
 800ea38:	40014800 	.word	0x40014800
 800ea3c:	40001800 	.word	0x40001800
 800ea40:	40001c00 	.word	0x40001c00
 800ea44:	40002000 	.word	0x40002000

0800ea48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b087      	sub	sp, #28
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6a1b      	ldr	r3, [r3, #32]
 800ea56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6a1b      	ldr	r3, [r3, #32]
 800ea5c:	f023 0201 	bic.w	r2, r3, #1
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	699b      	ldr	r3, [r3, #24]
 800ea6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f023 0303 	bic.w	r3, r3, #3
 800ea7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	68fa      	ldr	r2, [r7, #12]
 800ea86:	4313      	orrs	r3, r2
 800ea88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	f023 0302 	bic.w	r3, r3, #2
 800ea90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	689b      	ldr	r3, [r3, #8]
 800ea96:	697a      	ldr	r2, [r7, #20]
 800ea98:	4313      	orrs	r3, r2
 800ea9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	4a20      	ldr	r2, [pc, #128]	@ (800eb20 <TIM_OC1_SetConfig+0xd8>)
 800eaa0:	4293      	cmp	r3, r2
 800eaa2:	d003      	beq.n	800eaac <TIM_OC1_SetConfig+0x64>
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	4a1f      	ldr	r2, [pc, #124]	@ (800eb24 <TIM_OC1_SetConfig+0xdc>)
 800eaa8:	4293      	cmp	r3, r2
 800eaaa:	d10c      	bne.n	800eac6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800eaac:	697b      	ldr	r3, [r7, #20]
 800eaae:	f023 0308 	bic.w	r3, r3, #8
 800eab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	68db      	ldr	r3, [r3, #12]
 800eab8:	697a      	ldr	r2, [r7, #20]
 800eaba:	4313      	orrs	r3, r2
 800eabc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	f023 0304 	bic.w	r3, r3, #4
 800eac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	4a15      	ldr	r2, [pc, #84]	@ (800eb20 <TIM_OC1_SetConfig+0xd8>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d003      	beq.n	800ead6 <TIM_OC1_SetConfig+0x8e>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	4a14      	ldr	r2, [pc, #80]	@ (800eb24 <TIM_OC1_SetConfig+0xdc>)
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d111      	bne.n	800eafa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eadc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	695b      	ldr	r3, [r3, #20]
 800eaea:	693a      	ldr	r2, [r7, #16]
 800eaec:	4313      	orrs	r3, r2
 800eaee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	699b      	ldr	r3, [r3, #24]
 800eaf4:	693a      	ldr	r2, [r7, #16]
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	693a      	ldr	r2, [r7, #16]
 800eafe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	68fa      	ldr	r2, [r7, #12]
 800eb04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	685a      	ldr	r2, [r3, #4]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	697a      	ldr	r2, [r7, #20]
 800eb12:	621a      	str	r2, [r3, #32]
}
 800eb14:	bf00      	nop
 800eb16:	371c      	adds	r7, #28
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr
 800eb20:	40010000 	.word	0x40010000
 800eb24:	40010400 	.word	0x40010400

0800eb28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b087      	sub	sp, #28
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6a1b      	ldr	r3, [r3, #32]
 800eb36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6a1b      	ldr	r3, [r3, #32]
 800eb3c:	f023 0210 	bic.w	r2, r3, #16
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	699b      	ldr	r3, [r3, #24]
 800eb4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eb56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eb5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	021b      	lsls	r3, r3, #8
 800eb66:	68fa      	ldr	r2, [r7, #12]
 800eb68:	4313      	orrs	r3, r2
 800eb6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	f023 0320 	bic.w	r3, r3, #32
 800eb72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	689b      	ldr	r3, [r3, #8]
 800eb78:	011b      	lsls	r3, r3, #4
 800eb7a:	697a      	ldr	r2, [r7, #20]
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	4a22      	ldr	r2, [pc, #136]	@ (800ec0c <TIM_OC2_SetConfig+0xe4>)
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d003      	beq.n	800eb90 <TIM_OC2_SetConfig+0x68>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	4a21      	ldr	r2, [pc, #132]	@ (800ec10 <TIM_OC2_SetConfig+0xe8>)
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	d10d      	bne.n	800ebac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	68db      	ldr	r3, [r3, #12]
 800eb9c:	011b      	lsls	r3, r3, #4
 800eb9e:	697a      	ldr	r2, [r7, #20]
 800eba0:	4313      	orrs	r3, r2
 800eba2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ebaa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	4a17      	ldr	r2, [pc, #92]	@ (800ec0c <TIM_OC2_SetConfig+0xe4>)
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	d003      	beq.n	800ebbc <TIM_OC2_SetConfig+0x94>
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	4a16      	ldr	r2, [pc, #88]	@ (800ec10 <TIM_OC2_SetConfig+0xe8>)
 800ebb8:	4293      	cmp	r3, r2
 800ebba:	d113      	bne.n	800ebe4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ebc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ebca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	695b      	ldr	r3, [r3, #20]
 800ebd0:	009b      	lsls	r3, r3, #2
 800ebd2:	693a      	ldr	r2, [r7, #16]
 800ebd4:	4313      	orrs	r3, r2
 800ebd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	699b      	ldr	r3, [r3, #24]
 800ebdc:	009b      	lsls	r3, r3, #2
 800ebde:	693a      	ldr	r2, [r7, #16]
 800ebe0:	4313      	orrs	r3, r2
 800ebe2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	693a      	ldr	r2, [r7, #16]
 800ebe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	68fa      	ldr	r2, [r7, #12]
 800ebee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	685a      	ldr	r2, [r3, #4]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	697a      	ldr	r2, [r7, #20]
 800ebfc:	621a      	str	r2, [r3, #32]
}
 800ebfe:	bf00      	nop
 800ec00:	371c      	adds	r7, #28
 800ec02:	46bd      	mov	sp, r7
 800ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec08:	4770      	bx	lr
 800ec0a:	bf00      	nop
 800ec0c:	40010000 	.word	0x40010000
 800ec10:	40010400 	.word	0x40010400

0800ec14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec14:	b480      	push	{r7}
 800ec16:	b087      	sub	sp, #28
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6a1b      	ldr	r3, [r3, #32]
 800ec22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6a1b      	ldr	r3, [r3, #32]
 800ec28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	69db      	ldr	r3, [r3, #28]
 800ec3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ec42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f023 0303 	bic.w	r3, r3, #3
 800ec4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	68fa      	ldr	r2, [r7, #12]
 800ec52:	4313      	orrs	r3, r2
 800ec54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ec5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	689b      	ldr	r3, [r3, #8]
 800ec62:	021b      	lsls	r3, r3, #8
 800ec64:	697a      	ldr	r2, [r7, #20]
 800ec66:	4313      	orrs	r3, r2
 800ec68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	4a21      	ldr	r2, [pc, #132]	@ (800ecf4 <TIM_OC3_SetConfig+0xe0>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d003      	beq.n	800ec7a <TIM_OC3_SetConfig+0x66>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	4a20      	ldr	r2, [pc, #128]	@ (800ecf8 <TIM_OC3_SetConfig+0xe4>)
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d10d      	bne.n	800ec96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ec80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	68db      	ldr	r3, [r3, #12]
 800ec86:	021b      	lsls	r3, r3, #8
 800ec88:	697a      	ldr	r2, [r7, #20]
 800ec8a:	4313      	orrs	r3, r2
 800ec8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ec94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	4a16      	ldr	r2, [pc, #88]	@ (800ecf4 <TIM_OC3_SetConfig+0xe0>)
 800ec9a:	4293      	cmp	r3, r2
 800ec9c:	d003      	beq.n	800eca6 <TIM_OC3_SetConfig+0x92>
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	4a15      	ldr	r2, [pc, #84]	@ (800ecf8 <TIM_OC3_SetConfig+0xe4>)
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d113      	bne.n	800ecce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ecac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ecb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	695b      	ldr	r3, [r3, #20]
 800ecba:	011b      	lsls	r3, r3, #4
 800ecbc:	693a      	ldr	r2, [r7, #16]
 800ecbe:	4313      	orrs	r3, r2
 800ecc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	699b      	ldr	r3, [r3, #24]
 800ecc6:	011b      	lsls	r3, r3, #4
 800ecc8:	693a      	ldr	r2, [r7, #16]
 800ecca:	4313      	orrs	r3, r2
 800eccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	693a      	ldr	r2, [r7, #16]
 800ecd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	68fa      	ldr	r2, [r7, #12]
 800ecd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	685a      	ldr	r2, [r3, #4]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	697a      	ldr	r2, [r7, #20]
 800ece6:	621a      	str	r2, [r3, #32]
}
 800ece8:	bf00      	nop
 800ecea:	371c      	adds	r7, #28
 800ecec:	46bd      	mov	sp, r7
 800ecee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf2:	4770      	bx	lr
 800ecf4:	40010000 	.word	0x40010000
 800ecf8:	40010400 	.word	0x40010400

0800ecfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b087      	sub	sp, #28
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6a1b      	ldr	r3, [r3, #32]
 800ed0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6a1b      	ldr	r3, [r3, #32]
 800ed10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	69db      	ldr	r3, [r3, #28]
 800ed22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ed2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ed32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	021b      	lsls	r3, r3, #8
 800ed3a:	68fa      	ldr	r2, [r7, #12]
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ed46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	689b      	ldr	r3, [r3, #8]
 800ed4c:	031b      	lsls	r3, r3, #12
 800ed4e:	693a      	ldr	r2, [r7, #16]
 800ed50:	4313      	orrs	r3, r2
 800ed52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	4a12      	ldr	r2, [pc, #72]	@ (800eda0 <TIM_OC4_SetConfig+0xa4>)
 800ed58:	4293      	cmp	r3, r2
 800ed5a:	d003      	beq.n	800ed64 <TIM_OC4_SetConfig+0x68>
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	4a11      	ldr	r2, [pc, #68]	@ (800eda4 <TIM_OC4_SetConfig+0xa8>)
 800ed60:	4293      	cmp	r3, r2
 800ed62:	d109      	bne.n	800ed78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ed6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	695b      	ldr	r3, [r3, #20]
 800ed70:	019b      	lsls	r3, r3, #6
 800ed72:	697a      	ldr	r2, [r7, #20]
 800ed74:	4313      	orrs	r3, r2
 800ed76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	697a      	ldr	r2, [r7, #20]
 800ed7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	68fa      	ldr	r2, [r7, #12]
 800ed82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	685a      	ldr	r2, [r3, #4]
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	693a      	ldr	r2, [r7, #16]
 800ed90:	621a      	str	r2, [r3, #32]
}
 800ed92:	bf00      	nop
 800ed94:	371c      	adds	r7, #28
 800ed96:	46bd      	mov	sp, r7
 800ed98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9c:	4770      	bx	lr
 800ed9e:	bf00      	nop
 800eda0:	40010000 	.word	0x40010000
 800eda4:	40010400 	.word	0x40010400

0800eda8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eda8:	b480      	push	{r7}
 800edaa:	b087      	sub	sp, #28
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	6a1b      	ldr	r3, [r3, #32]
 800edb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	6a1b      	ldr	r3, [r3, #32]
 800edbe:	f023 0201 	bic.w	r2, r3, #1
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	699b      	ldr	r3, [r3, #24]
 800edca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800edd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	011b      	lsls	r3, r3, #4
 800edd8:	693a      	ldr	r2, [r7, #16]
 800edda:	4313      	orrs	r3, r2
 800eddc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	f023 030a 	bic.w	r3, r3, #10
 800ede4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ede6:	697a      	ldr	r2, [r7, #20]
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	4313      	orrs	r3, r2
 800edec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	693a      	ldr	r2, [r7, #16]
 800edf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	697a      	ldr	r2, [r7, #20]
 800edf8:	621a      	str	r2, [r3, #32]
}
 800edfa:	bf00      	nop
 800edfc:	371c      	adds	r7, #28
 800edfe:	46bd      	mov	sp, r7
 800ee00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee04:	4770      	bx	lr

0800ee06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ee06:	b480      	push	{r7}
 800ee08:	b087      	sub	sp, #28
 800ee0a:	af00      	add	r7, sp, #0
 800ee0c:	60f8      	str	r0, [r7, #12]
 800ee0e:	60b9      	str	r1, [r7, #8]
 800ee10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	6a1b      	ldr	r3, [r3, #32]
 800ee16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	6a1b      	ldr	r3, [r3, #32]
 800ee1c:	f023 0210 	bic.w	r2, r3, #16
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	699b      	ldr	r3, [r3, #24]
 800ee28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ee2a:	693b      	ldr	r3, [r7, #16]
 800ee2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ee30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	031b      	lsls	r3, r3, #12
 800ee36:	693a      	ldr	r2, [r7, #16]
 800ee38:	4313      	orrs	r3, r2
 800ee3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ee42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	011b      	lsls	r3, r3, #4
 800ee48:	697a      	ldr	r2, [r7, #20]
 800ee4a:	4313      	orrs	r3, r2
 800ee4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	693a      	ldr	r2, [r7, #16]
 800ee52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	697a      	ldr	r2, [r7, #20]
 800ee58:	621a      	str	r2, [r3, #32]
}
 800ee5a:	bf00      	nop
 800ee5c:	371c      	adds	r7, #28
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee64:	4770      	bx	lr

0800ee66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ee66:	b480      	push	{r7}
 800ee68:	b085      	sub	sp, #20
 800ee6a:	af00      	add	r7, sp, #0
 800ee6c:	6078      	str	r0, [r7, #4]
 800ee6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	689b      	ldr	r3, [r3, #8]
 800ee74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ee7e:	683a      	ldr	r2, [r7, #0]
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	4313      	orrs	r3, r2
 800ee84:	f043 0307 	orr.w	r3, r3, #7
 800ee88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	68fa      	ldr	r2, [r7, #12]
 800ee8e:	609a      	str	r2, [r3, #8]
}
 800ee90:	bf00      	nop
 800ee92:	3714      	adds	r7, #20
 800ee94:	46bd      	mov	sp, r7
 800ee96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9a:	4770      	bx	lr

0800ee9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ee9c:	b480      	push	{r7}
 800ee9e:	b087      	sub	sp, #28
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	60f8      	str	r0, [r7, #12]
 800eea4:	60b9      	str	r1, [r7, #8]
 800eea6:	607a      	str	r2, [r7, #4]
 800eea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	689b      	ldr	r3, [r3, #8]
 800eeae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800eeb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	021a      	lsls	r2, r3, #8
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	431a      	orrs	r2, r3
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	4313      	orrs	r3, r2
 800eec4:	697a      	ldr	r2, [r7, #20]
 800eec6:	4313      	orrs	r3, r2
 800eec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	697a      	ldr	r2, [r7, #20]
 800eece:	609a      	str	r2, [r3, #8]
}
 800eed0:	bf00      	nop
 800eed2:	371c      	adds	r7, #28
 800eed4:	46bd      	mov	sp, r7
 800eed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeda:	4770      	bx	lr

0800eedc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800eedc:	b480      	push	{r7}
 800eede:	b087      	sub	sp, #28
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	60f8      	str	r0, [r7, #12]
 800eee4:	60b9      	str	r1, [r7, #8]
 800eee6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	f003 031f 	and.w	r3, r3, #31
 800eeee:	2201      	movs	r2, #1
 800eef0:	fa02 f303 	lsl.w	r3, r2, r3
 800eef4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	6a1a      	ldr	r2, [r3, #32]
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	43db      	mvns	r3, r3
 800eefe:	401a      	ands	r2, r3
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	6a1a      	ldr	r2, [r3, #32]
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	f003 031f 	and.w	r3, r3, #31
 800ef0e:	6879      	ldr	r1, [r7, #4]
 800ef10:	fa01 f303 	lsl.w	r3, r1, r3
 800ef14:	431a      	orrs	r2, r3
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	621a      	str	r2, [r3, #32]
}
 800ef1a:	bf00      	nop
 800ef1c:	371c      	adds	r7, #28
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef24:	4770      	bx	lr
	...

0800ef28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ef28:	b480      	push	{r7}
 800ef2a:	b085      	sub	sp, #20
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ef38:	2b01      	cmp	r3, #1
 800ef3a:	d101      	bne.n	800ef40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ef3c:	2302      	movs	r3, #2
 800ef3e:	e05a      	b.n	800eff6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2201      	movs	r2, #1
 800ef44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2202      	movs	r2, #2
 800ef4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	685b      	ldr	r3, [r3, #4]
 800ef56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	689b      	ldr	r3, [r3, #8]
 800ef5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	68fa      	ldr	r2, [r7, #12]
 800ef6e:	4313      	orrs	r3, r2
 800ef70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	68fa      	ldr	r2, [r7, #12]
 800ef78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	4a21      	ldr	r2, [pc, #132]	@ (800f004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d022      	beq.n	800efca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef8c:	d01d      	beq.n	800efca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	4a1d      	ldr	r2, [pc, #116]	@ (800f008 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ef94:	4293      	cmp	r3, r2
 800ef96:	d018      	beq.n	800efca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	4a1b      	ldr	r2, [pc, #108]	@ (800f00c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	d013      	beq.n	800efca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	4a1a      	ldr	r2, [pc, #104]	@ (800f010 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800efa8:	4293      	cmp	r3, r2
 800efaa:	d00e      	beq.n	800efca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	4a18      	ldr	r2, [pc, #96]	@ (800f014 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800efb2:	4293      	cmp	r3, r2
 800efb4:	d009      	beq.n	800efca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	4a17      	ldr	r2, [pc, #92]	@ (800f018 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800efbc:	4293      	cmp	r3, r2
 800efbe:	d004      	beq.n	800efca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	4a15      	ldr	r2, [pc, #84]	@ (800f01c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d10c      	bne.n	800efe4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800efd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	685b      	ldr	r3, [r3, #4]
 800efd6:	68ba      	ldr	r2, [r7, #8]
 800efd8:	4313      	orrs	r3, r2
 800efda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	68ba      	ldr	r2, [r7, #8]
 800efe2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2201      	movs	r2, #1
 800efe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2200      	movs	r2, #0
 800eff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800eff4:	2300      	movs	r3, #0
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3714      	adds	r7, #20
 800effa:	46bd      	mov	sp, r7
 800effc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f000:	4770      	bx	lr
 800f002:	bf00      	nop
 800f004:	40010000 	.word	0x40010000
 800f008:	40000400 	.word	0x40000400
 800f00c:	40000800 	.word	0x40000800
 800f010:	40000c00 	.word	0x40000c00
 800f014:	40010400 	.word	0x40010400
 800f018:	40014000 	.word	0x40014000
 800f01c:	40001800 	.word	0x40001800

0800f020 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f020:	b480      	push	{r7}
 800f022:	b083      	sub	sp, #12
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f028:	bf00      	nop
 800f02a:	370c      	adds	r7, #12
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr

0800f034 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f034:	b480      	push	{r7}
 800f036:	b083      	sub	sp, #12
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f03c:	bf00      	nop
 800f03e:	370c      	adds	r7, #12
 800f040:	46bd      	mov	sp, r7
 800f042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f046:	4770      	bx	lr

0800f048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b082      	sub	sp, #8
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d101      	bne.n	800f05a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f056:	2301      	movs	r3, #1
 800f058:	e042      	b.n	800f0e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f060:	b2db      	uxtb	r3, r3
 800f062:	2b00      	cmp	r3, #0
 800f064:	d106      	bne.n	800f074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2200      	movs	r2, #0
 800f06a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f7fa fd6e 	bl	8009b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2224      	movs	r2, #36	@ 0x24
 800f078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	68da      	ldr	r2, [r3, #12]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f08a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f000 ff5f 	bl	800ff50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	691a      	ldr	r2, [r3, #16]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f0a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	695a      	ldr	r2, [r3, #20]
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f0b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	68da      	ldr	r2, [r3, #12]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f0c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2220      	movs	r2, #32
 800f0cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2220      	movs	r2, #32
 800f0d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800f0de:	2300      	movs	r3, #0
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3708      	adds	r7, #8
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}

0800f0e8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b082      	sub	sp, #8
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d101      	bne.n	800f0fa <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	e024      	b.n	800f144 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2224      	movs	r2, #36	@ 0x24
 800f0fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	68da      	ldr	r2, [r3, #12]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f110:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f7fa fdd2 	bl	8009cbc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2200      	movs	r2, #0
 800f11c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2200      	movs	r2, #0
 800f122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2200      	movs	r2, #0
 800f12a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2200      	movs	r2, #0
 800f132:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2200      	movs	r2, #0
 800f138:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2200      	movs	r2, #0
 800f13e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f142:	2300      	movs	r3, #0
}
 800f144:	4618      	mov	r0, r3
 800f146:	3708      	adds	r7, #8
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}

0800f14c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b08c      	sub	sp, #48	@ 0x30
 800f150:	af00      	add	r7, sp, #0
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	60b9      	str	r1, [r7, #8]
 800f156:	4613      	mov	r3, r2
 800f158:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f160:	b2db      	uxtb	r3, r3
 800f162:	2b20      	cmp	r3, #32
 800f164:	d156      	bne.n	800f214 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d002      	beq.n	800f172 <HAL_UART_Transmit_DMA+0x26>
 800f16c:	88fb      	ldrh	r3, [r7, #6]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d101      	bne.n	800f176 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800f172:	2301      	movs	r3, #1
 800f174:	e04f      	b.n	800f216 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800f176:	68ba      	ldr	r2, [r7, #8]
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	88fa      	ldrh	r2, [r7, #6]
 800f180:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	88fa      	ldrh	r2, [r7, #6]
 800f186:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	2200      	movs	r2, #0
 800f18c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	2221      	movs	r2, #33	@ 0x21
 800f192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f19a:	4a21      	ldr	r2, [pc, #132]	@ (800f220 <HAL_UART_Transmit_DMA+0xd4>)
 800f19c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1a2:	4a20      	ldr	r2, [pc, #128]	@ (800f224 <HAL_UART_Transmit_DMA+0xd8>)
 800f1a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1aa:	4a1f      	ldr	r2, [pc, #124]	@ (800f228 <HAL_UART_Transmit_DMA+0xdc>)
 800f1ac:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800f1b6:	f107 0308 	add.w	r3, r7, #8
 800f1ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800f1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1c2:	6819      	ldr	r1, [r3, #0]
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	3304      	adds	r3, #4
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	88fb      	ldrh	r3, [r7, #6]
 800f1ce:	f7fb fb51 	bl	800a874 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f1da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	3314      	adds	r3, #20
 800f1e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1e4:	69bb      	ldr	r3, [r7, #24]
 800f1e6:	e853 3f00 	ldrex	r3, [r3]
 800f1ea:	617b      	str	r3, [r7, #20]
   return(result);
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f1f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	3314      	adds	r3, #20
 800f1fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f1fc:	627a      	str	r2, [r7, #36]	@ 0x24
 800f1fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f200:	6a39      	ldr	r1, [r7, #32]
 800f202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f204:	e841 2300 	strex	r3, r2, [r1]
 800f208:	61fb      	str	r3, [r7, #28]
   return(result);
 800f20a:	69fb      	ldr	r3, [r7, #28]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d1e5      	bne.n	800f1dc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800f210:	2300      	movs	r3, #0
 800f212:	e000      	b.n	800f216 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800f214:	2302      	movs	r3, #2
  }
}
 800f216:	4618      	mov	r0, r3
 800f218:	3730      	adds	r7, #48	@ 0x30
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop
 800f220:	0800f7dd 	.word	0x0800f7dd
 800f224:	0800f877 	.word	0x0800f877
 800f228:	0800f9fb 	.word	0x0800f9fb

0800f22c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b084      	sub	sp, #16
 800f230:	af00      	add	r7, sp, #0
 800f232:	60f8      	str	r0, [r7, #12]
 800f234:	60b9      	str	r1, [r7, #8]
 800f236:	4613      	mov	r3, r2
 800f238:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f240:	b2db      	uxtb	r3, r3
 800f242:	2b20      	cmp	r3, #32
 800f244:	d112      	bne.n	800f26c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d002      	beq.n	800f252 <HAL_UART_Receive_DMA+0x26>
 800f24c:	88fb      	ldrh	r3, [r7, #6]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d101      	bne.n	800f256 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800f252:	2301      	movs	r3, #1
 800f254:	e00b      	b.n	800f26e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	2200      	movs	r2, #0
 800f25a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f25c:	88fb      	ldrh	r3, [r7, #6]
 800f25e:	461a      	mov	r2, r3
 800f260:	68b9      	ldr	r1, [r7, #8]
 800f262:	68f8      	ldr	r0, [r7, #12]
 800f264:	f000 fc14 	bl	800fa90 <UART_Start_Receive_DMA>
 800f268:	4603      	mov	r3, r0
 800f26a:	e000      	b.n	800f26e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800f26c:	2302      	movs	r3, #2
  }
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3710      	adds	r7, #16
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
	...

0800f278 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b0ba      	sub	sp, #232	@ 0xe8
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	68db      	ldr	r3, [r3, #12]
 800f290:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	695b      	ldr	r3, [r3, #20]
 800f29a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f2aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f2ae:	f003 030f 	and.w	r3, r3, #15
 800f2b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800f2b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d10f      	bne.n	800f2de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f2be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f2c2:	f003 0320 	and.w	r3, r3, #32
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d009      	beq.n	800f2de <HAL_UART_IRQHandler+0x66>
 800f2ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f2ce:	f003 0320 	and.w	r3, r3, #32
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d003      	beq.n	800f2de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f000 fd7b 	bl	800fdd2 <UART_Receive_IT>
      return;
 800f2dc:	e25b      	b.n	800f796 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800f2de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	f000 80de 	beq.w	800f4a4 <HAL_UART_IRQHandler+0x22c>
 800f2e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f2ec:	f003 0301 	and.w	r3, r3, #1
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d106      	bne.n	800f302 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f2f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f2f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	f000 80d1 	beq.w	800f4a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f306:	f003 0301 	and.w	r3, r3, #1
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d00b      	beq.n	800f326 <HAL_UART_IRQHandler+0xae>
 800f30e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f316:	2b00      	cmp	r3, #0
 800f318:	d005      	beq.n	800f326 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f31e:	f043 0201 	orr.w	r2, r3, #1
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f32a:	f003 0304 	and.w	r3, r3, #4
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d00b      	beq.n	800f34a <HAL_UART_IRQHandler+0xd2>
 800f332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f336:	f003 0301 	and.w	r3, r3, #1
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d005      	beq.n	800f34a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f342:	f043 0202 	orr.w	r2, r3, #2
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f34a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f34e:	f003 0302 	and.w	r3, r3, #2
 800f352:	2b00      	cmp	r3, #0
 800f354:	d00b      	beq.n	800f36e <HAL_UART_IRQHandler+0xf6>
 800f356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f35a:	f003 0301 	and.w	r3, r3, #1
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d005      	beq.n	800f36e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f366:	f043 0204 	orr.w	r2, r3, #4
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800f36e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f372:	f003 0308 	and.w	r3, r3, #8
 800f376:	2b00      	cmp	r3, #0
 800f378:	d011      	beq.n	800f39e <HAL_UART_IRQHandler+0x126>
 800f37a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f37e:	f003 0320 	and.w	r3, r3, #32
 800f382:	2b00      	cmp	r3, #0
 800f384:	d105      	bne.n	800f392 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800f386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f38a:	f003 0301 	and.w	r3, r3, #1
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d005      	beq.n	800f39e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f396:	f043 0208 	orr.w	r2, r3, #8
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	f000 81f2 	beq.w	800f78c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f3a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3ac:	f003 0320 	and.w	r3, r3, #32
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d008      	beq.n	800f3c6 <HAL_UART_IRQHandler+0x14e>
 800f3b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f3b8:	f003 0320 	and.w	r3, r3, #32
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d002      	beq.n	800f3c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f000 fd06 	bl	800fdd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	695b      	ldr	r3, [r3, #20]
 800f3cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3d0:	2b40      	cmp	r3, #64	@ 0x40
 800f3d2:	bf0c      	ite	eq
 800f3d4:	2301      	moveq	r3, #1
 800f3d6:	2300      	movne	r3, #0
 800f3d8:	b2db      	uxtb	r3, r3
 800f3da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3e2:	f003 0308 	and.w	r3, r3, #8
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d103      	bne.n	800f3f2 <HAL_UART_IRQHandler+0x17a>
 800f3ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d04f      	beq.n	800f492 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f000 fc0e 	bl	800fc14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	695b      	ldr	r3, [r3, #20]
 800f3fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f402:	2b40      	cmp	r3, #64	@ 0x40
 800f404:	d141      	bne.n	800f48a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	3314      	adds	r3, #20
 800f40c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f410:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f414:	e853 3f00 	ldrex	r3, [r3]
 800f418:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f41c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f420:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f424:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	3314      	adds	r3, #20
 800f42e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f432:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f436:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f43a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f43e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f442:	e841 2300 	strex	r3, r2, [r1]
 800f446:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f44a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d1d9      	bne.n	800f406 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f456:	2b00      	cmp	r3, #0
 800f458:	d013      	beq.n	800f482 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f45e:	4a7e      	ldr	r2, [pc, #504]	@ (800f658 <HAL_UART_IRQHandler+0x3e0>)
 800f460:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f466:	4618      	mov	r0, r3
 800f468:	f7fb facc 	bl	800aa04 <HAL_DMA_Abort_IT>
 800f46c:	4603      	mov	r3, r0
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d016      	beq.n	800f4a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f478:	687a      	ldr	r2, [r7, #4]
 800f47a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800f47c:	4610      	mov	r0, r2
 800f47e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f480:	e00e      	b.n	800f4a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f7fa fd90 	bl	8009fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f488:	e00a      	b.n	800f4a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f7fa fd8c 	bl	8009fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f490:	e006      	b.n	800f4a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f7fa fd88 	bl	8009fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2200      	movs	r2, #0
 800f49c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800f49e:	e175      	b.n	800f78c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4a0:	bf00      	nop
    return;
 800f4a2:	e173      	b.n	800f78c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4a8:	2b01      	cmp	r3, #1
 800f4aa:	f040 814f 	bne.w	800f74c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800f4ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f4b2:	f003 0310 	and.w	r3, r3, #16
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	f000 8148 	beq.w	800f74c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800f4bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f4c0:	f003 0310 	and.w	r3, r3, #16
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	f000 8141 	beq.w	800f74c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	60bb      	str	r3, [r7, #8]
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	60bb      	str	r3, [r7, #8]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	685b      	ldr	r3, [r3, #4]
 800f4dc:	60bb      	str	r3, [r7, #8]
 800f4de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	695b      	ldr	r3, [r3, #20]
 800f4e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4ea:	2b40      	cmp	r3, #64	@ 0x40
 800f4ec:	f040 80b6 	bne.w	800f65c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	685b      	ldr	r3, [r3, #4]
 800f4f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f4fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f500:	2b00      	cmp	r3, #0
 800f502:	f000 8145 	beq.w	800f790 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f50a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f50e:	429a      	cmp	r2, r3
 800f510:	f080 813e 	bcs.w	800f790 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f51a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f520:	69db      	ldr	r3, [r3, #28]
 800f522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f526:	f000 8088 	beq.w	800f63a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	330c      	adds	r3, #12
 800f530:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f534:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f538:	e853 3f00 	ldrex	r3, [r3]
 800f53c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f540:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f544:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f548:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	330c      	adds	r3, #12
 800f552:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800f556:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800f55a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f55e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f562:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f566:	e841 2300 	strex	r3, r2, [r1]
 800f56a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f56e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f572:	2b00      	cmp	r3, #0
 800f574:	d1d9      	bne.n	800f52a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	3314      	adds	r3, #20
 800f57c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f57e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f580:	e853 3f00 	ldrex	r3, [r3]
 800f584:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f586:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f588:	f023 0301 	bic.w	r3, r3, #1
 800f58c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	3314      	adds	r3, #20
 800f596:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f59a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f59e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f5a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f5a6:	e841 2300 	strex	r3, r2, [r1]
 800f5aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f5ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d1e1      	bne.n	800f576 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	3314      	adds	r3, #20
 800f5b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f5bc:	e853 3f00 	ldrex	r3, [r3]
 800f5c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f5c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f5c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f5c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	3314      	adds	r3, #20
 800f5d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f5d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f5d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f5dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f5de:	e841 2300 	strex	r3, r2, [r1]
 800f5e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f5e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d1e3      	bne.n	800f5b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2220      	movs	r2, #32
 800f5ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	330c      	adds	r3, #12
 800f5fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f600:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f602:	e853 3f00 	ldrex	r3, [r3]
 800f606:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f608:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f60a:	f023 0310 	bic.w	r3, r3, #16
 800f60e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	330c      	adds	r3, #12
 800f618:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800f61c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800f61e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f620:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f622:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f624:	e841 2300 	strex	r3, r2, [r1]
 800f628:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f62a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d1e3      	bne.n	800f5f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f634:	4618      	mov	r0, r3
 800f636:	f7fb f975 	bl	800a924 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2202      	movs	r2, #2
 800f63e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f648:	b29b      	uxth	r3, r3
 800f64a:	1ad3      	subs	r3, r2, r3
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	4619      	mov	r1, r3
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f000 f8b7 	bl	800f7c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f656:	e09b      	b.n	800f790 <HAL_UART_IRQHandler+0x518>
 800f658:	0800fcdb 	.word	0x0800fcdb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f664:	b29b      	uxth	r3, r3
 800f666:	1ad3      	subs	r3, r2, r3
 800f668:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f670:	b29b      	uxth	r3, r3
 800f672:	2b00      	cmp	r3, #0
 800f674:	f000 808e 	beq.w	800f794 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800f678:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	f000 8089 	beq.w	800f794 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	330c      	adds	r3, #12
 800f688:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f68c:	e853 3f00 	ldrex	r3, [r3]
 800f690:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f694:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f698:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	330c      	adds	r3, #12
 800f6a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800f6a6:	647a      	str	r2, [r7, #68]	@ 0x44
 800f6a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f6ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f6ae:	e841 2300 	strex	r3, r2, [r1]
 800f6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f6b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d1e3      	bne.n	800f682 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	3314      	adds	r3, #20
 800f6c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6c4:	e853 3f00 	ldrex	r3, [r3]
 800f6c8:	623b      	str	r3, [r7, #32]
   return(result);
 800f6ca:	6a3b      	ldr	r3, [r7, #32]
 800f6cc:	f023 0301 	bic.w	r3, r3, #1
 800f6d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	3314      	adds	r3, #20
 800f6da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f6de:	633a      	str	r2, [r7, #48]	@ 0x30
 800f6e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f6e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6e6:	e841 2300 	strex	r3, r2, [r1]
 800f6ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d1e3      	bne.n	800f6ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2220      	movs	r2, #32
 800f6f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	330c      	adds	r3, #12
 800f706:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	e853 3f00 	ldrex	r3, [r3]
 800f70e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f023 0310 	bic.w	r3, r3, #16
 800f716:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	330c      	adds	r3, #12
 800f720:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800f724:	61fa      	str	r2, [r7, #28]
 800f726:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f728:	69b9      	ldr	r1, [r7, #24]
 800f72a:	69fa      	ldr	r2, [r7, #28]
 800f72c:	e841 2300 	strex	r3, r2, [r1]
 800f730:	617b      	str	r3, [r7, #20]
   return(result);
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d1e3      	bne.n	800f700 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2202      	movs	r2, #2
 800f73c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f73e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f742:	4619      	mov	r1, r3
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f000 f83d 	bl	800f7c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f74a:	e023      	b.n	800f794 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800f74c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f754:	2b00      	cmp	r3, #0
 800f756:	d009      	beq.n	800f76c <HAL_UART_IRQHandler+0x4f4>
 800f758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f75c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f760:	2b00      	cmp	r3, #0
 800f762:	d003      	beq.n	800f76c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f000 facc 	bl	800fd02 <UART_Transmit_IT>
    return;
 800f76a:	e014      	b.n	800f796 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800f76c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f774:	2b00      	cmp	r3, #0
 800f776:	d00e      	beq.n	800f796 <HAL_UART_IRQHandler+0x51e>
 800f778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f77c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f780:	2b00      	cmp	r3, #0
 800f782:	d008      	beq.n	800f796 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f000 fb0c 	bl	800fda2 <UART_EndTransmit_IT>
    return;
 800f78a:	e004      	b.n	800f796 <HAL_UART_IRQHandler+0x51e>
    return;
 800f78c:	bf00      	nop
 800f78e:	e002      	b.n	800f796 <HAL_UART_IRQHandler+0x51e>
      return;
 800f790:	bf00      	nop
 800f792:	e000      	b.n	800f796 <HAL_UART_IRQHandler+0x51e>
      return;
 800f794:	bf00      	nop
  }
}
 800f796:	37e8      	adds	r7, #232	@ 0xe8
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}

0800f79c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f79c:	b480      	push	{r7}
 800f79e:	b083      	sub	sp, #12
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800f7a4:	bf00      	nop
 800f7a6:	370c      	adds	r7, #12
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ae:	4770      	bx	lr

0800f7b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f7b0:	b480      	push	{r7}
 800f7b2:	b083      	sub	sp, #12
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800f7b8:	bf00      	nop
 800f7ba:	370c      	adds	r7, #12
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c2:	4770      	bx	lr

0800f7c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f7c4:	b480      	push	{r7}
 800f7c6:	b083      	sub	sp, #12
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	460b      	mov	r3, r1
 800f7ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f7d0:	bf00      	nop
 800f7d2:	370c      	adds	r7, #12
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7da:	4770      	bx	lr

0800f7dc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b090      	sub	sp, #64	@ 0x40
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d137      	bne.n	800f868 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800f7f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f7fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	3314      	adds	r3, #20
 800f804:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f808:	e853 3f00 	ldrex	r3, [r3]
 800f80c:	623b      	str	r3, [r7, #32]
   return(result);
 800f80e:	6a3b      	ldr	r3, [r7, #32]
 800f810:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f814:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	3314      	adds	r3, #20
 800f81c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f81e:	633a      	str	r2, [r7, #48]	@ 0x30
 800f820:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f822:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f826:	e841 2300 	strex	r3, r2, [r1]
 800f82a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d1e5      	bne.n	800f7fe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	330c      	adds	r3, #12
 800f838:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	e853 3f00 	ldrex	r3, [r3]
 800f840:	60fb      	str	r3, [r7, #12]
   return(result);
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f848:	637b      	str	r3, [r7, #52]	@ 0x34
 800f84a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	330c      	adds	r3, #12
 800f850:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f852:	61fa      	str	r2, [r7, #28]
 800f854:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f856:	69b9      	ldr	r1, [r7, #24]
 800f858:	69fa      	ldr	r2, [r7, #28]
 800f85a:	e841 2300 	strex	r3, r2, [r1]
 800f85e:	617b      	str	r3, [r7, #20]
   return(result);
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d1e5      	bne.n	800f832 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f866:	e002      	b.n	800f86e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800f868:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f86a:	f7fa fa67 	bl	8009d3c <HAL_UART_TxCpltCallback>
}
 800f86e:	bf00      	nop
 800f870:	3740      	adds	r7, #64	@ 0x40
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}

0800f876 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f876:	b580      	push	{r7, lr}
 800f878:	b084      	sub	sp, #16
 800f87a:	af00      	add	r7, sp, #0
 800f87c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f882:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f884:	68f8      	ldr	r0, [r7, #12]
 800f886:	f7ff ff89 	bl	800f79c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f88a:	bf00      	nop
 800f88c:	3710      	adds	r7, #16
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}

0800f892 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f892:	b580      	push	{r7, lr}
 800f894:	b09c      	sub	sp, #112	@ 0x70
 800f896:	af00      	add	r7, sp, #0
 800f898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f89e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d172      	bne.n	800f994 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800f8ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f8b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	330c      	adds	r3, #12
 800f8ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8be:	e853 3f00 	ldrex	r3, [r3]
 800f8c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f8c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f8c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f8ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f8cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	330c      	adds	r3, #12
 800f8d2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f8d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800f8d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f8da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f8dc:	e841 2300 	strex	r3, r2, [r1]
 800f8e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f8e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d1e5      	bne.n	800f8b4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	3314      	adds	r3, #20
 800f8ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8f2:	e853 3f00 	ldrex	r3, [r3]
 800f8f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f8f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8fa:	f023 0301 	bic.w	r3, r3, #1
 800f8fe:	667b      	str	r3, [r7, #100]	@ 0x64
 800f900:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	3314      	adds	r3, #20
 800f906:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f908:	647a      	str	r2, [r7, #68]	@ 0x44
 800f90a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f90c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f90e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f910:	e841 2300 	strex	r3, r2, [r1]
 800f914:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d1e5      	bne.n	800f8e8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f91c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	3314      	adds	r3, #20
 800f922:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f926:	e853 3f00 	ldrex	r3, [r3]
 800f92a:	623b      	str	r3, [r7, #32]
   return(result);
 800f92c:	6a3b      	ldr	r3, [r7, #32]
 800f92e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f932:	663b      	str	r3, [r7, #96]	@ 0x60
 800f934:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	3314      	adds	r3, #20
 800f93a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f93c:	633a      	str	r2, [r7, #48]	@ 0x30
 800f93e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f940:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f942:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f944:	e841 2300 	strex	r3, r2, [r1]
 800f948:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d1e5      	bne.n	800f91c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f950:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f952:	2220      	movs	r2, #32
 800f954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f958:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f95a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f95c:	2b01      	cmp	r3, #1
 800f95e:	d119      	bne.n	800f994 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f960:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	330c      	adds	r3, #12
 800f966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f968:	693b      	ldr	r3, [r7, #16]
 800f96a:	e853 3f00 	ldrex	r3, [r3]
 800f96e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	f023 0310 	bic.w	r3, r3, #16
 800f976:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f978:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	330c      	adds	r3, #12
 800f97e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f980:	61fa      	str	r2, [r7, #28]
 800f982:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f984:	69b9      	ldr	r1, [r7, #24]
 800f986:	69fa      	ldr	r2, [r7, #28]
 800f988:	e841 2300 	strex	r3, r2, [r1]
 800f98c:	617b      	str	r3, [r7, #20]
   return(result);
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d1e5      	bne.n	800f960 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f994:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f996:	2200      	movs	r2, #0
 800f998:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f99a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f99c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f99e:	2b01      	cmp	r3, #1
 800f9a0:	d106      	bne.n	800f9b0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f9a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f9a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f9aa:	f7ff ff0b 	bl	800f7c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f9ae:	e002      	b.n	800f9b6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800f9b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f9b2:	f7fa fa05 	bl	8009dc0 <HAL_UART_RxCpltCallback>
}
 800f9b6:	bf00      	nop
 800f9b8:	3770      	adds	r7, #112	@ 0x70
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}

0800f9be <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f9be:	b580      	push	{r7, lr}
 800f9c0:	b084      	sub	sp, #16
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9ca:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	2201      	movs	r2, #1
 800f9d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9d6:	2b01      	cmp	r3, #1
 800f9d8:	d108      	bne.n	800f9ec <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f9de:	085b      	lsrs	r3, r3, #1
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	4619      	mov	r1, r3
 800f9e4:	68f8      	ldr	r0, [r7, #12]
 800f9e6:	f7ff feed 	bl	800f7c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f9ea:	e002      	b.n	800f9f2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800f9ec:	68f8      	ldr	r0, [r7, #12]
 800f9ee:	f7ff fedf 	bl	800f7b0 <HAL_UART_RxHalfCpltCallback>
}
 800f9f2:	bf00      	nop
 800f9f4:	3710      	adds	r7, #16
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}

0800f9fa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f9fa:	b580      	push	{r7, lr}
 800f9fc:	b084      	sub	sp, #16
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800fa02:	2300      	movs	r3, #0
 800fa04:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa0a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	695b      	ldr	r3, [r3, #20]
 800fa12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa16:	2b80      	cmp	r3, #128	@ 0x80
 800fa18:	bf0c      	ite	eq
 800fa1a:	2301      	moveq	r3, #1
 800fa1c:	2300      	movne	r3, #0
 800fa1e:	b2db      	uxtb	r3, r3
 800fa20:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fa28:	b2db      	uxtb	r3, r3
 800fa2a:	2b21      	cmp	r3, #33	@ 0x21
 800fa2c:	d108      	bne.n	800fa40 <UART_DMAError+0x46>
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d005      	beq.n	800fa40 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	2200      	movs	r2, #0
 800fa38:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800fa3a:	68b8      	ldr	r0, [r7, #8]
 800fa3c:	f000 f8c2 	bl	800fbc4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	695b      	ldr	r3, [r3, #20]
 800fa46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa4a:	2b40      	cmp	r3, #64	@ 0x40
 800fa4c:	bf0c      	ite	eq
 800fa4e:	2301      	moveq	r3, #1
 800fa50:	2300      	movne	r3, #0
 800fa52:	b2db      	uxtb	r3, r3
 800fa54:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fa5c:	b2db      	uxtb	r3, r3
 800fa5e:	2b22      	cmp	r3, #34	@ 0x22
 800fa60:	d108      	bne.n	800fa74 <UART_DMAError+0x7a>
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d005      	beq.n	800fa74 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800fa6e:	68b8      	ldr	r0, [r7, #8]
 800fa70:	f000 f8d0 	bl	800fc14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa78:	f043 0210 	orr.w	r2, r3, #16
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fa80:	68b8      	ldr	r0, [r7, #8]
 800fa82:	f7fa fa91 	bl	8009fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa86:	bf00      	nop
 800fa88:	3710      	adds	r7, #16
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
	...

0800fa90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b098      	sub	sp, #96	@ 0x60
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	60f8      	str	r0, [r7, #12]
 800fa98:	60b9      	str	r1, [r7, #8]
 800fa9a:	4613      	mov	r3, r2
 800fa9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800fa9e:	68ba      	ldr	r2, [r7, #8]
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	88fa      	ldrh	r2, [r7, #6]
 800faa8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	2200      	movs	r2, #0
 800faae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	2222      	movs	r2, #34	@ 0x22
 800fab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fabc:	4a3e      	ldr	r2, [pc, #248]	@ (800fbb8 <UART_Start_Receive_DMA+0x128>)
 800fabe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fac4:	4a3d      	ldr	r2, [pc, #244]	@ (800fbbc <UART_Start_Receive_DMA+0x12c>)
 800fac6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800facc:	4a3c      	ldr	r2, [pc, #240]	@ (800fbc0 <UART_Start_Receive_DMA+0x130>)
 800face:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fad4:	2200      	movs	r2, #0
 800fad6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800fad8:	f107 0308 	add.w	r3, r7, #8
 800fadc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	3304      	adds	r3, #4
 800fae8:	4619      	mov	r1, r3
 800faea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800faec:	681a      	ldr	r2, [r3, #0]
 800faee:	88fb      	ldrh	r3, [r7, #6]
 800faf0:	f7fa fec0 	bl	800a874 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800faf4:	2300      	movs	r3, #0
 800faf6:	613b      	str	r3, [r7, #16]
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	613b      	str	r3, [r7, #16]
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	613b      	str	r3, [r7, #16]
 800fb08:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	691b      	ldr	r3, [r3, #16]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d019      	beq.n	800fb46 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	330c      	adds	r3, #12
 800fb18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fb1c:	e853 3f00 	ldrex	r3, [r3]
 800fb20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fb22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fb28:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	330c      	adds	r3, #12
 800fb30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fb32:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800fb34:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb36:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800fb38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fb3a:	e841 2300 	strex	r3, r2, [r1]
 800fb3e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800fb40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d1e5      	bne.n	800fb12 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	3314      	adds	r3, #20
 800fb4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb50:	e853 3f00 	ldrex	r3, [r3]
 800fb54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fb56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb58:	f043 0301 	orr.w	r3, r3, #1
 800fb5c:	657b      	str	r3, [r7, #84]	@ 0x54
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	3314      	adds	r3, #20
 800fb64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fb66:	63ba      	str	r2, [r7, #56]	@ 0x38
 800fb68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb6a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fb6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fb6e:	e841 2300 	strex	r3, r2, [r1]
 800fb72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fb74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d1e5      	bne.n	800fb46 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	3314      	adds	r3, #20
 800fb80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb82:	69bb      	ldr	r3, [r7, #24]
 800fb84:	e853 3f00 	ldrex	r3, [r3]
 800fb88:	617b      	str	r3, [r7, #20]
   return(result);
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb90:	653b      	str	r3, [r7, #80]	@ 0x50
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	3314      	adds	r3, #20
 800fb98:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fb9a:	627a      	str	r2, [r7, #36]	@ 0x24
 800fb9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb9e:	6a39      	ldr	r1, [r7, #32]
 800fba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fba2:	e841 2300 	strex	r3, r2, [r1]
 800fba6:	61fb      	str	r3, [r7, #28]
   return(result);
 800fba8:	69fb      	ldr	r3, [r7, #28]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d1e5      	bne.n	800fb7a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800fbae:	2300      	movs	r3, #0
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3760      	adds	r7, #96	@ 0x60
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}
 800fbb8:	0800f893 	.word	0x0800f893
 800fbbc:	0800f9bf 	.word	0x0800f9bf
 800fbc0:	0800f9fb 	.word	0x0800f9fb

0800fbc4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b089      	sub	sp, #36	@ 0x24
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	330c      	adds	r3, #12
 800fbd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	e853 3f00 	ldrex	r3, [r3]
 800fbda:	60bb      	str	r3, [r7, #8]
   return(result);
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800fbe2:	61fb      	str	r3, [r7, #28]
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	330c      	adds	r3, #12
 800fbea:	69fa      	ldr	r2, [r7, #28]
 800fbec:	61ba      	str	r2, [r7, #24]
 800fbee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbf0:	6979      	ldr	r1, [r7, #20]
 800fbf2:	69ba      	ldr	r2, [r7, #24]
 800fbf4:	e841 2300 	strex	r3, r2, [r1]
 800fbf8:	613b      	str	r3, [r7, #16]
   return(result);
 800fbfa:	693b      	ldr	r3, [r7, #16]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d1e5      	bne.n	800fbcc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2220      	movs	r2, #32
 800fc04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800fc08:	bf00      	nop
 800fc0a:	3724      	adds	r7, #36	@ 0x24
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc12:	4770      	bx	lr

0800fc14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fc14:	b480      	push	{r7}
 800fc16:	b095      	sub	sp, #84	@ 0x54
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	330c      	adds	r3, #12
 800fc22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc26:	e853 3f00 	ldrex	r3, [r3]
 800fc2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fc2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fc32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	330c      	adds	r3, #12
 800fc3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fc3c:	643a      	str	r2, [r7, #64]	@ 0x40
 800fc3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fc42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fc44:	e841 2300 	strex	r3, r2, [r1]
 800fc48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fc4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d1e5      	bne.n	800fc1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	3314      	adds	r3, #20
 800fc56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc58:	6a3b      	ldr	r3, [r7, #32]
 800fc5a:	e853 3f00 	ldrex	r3, [r3]
 800fc5e:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc60:	69fb      	ldr	r3, [r7, #28]
 800fc62:	f023 0301 	bic.w	r3, r3, #1
 800fc66:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	3314      	adds	r3, #20
 800fc6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fc70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fc72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fc76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc78:	e841 2300 	strex	r3, r2, [r1]
 800fc7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fc7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d1e5      	bne.n	800fc50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc88:	2b01      	cmp	r3, #1
 800fc8a:	d119      	bne.n	800fcc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	330c      	adds	r3, #12
 800fc92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	e853 3f00 	ldrex	r3, [r3]
 800fc9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	f023 0310 	bic.w	r3, r3, #16
 800fca2:	647b      	str	r3, [r7, #68]	@ 0x44
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	330c      	adds	r3, #12
 800fcaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fcac:	61ba      	str	r2, [r7, #24]
 800fcae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcb0:	6979      	ldr	r1, [r7, #20]
 800fcb2:	69ba      	ldr	r2, [r7, #24]
 800fcb4:	e841 2300 	strex	r3, r2, [r1]
 800fcb8:	613b      	str	r3, [r7, #16]
   return(result);
 800fcba:	693b      	ldr	r3, [r7, #16]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d1e5      	bne.n	800fc8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2220      	movs	r2, #32
 800fcc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2200      	movs	r2, #0
 800fccc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800fcce:	bf00      	nop
 800fcd0:	3754      	adds	r7, #84	@ 0x54
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd8:	4770      	bx	lr

0800fcda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fcda:	b580      	push	{r7, lr}
 800fcdc:	b084      	sub	sp, #16
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fce6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	2200      	movs	r2, #0
 800fcec:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fcf4:	68f8      	ldr	r0, [r7, #12]
 800fcf6:	f7fa f957 	bl	8009fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fcfa:	bf00      	nop
 800fcfc:	3710      	adds	r7, #16
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}

0800fd02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800fd02:	b480      	push	{r7}
 800fd04:	b085      	sub	sp, #20
 800fd06:	af00      	add	r7, sp, #0
 800fd08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd10:	b2db      	uxtb	r3, r3
 800fd12:	2b21      	cmp	r3, #33	@ 0x21
 800fd14:	d13e      	bne.n	800fd94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	689b      	ldr	r3, [r3, #8]
 800fd1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fd1e:	d114      	bne.n	800fd4a <UART_Transmit_IT+0x48>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	691b      	ldr	r3, [r3, #16]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d110      	bne.n	800fd4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	6a1b      	ldr	r3, [r3, #32]
 800fd2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	881b      	ldrh	r3, [r3, #0]
 800fd32:	461a      	mov	r2, r3
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fd3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6a1b      	ldr	r3, [r3, #32]
 800fd42:	1c9a      	adds	r2, r3, #2
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	621a      	str	r2, [r3, #32]
 800fd48:	e008      	b.n	800fd5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6a1b      	ldr	r3, [r3, #32]
 800fd4e:	1c59      	adds	r1, r3, #1
 800fd50:	687a      	ldr	r2, [r7, #4]
 800fd52:	6211      	str	r1, [r2, #32]
 800fd54:	781a      	ldrb	r2, [r3, #0]
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800fd60:	b29b      	uxth	r3, r3
 800fd62:	3b01      	subs	r3, #1
 800fd64:	b29b      	uxth	r3, r3
 800fd66:	687a      	ldr	r2, [r7, #4]
 800fd68:	4619      	mov	r1, r3
 800fd6a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d10f      	bne.n	800fd90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	68da      	ldr	r2, [r3, #12]
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fd7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	68da      	ldr	r2, [r3, #12]
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fd8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800fd90:	2300      	movs	r3, #0
 800fd92:	e000      	b.n	800fd96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800fd94:	2302      	movs	r3, #2
  }
}
 800fd96:	4618      	mov	r0, r3
 800fd98:	3714      	adds	r7, #20
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda0:	4770      	bx	lr

0800fda2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fda2:	b580      	push	{r7, lr}
 800fda4:	b082      	sub	sp, #8
 800fda6:	af00      	add	r7, sp, #0
 800fda8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	68da      	ldr	r2, [r3, #12]
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fdb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2220      	movs	r2, #32
 800fdbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f7f9 ffba 	bl	8009d3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800fdc8:	2300      	movs	r3, #0
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3708      	adds	r7, #8
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}

0800fdd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800fdd2:	b580      	push	{r7, lr}
 800fdd4:	b08c      	sub	sp, #48	@ 0x30
 800fdd6:	af00      	add	r7, sp, #0
 800fdd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fde0:	b2db      	uxtb	r3, r3
 800fde2:	2b22      	cmp	r3, #34	@ 0x22
 800fde4:	f040 80ae 	bne.w	800ff44 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	689b      	ldr	r3, [r3, #8]
 800fdec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fdf0:	d117      	bne.n	800fe22 <UART_Receive_IT+0x50>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	691b      	ldr	r3, [r3, #16]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d113      	bne.n	800fe22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe02:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	685b      	ldr	r3, [r3, #4]
 800fe0a:	b29b      	uxth	r3, r3
 800fe0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe10:	b29a      	uxth	r2, r3
 800fe12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe1a:	1c9a      	adds	r2, r3, #2
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	629a      	str	r2, [r3, #40]	@ 0x28
 800fe20:	e026      	b.n	800fe70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe26:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	689b      	ldr	r3, [r3, #8]
 800fe30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fe34:	d007      	beq.n	800fe46 <UART_Receive_IT+0x74>
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	689b      	ldr	r3, [r3, #8]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d10a      	bne.n	800fe54 <UART_Receive_IT+0x82>
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	691b      	ldr	r3, [r3, #16]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d106      	bne.n	800fe54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	685b      	ldr	r3, [r3, #4]
 800fe4c:	b2da      	uxtb	r2, r3
 800fe4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe50:	701a      	strb	r2, [r3, #0]
 800fe52:	e008      	b.n	800fe66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	685b      	ldr	r3, [r3, #4]
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe60:	b2da      	uxtb	r2, r3
 800fe62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe6a:	1c5a      	adds	r2, r3, #1
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800fe74:	b29b      	uxth	r3, r3
 800fe76:	3b01      	subs	r3, #1
 800fe78:	b29b      	uxth	r3, r3
 800fe7a:	687a      	ldr	r2, [r7, #4]
 800fe7c:	4619      	mov	r1, r3
 800fe7e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d15d      	bne.n	800ff40 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	68da      	ldr	r2, [r3, #12]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	f022 0220 	bic.w	r2, r2, #32
 800fe92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	68da      	ldr	r2, [r3, #12]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800fea2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	695a      	ldr	r2, [r3, #20]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	f022 0201 	bic.w	r2, r2, #1
 800feb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2220      	movs	r2, #32
 800feb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2200      	movs	r2, #0
 800fec0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fec6:	2b01      	cmp	r3, #1
 800fec8:	d135      	bne.n	800ff36 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2200      	movs	r2, #0
 800fece:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	330c      	adds	r3, #12
 800fed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	e853 3f00 	ldrex	r3, [r3]
 800fede:	613b      	str	r3, [r7, #16]
   return(result);
 800fee0:	693b      	ldr	r3, [r7, #16]
 800fee2:	f023 0310 	bic.w	r3, r3, #16
 800fee6:	627b      	str	r3, [r7, #36]	@ 0x24
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	330c      	adds	r3, #12
 800feee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fef0:	623a      	str	r2, [r7, #32]
 800fef2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fef4:	69f9      	ldr	r1, [r7, #28]
 800fef6:	6a3a      	ldr	r2, [r7, #32]
 800fef8:	e841 2300 	strex	r3, r2, [r1]
 800fefc:	61bb      	str	r3, [r7, #24]
   return(result);
 800fefe:	69bb      	ldr	r3, [r7, #24]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d1e5      	bne.n	800fed0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f003 0310 	and.w	r3, r3, #16
 800ff0e:	2b10      	cmp	r3, #16
 800ff10:	d10a      	bne.n	800ff28 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ff12:	2300      	movs	r3, #0
 800ff14:	60fb      	str	r3, [r7, #12]
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	60fb      	str	r3, [r7, #12]
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	685b      	ldr	r3, [r3, #4]
 800ff24:	60fb      	str	r3, [r7, #12]
 800ff26:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ff2c:	4619      	mov	r1, r3
 800ff2e:	6878      	ldr	r0, [r7, #4]
 800ff30:	f7ff fc48 	bl	800f7c4 <HAL_UARTEx_RxEventCallback>
 800ff34:	e002      	b.n	800ff3c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f7f9 ff42 	bl	8009dc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	e002      	b.n	800ff46 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ff40:	2300      	movs	r3, #0
 800ff42:	e000      	b.n	800ff46 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ff44:	2302      	movs	r3, #2
  }
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	3730      	adds	r7, #48	@ 0x30
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
	...

0800ff50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ff50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ff54:	b0c0      	sub	sp, #256	@ 0x100
 800ff56:	af00      	add	r7, sp, #0
 800ff58:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ff5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	691b      	ldr	r3, [r3, #16]
 800ff64:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ff68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ff6c:	68d9      	ldr	r1, [r3, #12]
 800ff6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ff72:	681a      	ldr	r2, [r3, #0]
 800ff74:	ea40 0301 	orr.w	r3, r0, r1
 800ff78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ff7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ff7e:	689a      	ldr	r2, [r3, #8]
 800ff80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ff84:	691b      	ldr	r3, [r3, #16]
 800ff86:	431a      	orrs	r2, r3
 800ff88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ff8c:	695b      	ldr	r3, [r3, #20]
 800ff8e:	431a      	orrs	r2, r3
 800ff90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ff94:	69db      	ldr	r3, [r3, #28]
 800ff96:	4313      	orrs	r3, r2
 800ff98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ff9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ffa8:	f021 010c 	bic.w	r1, r1, #12
 800ffac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffb0:	681a      	ldr	r2, [r3, #0]
 800ffb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ffb6:	430b      	orrs	r3, r1
 800ffb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ffba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	695b      	ldr	r3, [r3, #20]
 800ffc2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ffc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffca:	6999      	ldr	r1, [r3, #24]
 800ffcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffd0:	681a      	ldr	r2, [r3, #0]
 800ffd2:	ea40 0301 	orr.w	r3, r0, r1
 800ffd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ffd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffdc:	681a      	ldr	r2, [r3, #0]
 800ffde:	4b8f      	ldr	r3, [pc, #572]	@ (801021c <UART_SetConfig+0x2cc>)
 800ffe0:	429a      	cmp	r2, r3
 800ffe2:	d005      	beq.n	800fff0 <UART_SetConfig+0xa0>
 800ffe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffe8:	681a      	ldr	r2, [r3, #0]
 800ffea:	4b8d      	ldr	r3, [pc, #564]	@ (8010220 <UART_SetConfig+0x2d0>)
 800ffec:	429a      	cmp	r2, r3
 800ffee:	d104      	bne.n	800fffa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fff0:	f7fd f91c 	bl	800d22c <HAL_RCC_GetPCLK2Freq>
 800fff4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800fff8:	e003      	b.n	8010002 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fffa:	f7fd f903 	bl	800d204 <HAL_RCC_GetPCLK1Freq>
 800fffe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010006:	69db      	ldr	r3, [r3, #28]
 8010008:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801000c:	f040 810c 	bne.w	8010228 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010014:	2200      	movs	r2, #0
 8010016:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801001a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801001e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8010022:	4622      	mov	r2, r4
 8010024:	462b      	mov	r3, r5
 8010026:	1891      	adds	r1, r2, r2
 8010028:	65b9      	str	r1, [r7, #88]	@ 0x58
 801002a:	415b      	adcs	r3, r3
 801002c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801002e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010032:	4621      	mov	r1, r4
 8010034:	eb12 0801 	adds.w	r8, r2, r1
 8010038:	4629      	mov	r1, r5
 801003a:	eb43 0901 	adc.w	r9, r3, r1
 801003e:	f04f 0200 	mov.w	r2, #0
 8010042:	f04f 0300 	mov.w	r3, #0
 8010046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801004a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801004e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010052:	4690      	mov	r8, r2
 8010054:	4699      	mov	r9, r3
 8010056:	4623      	mov	r3, r4
 8010058:	eb18 0303 	adds.w	r3, r8, r3
 801005c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8010060:	462b      	mov	r3, r5
 8010062:	eb49 0303 	adc.w	r3, r9, r3
 8010066:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801006a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	2200      	movs	r2, #0
 8010072:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8010076:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 801007a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801007e:	460b      	mov	r3, r1
 8010080:	18db      	adds	r3, r3, r3
 8010082:	653b      	str	r3, [r7, #80]	@ 0x50
 8010084:	4613      	mov	r3, r2
 8010086:	eb42 0303 	adc.w	r3, r2, r3
 801008a:	657b      	str	r3, [r7, #84]	@ 0x54
 801008c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8010090:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8010094:	f7f0 fdf8 	bl	8000c88 <__aeabi_uldivmod>
 8010098:	4602      	mov	r2, r0
 801009a:	460b      	mov	r3, r1
 801009c:	4b61      	ldr	r3, [pc, #388]	@ (8010224 <UART_SetConfig+0x2d4>)
 801009e:	fba3 2302 	umull	r2, r3, r3, r2
 80100a2:	095b      	lsrs	r3, r3, #5
 80100a4:	011c      	lsls	r4, r3, #4
 80100a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80100aa:	2200      	movs	r2, #0
 80100ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80100b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80100b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80100b8:	4642      	mov	r2, r8
 80100ba:	464b      	mov	r3, r9
 80100bc:	1891      	adds	r1, r2, r2
 80100be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80100c0:	415b      	adcs	r3, r3
 80100c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80100c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80100c8:	4641      	mov	r1, r8
 80100ca:	eb12 0a01 	adds.w	sl, r2, r1
 80100ce:	4649      	mov	r1, r9
 80100d0:	eb43 0b01 	adc.w	fp, r3, r1
 80100d4:	f04f 0200 	mov.w	r2, #0
 80100d8:	f04f 0300 	mov.w	r3, #0
 80100dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80100e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80100e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80100e8:	4692      	mov	sl, r2
 80100ea:	469b      	mov	fp, r3
 80100ec:	4643      	mov	r3, r8
 80100ee:	eb1a 0303 	adds.w	r3, sl, r3
 80100f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80100f6:	464b      	mov	r3, r9
 80100f8:	eb4b 0303 	adc.w	r3, fp, r3
 80100fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8010100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010104:	685b      	ldr	r3, [r3, #4]
 8010106:	2200      	movs	r2, #0
 8010108:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801010c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8010110:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8010114:	460b      	mov	r3, r1
 8010116:	18db      	adds	r3, r3, r3
 8010118:	643b      	str	r3, [r7, #64]	@ 0x40
 801011a:	4613      	mov	r3, r2
 801011c:	eb42 0303 	adc.w	r3, r2, r3
 8010120:	647b      	str	r3, [r7, #68]	@ 0x44
 8010122:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8010126:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 801012a:	f7f0 fdad 	bl	8000c88 <__aeabi_uldivmod>
 801012e:	4602      	mov	r2, r0
 8010130:	460b      	mov	r3, r1
 8010132:	4611      	mov	r1, r2
 8010134:	4b3b      	ldr	r3, [pc, #236]	@ (8010224 <UART_SetConfig+0x2d4>)
 8010136:	fba3 2301 	umull	r2, r3, r3, r1
 801013a:	095b      	lsrs	r3, r3, #5
 801013c:	2264      	movs	r2, #100	@ 0x64
 801013e:	fb02 f303 	mul.w	r3, r2, r3
 8010142:	1acb      	subs	r3, r1, r3
 8010144:	00db      	lsls	r3, r3, #3
 8010146:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 801014a:	4b36      	ldr	r3, [pc, #216]	@ (8010224 <UART_SetConfig+0x2d4>)
 801014c:	fba3 2302 	umull	r2, r3, r3, r2
 8010150:	095b      	lsrs	r3, r3, #5
 8010152:	005b      	lsls	r3, r3, #1
 8010154:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8010158:	441c      	add	r4, r3
 801015a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801015e:	2200      	movs	r2, #0
 8010160:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010164:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8010168:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 801016c:	4642      	mov	r2, r8
 801016e:	464b      	mov	r3, r9
 8010170:	1891      	adds	r1, r2, r2
 8010172:	63b9      	str	r1, [r7, #56]	@ 0x38
 8010174:	415b      	adcs	r3, r3
 8010176:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801017c:	4641      	mov	r1, r8
 801017e:	1851      	adds	r1, r2, r1
 8010180:	6339      	str	r1, [r7, #48]	@ 0x30
 8010182:	4649      	mov	r1, r9
 8010184:	414b      	adcs	r3, r1
 8010186:	637b      	str	r3, [r7, #52]	@ 0x34
 8010188:	f04f 0200 	mov.w	r2, #0
 801018c:	f04f 0300 	mov.w	r3, #0
 8010190:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8010194:	4659      	mov	r1, fp
 8010196:	00cb      	lsls	r3, r1, #3
 8010198:	4651      	mov	r1, sl
 801019a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801019e:	4651      	mov	r1, sl
 80101a0:	00ca      	lsls	r2, r1, #3
 80101a2:	4610      	mov	r0, r2
 80101a4:	4619      	mov	r1, r3
 80101a6:	4603      	mov	r3, r0
 80101a8:	4642      	mov	r2, r8
 80101aa:	189b      	adds	r3, r3, r2
 80101ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80101b0:	464b      	mov	r3, r9
 80101b2:	460a      	mov	r2, r1
 80101b4:	eb42 0303 	adc.w	r3, r2, r3
 80101b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80101bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101c0:	685b      	ldr	r3, [r3, #4]
 80101c2:	2200      	movs	r2, #0
 80101c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80101c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80101cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80101d0:	460b      	mov	r3, r1
 80101d2:	18db      	adds	r3, r3, r3
 80101d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80101d6:	4613      	mov	r3, r2
 80101d8:	eb42 0303 	adc.w	r3, r2, r3
 80101dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80101de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80101e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80101e6:	f7f0 fd4f 	bl	8000c88 <__aeabi_uldivmod>
 80101ea:	4602      	mov	r2, r0
 80101ec:	460b      	mov	r3, r1
 80101ee:	4b0d      	ldr	r3, [pc, #52]	@ (8010224 <UART_SetConfig+0x2d4>)
 80101f0:	fba3 1302 	umull	r1, r3, r3, r2
 80101f4:	095b      	lsrs	r3, r3, #5
 80101f6:	2164      	movs	r1, #100	@ 0x64
 80101f8:	fb01 f303 	mul.w	r3, r1, r3
 80101fc:	1ad3      	subs	r3, r2, r3
 80101fe:	00db      	lsls	r3, r3, #3
 8010200:	3332      	adds	r3, #50	@ 0x32
 8010202:	4a08      	ldr	r2, [pc, #32]	@ (8010224 <UART_SetConfig+0x2d4>)
 8010204:	fba2 2303 	umull	r2, r3, r2, r3
 8010208:	095b      	lsrs	r3, r3, #5
 801020a:	f003 0207 	and.w	r2, r3, #7
 801020e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	4422      	add	r2, r4
 8010216:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010218:	e106      	b.n	8010428 <UART_SetConfig+0x4d8>
 801021a:	bf00      	nop
 801021c:	40011000 	.word	0x40011000
 8010220:	40011400 	.word	0x40011400
 8010224:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801022c:	2200      	movs	r2, #0
 801022e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010232:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8010236:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801023a:	4642      	mov	r2, r8
 801023c:	464b      	mov	r3, r9
 801023e:	1891      	adds	r1, r2, r2
 8010240:	6239      	str	r1, [r7, #32]
 8010242:	415b      	adcs	r3, r3
 8010244:	627b      	str	r3, [r7, #36]	@ 0x24
 8010246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801024a:	4641      	mov	r1, r8
 801024c:	1854      	adds	r4, r2, r1
 801024e:	4649      	mov	r1, r9
 8010250:	eb43 0501 	adc.w	r5, r3, r1
 8010254:	f04f 0200 	mov.w	r2, #0
 8010258:	f04f 0300 	mov.w	r3, #0
 801025c:	00eb      	lsls	r3, r5, #3
 801025e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010262:	00e2      	lsls	r2, r4, #3
 8010264:	4614      	mov	r4, r2
 8010266:	461d      	mov	r5, r3
 8010268:	4643      	mov	r3, r8
 801026a:	18e3      	adds	r3, r4, r3
 801026c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010270:	464b      	mov	r3, r9
 8010272:	eb45 0303 	adc.w	r3, r5, r3
 8010276:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801027a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801027e:	685b      	ldr	r3, [r3, #4]
 8010280:	2200      	movs	r2, #0
 8010282:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010286:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801028a:	f04f 0200 	mov.w	r2, #0
 801028e:	f04f 0300 	mov.w	r3, #0
 8010292:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8010296:	4629      	mov	r1, r5
 8010298:	008b      	lsls	r3, r1, #2
 801029a:	4621      	mov	r1, r4
 801029c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80102a0:	4621      	mov	r1, r4
 80102a2:	008a      	lsls	r2, r1, #2
 80102a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80102a8:	f7f0 fcee 	bl	8000c88 <__aeabi_uldivmod>
 80102ac:	4602      	mov	r2, r0
 80102ae:	460b      	mov	r3, r1
 80102b0:	4b60      	ldr	r3, [pc, #384]	@ (8010434 <UART_SetConfig+0x4e4>)
 80102b2:	fba3 2302 	umull	r2, r3, r3, r2
 80102b6:	095b      	lsrs	r3, r3, #5
 80102b8:	011c      	lsls	r4, r3, #4
 80102ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80102be:	2200      	movs	r2, #0
 80102c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80102c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80102c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80102cc:	4642      	mov	r2, r8
 80102ce:	464b      	mov	r3, r9
 80102d0:	1891      	adds	r1, r2, r2
 80102d2:	61b9      	str	r1, [r7, #24]
 80102d4:	415b      	adcs	r3, r3
 80102d6:	61fb      	str	r3, [r7, #28]
 80102d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80102dc:	4641      	mov	r1, r8
 80102de:	1851      	adds	r1, r2, r1
 80102e0:	6139      	str	r1, [r7, #16]
 80102e2:	4649      	mov	r1, r9
 80102e4:	414b      	adcs	r3, r1
 80102e6:	617b      	str	r3, [r7, #20]
 80102e8:	f04f 0200 	mov.w	r2, #0
 80102ec:	f04f 0300 	mov.w	r3, #0
 80102f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80102f4:	4659      	mov	r1, fp
 80102f6:	00cb      	lsls	r3, r1, #3
 80102f8:	4651      	mov	r1, sl
 80102fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80102fe:	4651      	mov	r1, sl
 8010300:	00ca      	lsls	r2, r1, #3
 8010302:	4610      	mov	r0, r2
 8010304:	4619      	mov	r1, r3
 8010306:	4603      	mov	r3, r0
 8010308:	4642      	mov	r2, r8
 801030a:	189b      	adds	r3, r3, r2
 801030c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010310:	464b      	mov	r3, r9
 8010312:	460a      	mov	r2, r1
 8010314:	eb42 0303 	adc.w	r3, r2, r3
 8010318:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801031c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010320:	685b      	ldr	r3, [r3, #4]
 8010322:	2200      	movs	r2, #0
 8010324:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010326:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8010328:	f04f 0200 	mov.w	r2, #0
 801032c:	f04f 0300 	mov.w	r3, #0
 8010330:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8010334:	4649      	mov	r1, r9
 8010336:	008b      	lsls	r3, r1, #2
 8010338:	4641      	mov	r1, r8
 801033a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801033e:	4641      	mov	r1, r8
 8010340:	008a      	lsls	r2, r1, #2
 8010342:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8010346:	f7f0 fc9f 	bl	8000c88 <__aeabi_uldivmod>
 801034a:	4602      	mov	r2, r0
 801034c:	460b      	mov	r3, r1
 801034e:	4611      	mov	r1, r2
 8010350:	4b38      	ldr	r3, [pc, #224]	@ (8010434 <UART_SetConfig+0x4e4>)
 8010352:	fba3 2301 	umull	r2, r3, r3, r1
 8010356:	095b      	lsrs	r3, r3, #5
 8010358:	2264      	movs	r2, #100	@ 0x64
 801035a:	fb02 f303 	mul.w	r3, r2, r3
 801035e:	1acb      	subs	r3, r1, r3
 8010360:	011b      	lsls	r3, r3, #4
 8010362:	3332      	adds	r3, #50	@ 0x32
 8010364:	4a33      	ldr	r2, [pc, #204]	@ (8010434 <UART_SetConfig+0x4e4>)
 8010366:	fba2 2303 	umull	r2, r3, r2, r3
 801036a:	095b      	lsrs	r3, r3, #5
 801036c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010370:	441c      	add	r4, r3
 8010372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010376:	2200      	movs	r2, #0
 8010378:	673b      	str	r3, [r7, #112]	@ 0x70
 801037a:	677a      	str	r2, [r7, #116]	@ 0x74
 801037c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8010380:	4642      	mov	r2, r8
 8010382:	464b      	mov	r3, r9
 8010384:	1891      	adds	r1, r2, r2
 8010386:	60b9      	str	r1, [r7, #8]
 8010388:	415b      	adcs	r3, r3
 801038a:	60fb      	str	r3, [r7, #12]
 801038c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010390:	4641      	mov	r1, r8
 8010392:	1851      	adds	r1, r2, r1
 8010394:	6039      	str	r1, [r7, #0]
 8010396:	4649      	mov	r1, r9
 8010398:	414b      	adcs	r3, r1
 801039a:	607b      	str	r3, [r7, #4]
 801039c:	f04f 0200 	mov.w	r2, #0
 80103a0:	f04f 0300 	mov.w	r3, #0
 80103a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80103a8:	4659      	mov	r1, fp
 80103aa:	00cb      	lsls	r3, r1, #3
 80103ac:	4651      	mov	r1, sl
 80103ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80103b2:	4651      	mov	r1, sl
 80103b4:	00ca      	lsls	r2, r1, #3
 80103b6:	4610      	mov	r0, r2
 80103b8:	4619      	mov	r1, r3
 80103ba:	4603      	mov	r3, r0
 80103bc:	4642      	mov	r2, r8
 80103be:	189b      	adds	r3, r3, r2
 80103c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80103c2:	464b      	mov	r3, r9
 80103c4:	460a      	mov	r2, r1
 80103c6:	eb42 0303 	adc.w	r3, r2, r3
 80103ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80103cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80103d0:	685b      	ldr	r3, [r3, #4]
 80103d2:	2200      	movs	r2, #0
 80103d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80103d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80103d8:	f04f 0200 	mov.w	r2, #0
 80103dc:	f04f 0300 	mov.w	r3, #0
 80103e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80103e4:	4649      	mov	r1, r9
 80103e6:	008b      	lsls	r3, r1, #2
 80103e8:	4641      	mov	r1, r8
 80103ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80103ee:	4641      	mov	r1, r8
 80103f0:	008a      	lsls	r2, r1, #2
 80103f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80103f6:	f7f0 fc47 	bl	8000c88 <__aeabi_uldivmod>
 80103fa:	4602      	mov	r2, r0
 80103fc:	460b      	mov	r3, r1
 80103fe:	4b0d      	ldr	r3, [pc, #52]	@ (8010434 <UART_SetConfig+0x4e4>)
 8010400:	fba3 1302 	umull	r1, r3, r3, r2
 8010404:	095b      	lsrs	r3, r3, #5
 8010406:	2164      	movs	r1, #100	@ 0x64
 8010408:	fb01 f303 	mul.w	r3, r1, r3
 801040c:	1ad3      	subs	r3, r2, r3
 801040e:	011b      	lsls	r3, r3, #4
 8010410:	3332      	adds	r3, #50	@ 0x32
 8010412:	4a08      	ldr	r2, [pc, #32]	@ (8010434 <UART_SetConfig+0x4e4>)
 8010414:	fba2 2303 	umull	r2, r3, r2, r3
 8010418:	095b      	lsrs	r3, r3, #5
 801041a:	f003 020f 	and.w	r2, r3, #15
 801041e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	4422      	add	r2, r4
 8010426:	609a      	str	r2, [r3, #8]
}
 8010428:	bf00      	nop
 801042a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 801042e:	46bd      	mov	sp, r7
 8010430:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010434:	51eb851f 	.word	0x51eb851f

08010438 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010438:	b084      	sub	sp, #16
 801043a:	b580      	push	{r7, lr}
 801043c:	b084      	sub	sp, #16
 801043e:	af00      	add	r7, sp, #0
 8010440:	6078      	str	r0, [r7, #4]
 8010442:	f107 001c 	add.w	r0, r7, #28
 8010446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801044a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801044e:	2b01      	cmp	r3, #1
 8010450:	d123      	bne.n	801049a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010456:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	68db      	ldr	r3, [r3, #12]
 8010462:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8010466:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801046a:	687a      	ldr	r2, [r7, #4]
 801046c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	68db      	ldr	r3, [r3, #12]
 8010472:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801047a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801047e:	2b01      	cmp	r3, #1
 8010480:	d105      	bne.n	801048e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	68db      	ldr	r3, [r3, #12]
 8010486:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f001 fae8 	bl	8011a64 <USB_CoreReset>
 8010494:	4603      	mov	r3, r0
 8010496:	73fb      	strb	r3, [r7, #15]
 8010498:	e01b      	b.n	80104d2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	68db      	ldr	r3, [r3, #12]
 801049e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80104a6:	6878      	ldr	r0, [r7, #4]
 80104a8:	f001 fadc 	bl	8011a64 <USB_CoreReset>
 80104ac:	4603      	mov	r3, r0
 80104ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80104b0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d106      	bne.n	80104c6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80104c4:	e005      	b.n	80104d2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80104d2:	7fbb      	ldrb	r3, [r7, #30]
 80104d4:	2b01      	cmp	r3, #1
 80104d6:	d10b      	bne.n	80104f0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	689b      	ldr	r3, [r3, #8]
 80104dc:	f043 0206 	orr.w	r2, r3, #6
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	689b      	ldr	r3, [r3, #8]
 80104e8:	f043 0220 	orr.w	r2, r3, #32
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80104f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	3710      	adds	r7, #16
 80104f6:	46bd      	mov	sp, r7
 80104f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80104fc:	b004      	add	sp, #16
 80104fe:	4770      	bx	lr

08010500 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010500:	b480      	push	{r7}
 8010502:	b087      	sub	sp, #28
 8010504:	af00      	add	r7, sp, #0
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	60b9      	str	r1, [r7, #8]
 801050a:	4613      	mov	r3, r2
 801050c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801050e:	79fb      	ldrb	r3, [r7, #7]
 8010510:	2b02      	cmp	r3, #2
 8010512:	d165      	bne.n	80105e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	4a41      	ldr	r2, [pc, #260]	@ (801061c <USB_SetTurnaroundTime+0x11c>)
 8010518:	4293      	cmp	r3, r2
 801051a:	d906      	bls.n	801052a <USB_SetTurnaroundTime+0x2a>
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	4a40      	ldr	r2, [pc, #256]	@ (8010620 <USB_SetTurnaroundTime+0x120>)
 8010520:	4293      	cmp	r3, r2
 8010522:	d202      	bcs.n	801052a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010524:	230f      	movs	r3, #15
 8010526:	617b      	str	r3, [r7, #20]
 8010528:	e062      	b.n	80105f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	4a3c      	ldr	r2, [pc, #240]	@ (8010620 <USB_SetTurnaroundTime+0x120>)
 801052e:	4293      	cmp	r3, r2
 8010530:	d306      	bcc.n	8010540 <USB_SetTurnaroundTime+0x40>
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	4a3b      	ldr	r2, [pc, #236]	@ (8010624 <USB_SetTurnaroundTime+0x124>)
 8010536:	4293      	cmp	r3, r2
 8010538:	d202      	bcs.n	8010540 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801053a:	230e      	movs	r3, #14
 801053c:	617b      	str	r3, [r7, #20]
 801053e:	e057      	b.n	80105f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	4a38      	ldr	r2, [pc, #224]	@ (8010624 <USB_SetTurnaroundTime+0x124>)
 8010544:	4293      	cmp	r3, r2
 8010546:	d306      	bcc.n	8010556 <USB_SetTurnaroundTime+0x56>
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	4a37      	ldr	r2, [pc, #220]	@ (8010628 <USB_SetTurnaroundTime+0x128>)
 801054c:	4293      	cmp	r3, r2
 801054e:	d202      	bcs.n	8010556 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010550:	230d      	movs	r3, #13
 8010552:	617b      	str	r3, [r7, #20]
 8010554:	e04c      	b.n	80105f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	4a33      	ldr	r2, [pc, #204]	@ (8010628 <USB_SetTurnaroundTime+0x128>)
 801055a:	4293      	cmp	r3, r2
 801055c:	d306      	bcc.n	801056c <USB_SetTurnaroundTime+0x6c>
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	4a32      	ldr	r2, [pc, #200]	@ (801062c <USB_SetTurnaroundTime+0x12c>)
 8010562:	4293      	cmp	r3, r2
 8010564:	d802      	bhi.n	801056c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010566:	230c      	movs	r3, #12
 8010568:	617b      	str	r3, [r7, #20]
 801056a:	e041      	b.n	80105f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	4a2f      	ldr	r2, [pc, #188]	@ (801062c <USB_SetTurnaroundTime+0x12c>)
 8010570:	4293      	cmp	r3, r2
 8010572:	d906      	bls.n	8010582 <USB_SetTurnaroundTime+0x82>
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	4a2e      	ldr	r2, [pc, #184]	@ (8010630 <USB_SetTurnaroundTime+0x130>)
 8010578:	4293      	cmp	r3, r2
 801057a:	d802      	bhi.n	8010582 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801057c:	230b      	movs	r3, #11
 801057e:	617b      	str	r3, [r7, #20]
 8010580:	e036      	b.n	80105f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	4a2a      	ldr	r2, [pc, #168]	@ (8010630 <USB_SetTurnaroundTime+0x130>)
 8010586:	4293      	cmp	r3, r2
 8010588:	d906      	bls.n	8010598 <USB_SetTurnaroundTime+0x98>
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	4a29      	ldr	r2, [pc, #164]	@ (8010634 <USB_SetTurnaroundTime+0x134>)
 801058e:	4293      	cmp	r3, r2
 8010590:	d802      	bhi.n	8010598 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010592:	230a      	movs	r3, #10
 8010594:	617b      	str	r3, [r7, #20]
 8010596:	e02b      	b.n	80105f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	4a26      	ldr	r2, [pc, #152]	@ (8010634 <USB_SetTurnaroundTime+0x134>)
 801059c:	4293      	cmp	r3, r2
 801059e:	d906      	bls.n	80105ae <USB_SetTurnaroundTime+0xae>
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	4a25      	ldr	r2, [pc, #148]	@ (8010638 <USB_SetTurnaroundTime+0x138>)
 80105a4:	4293      	cmp	r3, r2
 80105a6:	d202      	bcs.n	80105ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80105a8:	2309      	movs	r3, #9
 80105aa:	617b      	str	r3, [r7, #20]
 80105ac:	e020      	b.n	80105f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	4a21      	ldr	r2, [pc, #132]	@ (8010638 <USB_SetTurnaroundTime+0x138>)
 80105b2:	4293      	cmp	r3, r2
 80105b4:	d306      	bcc.n	80105c4 <USB_SetTurnaroundTime+0xc4>
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	4a20      	ldr	r2, [pc, #128]	@ (801063c <USB_SetTurnaroundTime+0x13c>)
 80105ba:	4293      	cmp	r3, r2
 80105bc:	d802      	bhi.n	80105c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80105be:	2308      	movs	r3, #8
 80105c0:	617b      	str	r3, [r7, #20]
 80105c2:	e015      	b.n	80105f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	4a1d      	ldr	r2, [pc, #116]	@ (801063c <USB_SetTurnaroundTime+0x13c>)
 80105c8:	4293      	cmp	r3, r2
 80105ca:	d906      	bls.n	80105da <USB_SetTurnaroundTime+0xda>
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	4a1c      	ldr	r2, [pc, #112]	@ (8010640 <USB_SetTurnaroundTime+0x140>)
 80105d0:	4293      	cmp	r3, r2
 80105d2:	d202      	bcs.n	80105da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80105d4:	2307      	movs	r3, #7
 80105d6:	617b      	str	r3, [r7, #20]
 80105d8:	e00a      	b.n	80105f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80105da:	2306      	movs	r3, #6
 80105dc:	617b      	str	r3, [r7, #20]
 80105de:	e007      	b.n	80105f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80105e0:	79fb      	ldrb	r3, [r7, #7]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d102      	bne.n	80105ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80105e6:	2309      	movs	r3, #9
 80105e8:	617b      	str	r3, [r7, #20]
 80105ea:	e001      	b.n	80105f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80105ec:	2309      	movs	r3, #9
 80105ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	68db      	ldr	r3, [r3, #12]
 80105f4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	68da      	ldr	r2, [r3, #12]
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	029b      	lsls	r3, r3, #10
 8010604:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8010608:	431a      	orrs	r2, r3
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801060e:	2300      	movs	r3, #0
}
 8010610:	4618      	mov	r0, r3
 8010612:	371c      	adds	r7, #28
 8010614:	46bd      	mov	sp, r7
 8010616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061a:	4770      	bx	lr
 801061c:	00d8acbf 	.word	0x00d8acbf
 8010620:	00e4e1c0 	.word	0x00e4e1c0
 8010624:	00f42400 	.word	0x00f42400
 8010628:	01067380 	.word	0x01067380
 801062c:	011a499f 	.word	0x011a499f
 8010630:	01312cff 	.word	0x01312cff
 8010634:	014ca43f 	.word	0x014ca43f
 8010638:	016e3600 	.word	0x016e3600
 801063c:	01a6ab1f 	.word	0x01a6ab1f
 8010640:	01e84800 	.word	0x01e84800

08010644 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010644:	b480      	push	{r7}
 8010646:	b083      	sub	sp, #12
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	689b      	ldr	r3, [r3, #8]
 8010650:	f043 0201 	orr.w	r2, r3, #1
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010658:	2300      	movs	r3, #0
}
 801065a:	4618      	mov	r0, r3
 801065c:	370c      	adds	r7, #12
 801065e:	46bd      	mov	sp, r7
 8010660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010664:	4770      	bx	lr

08010666 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010666:	b480      	push	{r7}
 8010668:	b083      	sub	sp, #12
 801066a:	af00      	add	r7, sp, #0
 801066c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	689b      	ldr	r3, [r3, #8]
 8010672:	f023 0201 	bic.w	r2, r3, #1
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801067a:	2300      	movs	r3, #0
}
 801067c:	4618      	mov	r0, r3
 801067e:	370c      	adds	r7, #12
 8010680:	46bd      	mov	sp, r7
 8010682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010686:	4770      	bx	lr

08010688 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	460b      	mov	r3, r1
 8010692:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010694:	2300      	movs	r3, #0
 8010696:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	68db      	ldr	r3, [r3, #12]
 801069c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80106a4:	78fb      	ldrb	r3, [r7, #3]
 80106a6:	2b01      	cmp	r3, #1
 80106a8:	d115      	bne.n	80106d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	68db      	ldr	r3, [r3, #12]
 80106ae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80106b6:	200a      	movs	r0, #10
 80106b8:	f7f9 fe98 	bl	800a3ec <HAL_Delay>
      ms += 10U;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	330a      	adds	r3, #10
 80106c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f001 f93f 	bl	8011946 <USB_GetMode>
 80106c8:	4603      	mov	r3, r0
 80106ca:	2b01      	cmp	r3, #1
 80106cc:	d01e      	beq.n	801070c <USB_SetCurrentMode+0x84>
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80106d2:	d9f0      	bls.n	80106b6 <USB_SetCurrentMode+0x2e>
 80106d4:	e01a      	b.n	801070c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80106d6:	78fb      	ldrb	r3, [r7, #3]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d115      	bne.n	8010708 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	68db      	ldr	r3, [r3, #12]
 80106e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80106e8:	200a      	movs	r0, #10
 80106ea:	f7f9 fe7f 	bl	800a3ec <HAL_Delay>
      ms += 10U;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	330a      	adds	r3, #10
 80106f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f001 f926 	bl	8011946 <USB_GetMode>
 80106fa:	4603      	mov	r3, r0
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d005      	beq.n	801070c <USB_SetCurrentMode+0x84>
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	2bc7      	cmp	r3, #199	@ 0xc7
 8010704:	d9f0      	bls.n	80106e8 <USB_SetCurrentMode+0x60>
 8010706:	e001      	b.n	801070c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010708:	2301      	movs	r3, #1
 801070a:	e005      	b.n	8010718 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	2bc8      	cmp	r3, #200	@ 0xc8
 8010710:	d101      	bne.n	8010716 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010712:	2301      	movs	r3, #1
 8010714:	e000      	b.n	8010718 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010716:	2300      	movs	r3, #0
}
 8010718:	4618      	mov	r0, r3
 801071a:	3710      	adds	r7, #16
 801071c:	46bd      	mov	sp, r7
 801071e:	bd80      	pop	{r7, pc}

08010720 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010720:	b084      	sub	sp, #16
 8010722:	b580      	push	{r7, lr}
 8010724:	b086      	sub	sp, #24
 8010726:	af00      	add	r7, sp, #0
 8010728:	6078      	str	r0, [r7, #4]
 801072a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801072e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010732:	2300      	movs	r3, #0
 8010734:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801073a:	2300      	movs	r3, #0
 801073c:	613b      	str	r3, [r7, #16]
 801073e:	e009      	b.n	8010754 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010740:	687a      	ldr	r2, [r7, #4]
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	3340      	adds	r3, #64	@ 0x40
 8010746:	009b      	lsls	r3, r3, #2
 8010748:	4413      	add	r3, r2
 801074a:	2200      	movs	r2, #0
 801074c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801074e:	693b      	ldr	r3, [r7, #16]
 8010750:	3301      	adds	r3, #1
 8010752:	613b      	str	r3, [r7, #16]
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	2b0e      	cmp	r3, #14
 8010758:	d9f2      	bls.n	8010740 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801075a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801075e:	2b00      	cmp	r3, #0
 8010760:	d11c      	bne.n	801079c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010768:	685b      	ldr	r3, [r3, #4]
 801076a:	68fa      	ldr	r2, [r7, #12]
 801076c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010770:	f043 0302 	orr.w	r3, r3, #2
 8010774:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801077a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010786:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010792:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	639a      	str	r2, [r3, #56]	@ 0x38
 801079a:	e00b      	b.n	80107b4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107a0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107ac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80107ba:	461a      	mov	r2, r3
 80107bc:	2300      	movs	r3, #0
 80107be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80107c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80107c4:	2b01      	cmp	r3, #1
 80107c6:	d10d      	bne.n	80107e4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80107c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d104      	bne.n	80107da <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80107d0:	2100      	movs	r1, #0
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f000 f968 	bl	8010aa8 <USB_SetDevSpeed>
 80107d8:	e008      	b.n	80107ec <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80107da:	2101      	movs	r1, #1
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f000 f963 	bl	8010aa8 <USB_SetDevSpeed>
 80107e2:	e003      	b.n	80107ec <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80107e4:	2103      	movs	r1, #3
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f000 f95e 	bl	8010aa8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80107ec:	2110      	movs	r1, #16
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	f000 f8fa 	bl	80109e8 <USB_FlushTxFifo>
 80107f4:	4603      	mov	r3, r0
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d001      	beq.n	80107fe <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80107fa:	2301      	movs	r3, #1
 80107fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f000 f924 	bl	8010a4c <USB_FlushRxFifo>
 8010804:	4603      	mov	r3, r0
 8010806:	2b00      	cmp	r3, #0
 8010808:	d001      	beq.n	801080e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 801080a:	2301      	movs	r3, #1
 801080c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010814:	461a      	mov	r2, r3
 8010816:	2300      	movs	r3, #0
 8010818:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010820:	461a      	mov	r2, r3
 8010822:	2300      	movs	r3, #0
 8010824:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801082c:	461a      	mov	r2, r3
 801082e:	2300      	movs	r3, #0
 8010830:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010832:	2300      	movs	r3, #0
 8010834:	613b      	str	r3, [r7, #16]
 8010836:	e043      	b.n	80108c0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010838:	693b      	ldr	r3, [r7, #16]
 801083a:	015a      	lsls	r2, r3, #5
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	4413      	add	r3, r2
 8010840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801084a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801084e:	d118      	bne.n	8010882 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8010850:	693b      	ldr	r3, [r7, #16]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d10a      	bne.n	801086c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	015a      	lsls	r2, r3, #5
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	4413      	add	r3, r2
 801085e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010862:	461a      	mov	r2, r3
 8010864:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010868:	6013      	str	r3, [r2, #0]
 801086a:	e013      	b.n	8010894 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	015a      	lsls	r2, r3, #5
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	4413      	add	r3, r2
 8010874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010878:	461a      	mov	r2, r3
 801087a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801087e:	6013      	str	r3, [r2, #0]
 8010880:	e008      	b.n	8010894 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	015a      	lsls	r2, r3, #5
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	4413      	add	r3, r2
 801088a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801088e:	461a      	mov	r2, r3
 8010890:	2300      	movs	r3, #0
 8010892:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	015a      	lsls	r2, r3, #5
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	4413      	add	r3, r2
 801089c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108a0:	461a      	mov	r2, r3
 80108a2:	2300      	movs	r3, #0
 80108a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	015a      	lsls	r2, r3, #5
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	4413      	add	r3, r2
 80108ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108b2:	461a      	mov	r2, r3
 80108b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80108b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80108ba:	693b      	ldr	r3, [r7, #16]
 80108bc:	3301      	adds	r3, #1
 80108be:	613b      	str	r3, [r7, #16]
 80108c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80108c4:	461a      	mov	r2, r3
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	4293      	cmp	r3, r2
 80108ca:	d3b5      	bcc.n	8010838 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80108cc:	2300      	movs	r3, #0
 80108ce:	613b      	str	r3, [r7, #16]
 80108d0:	e043      	b.n	801095a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	015a      	lsls	r2, r3, #5
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	4413      	add	r3, r2
 80108da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80108e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80108e8:	d118      	bne.n	801091c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80108ea:	693b      	ldr	r3, [r7, #16]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d10a      	bne.n	8010906 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80108f0:	693b      	ldr	r3, [r7, #16]
 80108f2:	015a      	lsls	r2, r3, #5
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	4413      	add	r3, r2
 80108f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80108fc:	461a      	mov	r2, r3
 80108fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010902:	6013      	str	r3, [r2, #0]
 8010904:	e013      	b.n	801092e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	015a      	lsls	r2, r3, #5
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	4413      	add	r3, r2
 801090e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010912:	461a      	mov	r2, r3
 8010914:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010918:	6013      	str	r3, [r2, #0]
 801091a:	e008      	b.n	801092e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	015a      	lsls	r2, r3, #5
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	4413      	add	r3, r2
 8010924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010928:	461a      	mov	r2, r3
 801092a:	2300      	movs	r3, #0
 801092c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	015a      	lsls	r2, r3, #5
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	4413      	add	r3, r2
 8010936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801093a:	461a      	mov	r2, r3
 801093c:	2300      	movs	r3, #0
 801093e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010940:	693b      	ldr	r3, [r7, #16]
 8010942:	015a      	lsls	r2, r3, #5
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	4413      	add	r3, r2
 8010948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801094c:	461a      	mov	r2, r3
 801094e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010952:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	3301      	adds	r3, #1
 8010958:	613b      	str	r3, [r7, #16]
 801095a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801095e:	461a      	mov	r2, r3
 8010960:	693b      	ldr	r3, [r7, #16]
 8010962:	4293      	cmp	r3, r2
 8010964:	d3b5      	bcc.n	80108d2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801096c:	691b      	ldr	r3, [r3, #16]
 801096e:	68fa      	ldr	r2, [r7, #12]
 8010970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010974:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010978:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2200      	movs	r2, #0
 801097e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8010986:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010988:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801098c:	2b00      	cmp	r3, #0
 801098e:	d105      	bne.n	801099c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	699b      	ldr	r3, [r3, #24]
 8010994:	f043 0210 	orr.w	r2, r3, #16
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	699a      	ldr	r2, [r3, #24]
 80109a0:	4b10      	ldr	r3, [pc, #64]	@ (80109e4 <USB_DevInit+0x2c4>)
 80109a2:	4313      	orrs	r3, r2
 80109a4:	687a      	ldr	r2, [r7, #4]
 80109a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80109a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d005      	beq.n	80109bc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	699b      	ldr	r3, [r3, #24]
 80109b4:	f043 0208 	orr.w	r2, r3, #8
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80109bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80109c0:	2b01      	cmp	r3, #1
 80109c2:	d107      	bne.n	80109d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	699b      	ldr	r3, [r3, #24]
 80109c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80109cc:	f043 0304 	orr.w	r3, r3, #4
 80109d0:	687a      	ldr	r2, [r7, #4]
 80109d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80109d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	3718      	adds	r7, #24
 80109da:	46bd      	mov	sp, r7
 80109dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80109e0:	b004      	add	sp, #16
 80109e2:	4770      	bx	lr
 80109e4:	803c3800 	.word	0x803c3800

080109e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80109e8:	b480      	push	{r7}
 80109ea:	b085      	sub	sp, #20
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80109f2:	2300      	movs	r3, #0
 80109f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	3301      	adds	r3, #1
 80109fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010a02:	d901      	bls.n	8010a08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010a04:	2303      	movs	r3, #3
 8010a06:	e01b      	b.n	8010a40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	691b      	ldr	r3, [r3, #16]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	daf2      	bge.n	80109f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010a10:	2300      	movs	r3, #0
 8010a12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	019b      	lsls	r3, r3, #6
 8010a18:	f043 0220 	orr.w	r2, r3, #32
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	3301      	adds	r3, #1
 8010a24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010a2c:	d901      	bls.n	8010a32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010a2e:	2303      	movs	r3, #3
 8010a30:	e006      	b.n	8010a40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	691b      	ldr	r3, [r3, #16]
 8010a36:	f003 0320 	and.w	r3, r3, #32
 8010a3a:	2b20      	cmp	r3, #32
 8010a3c:	d0f0      	beq.n	8010a20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010a3e:	2300      	movs	r3, #0
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	3714      	adds	r7, #20
 8010a44:	46bd      	mov	sp, r7
 8010a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4a:	4770      	bx	lr

08010a4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010a4c:	b480      	push	{r7}
 8010a4e:	b085      	sub	sp, #20
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010a54:	2300      	movs	r3, #0
 8010a56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	3301      	adds	r3, #1
 8010a5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010a64:	d901      	bls.n	8010a6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010a66:	2303      	movs	r3, #3
 8010a68:	e018      	b.n	8010a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	691b      	ldr	r3, [r3, #16]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	daf2      	bge.n	8010a58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010a72:	2300      	movs	r3, #0
 8010a74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2210      	movs	r2, #16
 8010a7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	3301      	adds	r3, #1
 8010a80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010a88:	d901      	bls.n	8010a8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010a8a:	2303      	movs	r3, #3
 8010a8c:	e006      	b.n	8010a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	691b      	ldr	r3, [r3, #16]
 8010a92:	f003 0310 	and.w	r3, r3, #16
 8010a96:	2b10      	cmp	r3, #16
 8010a98:	d0f0      	beq.n	8010a7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010a9a:	2300      	movs	r3, #0
}
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3714      	adds	r7, #20
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa6:	4770      	bx	lr

08010aa8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010aa8:	b480      	push	{r7}
 8010aaa:	b085      	sub	sp, #20
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
 8010ab0:	460b      	mov	r3, r1
 8010ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010abe:	681a      	ldr	r2, [r3, #0]
 8010ac0:	78fb      	ldrb	r3, [r7, #3]
 8010ac2:	68f9      	ldr	r1, [r7, #12]
 8010ac4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010ac8:	4313      	orrs	r3, r2
 8010aca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010acc:	2300      	movs	r3, #0
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3714      	adds	r7, #20
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad8:	4770      	bx	lr

08010ada <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8010ada:	b480      	push	{r7}
 8010adc:	b087      	sub	sp, #28
 8010ade:	af00      	add	r7, sp, #0
 8010ae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010ae6:	693b      	ldr	r3, [r7, #16]
 8010ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010aec:	689b      	ldr	r3, [r3, #8]
 8010aee:	f003 0306 	and.w	r3, r3, #6
 8010af2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d102      	bne.n	8010b00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8010afa:	2300      	movs	r3, #0
 8010afc:	75fb      	strb	r3, [r7, #23]
 8010afe:	e00a      	b.n	8010b16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	2b02      	cmp	r3, #2
 8010b04:	d002      	beq.n	8010b0c <USB_GetDevSpeed+0x32>
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	2b06      	cmp	r3, #6
 8010b0a:	d102      	bne.n	8010b12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010b0c:	2302      	movs	r3, #2
 8010b0e:	75fb      	strb	r3, [r7, #23]
 8010b10:	e001      	b.n	8010b16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010b12:	230f      	movs	r3, #15
 8010b14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	371c      	adds	r7, #28
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b22:	4770      	bx	lr

08010b24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010b24:	b480      	push	{r7}
 8010b26:	b085      	sub	sp, #20
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
 8010b2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	781b      	ldrb	r3, [r3, #0]
 8010b36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	785b      	ldrb	r3, [r3, #1]
 8010b3c:	2b01      	cmp	r3, #1
 8010b3e:	d13a      	bne.n	8010bb6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010b46:	69da      	ldr	r2, [r3, #28]
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	781b      	ldrb	r3, [r3, #0]
 8010b4c:	f003 030f 	and.w	r3, r3, #15
 8010b50:	2101      	movs	r1, #1
 8010b52:	fa01 f303 	lsl.w	r3, r1, r3
 8010b56:	b29b      	uxth	r3, r3
 8010b58:	68f9      	ldr	r1, [r7, #12]
 8010b5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010b5e:	4313      	orrs	r3, r2
 8010b60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010b62:	68bb      	ldr	r3, [r7, #8]
 8010b64:	015a      	lsls	r2, r3, #5
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	4413      	add	r3, r2
 8010b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d155      	bne.n	8010c24 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	015a      	lsls	r2, r3, #5
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	4413      	add	r3, r2
 8010b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b84:	681a      	ldr	r2, [r3, #0]
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	689b      	ldr	r3, [r3, #8]
 8010b8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	791b      	ldrb	r3, [r3, #4]
 8010b92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010b94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	059b      	lsls	r3, r3, #22
 8010b9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010b9c:	4313      	orrs	r3, r2
 8010b9e:	68ba      	ldr	r2, [r7, #8]
 8010ba0:	0151      	lsls	r1, r2, #5
 8010ba2:	68fa      	ldr	r2, [r7, #12]
 8010ba4:	440a      	add	r2, r1
 8010ba6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010bb2:	6013      	str	r3, [r2, #0]
 8010bb4:	e036      	b.n	8010c24 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010bbc:	69da      	ldr	r2, [r3, #28]
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	781b      	ldrb	r3, [r3, #0]
 8010bc2:	f003 030f 	and.w	r3, r3, #15
 8010bc6:	2101      	movs	r1, #1
 8010bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8010bcc:	041b      	lsls	r3, r3, #16
 8010bce:	68f9      	ldr	r1, [r7, #12]
 8010bd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010bd4:	4313      	orrs	r3, r2
 8010bd6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010bd8:	68bb      	ldr	r3, [r7, #8]
 8010bda:	015a      	lsls	r2, r3, #5
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	4413      	add	r3, r2
 8010be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d11a      	bne.n	8010c24 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	015a      	lsls	r2, r3, #5
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	4413      	add	r3, r2
 8010bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010bfa:	681a      	ldr	r2, [r3, #0]
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	689b      	ldr	r3, [r3, #8]
 8010c00:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	791b      	ldrb	r3, [r3, #4]
 8010c08:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010c0a:	430b      	orrs	r3, r1
 8010c0c:	4313      	orrs	r3, r2
 8010c0e:	68ba      	ldr	r2, [r7, #8]
 8010c10:	0151      	lsls	r1, r2, #5
 8010c12:	68fa      	ldr	r2, [r7, #12]
 8010c14:	440a      	add	r2, r1
 8010c16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010c1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010c1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010c22:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010c24:	2300      	movs	r3, #0
}
 8010c26:	4618      	mov	r0, r3
 8010c28:	3714      	adds	r7, #20
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c30:	4770      	bx	lr
	...

08010c34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010c34:	b480      	push	{r7}
 8010c36:	b085      	sub	sp, #20
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	781b      	ldrb	r3, [r3, #0]
 8010c46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	785b      	ldrb	r3, [r3, #1]
 8010c4c:	2b01      	cmp	r3, #1
 8010c4e:	d161      	bne.n	8010d14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	015a      	lsls	r2, r3, #5
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	4413      	add	r3, r2
 8010c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010c62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010c66:	d11f      	bne.n	8010ca8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	015a      	lsls	r2, r3, #5
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	4413      	add	r3, r2
 8010c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	68ba      	ldr	r2, [r7, #8]
 8010c78:	0151      	lsls	r1, r2, #5
 8010c7a:	68fa      	ldr	r2, [r7, #12]
 8010c7c:	440a      	add	r2, r1
 8010c7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010c82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010c86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	015a      	lsls	r2, r3, #5
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	4413      	add	r3, r2
 8010c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	68ba      	ldr	r2, [r7, #8]
 8010c98:	0151      	lsls	r1, r2, #5
 8010c9a:	68fa      	ldr	r2, [r7, #12]
 8010c9c:	440a      	add	r2, r1
 8010c9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010ca2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010ca6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010cae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	781b      	ldrb	r3, [r3, #0]
 8010cb4:	f003 030f 	and.w	r3, r3, #15
 8010cb8:	2101      	movs	r1, #1
 8010cba:	fa01 f303 	lsl.w	r3, r1, r3
 8010cbe:	b29b      	uxth	r3, r3
 8010cc0:	43db      	mvns	r3, r3
 8010cc2:	68f9      	ldr	r1, [r7, #12]
 8010cc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010cc8:	4013      	ands	r3, r2
 8010cca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010cd2:	69da      	ldr	r2, [r3, #28]
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	781b      	ldrb	r3, [r3, #0]
 8010cd8:	f003 030f 	and.w	r3, r3, #15
 8010cdc:	2101      	movs	r1, #1
 8010cde:	fa01 f303 	lsl.w	r3, r1, r3
 8010ce2:	b29b      	uxth	r3, r3
 8010ce4:	43db      	mvns	r3, r3
 8010ce6:	68f9      	ldr	r1, [r7, #12]
 8010ce8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010cec:	4013      	ands	r3, r2
 8010cee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010cf0:	68bb      	ldr	r3, [r7, #8]
 8010cf2:	015a      	lsls	r2, r3, #5
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	4413      	add	r3, r2
 8010cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010cfc:	681a      	ldr	r2, [r3, #0]
 8010cfe:	68bb      	ldr	r3, [r7, #8]
 8010d00:	0159      	lsls	r1, r3, #5
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	440b      	add	r3, r1
 8010d06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d0a:	4619      	mov	r1, r3
 8010d0c:	4b35      	ldr	r3, [pc, #212]	@ (8010de4 <USB_DeactivateEndpoint+0x1b0>)
 8010d0e:	4013      	ands	r3, r2
 8010d10:	600b      	str	r3, [r1, #0]
 8010d12:	e060      	b.n	8010dd6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	015a      	lsls	r2, r3, #5
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	4413      	add	r3, r2
 8010d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010d26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010d2a:	d11f      	bne.n	8010d6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010d2c:	68bb      	ldr	r3, [r7, #8]
 8010d2e:	015a      	lsls	r2, r3, #5
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	4413      	add	r3, r2
 8010d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	68ba      	ldr	r2, [r7, #8]
 8010d3c:	0151      	lsls	r1, r2, #5
 8010d3e:	68fa      	ldr	r2, [r7, #12]
 8010d40:	440a      	add	r2, r1
 8010d42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010d46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010d4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	015a      	lsls	r2, r3, #5
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	4413      	add	r3, r2
 8010d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	68ba      	ldr	r2, [r7, #8]
 8010d5c:	0151      	lsls	r1, r2, #5
 8010d5e:	68fa      	ldr	r2, [r7, #12]
 8010d60:	440a      	add	r2, r1
 8010d62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010d66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010d6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010d74:	683b      	ldr	r3, [r7, #0]
 8010d76:	781b      	ldrb	r3, [r3, #0]
 8010d78:	f003 030f 	and.w	r3, r3, #15
 8010d7c:	2101      	movs	r1, #1
 8010d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8010d82:	041b      	lsls	r3, r3, #16
 8010d84:	43db      	mvns	r3, r3
 8010d86:	68f9      	ldr	r1, [r7, #12]
 8010d88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010d8c:	4013      	ands	r3, r2
 8010d8e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d96:	69da      	ldr	r2, [r3, #28]
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	781b      	ldrb	r3, [r3, #0]
 8010d9c:	f003 030f 	and.w	r3, r3, #15
 8010da0:	2101      	movs	r1, #1
 8010da2:	fa01 f303 	lsl.w	r3, r1, r3
 8010da6:	041b      	lsls	r3, r3, #16
 8010da8:	43db      	mvns	r3, r3
 8010daa:	68f9      	ldr	r1, [r7, #12]
 8010dac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010db0:	4013      	ands	r3, r2
 8010db2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	015a      	lsls	r2, r3, #5
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	4413      	add	r3, r2
 8010dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010dc0:	681a      	ldr	r2, [r3, #0]
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	0159      	lsls	r1, r3, #5
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	440b      	add	r3, r1
 8010dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010dce:	4619      	mov	r1, r3
 8010dd0:	4b05      	ldr	r3, [pc, #20]	@ (8010de8 <USB_DeactivateEndpoint+0x1b4>)
 8010dd2:	4013      	ands	r3, r2
 8010dd4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010dd6:	2300      	movs	r3, #0
}
 8010dd8:	4618      	mov	r0, r3
 8010dda:	3714      	adds	r7, #20
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de2:	4770      	bx	lr
 8010de4:	ec337800 	.word	0xec337800
 8010de8:	eff37800 	.word	0xeff37800

08010dec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b08a      	sub	sp, #40	@ 0x28
 8010df0:	af02      	add	r7, sp, #8
 8010df2:	60f8      	str	r0, [r7, #12]
 8010df4:	60b9      	str	r1, [r7, #8]
 8010df6:	4613      	mov	r3, r2
 8010df8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010dfe:	68bb      	ldr	r3, [r7, #8]
 8010e00:	781b      	ldrb	r3, [r3, #0]
 8010e02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	785b      	ldrb	r3, [r3, #1]
 8010e08:	2b01      	cmp	r3, #1
 8010e0a:	f040 817f 	bne.w	801110c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010e0e:	68bb      	ldr	r3, [r7, #8]
 8010e10:	691b      	ldr	r3, [r3, #16]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d132      	bne.n	8010e7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010e16:	69bb      	ldr	r3, [r7, #24]
 8010e18:	015a      	lsls	r2, r3, #5
 8010e1a:	69fb      	ldr	r3, [r7, #28]
 8010e1c:	4413      	add	r3, r2
 8010e1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e22:	691b      	ldr	r3, [r3, #16]
 8010e24:	69ba      	ldr	r2, [r7, #24]
 8010e26:	0151      	lsls	r1, r2, #5
 8010e28:	69fa      	ldr	r2, [r7, #28]
 8010e2a:	440a      	add	r2, r1
 8010e2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010e30:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8010e34:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8010e38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010e3a:	69bb      	ldr	r3, [r7, #24]
 8010e3c:	015a      	lsls	r2, r3, #5
 8010e3e:	69fb      	ldr	r3, [r7, #28]
 8010e40:	4413      	add	r3, r2
 8010e42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e46:	691b      	ldr	r3, [r3, #16]
 8010e48:	69ba      	ldr	r2, [r7, #24]
 8010e4a:	0151      	lsls	r1, r2, #5
 8010e4c:	69fa      	ldr	r2, [r7, #28]
 8010e4e:	440a      	add	r2, r1
 8010e50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010e54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010e58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010e5a:	69bb      	ldr	r3, [r7, #24]
 8010e5c:	015a      	lsls	r2, r3, #5
 8010e5e:	69fb      	ldr	r3, [r7, #28]
 8010e60:	4413      	add	r3, r2
 8010e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e66:	691b      	ldr	r3, [r3, #16]
 8010e68:	69ba      	ldr	r2, [r7, #24]
 8010e6a:	0151      	lsls	r1, r2, #5
 8010e6c:	69fa      	ldr	r2, [r7, #28]
 8010e6e:	440a      	add	r2, r1
 8010e70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010e74:	0cdb      	lsrs	r3, r3, #19
 8010e76:	04db      	lsls	r3, r3, #19
 8010e78:	6113      	str	r3, [r2, #16]
 8010e7a:	e097      	b.n	8010fac <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010e7c:	69bb      	ldr	r3, [r7, #24]
 8010e7e:	015a      	lsls	r2, r3, #5
 8010e80:	69fb      	ldr	r3, [r7, #28]
 8010e82:	4413      	add	r3, r2
 8010e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e88:	691b      	ldr	r3, [r3, #16]
 8010e8a:	69ba      	ldr	r2, [r7, #24]
 8010e8c:	0151      	lsls	r1, r2, #5
 8010e8e:	69fa      	ldr	r2, [r7, #28]
 8010e90:	440a      	add	r2, r1
 8010e92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010e96:	0cdb      	lsrs	r3, r3, #19
 8010e98:	04db      	lsls	r3, r3, #19
 8010e9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010e9c:	69bb      	ldr	r3, [r7, #24]
 8010e9e:	015a      	lsls	r2, r3, #5
 8010ea0:	69fb      	ldr	r3, [r7, #28]
 8010ea2:	4413      	add	r3, r2
 8010ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ea8:	691b      	ldr	r3, [r3, #16]
 8010eaa:	69ba      	ldr	r2, [r7, #24]
 8010eac:	0151      	lsls	r1, r2, #5
 8010eae:	69fa      	ldr	r2, [r7, #28]
 8010eb0:	440a      	add	r2, r1
 8010eb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010eb6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8010eba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8010ebe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8010ec0:	69bb      	ldr	r3, [r7, #24]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d11a      	bne.n	8010efc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8010ec6:	68bb      	ldr	r3, [r7, #8]
 8010ec8:	691a      	ldr	r2, [r3, #16]
 8010eca:	68bb      	ldr	r3, [r7, #8]
 8010ecc:	689b      	ldr	r3, [r3, #8]
 8010ece:	429a      	cmp	r2, r3
 8010ed0:	d903      	bls.n	8010eda <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	689a      	ldr	r2, [r3, #8]
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010eda:	69bb      	ldr	r3, [r7, #24]
 8010edc:	015a      	lsls	r2, r3, #5
 8010ede:	69fb      	ldr	r3, [r7, #28]
 8010ee0:	4413      	add	r3, r2
 8010ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ee6:	691b      	ldr	r3, [r3, #16]
 8010ee8:	69ba      	ldr	r2, [r7, #24]
 8010eea:	0151      	lsls	r1, r2, #5
 8010eec:	69fa      	ldr	r2, [r7, #28]
 8010eee:	440a      	add	r2, r1
 8010ef0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010ef4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010ef8:	6113      	str	r3, [r2, #16]
 8010efa:	e044      	b.n	8010f86 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010efc:	68bb      	ldr	r3, [r7, #8]
 8010efe:	691a      	ldr	r2, [r3, #16]
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	689b      	ldr	r3, [r3, #8]
 8010f04:	4413      	add	r3, r2
 8010f06:	1e5a      	subs	r2, r3, #1
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	689b      	ldr	r3, [r3, #8]
 8010f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f10:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8010f12:	69bb      	ldr	r3, [r7, #24]
 8010f14:	015a      	lsls	r2, r3, #5
 8010f16:	69fb      	ldr	r3, [r7, #28]
 8010f18:	4413      	add	r3, r2
 8010f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f1e:	691a      	ldr	r2, [r3, #16]
 8010f20:	8afb      	ldrh	r3, [r7, #22]
 8010f22:	04d9      	lsls	r1, r3, #19
 8010f24:	4ba4      	ldr	r3, [pc, #656]	@ (80111b8 <USB_EPStartXfer+0x3cc>)
 8010f26:	400b      	ands	r3, r1
 8010f28:	69b9      	ldr	r1, [r7, #24]
 8010f2a:	0148      	lsls	r0, r1, #5
 8010f2c:	69f9      	ldr	r1, [r7, #28]
 8010f2e:	4401      	add	r1, r0
 8010f30:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010f34:	4313      	orrs	r3, r2
 8010f36:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	791b      	ldrb	r3, [r3, #4]
 8010f3c:	2b01      	cmp	r3, #1
 8010f3e:	d122      	bne.n	8010f86 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010f40:	69bb      	ldr	r3, [r7, #24]
 8010f42:	015a      	lsls	r2, r3, #5
 8010f44:	69fb      	ldr	r3, [r7, #28]
 8010f46:	4413      	add	r3, r2
 8010f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f4c:	691b      	ldr	r3, [r3, #16]
 8010f4e:	69ba      	ldr	r2, [r7, #24]
 8010f50:	0151      	lsls	r1, r2, #5
 8010f52:	69fa      	ldr	r2, [r7, #28]
 8010f54:	440a      	add	r2, r1
 8010f56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010f5a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8010f5e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8010f60:	69bb      	ldr	r3, [r7, #24]
 8010f62:	015a      	lsls	r2, r3, #5
 8010f64:	69fb      	ldr	r3, [r7, #28]
 8010f66:	4413      	add	r3, r2
 8010f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f6c:	691a      	ldr	r2, [r3, #16]
 8010f6e:	8afb      	ldrh	r3, [r7, #22]
 8010f70:	075b      	lsls	r3, r3, #29
 8010f72:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8010f76:	69b9      	ldr	r1, [r7, #24]
 8010f78:	0148      	lsls	r0, r1, #5
 8010f7a:	69f9      	ldr	r1, [r7, #28]
 8010f7c:	4401      	add	r1, r0
 8010f7e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010f82:	4313      	orrs	r3, r2
 8010f84:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010f86:	69bb      	ldr	r3, [r7, #24]
 8010f88:	015a      	lsls	r2, r3, #5
 8010f8a:	69fb      	ldr	r3, [r7, #28]
 8010f8c:	4413      	add	r3, r2
 8010f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f92:	691a      	ldr	r2, [r3, #16]
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	691b      	ldr	r3, [r3, #16]
 8010f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010f9c:	69b9      	ldr	r1, [r7, #24]
 8010f9e:	0148      	lsls	r0, r1, #5
 8010fa0:	69f9      	ldr	r1, [r7, #28]
 8010fa2:	4401      	add	r1, r0
 8010fa4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010fa8:	4313      	orrs	r3, r2
 8010faa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010fac:	79fb      	ldrb	r3, [r7, #7]
 8010fae:	2b01      	cmp	r3, #1
 8010fb0:	d14b      	bne.n	801104a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	69db      	ldr	r3, [r3, #28]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d009      	beq.n	8010fce <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010fba:	69bb      	ldr	r3, [r7, #24]
 8010fbc:	015a      	lsls	r2, r3, #5
 8010fbe:	69fb      	ldr	r3, [r7, #28]
 8010fc0:	4413      	add	r3, r2
 8010fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010fc6:	461a      	mov	r2, r3
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	69db      	ldr	r3, [r3, #28]
 8010fcc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010fce:	68bb      	ldr	r3, [r7, #8]
 8010fd0:	791b      	ldrb	r3, [r3, #4]
 8010fd2:	2b01      	cmp	r3, #1
 8010fd4:	d128      	bne.n	8011028 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010fd6:	69fb      	ldr	r3, [r7, #28]
 8010fd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010fdc:	689b      	ldr	r3, [r3, #8]
 8010fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d110      	bne.n	8011008 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010fe6:	69bb      	ldr	r3, [r7, #24]
 8010fe8:	015a      	lsls	r2, r3, #5
 8010fea:	69fb      	ldr	r3, [r7, #28]
 8010fec:	4413      	add	r3, r2
 8010fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	69ba      	ldr	r2, [r7, #24]
 8010ff6:	0151      	lsls	r1, r2, #5
 8010ff8:	69fa      	ldr	r2, [r7, #28]
 8010ffa:	440a      	add	r2, r1
 8010ffc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011000:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011004:	6013      	str	r3, [r2, #0]
 8011006:	e00f      	b.n	8011028 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011008:	69bb      	ldr	r3, [r7, #24]
 801100a:	015a      	lsls	r2, r3, #5
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	4413      	add	r3, r2
 8011010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	69ba      	ldr	r2, [r7, #24]
 8011018:	0151      	lsls	r1, r2, #5
 801101a:	69fa      	ldr	r2, [r7, #28]
 801101c:	440a      	add	r2, r1
 801101e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011026:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011028:	69bb      	ldr	r3, [r7, #24]
 801102a:	015a      	lsls	r2, r3, #5
 801102c:	69fb      	ldr	r3, [r7, #28]
 801102e:	4413      	add	r3, r2
 8011030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	69ba      	ldr	r2, [r7, #24]
 8011038:	0151      	lsls	r1, r2, #5
 801103a:	69fa      	ldr	r2, [r7, #28]
 801103c:	440a      	add	r2, r1
 801103e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011042:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011046:	6013      	str	r3, [r2, #0]
 8011048:	e166      	b.n	8011318 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801104a:	69bb      	ldr	r3, [r7, #24]
 801104c:	015a      	lsls	r2, r3, #5
 801104e:	69fb      	ldr	r3, [r7, #28]
 8011050:	4413      	add	r3, r2
 8011052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	69ba      	ldr	r2, [r7, #24]
 801105a:	0151      	lsls	r1, r2, #5
 801105c:	69fa      	ldr	r2, [r7, #28]
 801105e:	440a      	add	r2, r1
 8011060:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011064:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011068:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801106a:	68bb      	ldr	r3, [r7, #8]
 801106c:	791b      	ldrb	r3, [r3, #4]
 801106e:	2b01      	cmp	r3, #1
 8011070:	d015      	beq.n	801109e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011072:	68bb      	ldr	r3, [r7, #8]
 8011074:	691b      	ldr	r3, [r3, #16]
 8011076:	2b00      	cmp	r3, #0
 8011078:	f000 814e 	beq.w	8011318 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801107c:	69fb      	ldr	r3, [r7, #28]
 801107e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011082:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	781b      	ldrb	r3, [r3, #0]
 8011088:	f003 030f 	and.w	r3, r3, #15
 801108c:	2101      	movs	r1, #1
 801108e:	fa01 f303 	lsl.w	r3, r1, r3
 8011092:	69f9      	ldr	r1, [r7, #28]
 8011094:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011098:	4313      	orrs	r3, r2
 801109a:	634b      	str	r3, [r1, #52]	@ 0x34
 801109c:	e13c      	b.n	8011318 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801109e:	69fb      	ldr	r3, [r7, #28]
 80110a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80110a4:	689b      	ldr	r3, [r3, #8]
 80110a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d110      	bne.n	80110d0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80110ae:	69bb      	ldr	r3, [r7, #24]
 80110b0:	015a      	lsls	r2, r3, #5
 80110b2:	69fb      	ldr	r3, [r7, #28]
 80110b4:	4413      	add	r3, r2
 80110b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	69ba      	ldr	r2, [r7, #24]
 80110be:	0151      	lsls	r1, r2, #5
 80110c0:	69fa      	ldr	r2, [r7, #28]
 80110c2:	440a      	add	r2, r1
 80110c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80110c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80110cc:	6013      	str	r3, [r2, #0]
 80110ce:	e00f      	b.n	80110f0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80110d0:	69bb      	ldr	r3, [r7, #24]
 80110d2:	015a      	lsls	r2, r3, #5
 80110d4:	69fb      	ldr	r3, [r7, #28]
 80110d6:	4413      	add	r3, r2
 80110d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	69ba      	ldr	r2, [r7, #24]
 80110e0:	0151      	lsls	r1, r2, #5
 80110e2:	69fa      	ldr	r2, [r7, #28]
 80110e4:	440a      	add	r2, r1
 80110e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80110ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80110ee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	68d9      	ldr	r1, [r3, #12]
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	781a      	ldrb	r2, [r3, #0]
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	691b      	ldr	r3, [r3, #16]
 80110fc:	b298      	uxth	r0, r3
 80110fe:	79fb      	ldrb	r3, [r7, #7]
 8011100:	9300      	str	r3, [sp, #0]
 8011102:	4603      	mov	r3, r0
 8011104:	68f8      	ldr	r0, [r7, #12]
 8011106:	f000 f9b9 	bl	801147c <USB_WritePacket>
 801110a:	e105      	b.n	8011318 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801110c:	69bb      	ldr	r3, [r7, #24]
 801110e:	015a      	lsls	r2, r3, #5
 8011110:	69fb      	ldr	r3, [r7, #28]
 8011112:	4413      	add	r3, r2
 8011114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011118:	691b      	ldr	r3, [r3, #16]
 801111a:	69ba      	ldr	r2, [r7, #24]
 801111c:	0151      	lsls	r1, r2, #5
 801111e:	69fa      	ldr	r2, [r7, #28]
 8011120:	440a      	add	r2, r1
 8011122:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011126:	0cdb      	lsrs	r3, r3, #19
 8011128:	04db      	lsls	r3, r3, #19
 801112a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801112c:	69bb      	ldr	r3, [r7, #24]
 801112e:	015a      	lsls	r2, r3, #5
 8011130:	69fb      	ldr	r3, [r7, #28]
 8011132:	4413      	add	r3, r2
 8011134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011138:	691b      	ldr	r3, [r3, #16]
 801113a:	69ba      	ldr	r2, [r7, #24]
 801113c:	0151      	lsls	r1, r2, #5
 801113e:	69fa      	ldr	r2, [r7, #28]
 8011140:	440a      	add	r2, r1
 8011142:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011146:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 801114a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 801114e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8011150:	69bb      	ldr	r3, [r7, #24]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d132      	bne.n	80111bc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8011156:	68bb      	ldr	r3, [r7, #8]
 8011158:	691b      	ldr	r3, [r3, #16]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d003      	beq.n	8011166 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 801115e:	68bb      	ldr	r3, [r7, #8]
 8011160:	689a      	ldr	r2, [r3, #8]
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	689a      	ldr	r2, [r3, #8]
 801116a:	68bb      	ldr	r3, [r7, #8]
 801116c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801116e:	69bb      	ldr	r3, [r7, #24]
 8011170:	015a      	lsls	r2, r3, #5
 8011172:	69fb      	ldr	r3, [r7, #28]
 8011174:	4413      	add	r3, r2
 8011176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801117a:	691a      	ldr	r2, [r3, #16]
 801117c:	68bb      	ldr	r3, [r7, #8]
 801117e:	6a1b      	ldr	r3, [r3, #32]
 8011180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011184:	69b9      	ldr	r1, [r7, #24]
 8011186:	0148      	lsls	r0, r1, #5
 8011188:	69f9      	ldr	r1, [r7, #28]
 801118a:	4401      	add	r1, r0
 801118c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011190:	4313      	orrs	r3, r2
 8011192:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011194:	69bb      	ldr	r3, [r7, #24]
 8011196:	015a      	lsls	r2, r3, #5
 8011198:	69fb      	ldr	r3, [r7, #28]
 801119a:	4413      	add	r3, r2
 801119c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111a0:	691b      	ldr	r3, [r3, #16]
 80111a2:	69ba      	ldr	r2, [r7, #24]
 80111a4:	0151      	lsls	r1, r2, #5
 80111a6:	69fa      	ldr	r2, [r7, #28]
 80111a8:	440a      	add	r2, r1
 80111aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80111ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80111b2:	6113      	str	r3, [r2, #16]
 80111b4:	e062      	b.n	801127c <USB_EPStartXfer+0x490>
 80111b6:	bf00      	nop
 80111b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	691b      	ldr	r3, [r3, #16]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d123      	bne.n	801120c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80111c4:	69bb      	ldr	r3, [r7, #24]
 80111c6:	015a      	lsls	r2, r3, #5
 80111c8:	69fb      	ldr	r3, [r7, #28]
 80111ca:	4413      	add	r3, r2
 80111cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111d0:	691a      	ldr	r2, [r3, #16]
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	689b      	ldr	r3, [r3, #8]
 80111d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80111da:	69b9      	ldr	r1, [r7, #24]
 80111dc:	0148      	lsls	r0, r1, #5
 80111de:	69f9      	ldr	r1, [r7, #28]
 80111e0:	4401      	add	r1, r0
 80111e2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80111e6:	4313      	orrs	r3, r2
 80111e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80111ea:	69bb      	ldr	r3, [r7, #24]
 80111ec:	015a      	lsls	r2, r3, #5
 80111ee:	69fb      	ldr	r3, [r7, #28]
 80111f0:	4413      	add	r3, r2
 80111f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111f6:	691b      	ldr	r3, [r3, #16]
 80111f8:	69ba      	ldr	r2, [r7, #24]
 80111fa:	0151      	lsls	r1, r2, #5
 80111fc:	69fa      	ldr	r2, [r7, #28]
 80111fe:	440a      	add	r2, r1
 8011200:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011204:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011208:	6113      	str	r3, [r2, #16]
 801120a:	e037      	b.n	801127c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	691a      	ldr	r2, [r3, #16]
 8011210:	68bb      	ldr	r3, [r7, #8]
 8011212:	689b      	ldr	r3, [r3, #8]
 8011214:	4413      	add	r3, r2
 8011216:	1e5a      	subs	r2, r3, #1
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	689b      	ldr	r3, [r3, #8]
 801121c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011220:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	689b      	ldr	r3, [r3, #8]
 8011226:	8afa      	ldrh	r2, [r7, #22]
 8011228:	fb03 f202 	mul.w	r2, r3, r2
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011230:	69bb      	ldr	r3, [r7, #24]
 8011232:	015a      	lsls	r2, r3, #5
 8011234:	69fb      	ldr	r3, [r7, #28]
 8011236:	4413      	add	r3, r2
 8011238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801123c:	691a      	ldr	r2, [r3, #16]
 801123e:	8afb      	ldrh	r3, [r7, #22]
 8011240:	04d9      	lsls	r1, r3, #19
 8011242:	4b38      	ldr	r3, [pc, #224]	@ (8011324 <USB_EPStartXfer+0x538>)
 8011244:	400b      	ands	r3, r1
 8011246:	69b9      	ldr	r1, [r7, #24]
 8011248:	0148      	lsls	r0, r1, #5
 801124a:	69f9      	ldr	r1, [r7, #28]
 801124c:	4401      	add	r1, r0
 801124e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011252:	4313      	orrs	r3, r2
 8011254:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8011256:	69bb      	ldr	r3, [r7, #24]
 8011258:	015a      	lsls	r2, r3, #5
 801125a:	69fb      	ldr	r3, [r7, #28]
 801125c:	4413      	add	r3, r2
 801125e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011262:	691a      	ldr	r2, [r3, #16]
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	6a1b      	ldr	r3, [r3, #32]
 8011268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801126c:	69b9      	ldr	r1, [r7, #24]
 801126e:	0148      	lsls	r0, r1, #5
 8011270:	69f9      	ldr	r1, [r7, #28]
 8011272:	4401      	add	r1, r0
 8011274:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011278:	4313      	orrs	r3, r2
 801127a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801127c:	79fb      	ldrb	r3, [r7, #7]
 801127e:	2b01      	cmp	r3, #1
 8011280:	d10d      	bne.n	801129e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	68db      	ldr	r3, [r3, #12]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d009      	beq.n	801129e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801128a:	68bb      	ldr	r3, [r7, #8]
 801128c:	68d9      	ldr	r1, [r3, #12]
 801128e:	69bb      	ldr	r3, [r7, #24]
 8011290:	015a      	lsls	r2, r3, #5
 8011292:	69fb      	ldr	r3, [r7, #28]
 8011294:	4413      	add	r3, r2
 8011296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801129a:	460a      	mov	r2, r1
 801129c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	791b      	ldrb	r3, [r3, #4]
 80112a2:	2b01      	cmp	r3, #1
 80112a4:	d128      	bne.n	80112f8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80112a6:	69fb      	ldr	r3, [r7, #28]
 80112a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80112ac:	689b      	ldr	r3, [r3, #8]
 80112ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d110      	bne.n	80112d8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80112b6:	69bb      	ldr	r3, [r7, #24]
 80112b8:	015a      	lsls	r2, r3, #5
 80112ba:	69fb      	ldr	r3, [r7, #28]
 80112bc:	4413      	add	r3, r2
 80112be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	69ba      	ldr	r2, [r7, #24]
 80112c6:	0151      	lsls	r1, r2, #5
 80112c8:	69fa      	ldr	r2, [r7, #28]
 80112ca:	440a      	add	r2, r1
 80112cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80112d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80112d4:	6013      	str	r3, [r2, #0]
 80112d6:	e00f      	b.n	80112f8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80112d8:	69bb      	ldr	r3, [r7, #24]
 80112da:	015a      	lsls	r2, r3, #5
 80112dc:	69fb      	ldr	r3, [r7, #28]
 80112de:	4413      	add	r3, r2
 80112e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	69ba      	ldr	r2, [r7, #24]
 80112e8:	0151      	lsls	r1, r2, #5
 80112ea:	69fa      	ldr	r2, [r7, #28]
 80112ec:	440a      	add	r2, r1
 80112ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80112f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80112f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80112f8:	69bb      	ldr	r3, [r7, #24]
 80112fa:	015a      	lsls	r2, r3, #5
 80112fc:	69fb      	ldr	r3, [r7, #28]
 80112fe:	4413      	add	r3, r2
 8011300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	69ba      	ldr	r2, [r7, #24]
 8011308:	0151      	lsls	r1, r2, #5
 801130a:	69fa      	ldr	r2, [r7, #28]
 801130c:	440a      	add	r2, r1
 801130e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011312:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011316:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011318:	2300      	movs	r3, #0
}
 801131a:	4618      	mov	r0, r3
 801131c:	3720      	adds	r7, #32
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}
 8011322:	bf00      	nop
 8011324:	1ff80000 	.word	0x1ff80000

08011328 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011328:	b480      	push	{r7}
 801132a:	b087      	sub	sp, #28
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
 8011330:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011332:	2300      	movs	r3, #0
 8011334:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8011336:	2300      	movs	r3, #0
 8011338:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	785b      	ldrb	r3, [r3, #1]
 8011342:	2b01      	cmp	r3, #1
 8011344:	d14a      	bne.n	80113dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	781b      	ldrb	r3, [r3, #0]
 801134a:	015a      	lsls	r2, r3, #5
 801134c:	693b      	ldr	r3, [r7, #16]
 801134e:	4413      	add	r3, r2
 8011350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801135a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801135e:	f040 8086 	bne.w	801146e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8011362:	683b      	ldr	r3, [r7, #0]
 8011364:	781b      	ldrb	r3, [r3, #0]
 8011366:	015a      	lsls	r2, r3, #5
 8011368:	693b      	ldr	r3, [r7, #16]
 801136a:	4413      	add	r3, r2
 801136c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	683a      	ldr	r2, [r7, #0]
 8011374:	7812      	ldrb	r2, [r2, #0]
 8011376:	0151      	lsls	r1, r2, #5
 8011378:	693a      	ldr	r2, [r7, #16]
 801137a:	440a      	add	r2, r1
 801137c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011380:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011384:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	781b      	ldrb	r3, [r3, #0]
 801138a:	015a      	lsls	r2, r3, #5
 801138c:	693b      	ldr	r3, [r7, #16]
 801138e:	4413      	add	r3, r2
 8011390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	683a      	ldr	r2, [r7, #0]
 8011398:	7812      	ldrb	r2, [r2, #0]
 801139a:	0151      	lsls	r1, r2, #5
 801139c:	693a      	ldr	r2, [r7, #16]
 801139e:	440a      	add	r2, r1
 80113a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80113a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80113a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	3301      	adds	r3, #1
 80113ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80113b6:	4293      	cmp	r3, r2
 80113b8:	d902      	bls.n	80113c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80113ba:	2301      	movs	r3, #1
 80113bc:	75fb      	strb	r3, [r7, #23]
          break;
 80113be:	e056      	b.n	801146e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	015a      	lsls	r2, r3, #5
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	4413      	add	r3, r2
 80113ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80113d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80113d8:	d0e7      	beq.n	80113aa <USB_EPStopXfer+0x82>
 80113da:	e048      	b.n	801146e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	781b      	ldrb	r3, [r3, #0]
 80113e0:	015a      	lsls	r2, r3, #5
 80113e2:	693b      	ldr	r3, [r7, #16]
 80113e4:	4413      	add	r3, r2
 80113e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80113f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80113f4:	d13b      	bne.n	801146e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	781b      	ldrb	r3, [r3, #0]
 80113fa:	015a      	lsls	r2, r3, #5
 80113fc:	693b      	ldr	r3, [r7, #16]
 80113fe:	4413      	add	r3, r2
 8011400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	683a      	ldr	r2, [r7, #0]
 8011408:	7812      	ldrb	r2, [r2, #0]
 801140a:	0151      	lsls	r1, r2, #5
 801140c:	693a      	ldr	r2, [r7, #16]
 801140e:	440a      	add	r2, r1
 8011410:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011414:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011418:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	781b      	ldrb	r3, [r3, #0]
 801141e:	015a      	lsls	r2, r3, #5
 8011420:	693b      	ldr	r3, [r7, #16]
 8011422:	4413      	add	r3, r2
 8011424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	683a      	ldr	r2, [r7, #0]
 801142c:	7812      	ldrb	r2, [r2, #0]
 801142e:	0151      	lsls	r1, r2, #5
 8011430:	693a      	ldr	r2, [r7, #16]
 8011432:	440a      	add	r2, r1
 8011434:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011438:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801143c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	3301      	adds	r3, #1
 8011442:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	f242 7210 	movw	r2, #10000	@ 0x2710
 801144a:	4293      	cmp	r3, r2
 801144c:	d902      	bls.n	8011454 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801144e:	2301      	movs	r3, #1
 8011450:	75fb      	strb	r3, [r7, #23]
          break;
 8011452:	e00c      	b.n	801146e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	015a      	lsls	r2, r3, #5
 801145a:	693b      	ldr	r3, [r7, #16]
 801145c:	4413      	add	r3, r2
 801145e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011468:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801146c:	d0e7      	beq.n	801143e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801146e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011470:	4618      	mov	r0, r3
 8011472:	371c      	adds	r7, #28
 8011474:	46bd      	mov	sp, r7
 8011476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147a:	4770      	bx	lr

0801147c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801147c:	b480      	push	{r7}
 801147e:	b089      	sub	sp, #36	@ 0x24
 8011480:	af00      	add	r7, sp, #0
 8011482:	60f8      	str	r0, [r7, #12]
 8011484:	60b9      	str	r1, [r7, #8]
 8011486:	4611      	mov	r1, r2
 8011488:	461a      	mov	r2, r3
 801148a:	460b      	mov	r3, r1
 801148c:	71fb      	strb	r3, [r7, #7]
 801148e:	4613      	mov	r3, r2
 8011490:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801149a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d123      	bne.n	80114ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80114a2:	88bb      	ldrh	r3, [r7, #4]
 80114a4:	3303      	adds	r3, #3
 80114a6:	089b      	lsrs	r3, r3, #2
 80114a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80114aa:	2300      	movs	r3, #0
 80114ac:	61bb      	str	r3, [r7, #24]
 80114ae:	e018      	b.n	80114e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80114b0:	79fb      	ldrb	r3, [r7, #7]
 80114b2:	031a      	lsls	r2, r3, #12
 80114b4:	697b      	ldr	r3, [r7, #20]
 80114b6:	4413      	add	r3, r2
 80114b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80114bc:	461a      	mov	r2, r3
 80114be:	69fb      	ldr	r3, [r7, #28]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80114c4:	69fb      	ldr	r3, [r7, #28]
 80114c6:	3301      	adds	r3, #1
 80114c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80114ca:	69fb      	ldr	r3, [r7, #28]
 80114cc:	3301      	adds	r3, #1
 80114ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80114d0:	69fb      	ldr	r3, [r7, #28]
 80114d2:	3301      	adds	r3, #1
 80114d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80114d6:	69fb      	ldr	r3, [r7, #28]
 80114d8:	3301      	adds	r3, #1
 80114da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80114dc:	69bb      	ldr	r3, [r7, #24]
 80114de:	3301      	adds	r3, #1
 80114e0:	61bb      	str	r3, [r7, #24]
 80114e2:	69ba      	ldr	r2, [r7, #24]
 80114e4:	693b      	ldr	r3, [r7, #16]
 80114e6:	429a      	cmp	r2, r3
 80114e8:	d3e2      	bcc.n	80114b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80114ea:	2300      	movs	r3, #0
}
 80114ec:	4618      	mov	r0, r3
 80114ee:	3724      	adds	r7, #36	@ 0x24
 80114f0:	46bd      	mov	sp, r7
 80114f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f6:	4770      	bx	lr

080114f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80114f8:	b480      	push	{r7}
 80114fa:	b08b      	sub	sp, #44	@ 0x2c
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	60f8      	str	r0, [r7, #12]
 8011500:	60b9      	str	r1, [r7, #8]
 8011502:	4613      	mov	r3, r2
 8011504:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801150e:	88fb      	ldrh	r3, [r7, #6]
 8011510:	089b      	lsrs	r3, r3, #2
 8011512:	b29b      	uxth	r3, r3
 8011514:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011516:	88fb      	ldrh	r3, [r7, #6]
 8011518:	f003 0303 	and.w	r3, r3, #3
 801151c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801151e:	2300      	movs	r3, #0
 8011520:	623b      	str	r3, [r7, #32]
 8011522:	e014      	b.n	801154e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011524:	69bb      	ldr	r3, [r7, #24]
 8011526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801152a:	681a      	ldr	r2, [r3, #0]
 801152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801152e:	601a      	str	r2, [r3, #0]
    pDest++;
 8011530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011532:	3301      	adds	r3, #1
 8011534:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011538:	3301      	adds	r3, #1
 801153a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801153c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801153e:	3301      	adds	r3, #1
 8011540:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011544:	3301      	adds	r3, #1
 8011546:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8011548:	6a3b      	ldr	r3, [r7, #32]
 801154a:	3301      	adds	r3, #1
 801154c:	623b      	str	r3, [r7, #32]
 801154e:	6a3a      	ldr	r2, [r7, #32]
 8011550:	697b      	ldr	r3, [r7, #20]
 8011552:	429a      	cmp	r2, r3
 8011554:	d3e6      	bcc.n	8011524 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011556:	8bfb      	ldrh	r3, [r7, #30]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d01e      	beq.n	801159a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801155c:	2300      	movs	r3, #0
 801155e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011560:	69bb      	ldr	r3, [r7, #24]
 8011562:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011566:	461a      	mov	r2, r3
 8011568:	f107 0310 	add.w	r3, r7, #16
 801156c:	6812      	ldr	r2, [r2, #0]
 801156e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011570:	693a      	ldr	r2, [r7, #16]
 8011572:	6a3b      	ldr	r3, [r7, #32]
 8011574:	b2db      	uxtb	r3, r3
 8011576:	00db      	lsls	r3, r3, #3
 8011578:	fa22 f303 	lsr.w	r3, r2, r3
 801157c:	b2da      	uxtb	r2, r3
 801157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011580:	701a      	strb	r2, [r3, #0]
      i++;
 8011582:	6a3b      	ldr	r3, [r7, #32]
 8011584:	3301      	adds	r3, #1
 8011586:	623b      	str	r3, [r7, #32]
      pDest++;
 8011588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801158a:	3301      	adds	r3, #1
 801158c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801158e:	8bfb      	ldrh	r3, [r7, #30]
 8011590:	3b01      	subs	r3, #1
 8011592:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011594:	8bfb      	ldrh	r3, [r7, #30]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d1ea      	bne.n	8011570 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801159c:	4618      	mov	r0, r3
 801159e:	372c      	adds	r7, #44	@ 0x2c
 80115a0:	46bd      	mov	sp, r7
 80115a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a6:	4770      	bx	lr

080115a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80115a8:	b480      	push	{r7}
 80115aa:	b085      	sub	sp, #20
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
 80115b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	781b      	ldrb	r3, [r3, #0]
 80115ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	785b      	ldrb	r3, [r3, #1]
 80115c0:	2b01      	cmp	r3, #1
 80115c2:	d12c      	bne.n	801161e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80115c4:	68bb      	ldr	r3, [r7, #8]
 80115c6:	015a      	lsls	r2, r3, #5
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	4413      	add	r3, r2
 80115cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	db12      	blt.n	80115fc <USB_EPSetStall+0x54>
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d00f      	beq.n	80115fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80115dc:	68bb      	ldr	r3, [r7, #8]
 80115de:	015a      	lsls	r2, r3, #5
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	4413      	add	r3, r2
 80115e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	68ba      	ldr	r2, [r7, #8]
 80115ec:	0151      	lsls	r1, r2, #5
 80115ee:	68fa      	ldr	r2, [r7, #12]
 80115f0:	440a      	add	r2, r1
 80115f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80115f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80115fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	015a      	lsls	r2, r3, #5
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	4413      	add	r3, r2
 8011604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	68ba      	ldr	r2, [r7, #8]
 801160c:	0151      	lsls	r1, r2, #5
 801160e:	68fa      	ldr	r2, [r7, #12]
 8011610:	440a      	add	r2, r1
 8011612:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011616:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801161a:	6013      	str	r3, [r2, #0]
 801161c:	e02b      	b.n	8011676 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801161e:	68bb      	ldr	r3, [r7, #8]
 8011620:	015a      	lsls	r2, r3, #5
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	4413      	add	r3, r2
 8011626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	2b00      	cmp	r3, #0
 801162e:	db12      	blt.n	8011656 <USB_EPSetStall+0xae>
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d00f      	beq.n	8011656 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011636:	68bb      	ldr	r3, [r7, #8]
 8011638:	015a      	lsls	r2, r3, #5
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	4413      	add	r3, r2
 801163e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	68ba      	ldr	r2, [r7, #8]
 8011646:	0151      	lsls	r1, r2, #5
 8011648:	68fa      	ldr	r2, [r7, #12]
 801164a:	440a      	add	r2, r1
 801164c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011650:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011654:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011656:	68bb      	ldr	r3, [r7, #8]
 8011658:	015a      	lsls	r2, r3, #5
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	4413      	add	r3, r2
 801165e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	68ba      	ldr	r2, [r7, #8]
 8011666:	0151      	lsls	r1, r2, #5
 8011668:	68fa      	ldr	r2, [r7, #12]
 801166a:	440a      	add	r2, r1
 801166c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011670:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011674:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011676:	2300      	movs	r3, #0
}
 8011678:	4618      	mov	r0, r3
 801167a:	3714      	adds	r7, #20
 801167c:	46bd      	mov	sp, r7
 801167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011682:	4770      	bx	lr

08011684 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011684:	b480      	push	{r7}
 8011686:	b085      	sub	sp, #20
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
 801168c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	781b      	ldrb	r3, [r3, #0]
 8011696:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	785b      	ldrb	r3, [r3, #1]
 801169c:	2b01      	cmp	r3, #1
 801169e:	d128      	bne.n	80116f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	015a      	lsls	r2, r3, #5
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	4413      	add	r3, r2
 80116a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	68ba      	ldr	r2, [r7, #8]
 80116b0:	0151      	lsls	r1, r2, #5
 80116b2:	68fa      	ldr	r2, [r7, #12]
 80116b4:	440a      	add	r2, r1
 80116b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80116ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80116be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	791b      	ldrb	r3, [r3, #4]
 80116c4:	2b03      	cmp	r3, #3
 80116c6:	d003      	beq.n	80116d0 <USB_EPClearStall+0x4c>
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	791b      	ldrb	r3, [r3, #4]
 80116cc:	2b02      	cmp	r3, #2
 80116ce:	d138      	bne.n	8011742 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	015a      	lsls	r2, r3, #5
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	4413      	add	r3, r2
 80116d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	68ba      	ldr	r2, [r7, #8]
 80116e0:	0151      	lsls	r1, r2, #5
 80116e2:	68fa      	ldr	r2, [r7, #12]
 80116e4:	440a      	add	r2, r1
 80116e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80116ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80116ee:	6013      	str	r3, [r2, #0]
 80116f0:	e027      	b.n	8011742 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	015a      	lsls	r2, r3, #5
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	4413      	add	r3, r2
 80116fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	68ba      	ldr	r2, [r7, #8]
 8011702:	0151      	lsls	r1, r2, #5
 8011704:	68fa      	ldr	r2, [r7, #12]
 8011706:	440a      	add	r2, r1
 8011708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801170c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011710:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	791b      	ldrb	r3, [r3, #4]
 8011716:	2b03      	cmp	r3, #3
 8011718:	d003      	beq.n	8011722 <USB_EPClearStall+0x9e>
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	791b      	ldrb	r3, [r3, #4]
 801171e:	2b02      	cmp	r3, #2
 8011720:	d10f      	bne.n	8011742 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011722:	68bb      	ldr	r3, [r7, #8]
 8011724:	015a      	lsls	r2, r3, #5
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	4413      	add	r3, r2
 801172a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	68ba      	ldr	r2, [r7, #8]
 8011732:	0151      	lsls	r1, r2, #5
 8011734:	68fa      	ldr	r2, [r7, #12]
 8011736:	440a      	add	r2, r1
 8011738:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801173c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011740:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011742:	2300      	movs	r3, #0
}
 8011744:	4618      	mov	r0, r3
 8011746:	3714      	adds	r7, #20
 8011748:	46bd      	mov	sp, r7
 801174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174e:	4770      	bx	lr

08011750 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011750:	b480      	push	{r7}
 8011752:	b085      	sub	sp, #20
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	460b      	mov	r3, r1
 801175a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	68fa      	ldr	r2, [r7, #12]
 801176a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801176e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8011772:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801177a:	681a      	ldr	r2, [r3, #0]
 801177c:	78fb      	ldrb	r3, [r7, #3]
 801177e:	011b      	lsls	r3, r3, #4
 8011780:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8011784:	68f9      	ldr	r1, [r7, #12]
 8011786:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801178a:	4313      	orrs	r3, r2
 801178c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801178e:	2300      	movs	r3, #0
}
 8011790:	4618      	mov	r0, r3
 8011792:	3714      	adds	r7, #20
 8011794:	46bd      	mov	sp, r7
 8011796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179a:	4770      	bx	lr

0801179c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801179c:	b480      	push	{r7}
 801179e:	b085      	sub	sp, #20
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	68fa      	ldr	r2, [r7, #12]
 80117b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80117b6:	f023 0303 	bic.w	r3, r3, #3
 80117ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117c2:	685b      	ldr	r3, [r3, #4]
 80117c4:	68fa      	ldr	r2, [r7, #12]
 80117c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80117ca:	f023 0302 	bic.w	r3, r3, #2
 80117ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80117d0:	2300      	movs	r3, #0
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	3714      	adds	r7, #20
 80117d6:	46bd      	mov	sp, r7
 80117d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117dc:	4770      	bx	lr

080117de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80117de:	b480      	push	{r7}
 80117e0:	b085      	sub	sp, #20
 80117e2:	af00      	add	r7, sp, #0
 80117e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	68fa      	ldr	r2, [r7, #12]
 80117f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80117f8:	f023 0303 	bic.w	r3, r3, #3
 80117fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011804:	685b      	ldr	r3, [r3, #4]
 8011806:	68fa      	ldr	r2, [r7, #12]
 8011808:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801180c:	f043 0302 	orr.w	r3, r3, #2
 8011810:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011812:	2300      	movs	r3, #0
}
 8011814:	4618      	mov	r0, r3
 8011816:	3714      	adds	r7, #20
 8011818:	46bd      	mov	sp, r7
 801181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181e:	4770      	bx	lr

08011820 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011820:	b480      	push	{r7}
 8011822:	b085      	sub	sp, #20
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	695b      	ldr	r3, [r3, #20]
 801182c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	699b      	ldr	r3, [r3, #24]
 8011832:	68fa      	ldr	r2, [r7, #12]
 8011834:	4013      	ands	r3, r2
 8011836:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011838:	68fb      	ldr	r3, [r7, #12]
}
 801183a:	4618      	mov	r0, r3
 801183c:	3714      	adds	r7, #20
 801183e:	46bd      	mov	sp, r7
 8011840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011844:	4770      	bx	lr

08011846 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011846:	b480      	push	{r7}
 8011848:	b085      	sub	sp, #20
 801184a:	af00      	add	r7, sp, #0
 801184c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011858:	699b      	ldr	r3, [r3, #24]
 801185a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011862:	69db      	ldr	r3, [r3, #28]
 8011864:	68ba      	ldr	r2, [r7, #8]
 8011866:	4013      	ands	r3, r2
 8011868:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	0c1b      	lsrs	r3, r3, #16
}
 801186e:	4618      	mov	r0, r3
 8011870:	3714      	adds	r7, #20
 8011872:	46bd      	mov	sp, r7
 8011874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011878:	4770      	bx	lr

0801187a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801187a:	b480      	push	{r7}
 801187c:	b085      	sub	sp, #20
 801187e:	af00      	add	r7, sp, #0
 8011880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801188c:	699b      	ldr	r3, [r3, #24]
 801188e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011896:	69db      	ldr	r3, [r3, #28]
 8011898:	68ba      	ldr	r2, [r7, #8]
 801189a:	4013      	ands	r3, r2
 801189c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801189e:	68bb      	ldr	r3, [r7, #8]
 80118a0:	b29b      	uxth	r3, r3
}
 80118a2:	4618      	mov	r0, r3
 80118a4:	3714      	adds	r7, #20
 80118a6:	46bd      	mov	sp, r7
 80118a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ac:	4770      	bx	lr

080118ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80118ae:	b480      	push	{r7}
 80118b0:	b085      	sub	sp, #20
 80118b2:	af00      	add	r7, sp, #0
 80118b4:	6078      	str	r0, [r7, #4]
 80118b6:	460b      	mov	r3, r1
 80118b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80118be:	78fb      	ldrb	r3, [r7, #3]
 80118c0:	015a      	lsls	r2, r3, #5
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	4413      	add	r3, r2
 80118c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118ca:	689b      	ldr	r3, [r3, #8]
 80118cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80118d4:	695b      	ldr	r3, [r3, #20]
 80118d6:	68ba      	ldr	r2, [r7, #8]
 80118d8:	4013      	ands	r3, r2
 80118da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80118dc:	68bb      	ldr	r3, [r7, #8]
}
 80118de:	4618      	mov	r0, r3
 80118e0:	3714      	adds	r7, #20
 80118e2:	46bd      	mov	sp, r7
 80118e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e8:	4770      	bx	lr

080118ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80118ea:	b480      	push	{r7}
 80118ec:	b087      	sub	sp, #28
 80118ee:	af00      	add	r7, sp, #0
 80118f0:	6078      	str	r0, [r7, #4]
 80118f2:	460b      	mov	r3, r1
 80118f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80118fa:	697b      	ldr	r3, [r7, #20]
 80118fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011900:	691b      	ldr	r3, [r3, #16]
 8011902:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011904:	697b      	ldr	r3, [r7, #20]
 8011906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801190a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801190c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801190e:	78fb      	ldrb	r3, [r7, #3]
 8011910:	f003 030f 	and.w	r3, r3, #15
 8011914:	68fa      	ldr	r2, [r7, #12]
 8011916:	fa22 f303 	lsr.w	r3, r2, r3
 801191a:	01db      	lsls	r3, r3, #7
 801191c:	b2db      	uxtb	r3, r3
 801191e:	693a      	ldr	r2, [r7, #16]
 8011920:	4313      	orrs	r3, r2
 8011922:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011924:	78fb      	ldrb	r3, [r7, #3]
 8011926:	015a      	lsls	r2, r3, #5
 8011928:	697b      	ldr	r3, [r7, #20]
 801192a:	4413      	add	r3, r2
 801192c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011930:	689b      	ldr	r3, [r3, #8]
 8011932:	693a      	ldr	r2, [r7, #16]
 8011934:	4013      	ands	r3, r2
 8011936:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011938:	68bb      	ldr	r3, [r7, #8]
}
 801193a:	4618      	mov	r0, r3
 801193c:	371c      	adds	r7, #28
 801193e:	46bd      	mov	sp, r7
 8011940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011944:	4770      	bx	lr

08011946 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011946:	b480      	push	{r7}
 8011948:	b083      	sub	sp, #12
 801194a:	af00      	add	r7, sp, #0
 801194c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	695b      	ldr	r3, [r3, #20]
 8011952:	f003 0301 	and.w	r3, r3, #1
}
 8011956:	4618      	mov	r0, r3
 8011958:	370c      	adds	r7, #12
 801195a:	46bd      	mov	sp, r7
 801195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011960:	4770      	bx	lr

08011962 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8011962:	b480      	push	{r7}
 8011964:	b085      	sub	sp, #20
 8011966:	af00      	add	r7, sp, #0
 8011968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	68fa      	ldr	r2, [r7, #12]
 8011978:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801197c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8011980:	f023 0307 	bic.w	r3, r3, #7
 8011984:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801198c:	685b      	ldr	r3, [r3, #4]
 801198e:	68fa      	ldr	r2, [r7, #12]
 8011990:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011998:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801199a:	2300      	movs	r3, #0
}
 801199c:	4618      	mov	r0, r3
 801199e:	3714      	adds	r7, #20
 80119a0:	46bd      	mov	sp, r7
 80119a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a6:	4770      	bx	lr

080119a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80119a8:	b480      	push	{r7}
 80119aa:	b087      	sub	sp, #28
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	60f8      	str	r0, [r7, #12]
 80119b0:	460b      	mov	r3, r1
 80119b2:	607a      	str	r2, [r7, #4]
 80119b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	333c      	adds	r3, #60	@ 0x3c
 80119be:	3304      	adds	r3, #4
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80119c4:	693b      	ldr	r3, [r7, #16]
 80119c6:	4a26      	ldr	r2, [pc, #152]	@ (8011a60 <USB_EP0_OutStart+0xb8>)
 80119c8:	4293      	cmp	r3, r2
 80119ca:	d90a      	bls.n	80119e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80119cc:	697b      	ldr	r3, [r7, #20]
 80119ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80119d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80119dc:	d101      	bne.n	80119e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80119de:	2300      	movs	r3, #0
 80119e0:	e037      	b.n	8011a52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80119e2:	697b      	ldr	r3, [r7, #20]
 80119e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119e8:	461a      	mov	r2, r3
 80119ea:	2300      	movs	r3, #0
 80119ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119f4:	691b      	ldr	r3, [r3, #16]
 80119f6:	697a      	ldr	r2, [r7, #20]
 80119f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80119fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011a00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011a02:	697b      	ldr	r3, [r7, #20]
 8011a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a08:	691b      	ldr	r3, [r3, #16]
 8011a0a:	697a      	ldr	r2, [r7, #20]
 8011a0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011a10:	f043 0318 	orr.w	r3, r3, #24
 8011a14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a1c:	691b      	ldr	r3, [r3, #16]
 8011a1e:	697a      	ldr	r2, [r7, #20]
 8011a20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011a24:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8011a28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8011a2a:	7afb      	ldrb	r3, [r7, #11]
 8011a2c:	2b01      	cmp	r3, #1
 8011a2e:	d10f      	bne.n	8011a50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011a30:	697b      	ldr	r3, [r7, #20]
 8011a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a36:	461a      	mov	r2, r3
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011a3c:	697b      	ldr	r3, [r7, #20]
 8011a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	697a      	ldr	r2, [r7, #20]
 8011a46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011a4a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8011a4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011a50:	2300      	movs	r3, #0
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	371c      	adds	r7, #28
 8011a56:	46bd      	mov	sp, r7
 8011a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5c:	4770      	bx	lr
 8011a5e:	bf00      	nop
 8011a60:	4f54300a 	.word	0x4f54300a

08011a64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011a64:	b480      	push	{r7}
 8011a66:	b085      	sub	sp, #20
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	3301      	adds	r3, #1
 8011a74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011a7c:	d901      	bls.n	8011a82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011a7e:	2303      	movs	r3, #3
 8011a80:	e01b      	b.n	8011aba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	691b      	ldr	r3, [r3, #16]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	daf2      	bge.n	8011a70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	691b      	ldr	r3, [r3, #16]
 8011a92:	f043 0201 	orr.w	r2, r3, #1
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	3301      	adds	r3, #1
 8011a9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011aa6:	d901      	bls.n	8011aac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011aa8:	2303      	movs	r3, #3
 8011aaa:	e006      	b.n	8011aba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	691b      	ldr	r3, [r3, #16]
 8011ab0:	f003 0301 	and.w	r3, r3, #1
 8011ab4:	2b01      	cmp	r3, #1
 8011ab6:	d0f0      	beq.n	8011a9a <USB_CoreReset+0x36>

  return HAL_OK;
 8011ab8:	2300      	movs	r3, #0
}
 8011aba:	4618      	mov	r0, r3
 8011abc:	3714      	adds	r7, #20
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac4:	4770      	bx	lr
	...

08011ac8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b084      	sub	sp, #16
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	460b      	mov	r3, r1
 8011ad2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011ad4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8011ad8:	f005 fe0e 	bl	80176f8 <USBD_static_malloc>
 8011adc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d109      	bne.n	8011af8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	32b0      	adds	r2, #176	@ 0xb0
 8011aee:	2100      	movs	r1, #0
 8011af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011af4:	2302      	movs	r3, #2
 8011af6:	e0d4      	b.n	8011ca2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8011af8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8011afc:	2100      	movs	r1, #0
 8011afe:	68f8      	ldr	r0, [r7, #12]
 8011b00:	f008 fd10 	bl	801a524 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	32b0      	adds	r2, #176	@ 0xb0
 8011b0e:	68f9      	ldr	r1, [r7, #12]
 8011b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	32b0      	adds	r2, #176	@ 0xb0
 8011b1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	7c1b      	ldrb	r3, [r3, #16]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d138      	bne.n	8011ba2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011b30:	4b5e      	ldr	r3, [pc, #376]	@ (8011cac <USBD_CDC_Init+0x1e4>)
 8011b32:	7819      	ldrb	r1, [r3, #0]
 8011b34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011b38:	2202      	movs	r2, #2
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	f005 fcb9 	bl	80174b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011b40:	4b5a      	ldr	r3, [pc, #360]	@ (8011cac <USBD_CDC_Init+0x1e4>)
 8011b42:	781b      	ldrb	r3, [r3, #0]
 8011b44:	f003 020f 	and.w	r2, r3, #15
 8011b48:	6879      	ldr	r1, [r7, #4]
 8011b4a:	4613      	mov	r3, r2
 8011b4c:	009b      	lsls	r3, r3, #2
 8011b4e:	4413      	add	r3, r2
 8011b50:	009b      	lsls	r3, r3, #2
 8011b52:	440b      	add	r3, r1
 8011b54:	3324      	adds	r3, #36	@ 0x24
 8011b56:	2201      	movs	r2, #1
 8011b58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011b5a:	4b55      	ldr	r3, [pc, #340]	@ (8011cb0 <USBD_CDC_Init+0x1e8>)
 8011b5c:	7819      	ldrb	r1, [r3, #0]
 8011b5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011b62:	2202      	movs	r2, #2
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f005 fca4 	bl	80174b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011b6a:	4b51      	ldr	r3, [pc, #324]	@ (8011cb0 <USBD_CDC_Init+0x1e8>)
 8011b6c:	781b      	ldrb	r3, [r3, #0]
 8011b6e:	f003 020f 	and.w	r2, r3, #15
 8011b72:	6879      	ldr	r1, [r7, #4]
 8011b74:	4613      	mov	r3, r2
 8011b76:	009b      	lsls	r3, r3, #2
 8011b78:	4413      	add	r3, r2
 8011b7a:	009b      	lsls	r3, r3, #2
 8011b7c:	440b      	add	r3, r1
 8011b7e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011b82:	2201      	movs	r2, #1
 8011b84:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011b86:	4b4b      	ldr	r3, [pc, #300]	@ (8011cb4 <USBD_CDC_Init+0x1ec>)
 8011b88:	781b      	ldrb	r3, [r3, #0]
 8011b8a:	f003 020f 	and.w	r2, r3, #15
 8011b8e:	6879      	ldr	r1, [r7, #4]
 8011b90:	4613      	mov	r3, r2
 8011b92:	009b      	lsls	r3, r3, #2
 8011b94:	4413      	add	r3, r2
 8011b96:	009b      	lsls	r3, r3, #2
 8011b98:	440b      	add	r3, r1
 8011b9a:	3326      	adds	r3, #38	@ 0x26
 8011b9c:	2210      	movs	r2, #16
 8011b9e:	801a      	strh	r2, [r3, #0]
 8011ba0:	e035      	b.n	8011c0e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011ba2:	4b42      	ldr	r3, [pc, #264]	@ (8011cac <USBD_CDC_Init+0x1e4>)
 8011ba4:	7819      	ldrb	r1, [r3, #0]
 8011ba6:	2340      	movs	r3, #64	@ 0x40
 8011ba8:	2202      	movs	r2, #2
 8011baa:	6878      	ldr	r0, [r7, #4]
 8011bac:	f005 fc81 	bl	80174b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011bb0:	4b3e      	ldr	r3, [pc, #248]	@ (8011cac <USBD_CDC_Init+0x1e4>)
 8011bb2:	781b      	ldrb	r3, [r3, #0]
 8011bb4:	f003 020f 	and.w	r2, r3, #15
 8011bb8:	6879      	ldr	r1, [r7, #4]
 8011bba:	4613      	mov	r3, r2
 8011bbc:	009b      	lsls	r3, r3, #2
 8011bbe:	4413      	add	r3, r2
 8011bc0:	009b      	lsls	r3, r3, #2
 8011bc2:	440b      	add	r3, r1
 8011bc4:	3324      	adds	r3, #36	@ 0x24
 8011bc6:	2201      	movs	r2, #1
 8011bc8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011bca:	4b39      	ldr	r3, [pc, #228]	@ (8011cb0 <USBD_CDC_Init+0x1e8>)
 8011bcc:	7819      	ldrb	r1, [r3, #0]
 8011bce:	2340      	movs	r3, #64	@ 0x40
 8011bd0:	2202      	movs	r2, #2
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	f005 fc6d 	bl	80174b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011bd8:	4b35      	ldr	r3, [pc, #212]	@ (8011cb0 <USBD_CDC_Init+0x1e8>)
 8011bda:	781b      	ldrb	r3, [r3, #0]
 8011bdc:	f003 020f 	and.w	r2, r3, #15
 8011be0:	6879      	ldr	r1, [r7, #4]
 8011be2:	4613      	mov	r3, r2
 8011be4:	009b      	lsls	r3, r3, #2
 8011be6:	4413      	add	r3, r2
 8011be8:	009b      	lsls	r3, r3, #2
 8011bea:	440b      	add	r3, r1
 8011bec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011bf0:	2201      	movs	r2, #1
 8011bf2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011bf4:	4b2f      	ldr	r3, [pc, #188]	@ (8011cb4 <USBD_CDC_Init+0x1ec>)
 8011bf6:	781b      	ldrb	r3, [r3, #0]
 8011bf8:	f003 020f 	and.w	r2, r3, #15
 8011bfc:	6879      	ldr	r1, [r7, #4]
 8011bfe:	4613      	mov	r3, r2
 8011c00:	009b      	lsls	r3, r3, #2
 8011c02:	4413      	add	r3, r2
 8011c04:	009b      	lsls	r3, r3, #2
 8011c06:	440b      	add	r3, r1
 8011c08:	3326      	adds	r3, #38	@ 0x26
 8011c0a:	2210      	movs	r2, #16
 8011c0c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011c0e:	4b29      	ldr	r3, [pc, #164]	@ (8011cb4 <USBD_CDC_Init+0x1ec>)
 8011c10:	7819      	ldrb	r1, [r3, #0]
 8011c12:	2308      	movs	r3, #8
 8011c14:	2203      	movs	r2, #3
 8011c16:	6878      	ldr	r0, [r7, #4]
 8011c18:	f005 fc4b 	bl	80174b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8011c1c:	4b25      	ldr	r3, [pc, #148]	@ (8011cb4 <USBD_CDC_Init+0x1ec>)
 8011c1e:	781b      	ldrb	r3, [r3, #0]
 8011c20:	f003 020f 	and.w	r2, r3, #15
 8011c24:	6879      	ldr	r1, [r7, #4]
 8011c26:	4613      	mov	r3, r2
 8011c28:	009b      	lsls	r3, r3, #2
 8011c2a:	4413      	add	r3, r2
 8011c2c:	009b      	lsls	r3, r3, #2
 8011c2e:	440b      	add	r3, r1
 8011c30:	3324      	adds	r3, #36	@ 0x24
 8011c32:	2201      	movs	r2, #1
 8011c34:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011c44:	687a      	ldr	r2, [r7, #4]
 8011c46:	33b0      	adds	r3, #176	@ 0xb0
 8011c48:	009b      	lsls	r3, r3, #2
 8011c4a:	4413      	add	r3, r2
 8011c4c:	685b      	ldr	r3, [r3, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	2200      	movs	r2, #0
 8011c56:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d101      	bne.n	8011c70 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8011c6c:	2302      	movs	r3, #2
 8011c6e:	e018      	b.n	8011ca2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	7c1b      	ldrb	r3, [r3, #16]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d10a      	bne.n	8011c8e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011c78:	4b0d      	ldr	r3, [pc, #52]	@ (8011cb0 <USBD_CDC_Init+0x1e8>)
 8011c7a:	7819      	ldrb	r1, [r3, #0]
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011c82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011c86:	6878      	ldr	r0, [r7, #4]
 8011c88:	f005 fd02 	bl	8017690 <USBD_LL_PrepareReceive>
 8011c8c:	e008      	b.n	8011ca0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011c8e:	4b08      	ldr	r3, [pc, #32]	@ (8011cb0 <USBD_CDC_Init+0x1e8>)
 8011c90:	7819      	ldrb	r1, [r3, #0]
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011c98:	2340      	movs	r3, #64	@ 0x40
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	f005 fcf8 	bl	8017690 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011ca0:	2300      	movs	r3, #0
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3710      	adds	r7, #16
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}
 8011caa:	bf00      	nop
 8011cac:	200000e7 	.word	0x200000e7
 8011cb0:	200000e8 	.word	0x200000e8
 8011cb4:	200000e9 	.word	0x200000e9

08011cb8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b082      	sub	sp, #8
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
 8011cc0:	460b      	mov	r3, r1
 8011cc2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8011cc4:	4b3a      	ldr	r3, [pc, #232]	@ (8011db0 <USBD_CDC_DeInit+0xf8>)
 8011cc6:	781b      	ldrb	r3, [r3, #0]
 8011cc8:	4619      	mov	r1, r3
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f005 fc17 	bl	80174fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8011cd0:	4b37      	ldr	r3, [pc, #220]	@ (8011db0 <USBD_CDC_DeInit+0xf8>)
 8011cd2:	781b      	ldrb	r3, [r3, #0]
 8011cd4:	f003 020f 	and.w	r2, r3, #15
 8011cd8:	6879      	ldr	r1, [r7, #4]
 8011cda:	4613      	mov	r3, r2
 8011cdc:	009b      	lsls	r3, r3, #2
 8011cde:	4413      	add	r3, r2
 8011ce0:	009b      	lsls	r3, r3, #2
 8011ce2:	440b      	add	r3, r1
 8011ce4:	3324      	adds	r3, #36	@ 0x24
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8011cea:	4b32      	ldr	r3, [pc, #200]	@ (8011db4 <USBD_CDC_DeInit+0xfc>)
 8011cec:	781b      	ldrb	r3, [r3, #0]
 8011cee:	4619      	mov	r1, r3
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f005 fc04 	bl	80174fe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8011cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8011db4 <USBD_CDC_DeInit+0xfc>)
 8011cf8:	781b      	ldrb	r3, [r3, #0]
 8011cfa:	f003 020f 	and.w	r2, r3, #15
 8011cfe:	6879      	ldr	r1, [r7, #4]
 8011d00:	4613      	mov	r3, r2
 8011d02:	009b      	lsls	r3, r3, #2
 8011d04:	4413      	add	r3, r2
 8011d06:	009b      	lsls	r3, r3, #2
 8011d08:	440b      	add	r3, r1
 8011d0a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011d0e:	2200      	movs	r2, #0
 8011d10:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8011d12:	4b29      	ldr	r3, [pc, #164]	@ (8011db8 <USBD_CDC_DeInit+0x100>)
 8011d14:	781b      	ldrb	r3, [r3, #0]
 8011d16:	4619      	mov	r1, r3
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f005 fbf0 	bl	80174fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8011d1e:	4b26      	ldr	r3, [pc, #152]	@ (8011db8 <USBD_CDC_DeInit+0x100>)
 8011d20:	781b      	ldrb	r3, [r3, #0]
 8011d22:	f003 020f 	and.w	r2, r3, #15
 8011d26:	6879      	ldr	r1, [r7, #4]
 8011d28:	4613      	mov	r3, r2
 8011d2a:	009b      	lsls	r3, r3, #2
 8011d2c:	4413      	add	r3, r2
 8011d2e:	009b      	lsls	r3, r3, #2
 8011d30:	440b      	add	r3, r1
 8011d32:	3324      	adds	r3, #36	@ 0x24
 8011d34:	2200      	movs	r2, #0
 8011d36:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8011d38:	4b1f      	ldr	r3, [pc, #124]	@ (8011db8 <USBD_CDC_DeInit+0x100>)
 8011d3a:	781b      	ldrb	r3, [r3, #0]
 8011d3c:	f003 020f 	and.w	r2, r3, #15
 8011d40:	6879      	ldr	r1, [r7, #4]
 8011d42:	4613      	mov	r3, r2
 8011d44:	009b      	lsls	r3, r3, #2
 8011d46:	4413      	add	r3, r2
 8011d48:	009b      	lsls	r3, r3, #2
 8011d4a:	440b      	add	r3, r1
 8011d4c:	3326      	adds	r3, #38	@ 0x26
 8011d4e:	2200      	movs	r2, #0
 8011d50:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	32b0      	adds	r2, #176	@ 0xb0
 8011d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d01f      	beq.n	8011da4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011d6a:	687a      	ldr	r2, [r7, #4]
 8011d6c:	33b0      	adds	r3, #176	@ 0xb0
 8011d6e:	009b      	lsls	r3, r3, #2
 8011d70:	4413      	add	r3, r2
 8011d72:	685b      	ldr	r3, [r3, #4]
 8011d74:	685b      	ldr	r3, [r3, #4]
 8011d76:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	32b0      	adds	r2, #176	@ 0xb0
 8011d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d86:	4618      	mov	r0, r3
 8011d88:	f005 fcc4 	bl	8017714 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	32b0      	adds	r2, #176	@ 0xb0
 8011d96:	2100      	movs	r1, #0
 8011d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011da4:	2300      	movs	r3, #0
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	3708      	adds	r7, #8
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}
 8011dae:	bf00      	nop
 8011db0:	200000e7 	.word	0x200000e7
 8011db4:	200000e8 	.word	0x200000e8
 8011db8:	200000e9 	.word	0x200000e9

08011dbc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b086      	sub	sp, #24
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
 8011dc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	32b0      	adds	r2, #176	@ 0xb0
 8011dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011dd4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011dda:	2300      	movs	r3, #0
 8011ddc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011dde:	2300      	movs	r3, #0
 8011de0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011de2:	693b      	ldr	r3, [r7, #16]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d101      	bne.n	8011dec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8011de8:	2303      	movs	r3, #3
 8011dea:	e0bf      	b.n	8011f6c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	781b      	ldrb	r3, [r3, #0]
 8011df0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d050      	beq.n	8011e9a <USBD_CDC_Setup+0xde>
 8011df8:	2b20      	cmp	r3, #32
 8011dfa:	f040 80af 	bne.w	8011f5c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011dfe:	683b      	ldr	r3, [r7, #0]
 8011e00:	88db      	ldrh	r3, [r3, #6]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d03a      	beq.n	8011e7c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	781b      	ldrb	r3, [r3, #0]
 8011e0a:	b25b      	sxtb	r3, r3
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	da1b      	bge.n	8011e48 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011e16:	687a      	ldr	r2, [r7, #4]
 8011e18:	33b0      	adds	r3, #176	@ 0xb0
 8011e1a:	009b      	lsls	r3, r3, #2
 8011e1c:	4413      	add	r3, r2
 8011e1e:	685b      	ldr	r3, [r3, #4]
 8011e20:	689b      	ldr	r3, [r3, #8]
 8011e22:	683a      	ldr	r2, [r7, #0]
 8011e24:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8011e26:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011e28:	683a      	ldr	r2, [r7, #0]
 8011e2a:	88d2      	ldrh	r2, [r2, #6]
 8011e2c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	88db      	ldrh	r3, [r3, #6]
 8011e32:	2b07      	cmp	r3, #7
 8011e34:	bf28      	it	cs
 8011e36:	2307      	movcs	r3, #7
 8011e38:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011e3a:	693b      	ldr	r3, [r7, #16]
 8011e3c:	89fa      	ldrh	r2, [r7, #14]
 8011e3e:	4619      	mov	r1, r3
 8011e40:	6878      	ldr	r0, [r7, #4]
 8011e42:	f001 fd53 	bl	80138ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8011e46:	e090      	b.n	8011f6a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	785a      	ldrb	r2, [r3, #1]
 8011e4c:	693b      	ldr	r3, [r7, #16]
 8011e4e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	88db      	ldrh	r3, [r3, #6]
 8011e56:	2b3f      	cmp	r3, #63	@ 0x3f
 8011e58:	d803      	bhi.n	8011e62 <USBD_CDC_Setup+0xa6>
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	88db      	ldrh	r3, [r3, #6]
 8011e5e:	b2da      	uxtb	r2, r3
 8011e60:	e000      	b.n	8011e64 <USBD_CDC_Setup+0xa8>
 8011e62:	2240      	movs	r2, #64	@ 0x40
 8011e64:	693b      	ldr	r3, [r7, #16]
 8011e66:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8011e6a:	6939      	ldr	r1, [r7, #16]
 8011e6c:	693b      	ldr	r3, [r7, #16]
 8011e6e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8011e72:	461a      	mov	r2, r3
 8011e74:	6878      	ldr	r0, [r7, #4]
 8011e76:	f001 fd65 	bl	8013944 <USBD_CtlPrepareRx>
      break;
 8011e7a:	e076      	b.n	8011f6a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011e82:	687a      	ldr	r2, [r7, #4]
 8011e84:	33b0      	adds	r3, #176	@ 0xb0
 8011e86:	009b      	lsls	r3, r3, #2
 8011e88:	4413      	add	r3, r2
 8011e8a:	685b      	ldr	r3, [r3, #4]
 8011e8c:	689b      	ldr	r3, [r3, #8]
 8011e8e:	683a      	ldr	r2, [r7, #0]
 8011e90:	7850      	ldrb	r0, [r2, #1]
 8011e92:	2200      	movs	r2, #0
 8011e94:	6839      	ldr	r1, [r7, #0]
 8011e96:	4798      	blx	r3
      break;
 8011e98:	e067      	b.n	8011f6a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	785b      	ldrb	r3, [r3, #1]
 8011e9e:	2b0b      	cmp	r3, #11
 8011ea0:	d851      	bhi.n	8011f46 <USBD_CDC_Setup+0x18a>
 8011ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8011ea8 <USBD_CDC_Setup+0xec>)
 8011ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ea8:	08011ed9 	.word	0x08011ed9
 8011eac:	08011f55 	.word	0x08011f55
 8011eb0:	08011f47 	.word	0x08011f47
 8011eb4:	08011f47 	.word	0x08011f47
 8011eb8:	08011f47 	.word	0x08011f47
 8011ebc:	08011f47 	.word	0x08011f47
 8011ec0:	08011f47 	.word	0x08011f47
 8011ec4:	08011f47 	.word	0x08011f47
 8011ec8:	08011f47 	.word	0x08011f47
 8011ecc:	08011f47 	.word	0x08011f47
 8011ed0:	08011f03 	.word	0x08011f03
 8011ed4:	08011f2d 	.word	0x08011f2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ede:	b2db      	uxtb	r3, r3
 8011ee0:	2b03      	cmp	r3, #3
 8011ee2:	d107      	bne.n	8011ef4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011ee4:	f107 030a 	add.w	r3, r7, #10
 8011ee8:	2202      	movs	r2, #2
 8011eea:	4619      	mov	r1, r3
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	f001 fcfd 	bl	80138ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011ef2:	e032      	b.n	8011f5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011ef4:	6839      	ldr	r1, [r7, #0]
 8011ef6:	6878      	ldr	r0, [r7, #4]
 8011ef8:	f001 fc7b 	bl	80137f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8011efc:	2303      	movs	r3, #3
 8011efe:	75fb      	strb	r3, [r7, #23]
          break;
 8011f00:	e02b      	b.n	8011f5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f08:	b2db      	uxtb	r3, r3
 8011f0a:	2b03      	cmp	r3, #3
 8011f0c:	d107      	bne.n	8011f1e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011f0e:	f107 030d 	add.w	r3, r7, #13
 8011f12:	2201      	movs	r2, #1
 8011f14:	4619      	mov	r1, r3
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	f001 fce8 	bl	80138ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011f1c:	e01d      	b.n	8011f5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011f1e:	6839      	ldr	r1, [r7, #0]
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f001 fc66 	bl	80137f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8011f26:	2303      	movs	r3, #3
 8011f28:	75fb      	strb	r3, [r7, #23]
          break;
 8011f2a:	e016      	b.n	8011f5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f32:	b2db      	uxtb	r3, r3
 8011f34:	2b03      	cmp	r3, #3
 8011f36:	d00f      	beq.n	8011f58 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8011f38:	6839      	ldr	r1, [r7, #0]
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f001 fc59 	bl	80137f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8011f40:	2303      	movs	r3, #3
 8011f42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011f44:	e008      	b.n	8011f58 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011f46:	6839      	ldr	r1, [r7, #0]
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f001 fc52 	bl	80137f2 <USBD_CtlError>
          ret = USBD_FAIL;
 8011f4e:	2303      	movs	r3, #3
 8011f50:	75fb      	strb	r3, [r7, #23]
          break;
 8011f52:	e002      	b.n	8011f5a <USBD_CDC_Setup+0x19e>
          break;
 8011f54:	bf00      	nop
 8011f56:	e008      	b.n	8011f6a <USBD_CDC_Setup+0x1ae>
          break;
 8011f58:	bf00      	nop
      }
      break;
 8011f5a:	e006      	b.n	8011f6a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8011f5c:	6839      	ldr	r1, [r7, #0]
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	f001 fc47 	bl	80137f2 <USBD_CtlError>
      ret = USBD_FAIL;
 8011f64:	2303      	movs	r3, #3
 8011f66:	75fb      	strb	r3, [r7, #23]
      break;
 8011f68:	bf00      	nop
  }

  return (uint8_t)ret;
 8011f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	3718      	adds	r7, #24
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}

08011f74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b084      	sub	sp, #16
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
 8011f7c:	460b      	mov	r3, r1
 8011f7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011f86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	32b0      	adds	r2, #176	@ 0xb0
 8011f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d101      	bne.n	8011f9e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8011f9a:	2303      	movs	r3, #3
 8011f9c:	e065      	b.n	801206a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	32b0      	adds	r2, #176	@ 0xb0
 8011fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011fae:	78fb      	ldrb	r3, [r7, #3]
 8011fb0:	f003 020f 	and.w	r2, r3, #15
 8011fb4:	6879      	ldr	r1, [r7, #4]
 8011fb6:	4613      	mov	r3, r2
 8011fb8:	009b      	lsls	r3, r3, #2
 8011fba:	4413      	add	r3, r2
 8011fbc:	009b      	lsls	r3, r3, #2
 8011fbe:	440b      	add	r3, r1
 8011fc0:	3318      	adds	r3, #24
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d02f      	beq.n	8012028 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8011fc8:	78fb      	ldrb	r3, [r7, #3]
 8011fca:	f003 020f 	and.w	r2, r3, #15
 8011fce:	6879      	ldr	r1, [r7, #4]
 8011fd0:	4613      	mov	r3, r2
 8011fd2:	009b      	lsls	r3, r3, #2
 8011fd4:	4413      	add	r3, r2
 8011fd6:	009b      	lsls	r3, r3, #2
 8011fd8:	440b      	add	r3, r1
 8011fda:	3318      	adds	r3, #24
 8011fdc:	681a      	ldr	r2, [r3, #0]
 8011fde:	78fb      	ldrb	r3, [r7, #3]
 8011fe0:	f003 010f 	and.w	r1, r3, #15
 8011fe4:	68f8      	ldr	r0, [r7, #12]
 8011fe6:	460b      	mov	r3, r1
 8011fe8:	00db      	lsls	r3, r3, #3
 8011fea:	440b      	add	r3, r1
 8011fec:	009b      	lsls	r3, r3, #2
 8011fee:	4403      	add	r3, r0
 8011ff0:	331c      	adds	r3, #28
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	fbb2 f1f3 	udiv	r1, r2, r3
 8011ff8:	fb01 f303 	mul.w	r3, r1, r3
 8011ffc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d112      	bne.n	8012028 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8012002:	78fb      	ldrb	r3, [r7, #3]
 8012004:	f003 020f 	and.w	r2, r3, #15
 8012008:	6879      	ldr	r1, [r7, #4]
 801200a:	4613      	mov	r3, r2
 801200c:	009b      	lsls	r3, r3, #2
 801200e:	4413      	add	r3, r2
 8012010:	009b      	lsls	r3, r3, #2
 8012012:	440b      	add	r3, r1
 8012014:	3318      	adds	r3, #24
 8012016:	2200      	movs	r2, #0
 8012018:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801201a:	78f9      	ldrb	r1, [r7, #3]
 801201c:	2300      	movs	r3, #0
 801201e:	2200      	movs	r2, #0
 8012020:	6878      	ldr	r0, [r7, #4]
 8012022:	f005 fb14 	bl	801764e <USBD_LL_Transmit>
 8012026:	e01f      	b.n	8012068 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8012028:	68bb      	ldr	r3, [r7, #8]
 801202a:	2200      	movs	r2, #0
 801202c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012036:	687a      	ldr	r2, [r7, #4]
 8012038:	33b0      	adds	r3, #176	@ 0xb0
 801203a:	009b      	lsls	r3, r3, #2
 801203c:	4413      	add	r3, r2
 801203e:	685b      	ldr	r3, [r3, #4]
 8012040:	691b      	ldr	r3, [r3, #16]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d010      	beq.n	8012068 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801204c:	687a      	ldr	r2, [r7, #4]
 801204e:	33b0      	adds	r3, #176	@ 0xb0
 8012050:	009b      	lsls	r3, r3, #2
 8012052:	4413      	add	r3, r2
 8012054:	685b      	ldr	r3, [r3, #4]
 8012056:	691b      	ldr	r3, [r3, #16]
 8012058:	68ba      	ldr	r2, [r7, #8]
 801205a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801205e:	68ba      	ldr	r2, [r7, #8]
 8012060:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8012064:	78fa      	ldrb	r2, [r7, #3]
 8012066:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012068:	2300      	movs	r3, #0
}
 801206a:	4618      	mov	r0, r3
 801206c:	3710      	adds	r7, #16
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}

08012072 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012072:	b580      	push	{r7, lr}
 8012074:	b084      	sub	sp, #16
 8012076:	af00      	add	r7, sp, #0
 8012078:	6078      	str	r0, [r7, #4]
 801207a:	460b      	mov	r3, r1
 801207c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	32b0      	adds	r2, #176	@ 0xb0
 8012088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801208c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	32b0      	adds	r2, #176	@ 0xb0
 8012098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d101      	bne.n	80120a4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80120a0:	2303      	movs	r3, #3
 80120a2:	e01a      	b.n	80120da <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80120a4:	78fb      	ldrb	r3, [r7, #3]
 80120a6:	4619      	mov	r1, r3
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f005 fb12 	bl	80176d2 <USBD_LL_GetRxDataSize>
 80120ae:	4602      	mov	r2, r0
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80120bc:	687a      	ldr	r2, [r7, #4]
 80120be:	33b0      	adds	r3, #176	@ 0xb0
 80120c0:	009b      	lsls	r3, r3, #2
 80120c2:	4413      	add	r3, r2
 80120c4:	685b      	ldr	r3, [r3, #4]
 80120c6:	68db      	ldr	r3, [r3, #12]
 80120c8:	68fa      	ldr	r2, [r7, #12]
 80120ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80120ce:	68fa      	ldr	r2, [r7, #12]
 80120d0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80120d4:	4611      	mov	r1, r2
 80120d6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80120d8:	2300      	movs	r3, #0
}
 80120da:	4618      	mov	r0, r3
 80120dc:	3710      	adds	r7, #16
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}

080120e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80120e2:	b580      	push	{r7, lr}
 80120e4:	b084      	sub	sp, #16
 80120e6:	af00      	add	r7, sp, #0
 80120e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	32b0      	adds	r2, #176	@ 0xb0
 80120f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d101      	bne.n	8012104 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012100:	2303      	movs	r3, #3
 8012102:	e024      	b.n	801214e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801210a:	687a      	ldr	r2, [r7, #4]
 801210c:	33b0      	adds	r3, #176	@ 0xb0
 801210e:	009b      	lsls	r3, r3, #2
 8012110:	4413      	add	r3, r2
 8012112:	685b      	ldr	r3, [r3, #4]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d019      	beq.n	801214c <USBD_CDC_EP0_RxReady+0x6a>
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801211e:	2bff      	cmp	r3, #255	@ 0xff
 8012120:	d014      	beq.n	801214c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012128:	687a      	ldr	r2, [r7, #4]
 801212a:	33b0      	adds	r3, #176	@ 0xb0
 801212c:	009b      	lsls	r3, r3, #2
 801212e:	4413      	add	r3, r2
 8012130:	685b      	ldr	r3, [r3, #4]
 8012132:	689b      	ldr	r3, [r3, #8]
 8012134:	68fa      	ldr	r2, [r7, #12]
 8012136:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801213a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801213c:	68fa      	ldr	r2, [r7, #12]
 801213e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012142:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	22ff      	movs	r2, #255	@ 0xff
 8012148:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801214c:	2300      	movs	r3, #0
}
 801214e:	4618      	mov	r0, r3
 8012150:	3710      	adds	r7, #16
 8012152:	46bd      	mov	sp, r7
 8012154:	bd80      	pop	{r7, pc}
	...

08012158 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b086      	sub	sp, #24
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012160:	2182      	movs	r1, #130	@ 0x82
 8012162:	4818      	ldr	r0, [pc, #96]	@ (80121c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012164:	f000 fd0f 	bl	8012b86 <USBD_GetEpDesc>
 8012168:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801216a:	2101      	movs	r1, #1
 801216c:	4815      	ldr	r0, [pc, #84]	@ (80121c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801216e:	f000 fd0a 	bl	8012b86 <USBD_GetEpDesc>
 8012172:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012174:	2181      	movs	r1, #129	@ 0x81
 8012176:	4813      	ldr	r0, [pc, #76]	@ (80121c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012178:	f000 fd05 	bl	8012b86 <USBD_GetEpDesc>
 801217c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801217e:	697b      	ldr	r3, [r7, #20]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d002      	beq.n	801218a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012184:	697b      	ldr	r3, [r7, #20]
 8012186:	2210      	movs	r2, #16
 8012188:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801218a:	693b      	ldr	r3, [r7, #16]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d006      	beq.n	801219e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012190:	693b      	ldr	r3, [r7, #16]
 8012192:	2200      	movs	r2, #0
 8012194:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012198:	711a      	strb	r2, [r3, #4]
 801219a:	2200      	movs	r2, #0
 801219c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d006      	beq.n	80121b2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	2200      	movs	r2, #0
 80121a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80121ac:	711a      	strb	r2, [r3, #4]
 80121ae:	2200      	movs	r2, #0
 80121b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	2243      	movs	r2, #67	@ 0x43
 80121b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80121b8:	4b02      	ldr	r3, [pc, #8]	@ (80121c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	3718      	adds	r7, #24
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}
 80121c2:	bf00      	nop
 80121c4:	200000a4 	.word	0x200000a4

080121c8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b086      	sub	sp, #24
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80121d0:	2182      	movs	r1, #130	@ 0x82
 80121d2:	4818      	ldr	r0, [pc, #96]	@ (8012234 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80121d4:	f000 fcd7 	bl	8012b86 <USBD_GetEpDesc>
 80121d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80121da:	2101      	movs	r1, #1
 80121dc:	4815      	ldr	r0, [pc, #84]	@ (8012234 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80121de:	f000 fcd2 	bl	8012b86 <USBD_GetEpDesc>
 80121e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80121e4:	2181      	movs	r1, #129	@ 0x81
 80121e6:	4813      	ldr	r0, [pc, #76]	@ (8012234 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80121e8:	f000 fccd 	bl	8012b86 <USBD_GetEpDesc>
 80121ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80121ee:	697b      	ldr	r3, [r7, #20]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d002      	beq.n	80121fa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	2210      	movs	r2, #16
 80121f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80121fa:	693b      	ldr	r3, [r7, #16]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d006      	beq.n	801220e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012200:	693b      	ldr	r3, [r7, #16]
 8012202:	2200      	movs	r2, #0
 8012204:	711a      	strb	r2, [r3, #4]
 8012206:	2200      	movs	r2, #0
 8012208:	f042 0202 	orr.w	r2, r2, #2
 801220c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d006      	beq.n	8012222 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	2200      	movs	r2, #0
 8012218:	711a      	strb	r2, [r3, #4]
 801221a:	2200      	movs	r2, #0
 801221c:	f042 0202 	orr.w	r2, r2, #2
 8012220:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	2243      	movs	r2, #67	@ 0x43
 8012226:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012228:	4b02      	ldr	r3, [pc, #8]	@ (8012234 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801222a:	4618      	mov	r0, r3
 801222c:	3718      	adds	r7, #24
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
 8012232:	bf00      	nop
 8012234:	200000a4 	.word	0x200000a4

08012238 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b086      	sub	sp, #24
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012240:	2182      	movs	r1, #130	@ 0x82
 8012242:	4818      	ldr	r0, [pc, #96]	@ (80122a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012244:	f000 fc9f 	bl	8012b86 <USBD_GetEpDesc>
 8012248:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801224a:	2101      	movs	r1, #1
 801224c:	4815      	ldr	r0, [pc, #84]	@ (80122a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801224e:	f000 fc9a 	bl	8012b86 <USBD_GetEpDesc>
 8012252:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012254:	2181      	movs	r1, #129	@ 0x81
 8012256:	4813      	ldr	r0, [pc, #76]	@ (80122a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012258:	f000 fc95 	bl	8012b86 <USBD_GetEpDesc>
 801225c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801225e:	697b      	ldr	r3, [r7, #20]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d002      	beq.n	801226a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	2210      	movs	r2, #16
 8012268:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801226a:	693b      	ldr	r3, [r7, #16]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d006      	beq.n	801227e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012270:	693b      	ldr	r3, [r7, #16]
 8012272:	2200      	movs	r2, #0
 8012274:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012278:	711a      	strb	r2, [r3, #4]
 801227a:	2200      	movs	r2, #0
 801227c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d006      	beq.n	8012292 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	2200      	movs	r2, #0
 8012288:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801228c:	711a      	strb	r2, [r3, #4]
 801228e:	2200      	movs	r2, #0
 8012290:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	2243      	movs	r2, #67	@ 0x43
 8012296:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012298:	4b02      	ldr	r3, [pc, #8]	@ (80122a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801229a:	4618      	mov	r0, r3
 801229c:	3718      	adds	r7, #24
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	bf00      	nop
 80122a4:	200000a4 	.word	0x200000a4

080122a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80122a8:	b480      	push	{r7}
 80122aa:	b083      	sub	sp, #12
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	220a      	movs	r2, #10
 80122b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80122b6:	4b03      	ldr	r3, [pc, #12]	@ (80122c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80122b8:	4618      	mov	r0, r3
 80122ba:	370c      	adds	r7, #12
 80122bc:	46bd      	mov	sp, r7
 80122be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c2:	4770      	bx	lr
 80122c4:	20000060 	.word	0x20000060

080122c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80122c8:	b480      	push	{r7}
 80122ca:	b083      	sub	sp, #12
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
 80122d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d101      	bne.n	80122dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80122d8:	2303      	movs	r3, #3
 80122da:	e009      	b.n	80122f0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80122e2:	687a      	ldr	r2, [r7, #4]
 80122e4:	33b0      	adds	r3, #176	@ 0xb0
 80122e6:	009b      	lsls	r3, r3, #2
 80122e8:	4413      	add	r3, r2
 80122ea:	683a      	ldr	r2, [r7, #0]
 80122ec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80122ee:	2300      	movs	r3, #0
}
 80122f0:	4618      	mov	r0, r3
 80122f2:	370c      	adds	r7, #12
 80122f4:	46bd      	mov	sp, r7
 80122f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fa:	4770      	bx	lr

080122fc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80122fc:	b480      	push	{r7}
 80122fe:	b087      	sub	sp, #28
 8012300:	af00      	add	r7, sp, #0
 8012302:	60f8      	str	r0, [r7, #12]
 8012304:	60b9      	str	r1, [r7, #8]
 8012306:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	32b0      	adds	r2, #176	@ 0xb0
 8012312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012316:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012318:	697b      	ldr	r3, [r7, #20]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d101      	bne.n	8012322 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801231e:	2303      	movs	r3, #3
 8012320:	e008      	b.n	8012334 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	68ba      	ldr	r2, [r7, #8]
 8012326:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801232a:	697b      	ldr	r3, [r7, #20]
 801232c:	687a      	ldr	r2, [r7, #4]
 801232e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8012332:	2300      	movs	r3, #0
}
 8012334:	4618      	mov	r0, r3
 8012336:	371c      	adds	r7, #28
 8012338:	46bd      	mov	sp, r7
 801233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233e:	4770      	bx	lr

08012340 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8012340:	b480      	push	{r7}
 8012342:	b085      	sub	sp, #20
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
 8012348:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	32b0      	adds	r2, #176	@ 0xb0
 8012354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012358:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d101      	bne.n	8012364 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8012360:	2303      	movs	r3, #3
 8012362:	e004      	b.n	801236e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	683a      	ldr	r2, [r7, #0]
 8012368:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801236c:	2300      	movs	r3, #0
}
 801236e:	4618      	mov	r0, r3
 8012370:	3714      	adds	r7, #20
 8012372:	46bd      	mov	sp, r7
 8012374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012378:	4770      	bx	lr
	...

0801237c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b084      	sub	sp, #16
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	32b0      	adds	r2, #176	@ 0xb0
 801238e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012392:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	32b0      	adds	r2, #176	@ 0xb0
 801239e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d101      	bne.n	80123aa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80123a6:	2303      	movs	r3, #3
 80123a8:	e018      	b.n	80123dc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	7c1b      	ldrb	r3, [r3, #16]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d10a      	bne.n	80123c8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80123b2:	4b0c      	ldr	r3, [pc, #48]	@ (80123e4 <USBD_CDC_ReceivePacket+0x68>)
 80123b4:	7819      	ldrb	r1, [r3, #0]
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80123bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80123c0:	6878      	ldr	r0, [r7, #4]
 80123c2:	f005 f965 	bl	8017690 <USBD_LL_PrepareReceive>
 80123c6:	e008      	b.n	80123da <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80123c8:	4b06      	ldr	r3, [pc, #24]	@ (80123e4 <USBD_CDC_ReceivePacket+0x68>)
 80123ca:	7819      	ldrb	r1, [r3, #0]
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80123d2:	2340      	movs	r3, #64	@ 0x40
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f005 f95b 	bl	8017690 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80123da:	2300      	movs	r3, #0
}
 80123dc:	4618      	mov	r0, r3
 80123de:	3710      	adds	r7, #16
 80123e0:	46bd      	mov	sp, r7
 80123e2:	bd80      	pop	{r7, pc}
 80123e4:	200000e8 	.word	0x200000e8

080123e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b086      	sub	sp, #24
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	60f8      	str	r0, [r7, #12]
 80123f0:	60b9      	str	r1, [r7, #8]
 80123f2:	4613      	mov	r3, r2
 80123f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d101      	bne.n	8012400 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80123fc:	2303      	movs	r3, #3
 80123fe:	e01f      	b.n	8012440 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	2200      	movs	r2, #0
 8012404:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	2200      	movs	r2, #0
 801240c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	2200      	movs	r2, #0
 8012414:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d003      	beq.n	8012426 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	68ba      	ldr	r2, [r7, #8]
 8012422:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	2201      	movs	r2, #1
 801242a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	79fa      	ldrb	r2, [r7, #7]
 8012432:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012434:	68f8      	ldr	r0, [r7, #12]
 8012436:	f004 ffd5 	bl	80173e4 <USBD_LL_Init>
 801243a:	4603      	mov	r3, r0
 801243c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801243e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012440:	4618      	mov	r0, r3
 8012442:	3718      	adds	r7, #24
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}

08012448 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b084      	sub	sp, #16
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
 8012450:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012452:	2300      	movs	r3, #0
 8012454:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d101      	bne.n	8012460 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801245c:	2303      	movs	r3, #3
 801245e:	e025      	b.n	80124ac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	683a      	ldr	r2, [r7, #0]
 8012464:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	32ae      	adds	r2, #174	@ 0xae
 8012472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012478:	2b00      	cmp	r3, #0
 801247a:	d00f      	beq.n	801249c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	32ae      	adds	r2, #174	@ 0xae
 8012486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801248a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801248c:	f107 020e 	add.w	r2, r7, #14
 8012490:	4610      	mov	r0, r2
 8012492:	4798      	blx	r3
 8012494:	4602      	mov	r2, r0
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80124a2:	1c5a      	adds	r2, r3, #1
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80124aa:	2300      	movs	r3, #0
}
 80124ac:	4618      	mov	r0, r3
 80124ae:	3710      	adds	r7, #16
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}

080124b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b082      	sub	sp, #8
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f004 ffdd 	bl	801747c <USBD_LL_Start>
 80124c2:	4603      	mov	r3, r0
}
 80124c4:	4618      	mov	r0, r3
 80124c6:	3708      	adds	r7, #8
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd80      	pop	{r7, pc}

080124cc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80124cc:	b480      	push	{r7}
 80124ce:	b083      	sub	sp, #12
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80124d4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	370c      	adds	r7, #12
 80124da:	46bd      	mov	sp, r7
 80124dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e0:	4770      	bx	lr

080124e2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80124e2:	b580      	push	{r7, lr}
 80124e4:	b084      	sub	sp, #16
 80124e6:	af00      	add	r7, sp, #0
 80124e8:	6078      	str	r0, [r7, #4]
 80124ea:	460b      	mov	r3, r1
 80124ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80124ee:	2300      	movs	r3, #0
 80124f0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d009      	beq.n	8012510 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	78fa      	ldrb	r2, [r7, #3]
 8012506:	4611      	mov	r1, r2
 8012508:	6878      	ldr	r0, [r7, #4]
 801250a:	4798      	blx	r3
 801250c:	4603      	mov	r3, r0
 801250e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012510:	7bfb      	ldrb	r3, [r7, #15]
}
 8012512:	4618      	mov	r0, r3
 8012514:	3710      	adds	r7, #16
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}

0801251a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801251a:	b580      	push	{r7, lr}
 801251c:	b084      	sub	sp, #16
 801251e:	af00      	add	r7, sp, #0
 8012520:	6078      	str	r0, [r7, #4]
 8012522:	460b      	mov	r3, r1
 8012524:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012526:	2300      	movs	r3, #0
 8012528:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012530:	685b      	ldr	r3, [r3, #4]
 8012532:	78fa      	ldrb	r2, [r7, #3]
 8012534:	4611      	mov	r1, r2
 8012536:	6878      	ldr	r0, [r7, #4]
 8012538:	4798      	blx	r3
 801253a:	4603      	mov	r3, r0
 801253c:	2b00      	cmp	r3, #0
 801253e:	d001      	beq.n	8012544 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8012540:	2303      	movs	r3, #3
 8012542:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012544:	7bfb      	ldrb	r3, [r7, #15]
}
 8012546:	4618      	mov	r0, r3
 8012548:	3710      	adds	r7, #16
 801254a:	46bd      	mov	sp, r7
 801254c:	bd80      	pop	{r7, pc}

0801254e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801254e:	b580      	push	{r7, lr}
 8012550:	b084      	sub	sp, #16
 8012552:	af00      	add	r7, sp, #0
 8012554:	6078      	str	r0, [r7, #4]
 8012556:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801255e:	6839      	ldr	r1, [r7, #0]
 8012560:	4618      	mov	r0, r3
 8012562:	f001 f90c 	bl	801377e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	2201      	movs	r2, #1
 801256a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8012574:	461a      	mov	r2, r3
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012582:	f003 031f 	and.w	r3, r3, #31
 8012586:	2b02      	cmp	r3, #2
 8012588:	d01a      	beq.n	80125c0 <USBD_LL_SetupStage+0x72>
 801258a:	2b02      	cmp	r3, #2
 801258c:	d822      	bhi.n	80125d4 <USBD_LL_SetupStage+0x86>
 801258e:	2b00      	cmp	r3, #0
 8012590:	d002      	beq.n	8012598 <USBD_LL_SetupStage+0x4a>
 8012592:	2b01      	cmp	r3, #1
 8012594:	d00a      	beq.n	80125ac <USBD_LL_SetupStage+0x5e>
 8012596:	e01d      	b.n	80125d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801259e:	4619      	mov	r1, r3
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f000 fb63 	bl	8012c6c <USBD_StdDevReq>
 80125a6:	4603      	mov	r3, r0
 80125a8:	73fb      	strb	r3, [r7, #15]
      break;
 80125aa:	e020      	b.n	80125ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80125b2:	4619      	mov	r1, r3
 80125b4:	6878      	ldr	r0, [r7, #4]
 80125b6:	f000 fbcb 	bl	8012d50 <USBD_StdItfReq>
 80125ba:	4603      	mov	r3, r0
 80125bc:	73fb      	strb	r3, [r7, #15]
      break;
 80125be:	e016      	b.n	80125ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80125c6:	4619      	mov	r1, r3
 80125c8:	6878      	ldr	r0, [r7, #4]
 80125ca:	f000 fc2d 	bl	8012e28 <USBD_StdEPReq>
 80125ce:	4603      	mov	r3, r0
 80125d0:	73fb      	strb	r3, [r7, #15]
      break;
 80125d2:	e00c      	b.n	80125ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80125da:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80125de:	b2db      	uxtb	r3, r3
 80125e0:	4619      	mov	r1, r3
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f004 ffaa 	bl	801753c <USBD_LL_StallEP>
 80125e8:	4603      	mov	r3, r0
 80125ea:	73fb      	strb	r3, [r7, #15]
      break;
 80125ec:	bf00      	nop
  }

  return ret;
 80125ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80125f0:	4618      	mov	r0, r3
 80125f2:	3710      	adds	r7, #16
 80125f4:	46bd      	mov	sp, r7
 80125f6:	bd80      	pop	{r7, pc}

080125f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b086      	sub	sp, #24
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	60f8      	str	r0, [r7, #12]
 8012600:	460b      	mov	r3, r1
 8012602:	607a      	str	r2, [r7, #4]
 8012604:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8012606:	2300      	movs	r3, #0
 8012608:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801260a:	7afb      	ldrb	r3, [r7, #11]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d16e      	bne.n	80126ee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8012616:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801261e:	2b03      	cmp	r3, #3
 8012620:	f040 8098 	bne.w	8012754 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012624:	693b      	ldr	r3, [r7, #16]
 8012626:	689a      	ldr	r2, [r3, #8]
 8012628:	693b      	ldr	r3, [r7, #16]
 801262a:	68db      	ldr	r3, [r3, #12]
 801262c:	429a      	cmp	r2, r3
 801262e:	d913      	bls.n	8012658 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8012630:	693b      	ldr	r3, [r7, #16]
 8012632:	689a      	ldr	r2, [r3, #8]
 8012634:	693b      	ldr	r3, [r7, #16]
 8012636:	68db      	ldr	r3, [r3, #12]
 8012638:	1ad2      	subs	r2, r2, r3
 801263a:	693b      	ldr	r3, [r7, #16]
 801263c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801263e:	693b      	ldr	r3, [r7, #16]
 8012640:	68da      	ldr	r2, [r3, #12]
 8012642:	693b      	ldr	r3, [r7, #16]
 8012644:	689b      	ldr	r3, [r3, #8]
 8012646:	4293      	cmp	r3, r2
 8012648:	bf28      	it	cs
 801264a:	4613      	movcs	r3, r2
 801264c:	461a      	mov	r2, r3
 801264e:	6879      	ldr	r1, [r7, #4]
 8012650:	68f8      	ldr	r0, [r7, #12]
 8012652:	f001 f994 	bl	801397e <USBD_CtlContinueRx>
 8012656:	e07d      	b.n	8012754 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801265e:	f003 031f 	and.w	r3, r3, #31
 8012662:	2b02      	cmp	r3, #2
 8012664:	d014      	beq.n	8012690 <USBD_LL_DataOutStage+0x98>
 8012666:	2b02      	cmp	r3, #2
 8012668:	d81d      	bhi.n	80126a6 <USBD_LL_DataOutStage+0xae>
 801266a:	2b00      	cmp	r3, #0
 801266c:	d002      	beq.n	8012674 <USBD_LL_DataOutStage+0x7c>
 801266e:	2b01      	cmp	r3, #1
 8012670:	d003      	beq.n	801267a <USBD_LL_DataOutStage+0x82>
 8012672:	e018      	b.n	80126a6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8012674:	2300      	movs	r3, #0
 8012676:	75bb      	strb	r3, [r7, #22]
            break;
 8012678:	e018      	b.n	80126ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012680:	b2db      	uxtb	r3, r3
 8012682:	4619      	mov	r1, r3
 8012684:	68f8      	ldr	r0, [r7, #12]
 8012686:	f000 fa64 	bl	8012b52 <USBD_CoreFindIF>
 801268a:	4603      	mov	r3, r0
 801268c:	75bb      	strb	r3, [r7, #22]
            break;
 801268e:	e00d      	b.n	80126ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012696:	b2db      	uxtb	r3, r3
 8012698:	4619      	mov	r1, r3
 801269a:	68f8      	ldr	r0, [r7, #12]
 801269c:	f000 fa66 	bl	8012b6c <USBD_CoreFindEP>
 80126a0:	4603      	mov	r3, r0
 80126a2:	75bb      	strb	r3, [r7, #22]
            break;
 80126a4:	e002      	b.n	80126ac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80126a6:	2300      	movs	r3, #0
 80126a8:	75bb      	strb	r3, [r7, #22]
            break;
 80126aa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80126ac:	7dbb      	ldrb	r3, [r7, #22]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d119      	bne.n	80126e6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80126b8:	b2db      	uxtb	r3, r3
 80126ba:	2b03      	cmp	r3, #3
 80126bc:	d113      	bne.n	80126e6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80126be:	7dba      	ldrb	r2, [r7, #22]
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	32ae      	adds	r2, #174	@ 0xae
 80126c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126c8:	691b      	ldr	r3, [r3, #16]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d00b      	beq.n	80126e6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80126ce:	7dba      	ldrb	r2, [r7, #22]
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80126d6:	7dba      	ldrb	r2, [r7, #22]
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	32ae      	adds	r2, #174	@ 0xae
 80126dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126e0:	691b      	ldr	r3, [r3, #16]
 80126e2:	68f8      	ldr	r0, [r7, #12]
 80126e4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80126e6:	68f8      	ldr	r0, [r7, #12]
 80126e8:	f001 f95a 	bl	80139a0 <USBD_CtlSendStatus>
 80126ec:	e032      	b.n	8012754 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80126ee:	7afb      	ldrb	r3, [r7, #11]
 80126f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80126f4:	b2db      	uxtb	r3, r3
 80126f6:	4619      	mov	r1, r3
 80126f8:	68f8      	ldr	r0, [r7, #12]
 80126fa:	f000 fa37 	bl	8012b6c <USBD_CoreFindEP>
 80126fe:	4603      	mov	r3, r0
 8012700:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012702:	7dbb      	ldrb	r3, [r7, #22]
 8012704:	2bff      	cmp	r3, #255	@ 0xff
 8012706:	d025      	beq.n	8012754 <USBD_LL_DataOutStage+0x15c>
 8012708:	7dbb      	ldrb	r3, [r7, #22]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d122      	bne.n	8012754 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012714:	b2db      	uxtb	r3, r3
 8012716:	2b03      	cmp	r3, #3
 8012718:	d117      	bne.n	801274a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801271a:	7dba      	ldrb	r2, [r7, #22]
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	32ae      	adds	r2, #174	@ 0xae
 8012720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012724:	699b      	ldr	r3, [r3, #24]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d00f      	beq.n	801274a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801272a:	7dba      	ldrb	r2, [r7, #22]
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8012732:	7dba      	ldrb	r2, [r7, #22]
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	32ae      	adds	r2, #174	@ 0xae
 8012738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801273c:	699b      	ldr	r3, [r3, #24]
 801273e:	7afa      	ldrb	r2, [r7, #11]
 8012740:	4611      	mov	r1, r2
 8012742:	68f8      	ldr	r0, [r7, #12]
 8012744:	4798      	blx	r3
 8012746:	4603      	mov	r3, r0
 8012748:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801274a:	7dfb      	ldrb	r3, [r7, #23]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d001      	beq.n	8012754 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8012750:	7dfb      	ldrb	r3, [r7, #23]
 8012752:	e000      	b.n	8012756 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8012754:	2300      	movs	r3, #0
}
 8012756:	4618      	mov	r0, r3
 8012758:	3718      	adds	r7, #24
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}

0801275e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801275e:	b580      	push	{r7, lr}
 8012760:	b086      	sub	sp, #24
 8012762:	af00      	add	r7, sp, #0
 8012764:	60f8      	str	r0, [r7, #12]
 8012766:	460b      	mov	r3, r1
 8012768:	607a      	str	r2, [r7, #4]
 801276a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801276c:	7afb      	ldrb	r3, [r7, #11]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d16f      	bne.n	8012852 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	3314      	adds	r3, #20
 8012776:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801277e:	2b02      	cmp	r3, #2
 8012780:	d15a      	bne.n	8012838 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8012782:	693b      	ldr	r3, [r7, #16]
 8012784:	689a      	ldr	r2, [r3, #8]
 8012786:	693b      	ldr	r3, [r7, #16]
 8012788:	68db      	ldr	r3, [r3, #12]
 801278a:	429a      	cmp	r2, r3
 801278c:	d914      	bls.n	80127b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801278e:	693b      	ldr	r3, [r7, #16]
 8012790:	689a      	ldr	r2, [r3, #8]
 8012792:	693b      	ldr	r3, [r7, #16]
 8012794:	68db      	ldr	r3, [r3, #12]
 8012796:	1ad2      	subs	r2, r2, r3
 8012798:	693b      	ldr	r3, [r7, #16]
 801279a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801279c:	693b      	ldr	r3, [r7, #16]
 801279e:	689b      	ldr	r3, [r3, #8]
 80127a0:	461a      	mov	r2, r3
 80127a2:	6879      	ldr	r1, [r7, #4]
 80127a4:	68f8      	ldr	r0, [r7, #12]
 80127a6:	f001 f8bc 	bl	8013922 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80127aa:	2300      	movs	r3, #0
 80127ac:	2200      	movs	r2, #0
 80127ae:	2100      	movs	r1, #0
 80127b0:	68f8      	ldr	r0, [r7, #12]
 80127b2:	f004 ff6d 	bl	8017690 <USBD_LL_PrepareReceive>
 80127b6:	e03f      	b.n	8012838 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80127b8:	693b      	ldr	r3, [r7, #16]
 80127ba:	68da      	ldr	r2, [r3, #12]
 80127bc:	693b      	ldr	r3, [r7, #16]
 80127be:	689b      	ldr	r3, [r3, #8]
 80127c0:	429a      	cmp	r2, r3
 80127c2:	d11c      	bne.n	80127fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80127c4:	693b      	ldr	r3, [r7, #16]
 80127c6:	685a      	ldr	r2, [r3, #4]
 80127c8:	693b      	ldr	r3, [r7, #16]
 80127ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80127cc:	429a      	cmp	r2, r3
 80127ce:	d316      	bcc.n	80127fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80127d0:	693b      	ldr	r3, [r7, #16]
 80127d2:	685a      	ldr	r2, [r3, #4]
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80127da:	429a      	cmp	r2, r3
 80127dc:	d20f      	bcs.n	80127fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80127de:	2200      	movs	r2, #0
 80127e0:	2100      	movs	r1, #0
 80127e2:	68f8      	ldr	r0, [r7, #12]
 80127e4:	f001 f89d 	bl	8013922 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	2200      	movs	r2, #0
 80127ec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80127f0:	2300      	movs	r3, #0
 80127f2:	2200      	movs	r2, #0
 80127f4:	2100      	movs	r1, #0
 80127f6:	68f8      	ldr	r0, [r7, #12]
 80127f8:	f004 ff4a 	bl	8017690 <USBD_LL_PrepareReceive>
 80127fc:	e01c      	b.n	8012838 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012804:	b2db      	uxtb	r3, r3
 8012806:	2b03      	cmp	r3, #3
 8012808:	d10f      	bne.n	801282a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012810:	68db      	ldr	r3, [r3, #12]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d009      	beq.n	801282a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	2200      	movs	r2, #0
 801281a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012824:	68db      	ldr	r3, [r3, #12]
 8012826:	68f8      	ldr	r0, [r7, #12]
 8012828:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801282a:	2180      	movs	r1, #128	@ 0x80
 801282c:	68f8      	ldr	r0, [r7, #12]
 801282e:	f004 fe85 	bl	801753c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012832:	68f8      	ldr	r0, [r7, #12]
 8012834:	f001 f8c7 	bl	80139c6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801283e:	2b00      	cmp	r3, #0
 8012840:	d03a      	beq.n	80128b8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8012842:	68f8      	ldr	r0, [r7, #12]
 8012844:	f7ff fe42 	bl	80124cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	2200      	movs	r2, #0
 801284c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8012850:	e032      	b.n	80128b8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8012852:	7afb      	ldrb	r3, [r7, #11]
 8012854:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8012858:	b2db      	uxtb	r3, r3
 801285a:	4619      	mov	r1, r3
 801285c:	68f8      	ldr	r0, [r7, #12]
 801285e:	f000 f985 	bl	8012b6c <USBD_CoreFindEP>
 8012862:	4603      	mov	r3, r0
 8012864:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012866:	7dfb      	ldrb	r3, [r7, #23]
 8012868:	2bff      	cmp	r3, #255	@ 0xff
 801286a:	d025      	beq.n	80128b8 <USBD_LL_DataInStage+0x15a>
 801286c:	7dfb      	ldrb	r3, [r7, #23]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d122      	bne.n	80128b8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012878:	b2db      	uxtb	r3, r3
 801287a:	2b03      	cmp	r3, #3
 801287c:	d11c      	bne.n	80128b8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801287e:	7dfa      	ldrb	r2, [r7, #23]
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	32ae      	adds	r2, #174	@ 0xae
 8012884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012888:	695b      	ldr	r3, [r3, #20]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d014      	beq.n	80128b8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801288e:	7dfa      	ldrb	r2, [r7, #23]
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8012896:	7dfa      	ldrb	r2, [r7, #23]
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	32ae      	adds	r2, #174	@ 0xae
 801289c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128a0:	695b      	ldr	r3, [r3, #20]
 80128a2:	7afa      	ldrb	r2, [r7, #11]
 80128a4:	4611      	mov	r1, r2
 80128a6:	68f8      	ldr	r0, [r7, #12]
 80128a8:	4798      	blx	r3
 80128aa:	4603      	mov	r3, r0
 80128ac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80128ae:	7dbb      	ldrb	r3, [r7, #22]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d001      	beq.n	80128b8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80128b4:	7dbb      	ldrb	r3, [r7, #22]
 80128b6:	e000      	b.n	80128ba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80128b8:	2300      	movs	r3, #0
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	3718      	adds	r7, #24
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}

080128c2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80128c2:	b580      	push	{r7, lr}
 80128c4:	b084      	sub	sp, #16
 80128c6:	af00      	add	r7, sp, #0
 80128c8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80128ca:	2300      	movs	r3, #0
 80128cc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	2201      	movs	r2, #1
 80128d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	2200      	movs	r2, #0
 80128da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	2200      	movs	r2, #0
 80128e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	2200      	movs	r2, #0
 80128e8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2200      	movs	r2, #0
 80128f0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d014      	beq.n	8012928 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012904:	685b      	ldr	r3, [r3, #4]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d00e      	beq.n	8012928 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012910:	685b      	ldr	r3, [r3, #4]
 8012912:	687a      	ldr	r2, [r7, #4]
 8012914:	6852      	ldr	r2, [r2, #4]
 8012916:	b2d2      	uxtb	r2, r2
 8012918:	4611      	mov	r1, r2
 801291a:	6878      	ldr	r0, [r7, #4]
 801291c:	4798      	blx	r3
 801291e:	4603      	mov	r3, r0
 8012920:	2b00      	cmp	r3, #0
 8012922:	d001      	beq.n	8012928 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8012924:	2303      	movs	r3, #3
 8012926:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012928:	2340      	movs	r3, #64	@ 0x40
 801292a:	2200      	movs	r2, #0
 801292c:	2100      	movs	r1, #0
 801292e:	6878      	ldr	r0, [r7, #4]
 8012930:	f004 fdbf 	bl	80174b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	2201      	movs	r2, #1
 8012938:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2240      	movs	r2, #64	@ 0x40
 8012940:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012944:	2340      	movs	r3, #64	@ 0x40
 8012946:	2200      	movs	r2, #0
 8012948:	2180      	movs	r1, #128	@ 0x80
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f004 fdb1 	bl	80174b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2201      	movs	r2, #1
 8012954:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	2240      	movs	r2, #64	@ 0x40
 801295a:	621a      	str	r2, [r3, #32]

  return ret;
 801295c:	7bfb      	ldrb	r3, [r7, #15]
}
 801295e:	4618      	mov	r0, r3
 8012960:	3710      	adds	r7, #16
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}

08012966 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012966:	b480      	push	{r7}
 8012968:	b083      	sub	sp, #12
 801296a:	af00      	add	r7, sp, #0
 801296c:	6078      	str	r0, [r7, #4]
 801296e:	460b      	mov	r3, r1
 8012970:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	78fa      	ldrb	r2, [r7, #3]
 8012976:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012978:	2300      	movs	r3, #0
}
 801297a:	4618      	mov	r0, r3
 801297c:	370c      	adds	r7, #12
 801297e:	46bd      	mov	sp, r7
 8012980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012984:	4770      	bx	lr

08012986 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012986:	b480      	push	{r7}
 8012988:	b083      	sub	sp, #12
 801298a:	af00      	add	r7, sp, #0
 801298c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012994:	b2db      	uxtb	r3, r3
 8012996:	2b04      	cmp	r3, #4
 8012998:	d006      	beq.n	80129a8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80129a0:	b2da      	uxtb	r2, r3
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	2204      	movs	r2, #4
 80129ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80129b0:	2300      	movs	r3, #0
}
 80129b2:	4618      	mov	r0, r3
 80129b4:	370c      	adds	r7, #12
 80129b6:	46bd      	mov	sp, r7
 80129b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129bc:	4770      	bx	lr

080129be <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80129be:	b480      	push	{r7}
 80129c0:	b083      	sub	sp, #12
 80129c2:	af00      	add	r7, sp, #0
 80129c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80129cc:	b2db      	uxtb	r3, r3
 80129ce:	2b04      	cmp	r3, #4
 80129d0:	d106      	bne.n	80129e0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80129d8:	b2da      	uxtb	r2, r3
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80129e0:	2300      	movs	r3, #0
}
 80129e2:	4618      	mov	r0, r3
 80129e4:	370c      	adds	r7, #12
 80129e6:	46bd      	mov	sp, r7
 80129e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ec:	4770      	bx	lr

080129ee <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80129ee:	b580      	push	{r7, lr}
 80129f0:	b082      	sub	sp, #8
 80129f2:	af00      	add	r7, sp, #0
 80129f4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80129fc:	b2db      	uxtb	r3, r3
 80129fe:	2b03      	cmp	r3, #3
 8012a00:	d110      	bne.n	8012a24 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d00b      	beq.n	8012a24 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a12:	69db      	ldr	r3, [r3, #28]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d005      	beq.n	8012a24 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a1e:	69db      	ldr	r3, [r3, #28]
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8012a24:	2300      	movs	r3, #0
}
 8012a26:	4618      	mov	r0, r3
 8012a28:	3708      	adds	r7, #8
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}

08012a2e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012a2e:	b580      	push	{r7, lr}
 8012a30:	b082      	sub	sp, #8
 8012a32:	af00      	add	r7, sp, #0
 8012a34:	6078      	str	r0, [r7, #4]
 8012a36:	460b      	mov	r3, r1
 8012a38:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	32ae      	adds	r2, #174	@ 0xae
 8012a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d101      	bne.n	8012a50 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8012a4c:	2303      	movs	r3, #3
 8012a4e:	e01c      	b.n	8012a8a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012a56:	b2db      	uxtb	r3, r3
 8012a58:	2b03      	cmp	r3, #3
 8012a5a:	d115      	bne.n	8012a88 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	32ae      	adds	r2, #174	@ 0xae
 8012a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a6a:	6a1b      	ldr	r3, [r3, #32]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d00b      	beq.n	8012a88 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	32ae      	adds	r2, #174	@ 0xae
 8012a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a7e:	6a1b      	ldr	r3, [r3, #32]
 8012a80:	78fa      	ldrb	r2, [r7, #3]
 8012a82:	4611      	mov	r1, r2
 8012a84:	6878      	ldr	r0, [r7, #4]
 8012a86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012a88:	2300      	movs	r3, #0
}
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	3708      	adds	r7, #8
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	bd80      	pop	{r7, pc}

08012a92 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012a92:	b580      	push	{r7, lr}
 8012a94:	b082      	sub	sp, #8
 8012a96:	af00      	add	r7, sp, #0
 8012a98:	6078      	str	r0, [r7, #4]
 8012a9a:	460b      	mov	r3, r1
 8012a9c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	32ae      	adds	r2, #174	@ 0xae
 8012aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d101      	bne.n	8012ab4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8012ab0:	2303      	movs	r3, #3
 8012ab2:	e01c      	b.n	8012aee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012aba:	b2db      	uxtb	r3, r3
 8012abc:	2b03      	cmp	r3, #3
 8012abe:	d115      	bne.n	8012aec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	32ae      	adds	r2, #174	@ 0xae
 8012aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d00b      	beq.n	8012aec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	32ae      	adds	r2, #174	@ 0xae
 8012ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ae4:	78fa      	ldrb	r2, [r7, #3]
 8012ae6:	4611      	mov	r1, r2
 8012ae8:	6878      	ldr	r0, [r7, #4]
 8012aea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012aec:	2300      	movs	r3, #0
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	3708      	adds	r7, #8
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}

08012af6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012af6:	b480      	push	{r7}
 8012af8:	b083      	sub	sp, #12
 8012afa:	af00      	add	r7, sp, #0
 8012afc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012afe:	2300      	movs	r3, #0
}
 8012b00:	4618      	mov	r0, r3
 8012b02:	370c      	adds	r7, #12
 8012b04:	46bd      	mov	sp, r7
 8012b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0a:	4770      	bx	lr

08012b0c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b084      	sub	sp, #16
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8012b14:	2300      	movs	r3, #0
 8012b16:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	2201      	movs	r2, #1
 8012b1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d00e      	beq.n	8012b48 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012b30:	685b      	ldr	r3, [r3, #4]
 8012b32:	687a      	ldr	r2, [r7, #4]
 8012b34:	6852      	ldr	r2, [r2, #4]
 8012b36:	b2d2      	uxtb	r2, r2
 8012b38:	4611      	mov	r1, r2
 8012b3a:	6878      	ldr	r0, [r7, #4]
 8012b3c:	4798      	blx	r3
 8012b3e:	4603      	mov	r3, r0
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d001      	beq.n	8012b48 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8012b44:	2303      	movs	r3, #3
 8012b46:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	3710      	adds	r7, #16
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd80      	pop	{r7, pc}

08012b52 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012b52:	b480      	push	{r7}
 8012b54:	b083      	sub	sp, #12
 8012b56:	af00      	add	r7, sp, #0
 8012b58:	6078      	str	r0, [r7, #4]
 8012b5a:	460b      	mov	r3, r1
 8012b5c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012b5e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	370c      	adds	r7, #12
 8012b64:	46bd      	mov	sp, r7
 8012b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6a:	4770      	bx	lr

08012b6c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012b6c:	b480      	push	{r7}
 8012b6e:	b083      	sub	sp, #12
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
 8012b74:	460b      	mov	r3, r1
 8012b76:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012b78:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	370c      	adds	r7, #12
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b84:	4770      	bx	lr

08012b86 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8012b86:	b580      	push	{r7, lr}
 8012b88:	b086      	sub	sp, #24
 8012b8a:	af00      	add	r7, sp, #0
 8012b8c:	6078      	str	r0, [r7, #4]
 8012b8e:	460b      	mov	r3, r1
 8012b90:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	885b      	ldrh	r3, [r3, #2]
 8012ba2:	b29b      	uxth	r3, r3
 8012ba4:	68fa      	ldr	r2, [r7, #12]
 8012ba6:	7812      	ldrb	r2, [r2, #0]
 8012ba8:	4293      	cmp	r3, r2
 8012baa:	d91f      	bls.n	8012bec <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8012bb2:	e013      	b.n	8012bdc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8012bb4:	f107 030a 	add.w	r3, r7, #10
 8012bb8:	4619      	mov	r1, r3
 8012bba:	6978      	ldr	r0, [r7, #20]
 8012bbc:	f000 f81b 	bl	8012bf6 <USBD_GetNextDesc>
 8012bc0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8012bc2:	697b      	ldr	r3, [r7, #20]
 8012bc4:	785b      	ldrb	r3, [r3, #1]
 8012bc6:	2b05      	cmp	r3, #5
 8012bc8:	d108      	bne.n	8012bdc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8012bca:	697b      	ldr	r3, [r7, #20]
 8012bcc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	789b      	ldrb	r3, [r3, #2]
 8012bd2:	78fa      	ldrb	r2, [r7, #3]
 8012bd4:	429a      	cmp	r2, r3
 8012bd6:	d008      	beq.n	8012bea <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8012bd8:	2300      	movs	r3, #0
 8012bda:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	885b      	ldrh	r3, [r3, #2]
 8012be0:	b29a      	uxth	r2, r3
 8012be2:	897b      	ldrh	r3, [r7, #10]
 8012be4:	429a      	cmp	r2, r3
 8012be6:	d8e5      	bhi.n	8012bb4 <USBD_GetEpDesc+0x2e>
 8012be8:	e000      	b.n	8012bec <USBD_GetEpDesc+0x66>
          break;
 8012bea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8012bec:	693b      	ldr	r3, [r7, #16]
}
 8012bee:	4618      	mov	r0, r3
 8012bf0:	3718      	adds	r7, #24
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	bd80      	pop	{r7, pc}

08012bf6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8012bf6:	b480      	push	{r7}
 8012bf8:	b085      	sub	sp, #20
 8012bfa:	af00      	add	r7, sp, #0
 8012bfc:	6078      	str	r0, [r7, #4]
 8012bfe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8012c04:	683b      	ldr	r3, [r7, #0]
 8012c06:	881b      	ldrh	r3, [r3, #0]
 8012c08:	68fa      	ldr	r2, [r7, #12]
 8012c0a:	7812      	ldrb	r2, [r2, #0]
 8012c0c:	4413      	add	r3, r2
 8012c0e:	b29a      	uxth	r2, r3
 8012c10:	683b      	ldr	r3, [r7, #0]
 8012c12:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	781b      	ldrb	r3, [r3, #0]
 8012c18:	461a      	mov	r2, r3
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	4413      	add	r3, r2
 8012c1e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8012c20:	68fb      	ldr	r3, [r7, #12]
}
 8012c22:	4618      	mov	r0, r3
 8012c24:	3714      	adds	r7, #20
 8012c26:	46bd      	mov	sp, r7
 8012c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2c:	4770      	bx	lr

08012c2e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012c2e:	b480      	push	{r7}
 8012c30:	b087      	sub	sp, #28
 8012c32:	af00      	add	r7, sp, #0
 8012c34:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012c3a:	697b      	ldr	r3, [r7, #20]
 8012c3c:	781b      	ldrb	r3, [r3, #0]
 8012c3e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012c40:	697b      	ldr	r3, [r7, #20]
 8012c42:	3301      	adds	r3, #1
 8012c44:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012c46:	697b      	ldr	r3, [r7, #20]
 8012c48:	781b      	ldrb	r3, [r3, #0]
 8012c4a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012c4c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012c50:	021b      	lsls	r3, r3, #8
 8012c52:	b21a      	sxth	r2, r3
 8012c54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012c58:	4313      	orrs	r3, r2
 8012c5a:	b21b      	sxth	r3, r3
 8012c5c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012c5e:	89fb      	ldrh	r3, [r7, #14]
}
 8012c60:	4618      	mov	r0, r3
 8012c62:	371c      	adds	r7, #28
 8012c64:	46bd      	mov	sp, r7
 8012c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6a:	4770      	bx	lr

08012c6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b084      	sub	sp, #16
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
 8012c74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012c76:	2300      	movs	r3, #0
 8012c78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	781b      	ldrb	r3, [r3, #0]
 8012c7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012c82:	2b40      	cmp	r3, #64	@ 0x40
 8012c84:	d005      	beq.n	8012c92 <USBD_StdDevReq+0x26>
 8012c86:	2b40      	cmp	r3, #64	@ 0x40
 8012c88:	d857      	bhi.n	8012d3a <USBD_StdDevReq+0xce>
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d00f      	beq.n	8012cae <USBD_StdDevReq+0x42>
 8012c8e:	2b20      	cmp	r3, #32
 8012c90:	d153      	bne.n	8012d3a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	32ae      	adds	r2, #174	@ 0xae
 8012c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ca0:	689b      	ldr	r3, [r3, #8]
 8012ca2:	6839      	ldr	r1, [r7, #0]
 8012ca4:	6878      	ldr	r0, [r7, #4]
 8012ca6:	4798      	blx	r3
 8012ca8:	4603      	mov	r3, r0
 8012caa:	73fb      	strb	r3, [r7, #15]
      break;
 8012cac:	e04a      	b.n	8012d44 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	785b      	ldrb	r3, [r3, #1]
 8012cb2:	2b09      	cmp	r3, #9
 8012cb4:	d83b      	bhi.n	8012d2e <USBD_StdDevReq+0xc2>
 8012cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8012cbc <USBD_StdDevReq+0x50>)
 8012cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cbc:	08012d11 	.word	0x08012d11
 8012cc0:	08012d25 	.word	0x08012d25
 8012cc4:	08012d2f 	.word	0x08012d2f
 8012cc8:	08012d1b 	.word	0x08012d1b
 8012ccc:	08012d2f 	.word	0x08012d2f
 8012cd0:	08012cef 	.word	0x08012cef
 8012cd4:	08012ce5 	.word	0x08012ce5
 8012cd8:	08012d2f 	.word	0x08012d2f
 8012cdc:	08012d07 	.word	0x08012d07
 8012ce0:	08012cf9 	.word	0x08012cf9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012ce4:	6839      	ldr	r1, [r7, #0]
 8012ce6:	6878      	ldr	r0, [r7, #4]
 8012ce8:	f000 fa3c 	bl	8013164 <USBD_GetDescriptor>
          break;
 8012cec:	e024      	b.n	8012d38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012cee:	6839      	ldr	r1, [r7, #0]
 8012cf0:	6878      	ldr	r0, [r7, #4]
 8012cf2:	f000 fba1 	bl	8013438 <USBD_SetAddress>
          break;
 8012cf6:	e01f      	b.n	8012d38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012cf8:	6839      	ldr	r1, [r7, #0]
 8012cfa:	6878      	ldr	r0, [r7, #4]
 8012cfc:	f000 fbe0 	bl	80134c0 <USBD_SetConfig>
 8012d00:	4603      	mov	r3, r0
 8012d02:	73fb      	strb	r3, [r7, #15]
          break;
 8012d04:	e018      	b.n	8012d38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012d06:	6839      	ldr	r1, [r7, #0]
 8012d08:	6878      	ldr	r0, [r7, #4]
 8012d0a:	f000 fc83 	bl	8013614 <USBD_GetConfig>
          break;
 8012d0e:	e013      	b.n	8012d38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012d10:	6839      	ldr	r1, [r7, #0]
 8012d12:	6878      	ldr	r0, [r7, #4]
 8012d14:	f000 fcb4 	bl	8013680 <USBD_GetStatus>
          break;
 8012d18:	e00e      	b.n	8012d38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012d1a:	6839      	ldr	r1, [r7, #0]
 8012d1c:	6878      	ldr	r0, [r7, #4]
 8012d1e:	f000 fce3 	bl	80136e8 <USBD_SetFeature>
          break;
 8012d22:	e009      	b.n	8012d38 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012d24:	6839      	ldr	r1, [r7, #0]
 8012d26:	6878      	ldr	r0, [r7, #4]
 8012d28:	f000 fd07 	bl	801373a <USBD_ClrFeature>
          break;
 8012d2c:	e004      	b.n	8012d38 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8012d2e:	6839      	ldr	r1, [r7, #0]
 8012d30:	6878      	ldr	r0, [r7, #4]
 8012d32:	f000 fd5e 	bl	80137f2 <USBD_CtlError>
          break;
 8012d36:	bf00      	nop
      }
      break;
 8012d38:	e004      	b.n	8012d44 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8012d3a:	6839      	ldr	r1, [r7, #0]
 8012d3c:	6878      	ldr	r0, [r7, #4]
 8012d3e:	f000 fd58 	bl	80137f2 <USBD_CtlError>
      break;
 8012d42:	bf00      	nop
  }

  return ret;
 8012d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d46:	4618      	mov	r0, r3
 8012d48:	3710      	adds	r7, #16
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bd80      	pop	{r7, pc}
 8012d4e:	bf00      	nop

08012d50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b084      	sub	sp, #16
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
 8012d58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012d5e:	683b      	ldr	r3, [r7, #0]
 8012d60:	781b      	ldrb	r3, [r3, #0]
 8012d62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012d66:	2b40      	cmp	r3, #64	@ 0x40
 8012d68:	d005      	beq.n	8012d76 <USBD_StdItfReq+0x26>
 8012d6a:	2b40      	cmp	r3, #64	@ 0x40
 8012d6c:	d852      	bhi.n	8012e14 <USBD_StdItfReq+0xc4>
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d001      	beq.n	8012d76 <USBD_StdItfReq+0x26>
 8012d72:	2b20      	cmp	r3, #32
 8012d74:	d14e      	bne.n	8012e14 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012d7c:	b2db      	uxtb	r3, r3
 8012d7e:	3b01      	subs	r3, #1
 8012d80:	2b02      	cmp	r3, #2
 8012d82:	d840      	bhi.n	8012e06 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012d84:	683b      	ldr	r3, [r7, #0]
 8012d86:	889b      	ldrh	r3, [r3, #4]
 8012d88:	b2db      	uxtb	r3, r3
 8012d8a:	2b01      	cmp	r3, #1
 8012d8c:	d836      	bhi.n	8012dfc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8012d8e:	683b      	ldr	r3, [r7, #0]
 8012d90:	889b      	ldrh	r3, [r3, #4]
 8012d92:	b2db      	uxtb	r3, r3
 8012d94:	4619      	mov	r1, r3
 8012d96:	6878      	ldr	r0, [r7, #4]
 8012d98:	f7ff fedb 	bl	8012b52 <USBD_CoreFindIF>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012da0:	7bbb      	ldrb	r3, [r7, #14]
 8012da2:	2bff      	cmp	r3, #255	@ 0xff
 8012da4:	d01d      	beq.n	8012de2 <USBD_StdItfReq+0x92>
 8012da6:	7bbb      	ldrb	r3, [r7, #14]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d11a      	bne.n	8012de2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8012dac:	7bba      	ldrb	r2, [r7, #14]
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	32ae      	adds	r2, #174	@ 0xae
 8012db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012db6:	689b      	ldr	r3, [r3, #8]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d00f      	beq.n	8012ddc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8012dbc:	7bba      	ldrb	r2, [r7, #14]
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012dc4:	7bba      	ldrb	r2, [r7, #14]
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	32ae      	adds	r2, #174	@ 0xae
 8012dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dce:	689b      	ldr	r3, [r3, #8]
 8012dd0:	6839      	ldr	r1, [r7, #0]
 8012dd2:	6878      	ldr	r0, [r7, #4]
 8012dd4:	4798      	blx	r3
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012dda:	e004      	b.n	8012de6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8012ddc:	2303      	movs	r3, #3
 8012dde:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012de0:	e001      	b.n	8012de6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8012de2:	2303      	movs	r3, #3
 8012de4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	88db      	ldrh	r3, [r3, #6]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d110      	bne.n	8012e10 <USBD_StdItfReq+0xc0>
 8012dee:	7bfb      	ldrb	r3, [r7, #15]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d10d      	bne.n	8012e10 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012df4:	6878      	ldr	r0, [r7, #4]
 8012df6:	f000 fdd3 	bl	80139a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012dfa:	e009      	b.n	8012e10 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8012dfc:	6839      	ldr	r1, [r7, #0]
 8012dfe:	6878      	ldr	r0, [r7, #4]
 8012e00:	f000 fcf7 	bl	80137f2 <USBD_CtlError>
          break;
 8012e04:	e004      	b.n	8012e10 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8012e06:	6839      	ldr	r1, [r7, #0]
 8012e08:	6878      	ldr	r0, [r7, #4]
 8012e0a:	f000 fcf2 	bl	80137f2 <USBD_CtlError>
          break;
 8012e0e:	e000      	b.n	8012e12 <USBD_StdItfReq+0xc2>
          break;
 8012e10:	bf00      	nop
      }
      break;
 8012e12:	e004      	b.n	8012e1e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8012e14:	6839      	ldr	r1, [r7, #0]
 8012e16:	6878      	ldr	r0, [r7, #4]
 8012e18:	f000 fceb 	bl	80137f2 <USBD_CtlError>
      break;
 8012e1c:	bf00      	nop
  }

  return ret;
 8012e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e20:	4618      	mov	r0, r3
 8012e22:	3710      	adds	r7, #16
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}

08012e28 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b084      	sub	sp, #16
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
 8012e30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8012e32:	2300      	movs	r3, #0
 8012e34:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	889b      	ldrh	r3, [r3, #4]
 8012e3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012e3c:	683b      	ldr	r3, [r7, #0]
 8012e3e:	781b      	ldrb	r3, [r3, #0]
 8012e40:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012e44:	2b40      	cmp	r3, #64	@ 0x40
 8012e46:	d007      	beq.n	8012e58 <USBD_StdEPReq+0x30>
 8012e48:	2b40      	cmp	r3, #64	@ 0x40
 8012e4a:	f200 817f 	bhi.w	801314c <USBD_StdEPReq+0x324>
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d02a      	beq.n	8012ea8 <USBD_StdEPReq+0x80>
 8012e52:	2b20      	cmp	r3, #32
 8012e54:	f040 817a 	bne.w	801314c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8012e58:	7bbb      	ldrb	r3, [r7, #14]
 8012e5a:	4619      	mov	r1, r3
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f7ff fe85 	bl	8012b6c <USBD_CoreFindEP>
 8012e62:	4603      	mov	r3, r0
 8012e64:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012e66:	7b7b      	ldrb	r3, [r7, #13]
 8012e68:	2bff      	cmp	r3, #255	@ 0xff
 8012e6a:	f000 8174 	beq.w	8013156 <USBD_StdEPReq+0x32e>
 8012e6e:	7b7b      	ldrb	r3, [r7, #13]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	f040 8170 	bne.w	8013156 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8012e76:	7b7a      	ldrb	r2, [r7, #13]
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8012e7e:	7b7a      	ldrb	r2, [r7, #13]
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	32ae      	adds	r2, #174	@ 0xae
 8012e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e88:	689b      	ldr	r3, [r3, #8]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	f000 8163 	beq.w	8013156 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8012e90:	7b7a      	ldrb	r2, [r7, #13]
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	32ae      	adds	r2, #174	@ 0xae
 8012e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e9a:	689b      	ldr	r3, [r3, #8]
 8012e9c:	6839      	ldr	r1, [r7, #0]
 8012e9e:	6878      	ldr	r0, [r7, #4]
 8012ea0:	4798      	blx	r3
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012ea6:	e156      	b.n	8013156 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	785b      	ldrb	r3, [r3, #1]
 8012eac:	2b03      	cmp	r3, #3
 8012eae:	d008      	beq.n	8012ec2 <USBD_StdEPReq+0x9a>
 8012eb0:	2b03      	cmp	r3, #3
 8012eb2:	f300 8145 	bgt.w	8013140 <USBD_StdEPReq+0x318>
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	f000 809b 	beq.w	8012ff2 <USBD_StdEPReq+0x1ca>
 8012ebc:	2b01      	cmp	r3, #1
 8012ebe:	d03c      	beq.n	8012f3a <USBD_StdEPReq+0x112>
 8012ec0:	e13e      	b.n	8013140 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ec8:	b2db      	uxtb	r3, r3
 8012eca:	2b02      	cmp	r3, #2
 8012ecc:	d002      	beq.n	8012ed4 <USBD_StdEPReq+0xac>
 8012ece:	2b03      	cmp	r3, #3
 8012ed0:	d016      	beq.n	8012f00 <USBD_StdEPReq+0xd8>
 8012ed2:	e02c      	b.n	8012f2e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012ed4:	7bbb      	ldrb	r3, [r7, #14]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d00d      	beq.n	8012ef6 <USBD_StdEPReq+0xce>
 8012eda:	7bbb      	ldrb	r3, [r7, #14]
 8012edc:	2b80      	cmp	r3, #128	@ 0x80
 8012ede:	d00a      	beq.n	8012ef6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012ee0:	7bbb      	ldrb	r3, [r7, #14]
 8012ee2:	4619      	mov	r1, r3
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f004 fb29 	bl	801753c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012eea:	2180      	movs	r1, #128	@ 0x80
 8012eec:	6878      	ldr	r0, [r7, #4]
 8012eee:	f004 fb25 	bl	801753c <USBD_LL_StallEP>
 8012ef2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012ef4:	e020      	b.n	8012f38 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8012ef6:	6839      	ldr	r1, [r7, #0]
 8012ef8:	6878      	ldr	r0, [r7, #4]
 8012efa:	f000 fc7a 	bl	80137f2 <USBD_CtlError>
              break;
 8012efe:	e01b      	b.n	8012f38 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	885b      	ldrh	r3, [r3, #2]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d10e      	bne.n	8012f26 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012f08:	7bbb      	ldrb	r3, [r7, #14]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d00b      	beq.n	8012f26 <USBD_StdEPReq+0xfe>
 8012f0e:	7bbb      	ldrb	r3, [r7, #14]
 8012f10:	2b80      	cmp	r3, #128	@ 0x80
 8012f12:	d008      	beq.n	8012f26 <USBD_StdEPReq+0xfe>
 8012f14:	683b      	ldr	r3, [r7, #0]
 8012f16:	88db      	ldrh	r3, [r3, #6]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d104      	bne.n	8012f26 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012f1c:	7bbb      	ldrb	r3, [r7, #14]
 8012f1e:	4619      	mov	r1, r3
 8012f20:	6878      	ldr	r0, [r7, #4]
 8012f22:	f004 fb0b 	bl	801753c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012f26:	6878      	ldr	r0, [r7, #4]
 8012f28:	f000 fd3a 	bl	80139a0 <USBD_CtlSendStatus>

              break;
 8012f2c:	e004      	b.n	8012f38 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8012f2e:	6839      	ldr	r1, [r7, #0]
 8012f30:	6878      	ldr	r0, [r7, #4]
 8012f32:	f000 fc5e 	bl	80137f2 <USBD_CtlError>
              break;
 8012f36:	bf00      	nop
          }
          break;
 8012f38:	e107      	b.n	801314a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f40:	b2db      	uxtb	r3, r3
 8012f42:	2b02      	cmp	r3, #2
 8012f44:	d002      	beq.n	8012f4c <USBD_StdEPReq+0x124>
 8012f46:	2b03      	cmp	r3, #3
 8012f48:	d016      	beq.n	8012f78 <USBD_StdEPReq+0x150>
 8012f4a:	e04b      	b.n	8012fe4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012f4c:	7bbb      	ldrb	r3, [r7, #14]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d00d      	beq.n	8012f6e <USBD_StdEPReq+0x146>
 8012f52:	7bbb      	ldrb	r3, [r7, #14]
 8012f54:	2b80      	cmp	r3, #128	@ 0x80
 8012f56:	d00a      	beq.n	8012f6e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012f58:	7bbb      	ldrb	r3, [r7, #14]
 8012f5a:	4619      	mov	r1, r3
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f004 faed 	bl	801753c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012f62:	2180      	movs	r1, #128	@ 0x80
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f004 fae9 	bl	801753c <USBD_LL_StallEP>
 8012f6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012f6c:	e040      	b.n	8012ff0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8012f6e:	6839      	ldr	r1, [r7, #0]
 8012f70:	6878      	ldr	r0, [r7, #4]
 8012f72:	f000 fc3e 	bl	80137f2 <USBD_CtlError>
              break;
 8012f76:	e03b      	b.n	8012ff0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012f78:	683b      	ldr	r3, [r7, #0]
 8012f7a:	885b      	ldrh	r3, [r3, #2]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d136      	bne.n	8012fee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012f80:	7bbb      	ldrb	r3, [r7, #14]
 8012f82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d004      	beq.n	8012f94 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012f8a:	7bbb      	ldrb	r3, [r7, #14]
 8012f8c:	4619      	mov	r1, r3
 8012f8e:	6878      	ldr	r0, [r7, #4]
 8012f90:	f004 faf3 	bl	801757a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	f000 fd03 	bl	80139a0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8012f9a:	7bbb      	ldrb	r3, [r7, #14]
 8012f9c:	4619      	mov	r1, r3
 8012f9e:	6878      	ldr	r0, [r7, #4]
 8012fa0:	f7ff fde4 	bl	8012b6c <USBD_CoreFindEP>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012fa8:	7b7b      	ldrb	r3, [r7, #13]
 8012faa:	2bff      	cmp	r3, #255	@ 0xff
 8012fac:	d01f      	beq.n	8012fee <USBD_StdEPReq+0x1c6>
 8012fae:	7b7b      	ldrb	r3, [r7, #13]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d11c      	bne.n	8012fee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8012fb4:	7b7a      	ldrb	r2, [r7, #13]
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8012fbc:	7b7a      	ldrb	r2, [r7, #13]
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	32ae      	adds	r2, #174	@ 0xae
 8012fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fc6:	689b      	ldr	r3, [r3, #8]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d010      	beq.n	8012fee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012fcc:	7b7a      	ldrb	r2, [r7, #13]
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	32ae      	adds	r2, #174	@ 0xae
 8012fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fd6:	689b      	ldr	r3, [r3, #8]
 8012fd8:	6839      	ldr	r1, [r7, #0]
 8012fda:	6878      	ldr	r0, [r7, #4]
 8012fdc:	4798      	blx	r3
 8012fde:	4603      	mov	r3, r0
 8012fe0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8012fe2:	e004      	b.n	8012fee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8012fe4:	6839      	ldr	r1, [r7, #0]
 8012fe6:	6878      	ldr	r0, [r7, #4]
 8012fe8:	f000 fc03 	bl	80137f2 <USBD_CtlError>
              break;
 8012fec:	e000      	b.n	8012ff0 <USBD_StdEPReq+0x1c8>
              break;
 8012fee:	bf00      	nop
          }
          break;
 8012ff0:	e0ab      	b.n	801314a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ff8:	b2db      	uxtb	r3, r3
 8012ffa:	2b02      	cmp	r3, #2
 8012ffc:	d002      	beq.n	8013004 <USBD_StdEPReq+0x1dc>
 8012ffe:	2b03      	cmp	r3, #3
 8013000:	d032      	beq.n	8013068 <USBD_StdEPReq+0x240>
 8013002:	e097      	b.n	8013134 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013004:	7bbb      	ldrb	r3, [r7, #14]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d007      	beq.n	801301a <USBD_StdEPReq+0x1f2>
 801300a:	7bbb      	ldrb	r3, [r7, #14]
 801300c:	2b80      	cmp	r3, #128	@ 0x80
 801300e:	d004      	beq.n	801301a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013010:	6839      	ldr	r1, [r7, #0]
 8013012:	6878      	ldr	r0, [r7, #4]
 8013014:	f000 fbed 	bl	80137f2 <USBD_CtlError>
                break;
 8013018:	e091      	b.n	801313e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801301a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801301e:	2b00      	cmp	r3, #0
 8013020:	da0b      	bge.n	801303a <USBD_StdEPReq+0x212>
 8013022:	7bbb      	ldrb	r3, [r7, #14]
 8013024:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013028:	4613      	mov	r3, r2
 801302a:	009b      	lsls	r3, r3, #2
 801302c:	4413      	add	r3, r2
 801302e:	009b      	lsls	r3, r3, #2
 8013030:	3310      	adds	r3, #16
 8013032:	687a      	ldr	r2, [r7, #4]
 8013034:	4413      	add	r3, r2
 8013036:	3304      	adds	r3, #4
 8013038:	e00b      	b.n	8013052 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801303a:	7bbb      	ldrb	r3, [r7, #14]
 801303c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013040:	4613      	mov	r3, r2
 8013042:	009b      	lsls	r3, r3, #2
 8013044:	4413      	add	r3, r2
 8013046:	009b      	lsls	r3, r3, #2
 8013048:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801304c:	687a      	ldr	r2, [r7, #4]
 801304e:	4413      	add	r3, r2
 8013050:	3304      	adds	r3, #4
 8013052:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013054:	68bb      	ldr	r3, [r7, #8]
 8013056:	2200      	movs	r2, #0
 8013058:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801305a:	68bb      	ldr	r3, [r7, #8]
 801305c:	2202      	movs	r2, #2
 801305e:	4619      	mov	r1, r3
 8013060:	6878      	ldr	r0, [r7, #4]
 8013062:	f000 fc43 	bl	80138ec <USBD_CtlSendData>
              break;
 8013066:	e06a      	b.n	801313e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013068:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801306c:	2b00      	cmp	r3, #0
 801306e:	da11      	bge.n	8013094 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013070:	7bbb      	ldrb	r3, [r7, #14]
 8013072:	f003 020f 	and.w	r2, r3, #15
 8013076:	6879      	ldr	r1, [r7, #4]
 8013078:	4613      	mov	r3, r2
 801307a:	009b      	lsls	r3, r3, #2
 801307c:	4413      	add	r3, r2
 801307e:	009b      	lsls	r3, r3, #2
 8013080:	440b      	add	r3, r1
 8013082:	3324      	adds	r3, #36	@ 0x24
 8013084:	881b      	ldrh	r3, [r3, #0]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d117      	bne.n	80130ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801308a:	6839      	ldr	r1, [r7, #0]
 801308c:	6878      	ldr	r0, [r7, #4]
 801308e:	f000 fbb0 	bl	80137f2 <USBD_CtlError>
                  break;
 8013092:	e054      	b.n	801313e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013094:	7bbb      	ldrb	r3, [r7, #14]
 8013096:	f003 020f 	and.w	r2, r3, #15
 801309a:	6879      	ldr	r1, [r7, #4]
 801309c:	4613      	mov	r3, r2
 801309e:	009b      	lsls	r3, r3, #2
 80130a0:	4413      	add	r3, r2
 80130a2:	009b      	lsls	r3, r3, #2
 80130a4:	440b      	add	r3, r1
 80130a6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80130aa:	881b      	ldrh	r3, [r3, #0]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d104      	bne.n	80130ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80130b0:	6839      	ldr	r1, [r7, #0]
 80130b2:	6878      	ldr	r0, [r7, #4]
 80130b4:	f000 fb9d 	bl	80137f2 <USBD_CtlError>
                  break;
 80130b8:	e041      	b.n	801313e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80130ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	da0b      	bge.n	80130da <USBD_StdEPReq+0x2b2>
 80130c2:	7bbb      	ldrb	r3, [r7, #14]
 80130c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80130c8:	4613      	mov	r3, r2
 80130ca:	009b      	lsls	r3, r3, #2
 80130cc:	4413      	add	r3, r2
 80130ce:	009b      	lsls	r3, r3, #2
 80130d0:	3310      	adds	r3, #16
 80130d2:	687a      	ldr	r2, [r7, #4]
 80130d4:	4413      	add	r3, r2
 80130d6:	3304      	adds	r3, #4
 80130d8:	e00b      	b.n	80130f2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80130da:	7bbb      	ldrb	r3, [r7, #14]
 80130dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80130e0:	4613      	mov	r3, r2
 80130e2:	009b      	lsls	r3, r3, #2
 80130e4:	4413      	add	r3, r2
 80130e6:	009b      	lsls	r3, r3, #2
 80130e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80130ec:	687a      	ldr	r2, [r7, #4]
 80130ee:	4413      	add	r3, r2
 80130f0:	3304      	adds	r3, #4
 80130f2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80130f4:	7bbb      	ldrb	r3, [r7, #14]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d002      	beq.n	8013100 <USBD_StdEPReq+0x2d8>
 80130fa:	7bbb      	ldrb	r3, [r7, #14]
 80130fc:	2b80      	cmp	r3, #128	@ 0x80
 80130fe:	d103      	bne.n	8013108 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8013100:	68bb      	ldr	r3, [r7, #8]
 8013102:	2200      	movs	r2, #0
 8013104:	601a      	str	r2, [r3, #0]
 8013106:	e00e      	b.n	8013126 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013108:	7bbb      	ldrb	r3, [r7, #14]
 801310a:	4619      	mov	r1, r3
 801310c:	6878      	ldr	r0, [r7, #4]
 801310e:	f004 fa53 	bl	80175b8 <USBD_LL_IsStallEP>
 8013112:	4603      	mov	r3, r0
 8013114:	2b00      	cmp	r3, #0
 8013116:	d003      	beq.n	8013120 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8013118:	68bb      	ldr	r3, [r7, #8]
 801311a:	2201      	movs	r2, #1
 801311c:	601a      	str	r2, [r3, #0]
 801311e:	e002      	b.n	8013126 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8013120:	68bb      	ldr	r3, [r7, #8]
 8013122:	2200      	movs	r2, #0
 8013124:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013126:	68bb      	ldr	r3, [r7, #8]
 8013128:	2202      	movs	r2, #2
 801312a:	4619      	mov	r1, r3
 801312c:	6878      	ldr	r0, [r7, #4]
 801312e:	f000 fbdd 	bl	80138ec <USBD_CtlSendData>
              break;
 8013132:	e004      	b.n	801313e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8013134:	6839      	ldr	r1, [r7, #0]
 8013136:	6878      	ldr	r0, [r7, #4]
 8013138:	f000 fb5b 	bl	80137f2 <USBD_CtlError>
              break;
 801313c:	bf00      	nop
          }
          break;
 801313e:	e004      	b.n	801314a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013140:	6839      	ldr	r1, [r7, #0]
 8013142:	6878      	ldr	r0, [r7, #4]
 8013144:	f000 fb55 	bl	80137f2 <USBD_CtlError>
          break;
 8013148:	bf00      	nop
      }
      break;
 801314a:	e005      	b.n	8013158 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801314c:	6839      	ldr	r1, [r7, #0]
 801314e:	6878      	ldr	r0, [r7, #4]
 8013150:	f000 fb4f 	bl	80137f2 <USBD_CtlError>
      break;
 8013154:	e000      	b.n	8013158 <USBD_StdEPReq+0x330>
      break;
 8013156:	bf00      	nop
  }

  return ret;
 8013158:	7bfb      	ldrb	r3, [r7, #15]
}
 801315a:	4618      	mov	r0, r3
 801315c:	3710      	adds	r7, #16
 801315e:	46bd      	mov	sp, r7
 8013160:	bd80      	pop	{r7, pc}
	...

08013164 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b084      	sub	sp, #16
 8013168:	af00      	add	r7, sp, #0
 801316a:	6078      	str	r0, [r7, #4]
 801316c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801316e:	2300      	movs	r3, #0
 8013170:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013172:	2300      	movs	r3, #0
 8013174:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013176:	2300      	movs	r3, #0
 8013178:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	885b      	ldrh	r3, [r3, #2]
 801317e:	0a1b      	lsrs	r3, r3, #8
 8013180:	b29b      	uxth	r3, r3
 8013182:	3b01      	subs	r3, #1
 8013184:	2b06      	cmp	r3, #6
 8013186:	f200 8128 	bhi.w	80133da <USBD_GetDescriptor+0x276>
 801318a:	a201      	add	r2, pc, #4	@ (adr r2, 8013190 <USBD_GetDescriptor+0x2c>)
 801318c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013190:	080131ad 	.word	0x080131ad
 8013194:	080131c5 	.word	0x080131c5
 8013198:	08013205 	.word	0x08013205
 801319c:	080133db 	.word	0x080133db
 80131a0:	080133db 	.word	0x080133db
 80131a4:	0801337b 	.word	0x0801337b
 80131a8:	080133a7 	.word	0x080133a7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	687a      	ldr	r2, [r7, #4]
 80131b6:	7c12      	ldrb	r2, [r2, #16]
 80131b8:	f107 0108 	add.w	r1, r7, #8
 80131bc:	4610      	mov	r0, r2
 80131be:	4798      	blx	r3
 80131c0:	60f8      	str	r0, [r7, #12]
      break;
 80131c2:	e112      	b.n	80133ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	7c1b      	ldrb	r3, [r3, #16]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d10d      	bne.n	80131e8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80131d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131d4:	f107 0208 	add.w	r2, r7, #8
 80131d8:	4610      	mov	r0, r2
 80131da:	4798      	blx	r3
 80131dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	3301      	adds	r3, #1
 80131e2:	2202      	movs	r2, #2
 80131e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80131e6:	e100      	b.n	80133ea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80131ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131f0:	f107 0208 	add.w	r2, r7, #8
 80131f4:	4610      	mov	r0, r2
 80131f6:	4798      	blx	r3
 80131f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	3301      	adds	r3, #1
 80131fe:	2202      	movs	r2, #2
 8013200:	701a      	strb	r2, [r3, #0]
      break;
 8013202:	e0f2      	b.n	80133ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	885b      	ldrh	r3, [r3, #2]
 8013208:	b2db      	uxtb	r3, r3
 801320a:	2b05      	cmp	r3, #5
 801320c:	f200 80ac 	bhi.w	8013368 <USBD_GetDescriptor+0x204>
 8013210:	a201      	add	r2, pc, #4	@ (adr r2, 8013218 <USBD_GetDescriptor+0xb4>)
 8013212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013216:	bf00      	nop
 8013218:	08013231 	.word	0x08013231
 801321c:	08013265 	.word	0x08013265
 8013220:	08013299 	.word	0x08013299
 8013224:	080132cd 	.word	0x080132cd
 8013228:	08013301 	.word	0x08013301
 801322c:	08013335 	.word	0x08013335
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013236:	685b      	ldr	r3, [r3, #4]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d00b      	beq.n	8013254 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013242:	685b      	ldr	r3, [r3, #4]
 8013244:	687a      	ldr	r2, [r7, #4]
 8013246:	7c12      	ldrb	r2, [r2, #16]
 8013248:	f107 0108 	add.w	r1, r7, #8
 801324c:	4610      	mov	r0, r2
 801324e:	4798      	blx	r3
 8013250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013252:	e091      	b.n	8013378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013254:	6839      	ldr	r1, [r7, #0]
 8013256:	6878      	ldr	r0, [r7, #4]
 8013258:	f000 facb 	bl	80137f2 <USBD_CtlError>
            err++;
 801325c:	7afb      	ldrb	r3, [r7, #11]
 801325e:	3301      	adds	r3, #1
 8013260:	72fb      	strb	r3, [r7, #11]
          break;
 8013262:	e089      	b.n	8013378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801326a:	689b      	ldr	r3, [r3, #8]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d00b      	beq.n	8013288 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013276:	689b      	ldr	r3, [r3, #8]
 8013278:	687a      	ldr	r2, [r7, #4]
 801327a:	7c12      	ldrb	r2, [r2, #16]
 801327c:	f107 0108 	add.w	r1, r7, #8
 8013280:	4610      	mov	r0, r2
 8013282:	4798      	blx	r3
 8013284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013286:	e077      	b.n	8013378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013288:	6839      	ldr	r1, [r7, #0]
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	f000 fab1 	bl	80137f2 <USBD_CtlError>
            err++;
 8013290:	7afb      	ldrb	r3, [r7, #11]
 8013292:	3301      	adds	r3, #1
 8013294:	72fb      	strb	r3, [r7, #11]
          break;
 8013296:	e06f      	b.n	8013378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801329e:	68db      	ldr	r3, [r3, #12]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d00b      	beq.n	80132bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80132aa:	68db      	ldr	r3, [r3, #12]
 80132ac:	687a      	ldr	r2, [r7, #4]
 80132ae:	7c12      	ldrb	r2, [r2, #16]
 80132b0:	f107 0108 	add.w	r1, r7, #8
 80132b4:	4610      	mov	r0, r2
 80132b6:	4798      	blx	r3
 80132b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80132ba:	e05d      	b.n	8013378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80132bc:	6839      	ldr	r1, [r7, #0]
 80132be:	6878      	ldr	r0, [r7, #4]
 80132c0:	f000 fa97 	bl	80137f2 <USBD_CtlError>
            err++;
 80132c4:	7afb      	ldrb	r3, [r7, #11]
 80132c6:	3301      	adds	r3, #1
 80132c8:	72fb      	strb	r3, [r7, #11]
          break;
 80132ca:	e055      	b.n	8013378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80132d2:	691b      	ldr	r3, [r3, #16]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d00b      	beq.n	80132f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80132de:	691b      	ldr	r3, [r3, #16]
 80132e0:	687a      	ldr	r2, [r7, #4]
 80132e2:	7c12      	ldrb	r2, [r2, #16]
 80132e4:	f107 0108 	add.w	r1, r7, #8
 80132e8:	4610      	mov	r0, r2
 80132ea:	4798      	blx	r3
 80132ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80132ee:	e043      	b.n	8013378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80132f0:	6839      	ldr	r1, [r7, #0]
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	f000 fa7d 	bl	80137f2 <USBD_CtlError>
            err++;
 80132f8:	7afb      	ldrb	r3, [r7, #11]
 80132fa:	3301      	adds	r3, #1
 80132fc:	72fb      	strb	r3, [r7, #11]
          break;
 80132fe:	e03b      	b.n	8013378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013306:	695b      	ldr	r3, [r3, #20]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d00b      	beq.n	8013324 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013312:	695b      	ldr	r3, [r3, #20]
 8013314:	687a      	ldr	r2, [r7, #4]
 8013316:	7c12      	ldrb	r2, [r2, #16]
 8013318:	f107 0108 	add.w	r1, r7, #8
 801331c:	4610      	mov	r0, r2
 801331e:	4798      	blx	r3
 8013320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013322:	e029      	b.n	8013378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013324:	6839      	ldr	r1, [r7, #0]
 8013326:	6878      	ldr	r0, [r7, #4]
 8013328:	f000 fa63 	bl	80137f2 <USBD_CtlError>
            err++;
 801332c:	7afb      	ldrb	r3, [r7, #11]
 801332e:	3301      	adds	r3, #1
 8013330:	72fb      	strb	r3, [r7, #11]
          break;
 8013332:	e021      	b.n	8013378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801333a:	699b      	ldr	r3, [r3, #24]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d00b      	beq.n	8013358 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013346:	699b      	ldr	r3, [r3, #24]
 8013348:	687a      	ldr	r2, [r7, #4]
 801334a:	7c12      	ldrb	r2, [r2, #16]
 801334c:	f107 0108 	add.w	r1, r7, #8
 8013350:	4610      	mov	r0, r2
 8013352:	4798      	blx	r3
 8013354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013356:	e00f      	b.n	8013378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013358:	6839      	ldr	r1, [r7, #0]
 801335a:	6878      	ldr	r0, [r7, #4]
 801335c:	f000 fa49 	bl	80137f2 <USBD_CtlError>
            err++;
 8013360:	7afb      	ldrb	r3, [r7, #11]
 8013362:	3301      	adds	r3, #1
 8013364:	72fb      	strb	r3, [r7, #11]
          break;
 8013366:	e007      	b.n	8013378 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013368:	6839      	ldr	r1, [r7, #0]
 801336a:	6878      	ldr	r0, [r7, #4]
 801336c:	f000 fa41 	bl	80137f2 <USBD_CtlError>
          err++;
 8013370:	7afb      	ldrb	r3, [r7, #11]
 8013372:	3301      	adds	r3, #1
 8013374:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8013376:	bf00      	nop
      }
      break;
 8013378:	e037      	b.n	80133ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	7c1b      	ldrb	r3, [r3, #16]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d109      	bne.n	8013396 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801338a:	f107 0208 	add.w	r2, r7, #8
 801338e:	4610      	mov	r0, r2
 8013390:	4798      	blx	r3
 8013392:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013394:	e029      	b.n	80133ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8013396:	6839      	ldr	r1, [r7, #0]
 8013398:	6878      	ldr	r0, [r7, #4]
 801339a:	f000 fa2a 	bl	80137f2 <USBD_CtlError>
        err++;
 801339e:	7afb      	ldrb	r3, [r7, #11]
 80133a0:	3301      	adds	r3, #1
 80133a2:	72fb      	strb	r3, [r7, #11]
      break;
 80133a4:	e021      	b.n	80133ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	7c1b      	ldrb	r3, [r3, #16]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d10d      	bne.n	80133ca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80133b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80133b6:	f107 0208 	add.w	r2, r7, #8
 80133ba:	4610      	mov	r0, r2
 80133bc:	4798      	blx	r3
 80133be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	3301      	adds	r3, #1
 80133c4:	2207      	movs	r2, #7
 80133c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80133c8:	e00f      	b.n	80133ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80133ca:	6839      	ldr	r1, [r7, #0]
 80133cc:	6878      	ldr	r0, [r7, #4]
 80133ce:	f000 fa10 	bl	80137f2 <USBD_CtlError>
        err++;
 80133d2:	7afb      	ldrb	r3, [r7, #11]
 80133d4:	3301      	adds	r3, #1
 80133d6:	72fb      	strb	r3, [r7, #11]
      break;
 80133d8:	e007      	b.n	80133ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80133da:	6839      	ldr	r1, [r7, #0]
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f000 fa08 	bl	80137f2 <USBD_CtlError>
      err++;
 80133e2:	7afb      	ldrb	r3, [r7, #11]
 80133e4:	3301      	adds	r3, #1
 80133e6:	72fb      	strb	r3, [r7, #11]
      break;
 80133e8:	bf00      	nop
  }

  if (err != 0U)
 80133ea:	7afb      	ldrb	r3, [r7, #11]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d11e      	bne.n	801342e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80133f0:	683b      	ldr	r3, [r7, #0]
 80133f2:	88db      	ldrh	r3, [r3, #6]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d016      	beq.n	8013426 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80133f8:	893b      	ldrh	r3, [r7, #8]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d00e      	beq.n	801341c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80133fe:	683b      	ldr	r3, [r7, #0]
 8013400:	88da      	ldrh	r2, [r3, #6]
 8013402:	893b      	ldrh	r3, [r7, #8]
 8013404:	4293      	cmp	r3, r2
 8013406:	bf28      	it	cs
 8013408:	4613      	movcs	r3, r2
 801340a:	b29b      	uxth	r3, r3
 801340c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801340e:	893b      	ldrh	r3, [r7, #8]
 8013410:	461a      	mov	r2, r3
 8013412:	68f9      	ldr	r1, [r7, #12]
 8013414:	6878      	ldr	r0, [r7, #4]
 8013416:	f000 fa69 	bl	80138ec <USBD_CtlSendData>
 801341a:	e009      	b.n	8013430 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801341c:	6839      	ldr	r1, [r7, #0]
 801341e:	6878      	ldr	r0, [r7, #4]
 8013420:	f000 f9e7 	bl	80137f2 <USBD_CtlError>
 8013424:	e004      	b.n	8013430 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013426:	6878      	ldr	r0, [r7, #4]
 8013428:	f000 faba 	bl	80139a0 <USBD_CtlSendStatus>
 801342c:	e000      	b.n	8013430 <USBD_GetDescriptor+0x2cc>
    return;
 801342e:	bf00      	nop
  }
}
 8013430:	3710      	adds	r7, #16
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}
 8013436:	bf00      	nop

08013438 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b084      	sub	sp, #16
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
 8013440:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	889b      	ldrh	r3, [r3, #4]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d131      	bne.n	80134ae <USBD_SetAddress+0x76>
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	88db      	ldrh	r3, [r3, #6]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d12d      	bne.n	80134ae <USBD_SetAddress+0x76>
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	885b      	ldrh	r3, [r3, #2]
 8013456:	2b7f      	cmp	r3, #127	@ 0x7f
 8013458:	d829      	bhi.n	80134ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	885b      	ldrh	r3, [r3, #2]
 801345e:	b2db      	uxtb	r3, r3
 8013460:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013464:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801346c:	b2db      	uxtb	r3, r3
 801346e:	2b03      	cmp	r3, #3
 8013470:	d104      	bne.n	801347c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013472:	6839      	ldr	r1, [r7, #0]
 8013474:	6878      	ldr	r0, [r7, #4]
 8013476:	f000 f9bc 	bl	80137f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801347a:	e01d      	b.n	80134b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	7bfa      	ldrb	r2, [r7, #15]
 8013480:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013484:	7bfb      	ldrb	r3, [r7, #15]
 8013486:	4619      	mov	r1, r3
 8013488:	6878      	ldr	r0, [r7, #4]
 801348a:	f004 f8c1 	bl	8017610 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801348e:	6878      	ldr	r0, [r7, #4]
 8013490:	f000 fa86 	bl	80139a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013494:	7bfb      	ldrb	r3, [r7, #15]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d004      	beq.n	80134a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	2202      	movs	r2, #2
 801349e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134a2:	e009      	b.n	80134b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	2201      	movs	r2, #1
 80134a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134ac:	e004      	b.n	80134b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80134ae:	6839      	ldr	r1, [r7, #0]
 80134b0:	6878      	ldr	r0, [r7, #4]
 80134b2:	f000 f99e 	bl	80137f2 <USBD_CtlError>
  }
}
 80134b6:	bf00      	nop
 80134b8:	bf00      	nop
 80134ba:	3710      	adds	r7, #16
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}

080134c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b084      	sub	sp, #16
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
 80134c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80134ca:	2300      	movs	r3, #0
 80134cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80134ce:	683b      	ldr	r3, [r7, #0]
 80134d0:	885b      	ldrh	r3, [r3, #2]
 80134d2:	b2da      	uxtb	r2, r3
 80134d4:	4b4e      	ldr	r3, [pc, #312]	@ (8013610 <USBD_SetConfig+0x150>)
 80134d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80134d8:	4b4d      	ldr	r3, [pc, #308]	@ (8013610 <USBD_SetConfig+0x150>)
 80134da:	781b      	ldrb	r3, [r3, #0]
 80134dc:	2b01      	cmp	r3, #1
 80134de:	d905      	bls.n	80134ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80134e0:	6839      	ldr	r1, [r7, #0]
 80134e2:	6878      	ldr	r0, [r7, #4]
 80134e4:	f000 f985 	bl	80137f2 <USBD_CtlError>
    return USBD_FAIL;
 80134e8:	2303      	movs	r3, #3
 80134ea:	e08c      	b.n	8013606 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80134f2:	b2db      	uxtb	r3, r3
 80134f4:	2b02      	cmp	r3, #2
 80134f6:	d002      	beq.n	80134fe <USBD_SetConfig+0x3e>
 80134f8:	2b03      	cmp	r3, #3
 80134fa:	d029      	beq.n	8013550 <USBD_SetConfig+0x90>
 80134fc:	e075      	b.n	80135ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80134fe:	4b44      	ldr	r3, [pc, #272]	@ (8013610 <USBD_SetConfig+0x150>)
 8013500:	781b      	ldrb	r3, [r3, #0]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d020      	beq.n	8013548 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8013506:	4b42      	ldr	r3, [pc, #264]	@ (8013610 <USBD_SetConfig+0x150>)
 8013508:	781b      	ldrb	r3, [r3, #0]
 801350a:	461a      	mov	r2, r3
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013510:	4b3f      	ldr	r3, [pc, #252]	@ (8013610 <USBD_SetConfig+0x150>)
 8013512:	781b      	ldrb	r3, [r3, #0]
 8013514:	4619      	mov	r1, r3
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f7fe ffe3 	bl	80124e2 <USBD_SetClassConfig>
 801351c:	4603      	mov	r3, r0
 801351e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013520:	7bfb      	ldrb	r3, [r7, #15]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d008      	beq.n	8013538 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8013526:	6839      	ldr	r1, [r7, #0]
 8013528:	6878      	ldr	r0, [r7, #4]
 801352a:	f000 f962 	bl	80137f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	2202      	movs	r2, #2
 8013532:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013536:	e065      	b.n	8013604 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013538:	6878      	ldr	r0, [r7, #4]
 801353a:	f000 fa31 	bl	80139a0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	2203      	movs	r2, #3
 8013542:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013546:	e05d      	b.n	8013604 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f000 fa29 	bl	80139a0 <USBD_CtlSendStatus>
      break;
 801354e:	e059      	b.n	8013604 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013550:	4b2f      	ldr	r3, [pc, #188]	@ (8013610 <USBD_SetConfig+0x150>)
 8013552:	781b      	ldrb	r3, [r3, #0]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d112      	bne.n	801357e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	2202      	movs	r2, #2
 801355c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8013560:	4b2b      	ldr	r3, [pc, #172]	@ (8013610 <USBD_SetConfig+0x150>)
 8013562:	781b      	ldrb	r3, [r3, #0]
 8013564:	461a      	mov	r2, r3
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801356a:	4b29      	ldr	r3, [pc, #164]	@ (8013610 <USBD_SetConfig+0x150>)
 801356c:	781b      	ldrb	r3, [r3, #0]
 801356e:	4619      	mov	r1, r3
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	f7fe ffd2 	bl	801251a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013576:	6878      	ldr	r0, [r7, #4]
 8013578:	f000 fa12 	bl	80139a0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801357c:	e042      	b.n	8013604 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801357e:	4b24      	ldr	r3, [pc, #144]	@ (8013610 <USBD_SetConfig+0x150>)
 8013580:	781b      	ldrb	r3, [r3, #0]
 8013582:	461a      	mov	r2, r3
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	685b      	ldr	r3, [r3, #4]
 8013588:	429a      	cmp	r2, r3
 801358a:	d02a      	beq.n	80135e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	685b      	ldr	r3, [r3, #4]
 8013590:	b2db      	uxtb	r3, r3
 8013592:	4619      	mov	r1, r3
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f7fe ffc0 	bl	801251a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801359a:	4b1d      	ldr	r3, [pc, #116]	@ (8013610 <USBD_SetConfig+0x150>)
 801359c:	781b      	ldrb	r3, [r3, #0]
 801359e:	461a      	mov	r2, r3
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80135a4:	4b1a      	ldr	r3, [pc, #104]	@ (8013610 <USBD_SetConfig+0x150>)
 80135a6:	781b      	ldrb	r3, [r3, #0]
 80135a8:	4619      	mov	r1, r3
 80135aa:	6878      	ldr	r0, [r7, #4]
 80135ac:	f7fe ff99 	bl	80124e2 <USBD_SetClassConfig>
 80135b0:	4603      	mov	r3, r0
 80135b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80135b4:	7bfb      	ldrb	r3, [r7, #15]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d00f      	beq.n	80135da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80135ba:	6839      	ldr	r1, [r7, #0]
 80135bc:	6878      	ldr	r0, [r7, #4]
 80135be:	f000 f918 	bl	80137f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	685b      	ldr	r3, [r3, #4]
 80135c6:	b2db      	uxtb	r3, r3
 80135c8:	4619      	mov	r1, r3
 80135ca:	6878      	ldr	r0, [r7, #4]
 80135cc:	f7fe ffa5 	bl	801251a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	2202      	movs	r2, #2
 80135d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80135d8:	e014      	b.n	8013604 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80135da:	6878      	ldr	r0, [r7, #4]
 80135dc:	f000 f9e0 	bl	80139a0 <USBD_CtlSendStatus>
      break;
 80135e0:	e010      	b.n	8013604 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80135e2:	6878      	ldr	r0, [r7, #4]
 80135e4:	f000 f9dc 	bl	80139a0 <USBD_CtlSendStatus>
      break;
 80135e8:	e00c      	b.n	8013604 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80135ea:	6839      	ldr	r1, [r7, #0]
 80135ec:	6878      	ldr	r0, [r7, #4]
 80135ee:	f000 f900 	bl	80137f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80135f2:	4b07      	ldr	r3, [pc, #28]	@ (8013610 <USBD_SetConfig+0x150>)
 80135f4:	781b      	ldrb	r3, [r3, #0]
 80135f6:	4619      	mov	r1, r3
 80135f8:	6878      	ldr	r0, [r7, #4]
 80135fa:	f7fe ff8e 	bl	801251a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80135fe:	2303      	movs	r3, #3
 8013600:	73fb      	strb	r3, [r7, #15]
      break;
 8013602:	bf00      	nop
  }

  return ret;
 8013604:	7bfb      	ldrb	r3, [r7, #15]
}
 8013606:	4618      	mov	r0, r3
 8013608:	3710      	adds	r7, #16
 801360a:	46bd      	mov	sp, r7
 801360c:	bd80      	pop	{r7, pc}
 801360e:	bf00      	nop
 8013610:	20003f98 	.word	0x20003f98

08013614 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013614:	b580      	push	{r7, lr}
 8013616:	b082      	sub	sp, #8
 8013618:	af00      	add	r7, sp, #0
 801361a:	6078      	str	r0, [r7, #4]
 801361c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	88db      	ldrh	r3, [r3, #6]
 8013622:	2b01      	cmp	r3, #1
 8013624:	d004      	beq.n	8013630 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013626:	6839      	ldr	r1, [r7, #0]
 8013628:	6878      	ldr	r0, [r7, #4]
 801362a:	f000 f8e2 	bl	80137f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801362e:	e023      	b.n	8013678 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013636:	b2db      	uxtb	r3, r3
 8013638:	2b02      	cmp	r3, #2
 801363a:	dc02      	bgt.n	8013642 <USBD_GetConfig+0x2e>
 801363c:	2b00      	cmp	r3, #0
 801363e:	dc03      	bgt.n	8013648 <USBD_GetConfig+0x34>
 8013640:	e015      	b.n	801366e <USBD_GetConfig+0x5a>
 8013642:	2b03      	cmp	r3, #3
 8013644:	d00b      	beq.n	801365e <USBD_GetConfig+0x4a>
 8013646:	e012      	b.n	801366e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	2200      	movs	r2, #0
 801364c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	3308      	adds	r3, #8
 8013652:	2201      	movs	r2, #1
 8013654:	4619      	mov	r1, r3
 8013656:	6878      	ldr	r0, [r7, #4]
 8013658:	f000 f948 	bl	80138ec <USBD_CtlSendData>
        break;
 801365c:	e00c      	b.n	8013678 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	3304      	adds	r3, #4
 8013662:	2201      	movs	r2, #1
 8013664:	4619      	mov	r1, r3
 8013666:	6878      	ldr	r0, [r7, #4]
 8013668:	f000 f940 	bl	80138ec <USBD_CtlSendData>
        break;
 801366c:	e004      	b.n	8013678 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801366e:	6839      	ldr	r1, [r7, #0]
 8013670:	6878      	ldr	r0, [r7, #4]
 8013672:	f000 f8be 	bl	80137f2 <USBD_CtlError>
        break;
 8013676:	bf00      	nop
}
 8013678:	bf00      	nop
 801367a:	3708      	adds	r7, #8
 801367c:	46bd      	mov	sp, r7
 801367e:	bd80      	pop	{r7, pc}

08013680 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b082      	sub	sp, #8
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
 8013688:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013690:	b2db      	uxtb	r3, r3
 8013692:	3b01      	subs	r3, #1
 8013694:	2b02      	cmp	r3, #2
 8013696:	d81e      	bhi.n	80136d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013698:	683b      	ldr	r3, [r7, #0]
 801369a:	88db      	ldrh	r3, [r3, #6]
 801369c:	2b02      	cmp	r3, #2
 801369e:	d004      	beq.n	80136aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80136a0:	6839      	ldr	r1, [r7, #0]
 80136a2:	6878      	ldr	r0, [r7, #4]
 80136a4:	f000 f8a5 	bl	80137f2 <USBD_CtlError>
        break;
 80136a8:	e01a      	b.n	80136e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	2201      	movs	r2, #1
 80136ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d005      	beq.n	80136c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	68db      	ldr	r3, [r3, #12]
 80136be:	f043 0202 	orr.w	r2, r3, #2
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	330c      	adds	r3, #12
 80136ca:	2202      	movs	r2, #2
 80136cc:	4619      	mov	r1, r3
 80136ce:	6878      	ldr	r0, [r7, #4]
 80136d0:	f000 f90c 	bl	80138ec <USBD_CtlSendData>
      break;
 80136d4:	e004      	b.n	80136e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80136d6:	6839      	ldr	r1, [r7, #0]
 80136d8:	6878      	ldr	r0, [r7, #4]
 80136da:	f000 f88a 	bl	80137f2 <USBD_CtlError>
      break;
 80136de:	bf00      	nop
  }
}
 80136e0:	bf00      	nop
 80136e2:	3708      	adds	r7, #8
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bd80      	pop	{r7, pc}

080136e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b082      	sub	sp, #8
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
 80136f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80136f2:	683b      	ldr	r3, [r7, #0]
 80136f4:	885b      	ldrh	r3, [r3, #2]
 80136f6:	2b01      	cmp	r3, #1
 80136f8:	d107      	bne.n	801370a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	2201      	movs	r2, #1
 80136fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8013702:	6878      	ldr	r0, [r7, #4]
 8013704:	f000 f94c 	bl	80139a0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8013708:	e013      	b.n	8013732 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801370a:	683b      	ldr	r3, [r7, #0]
 801370c:	885b      	ldrh	r3, [r3, #2]
 801370e:	2b02      	cmp	r3, #2
 8013710:	d10b      	bne.n	801372a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8013712:	683b      	ldr	r3, [r7, #0]
 8013714:	889b      	ldrh	r3, [r3, #4]
 8013716:	0a1b      	lsrs	r3, r3, #8
 8013718:	b29b      	uxth	r3, r3
 801371a:	b2da      	uxtb	r2, r3
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8013722:	6878      	ldr	r0, [r7, #4]
 8013724:	f000 f93c 	bl	80139a0 <USBD_CtlSendStatus>
}
 8013728:	e003      	b.n	8013732 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801372a:	6839      	ldr	r1, [r7, #0]
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	f000 f860 	bl	80137f2 <USBD_CtlError>
}
 8013732:	bf00      	nop
 8013734:	3708      	adds	r7, #8
 8013736:	46bd      	mov	sp, r7
 8013738:	bd80      	pop	{r7, pc}

0801373a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801373a:	b580      	push	{r7, lr}
 801373c:	b082      	sub	sp, #8
 801373e:	af00      	add	r7, sp, #0
 8013740:	6078      	str	r0, [r7, #4]
 8013742:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801374a:	b2db      	uxtb	r3, r3
 801374c:	3b01      	subs	r3, #1
 801374e:	2b02      	cmp	r3, #2
 8013750:	d80b      	bhi.n	801376a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013752:	683b      	ldr	r3, [r7, #0]
 8013754:	885b      	ldrh	r3, [r3, #2]
 8013756:	2b01      	cmp	r3, #1
 8013758:	d10c      	bne.n	8013774 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	2200      	movs	r2, #0
 801375e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013762:	6878      	ldr	r0, [r7, #4]
 8013764:	f000 f91c 	bl	80139a0 <USBD_CtlSendStatus>
      }
      break;
 8013768:	e004      	b.n	8013774 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801376a:	6839      	ldr	r1, [r7, #0]
 801376c:	6878      	ldr	r0, [r7, #4]
 801376e:	f000 f840 	bl	80137f2 <USBD_CtlError>
      break;
 8013772:	e000      	b.n	8013776 <USBD_ClrFeature+0x3c>
      break;
 8013774:	bf00      	nop
  }
}
 8013776:	bf00      	nop
 8013778:	3708      	adds	r7, #8
 801377a:	46bd      	mov	sp, r7
 801377c:	bd80      	pop	{r7, pc}

0801377e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801377e:	b580      	push	{r7, lr}
 8013780:	b084      	sub	sp, #16
 8013782:	af00      	add	r7, sp, #0
 8013784:	6078      	str	r0, [r7, #4]
 8013786:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	781a      	ldrb	r2, [r3, #0]
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	3301      	adds	r3, #1
 8013798:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	781a      	ldrb	r2, [r3, #0]
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	3301      	adds	r3, #1
 80137a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80137a8:	68f8      	ldr	r0, [r7, #12]
 80137aa:	f7ff fa40 	bl	8012c2e <SWAPBYTE>
 80137ae:	4603      	mov	r3, r0
 80137b0:	461a      	mov	r2, r3
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	3301      	adds	r3, #1
 80137ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	3301      	adds	r3, #1
 80137c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80137c2:	68f8      	ldr	r0, [r7, #12]
 80137c4:	f7ff fa33 	bl	8012c2e <SWAPBYTE>
 80137c8:	4603      	mov	r3, r0
 80137ca:	461a      	mov	r2, r3
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	3301      	adds	r3, #1
 80137d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	3301      	adds	r3, #1
 80137da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80137dc:	68f8      	ldr	r0, [r7, #12]
 80137de:	f7ff fa26 	bl	8012c2e <SWAPBYTE>
 80137e2:	4603      	mov	r3, r0
 80137e4:	461a      	mov	r2, r3
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	80da      	strh	r2, [r3, #6]
}
 80137ea:	bf00      	nop
 80137ec:	3710      	adds	r7, #16
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd80      	pop	{r7, pc}

080137f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80137f2:	b580      	push	{r7, lr}
 80137f4:	b082      	sub	sp, #8
 80137f6:	af00      	add	r7, sp, #0
 80137f8:	6078      	str	r0, [r7, #4]
 80137fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80137fc:	2180      	movs	r1, #128	@ 0x80
 80137fe:	6878      	ldr	r0, [r7, #4]
 8013800:	f003 fe9c 	bl	801753c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013804:	2100      	movs	r1, #0
 8013806:	6878      	ldr	r0, [r7, #4]
 8013808:	f003 fe98 	bl	801753c <USBD_LL_StallEP>
}
 801380c:	bf00      	nop
 801380e:	3708      	adds	r7, #8
 8013810:	46bd      	mov	sp, r7
 8013812:	bd80      	pop	{r7, pc}

08013814 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013814:	b580      	push	{r7, lr}
 8013816:	b086      	sub	sp, #24
 8013818:	af00      	add	r7, sp, #0
 801381a:	60f8      	str	r0, [r7, #12]
 801381c:	60b9      	str	r1, [r7, #8]
 801381e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013820:	2300      	movs	r3, #0
 8013822:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d042      	beq.n	80138b0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801382e:	6938      	ldr	r0, [r7, #16]
 8013830:	f000 f842 	bl	80138b8 <USBD_GetLen>
 8013834:	4603      	mov	r3, r0
 8013836:	3301      	adds	r3, #1
 8013838:	005b      	lsls	r3, r3, #1
 801383a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801383e:	d808      	bhi.n	8013852 <USBD_GetString+0x3e>
 8013840:	6938      	ldr	r0, [r7, #16]
 8013842:	f000 f839 	bl	80138b8 <USBD_GetLen>
 8013846:	4603      	mov	r3, r0
 8013848:	3301      	adds	r3, #1
 801384a:	b29b      	uxth	r3, r3
 801384c:	005b      	lsls	r3, r3, #1
 801384e:	b29a      	uxth	r2, r3
 8013850:	e001      	b.n	8013856 <USBD_GetString+0x42>
 8013852:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801385a:	7dfb      	ldrb	r3, [r7, #23]
 801385c:	68ba      	ldr	r2, [r7, #8]
 801385e:	4413      	add	r3, r2
 8013860:	687a      	ldr	r2, [r7, #4]
 8013862:	7812      	ldrb	r2, [r2, #0]
 8013864:	701a      	strb	r2, [r3, #0]
  idx++;
 8013866:	7dfb      	ldrb	r3, [r7, #23]
 8013868:	3301      	adds	r3, #1
 801386a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801386c:	7dfb      	ldrb	r3, [r7, #23]
 801386e:	68ba      	ldr	r2, [r7, #8]
 8013870:	4413      	add	r3, r2
 8013872:	2203      	movs	r2, #3
 8013874:	701a      	strb	r2, [r3, #0]
  idx++;
 8013876:	7dfb      	ldrb	r3, [r7, #23]
 8013878:	3301      	adds	r3, #1
 801387a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801387c:	e013      	b.n	80138a6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801387e:	7dfb      	ldrb	r3, [r7, #23]
 8013880:	68ba      	ldr	r2, [r7, #8]
 8013882:	4413      	add	r3, r2
 8013884:	693a      	ldr	r2, [r7, #16]
 8013886:	7812      	ldrb	r2, [r2, #0]
 8013888:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801388a:	693b      	ldr	r3, [r7, #16]
 801388c:	3301      	adds	r3, #1
 801388e:	613b      	str	r3, [r7, #16]
    idx++;
 8013890:	7dfb      	ldrb	r3, [r7, #23]
 8013892:	3301      	adds	r3, #1
 8013894:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013896:	7dfb      	ldrb	r3, [r7, #23]
 8013898:	68ba      	ldr	r2, [r7, #8]
 801389a:	4413      	add	r3, r2
 801389c:	2200      	movs	r2, #0
 801389e:	701a      	strb	r2, [r3, #0]
    idx++;
 80138a0:	7dfb      	ldrb	r3, [r7, #23]
 80138a2:	3301      	adds	r3, #1
 80138a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80138a6:	693b      	ldr	r3, [r7, #16]
 80138a8:	781b      	ldrb	r3, [r3, #0]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d1e7      	bne.n	801387e <USBD_GetString+0x6a>
 80138ae:	e000      	b.n	80138b2 <USBD_GetString+0x9e>
    return;
 80138b0:	bf00      	nop
  }
}
 80138b2:	3718      	adds	r7, #24
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}

080138b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80138b8:	b480      	push	{r7}
 80138ba:	b085      	sub	sp, #20
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80138c0:	2300      	movs	r3, #0
 80138c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80138c8:	e005      	b.n	80138d6 <USBD_GetLen+0x1e>
  {
    len++;
 80138ca:	7bfb      	ldrb	r3, [r7, #15]
 80138cc:	3301      	adds	r3, #1
 80138ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80138d0:	68bb      	ldr	r3, [r7, #8]
 80138d2:	3301      	adds	r3, #1
 80138d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80138d6:	68bb      	ldr	r3, [r7, #8]
 80138d8:	781b      	ldrb	r3, [r3, #0]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d1f5      	bne.n	80138ca <USBD_GetLen+0x12>
  }

  return len;
 80138de:	7bfb      	ldrb	r3, [r7, #15]
}
 80138e0:	4618      	mov	r0, r3
 80138e2:	3714      	adds	r7, #20
 80138e4:	46bd      	mov	sp, r7
 80138e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ea:	4770      	bx	lr

080138ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b084      	sub	sp, #16
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	60f8      	str	r0, [r7, #12]
 80138f4:	60b9      	str	r1, [r7, #8]
 80138f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	2202      	movs	r2, #2
 80138fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	687a      	ldr	r2, [r7, #4]
 8013904:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	687a      	ldr	r2, [r7, #4]
 801390a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	68ba      	ldr	r2, [r7, #8]
 8013910:	2100      	movs	r1, #0
 8013912:	68f8      	ldr	r0, [r7, #12]
 8013914:	f003 fe9b 	bl	801764e <USBD_LL_Transmit>

  return USBD_OK;
 8013918:	2300      	movs	r3, #0
}
 801391a:	4618      	mov	r0, r3
 801391c:	3710      	adds	r7, #16
 801391e:	46bd      	mov	sp, r7
 8013920:	bd80      	pop	{r7, pc}

08013922 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013922:	b580      	push	{r7, lr}
 8013924:	b084      	sub	sp, #16
 8013926:	af00      	add	r7, sp, #0
 8013928:	60f8      	str	r0, [r7, #12]
 801392a:	60b9      	str	r1, [r7, #8]
 801392c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	68ba      	ldr	r2, [r7, #8]
 8013932:	2100      	movs	r1, #0
 8013934:	68f8      	ldr	r0, [r7, #12]
 8013936:	f003 fe8a 	bl	801764e <USBD_LL_Transmit>

  return USBD_OK;
 801393a:	2300      	movs	r3, #0
}
 801393c:	4618      	mov	r0, r3
 801393e:	3710      	adds	r7, #16
 8013940:	46bd      	mov	sp, r7
 8013942:	bd80      	pop	{r7, pc}

08013944 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b084      	sub	sp, #16
 8013948:	af00      	add	r7, sp, #0
 801394a:	60f8      	str	r0, [r7, #12]
 801394c:	60b9      	str	r1, [r7, #8]
 801394e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	2203      	movs	r2, #3
 8013954:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	687a      	ldr	r2, [r7, #4]
 801395c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	687a      	ldr	r2, [r7, #4]
 8013964:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	68ba      	ldr	r2, [r7, #8]
 801396c:	2100      	movs	r1, #0
 801396e:	68f8      	ldr	r0, [r7, #12]
 8013970:	f003 fe8e 	bl	8017690 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013974:	2300      	movs	r3, #0
}
 8013976:	4618      	mov	r0, r3
 8013978:	3710      	adds	r7, #16
 801397a:	46bd      	mov	sp, r7
 801397c:	bd80      	pop	{r7, pc}

0801397e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801397e:	b580      	push	{r7, lr}
 8013980:	b084      	sub	sp, #16
 8013982:	af00      	add	r7, sp, #0
 8013984:	60f8      	str	r0, [r7, #12]
 8013986:	60b9      	str	r1, [r7, #8]
 8013988:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	68ba      	ldr	r2, [r7, #8]
 801398e:	2100      	movs	r1, #0
 8013990:	68f8      	ldr	r0, [r7, #12]
 8013992:	f003 fe7d 	bl	8017690 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013996:	2300      	movs	r3, #0
}
 8013998:	4618      	mov	r0, r3
 801399a:	3710      	adds	r7, #16
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}

080139a0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b082      	sub	sp, #8
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	2204      	movs	r2, #4
 80139ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80139b0:	2300      	movs	r3, #0
 80139b2:	2200      	movs	r2, #0
 80139b4:	2100      	movs	r1, #0
 80139b6:	6878      	ldr	r0, [r7, #4]
 80139b8:	f003 fe49 	bl	801764e <USBD_LL_Transmit>

  return USBD_OK;
 80139bc:	2300      	movs	r3, #0
}
 80139be:	4618      	mov	r0, r3
 80139c0:	3708      	adds	r7, #8
 80139c2:	46bd      	mov	sp, r7
 80139c4:	bd80      	pop	{r7, pc}

080139c6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80139c6:	b580      	push	{r7, lr}
 80139c8:	b082      	sub	sp, #8
 80139ca:	af00      	add	r7, sp, #0
 80139cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	2205      	movs	r2, #5
 80139d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80139d6:	2300      	movs	r3, #0
 80139d8:	2200      	movs	r2, #0
 80139da:	2100      	movs	r1, #0
 80139dc:	6878      	ldr	r0, [r7, #4]
 80139de:	f003 fe57 	bl	8017690 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80139e2:	2300      	movs	r3, #0
}
 80139e4:	4618      	mov	r0, r3
 80139e6:	3708      	adds	r7, #8
 80139e8:	46bd      	mov	sp, r7
 80139ea:	bd80      	pop	{r7, pc}

080139ec <__NVIC_SetPriority>:
{
 80139ec:	b480      	push	{r7}
 80139ee:	b083      	sub	sp, #12
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	4603      	mov	r3, r0
 80139f4:	6039      	str	r1, [r7, #0]
 80139f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80139f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	db0a      	blt.n	8013a16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013a00:	683b      	ldr	r3, [r7, #0]
 8013a02:	b2da      	uxtb	r2, r3
 8013a04:	490c      	ldr	r1, [pc, #48]	@ (8013a38 <__NVIC_SetPriority+0x4c>)
 8013a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a0a:	0112      	lsls	r2, r2, #4
 8013a0c:	b2d2      	uxtb	r2, r2
 8013a0e:	440b      	add	r3, r1
 8013a10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8013a14:	e00a      	b.n	8013a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	b2da      	uxtb	r2, r3
 8013a1a:	4908      	ldr	r1, [pc, #32]	@ (8013a3c <__NVIC_SetPriority+0x50>)
 8013a1c:	79fb      	ldrb	r3, [r7, #7]
 8013a1e:	f003 030f 	and.w	r3, r3, #15
 8013a22:	3b04      	subs	r3, #4
 8013a24:	0112      	lsls	r2, r2, #4
 8013a26:	b2d2      	uxtb	r2, r2
 8013a28:	440b      	add	r3, r1
 8013a2a:	761a      	strb	r2, [r3, #24]
}
 8013a2c:	bf00      	nop
 8013a2e:	370c      	adds	r7, #12
 8013a30:	46bd      	mov	sp, r7
 8013a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a36:	4770      	bx	lr
 8013a38:	e000e100 	.word	0xe000e100
 8013a3c:	e000ed00 	.word	0xe000ed00

08013a40 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8013a40:	b580      	push	{r7, lr}
 8013a42:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8013a44:	4b05      	ldr	r3, [pc, #20]	@ (8013a5c <SysTick_Handler+0x1c>)
 8013a46:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8013a48:	f001 feec 	bl	8015824 <xTaskGetSchedulerState>
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	2b01      	cmp	r3, #1
 8013a50:	d001      	beq.n	8013a56 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8013a52:	f002 ff21 	bl	8016898 <xPortSysTickHandler>
  }
}
 8013a56:	bf00      	nop
 8013a58:	bd80      	pop	{r7, pc}
 8013a5a:	bf00      	nop
 8013a5c:	e000e010 	.word	0xe000e010

08013a60 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013a60:	b580      	push	{r7, lr}
 8013a62:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8013a64:	2100      	movs	r1, #0
 8013a66:	f06f 0004 	mvn.w	r0, #4
 8013a6a:	f7ff ffbf 	bl	80139ec <__NVIC_SetPriority>
#endif
}
 8013a6e:	bf00      	nop
 8013a70:	bd80      	pop	{r7, pc}
	...

08013a74 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013a74:	b480      	push	{r7}
 8013a76:	b083      	sub	sp, #12
 8013a78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013a7a:	f3ef 8305 	mrs	r3, IPSR
 8013a7e:	603b      	str	r3, [r7, #0]
  return(result);
 8013a80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d003      	beq.n	8013a8e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8013a86:	f06f 0305 	mvn.w	r3, #5
 8013a8a:	607b      	str	r3, [r7, #4]
 8013a8c:	e00c      	b.n	8013aa8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8013a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8013ab8 <osKernelInitialize+0x44>)
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d105      	bne.n	8013aa2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8013a96:	4b08      	ldr	r3, [pc, #32]	@ (8013ab8 <osKernelInitialize+0x44>)
 8013a98:	2201      	movs	r2, #1
 8013a9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	607b      	str	r3, [r7, #4]
 8013aa0:	e002      	b.n	8013aa8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8013aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8013aa6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013aa8:	687b      	ldr	r3, [r7, #4]
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	370c      	adds	r7, #12
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab4:	4770      	bx	lr
 8013ab6:	bf00      	nop
 8013ab8:	20003f9c 	.word	0x20003f9c

08013abc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b082      	sub	sp, #8
 8013ac0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013ac2:	f3ef 8305 	mrs	r3, IPSR
 8013ac6:	603b      	str	r3, [r7, #0]
  return(result);
 8013ac8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d003      	beq.n	8013ad6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8013ace:	f06f 0305 	mvn.w	r3, #5
 8013ad2:	607b      	str	r3, [r7, #4]
 8013ad4:	e010      	b.n	8013af8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8013ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8013b04 <osKernelStart+0x48>)
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	2b01      	cmp	r3, #1
 8013adc:	d109      	bne.n	8013af2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8013ade:	f7ff ffbf 	bl	8013a60 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8013ae2:	4b08      	ldr	r3, [pc, #32]	@ (8013b04 <osKernelStart+0x48>)
 8013ae4:	2202      	movs	r2, #2
 8013ae6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013ae8:	f001 fa28 	bl	8014f3c <vTaskStartScheduler>
      stat = osOK;
 8013aec:	2300      	movs	r3, #0
 8013aee:	607b      	str	r3, [r7, #4]
 8013af0:	e002      	b.n	8013af8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8013af2:	f04f 33ff 	mov.w	r3, #4294967295
 8013af6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013af8:	687b      	ldr	r3, [r7, #4]
}
 8013afa:	4618      	mov	r0, r3
 8013afc:	3708      	adds	r7, #8
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd80      	pop	{r7, pc}
 8013b02:	bf00      	nop
 8013b04:	20003f9c 	.word	0x20003f9c

08013b08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b08e      	sub	sp, #56	@ 0x38
 8013b0c:	af04      	add	r7, sp, #16
 8013b0e:	60f8      	str	r0, [r7, #12]
 8013b10:	60b9      	str	r1, [r7, #8]
 8013b12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013b14:	2300      	movs	r3, #0
 8013b16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013b18:	f3ef 8305 	mrs	r3, IPSR
 8013b1c:	617b      	str	r3, [r7, #20]
  return(result);
 8013b1e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d17e      	bne.n	8013c22 <osThreadNew+0x11a>
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d07b      	beq.n	8013c22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8013b2a:	2380      	movs	r3, #128	@ 0x80
 8013b2c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8013b2e:	2318      	movs	r3, #24
 8013b30:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8013b32:	2300      	movs	r3, #0
 8013b34:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8013b36:	f04f 33ff 	mov.w	r3, #4294967295
 8013b3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d045      	beq.n	8013bce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d002      	beq.n	8013b50 <osThreadNew+0x48>
        name = attr->name;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	699b      	ldr	r3, [r3, #24]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d002      	beq.n	8013b5e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	699b      	ldr	r3, [r3, #24]
 8013b5c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013b5e:	69fb      	ldr	r3, [r7, #28]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d008      	beq.n	8013b76 <osThreadNew+0x6e>
 8013b64:	69fb      	ldr	r3, [r7, #28]
 8013b66:	2b38      	cmp	r3, #56	@ 0x38
 8013b68:	d805      	bhi.n	8013b76 <osThreadNew+0x6e>
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	685b      	ldr	r3, [r3, #4]
 8013b6e:	f003 0301 	and.w	r3, r3, #1
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d001      	beq.n	8013b7a <osThreadNew+0x72>
        return (NULL);
 8013b76:	2300      	movs	r3, #0
 8013b78:	e054      	b.n	8013c24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	695b      	ldr	r3, [r3, #20]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d003      	beq.n	8013b8a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	695b      	ldr	r3, [r3, #20]
 8013b86:	089b      	lsrs	r3, r3, #2
 8013b88:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	689b      	ldr	r3, [r3, #8]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d00e      	beq.n	8013bb0 <osThreadNew+0xa8>
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	68db      	ldr	r3, [r3, #12]
 8013b96:	2ba7      	cmp	r3, #167	@ 0xa7
 8013b98:	d90a      	bls.n	8013bb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d006      	beq.n	8013bb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	695b      	ldr	r3, [r3, #20]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d002      	beq.n	8013bb0 <osThreadNew+0xa8>
        mem = 1;
 8013baa:	2301      	movs	r3, #1
 8013bac:	61bb      	str	r3, [r7, #24]
 8013bae:	e010      	b.n	8013bd2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	689b      	ldr	r3, [r3, #8]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d10c      	bne.n	8013bd2 <osThreadNew+0xca>
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	68db      	ldr	r3, [r3, #12]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d108      	bne.n	8013bd2 <osThreadNew+0xca>
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	691b      	ldr	r3, [r3, #16]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d104      	bne.n	8013bd2 <osThreadNew+0xca>
          mem = 0;
 8013bc8:	2300      	movs	r3, #0
 8013bca:	61bb      	str	r3, [r7, #24]
 8013bcc:	e001      	b.n	8013bd2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8013bce:	2300      	movs	r3, #0
 8013bd0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013bd2:	69bb      	ldr	r3, [r7, #24]
 8013bd4:	2b01      	cmp	r3, #1
 8013bd6:	d110      	bne.n	8013bfa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8013bdc:	687a      	ldr	r2, [r7, #4]
 8013bde:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013be0:	9202      	str	r2, [sp, #8]
 8013be2:	9301      	str	r3, [sp, #4]
 8013be4:	69fb      	ldr	r3, [r7, #28]
 8013be6:	9300      	str	r3, [sp, #0]
 8013be8:	68bb      	ldr	r3, [r7, #8]
 8013bea:	6a3a      	ldr	r2, [r7, #32]
 8013bec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013bee:	68f8      	ldr	r0, [r7, #12]
 8013bf0:	f000 ffb0 	bl	8014b54 <xTaskCreateStatic>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	613b      	str	r3, [r7, #16]
 8013bf8:	e013      	b.n	8013c22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8013bfa:	69bb      	ldr	r3, [r7, #24]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d110      	bne.n	8013c22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013c00:	6a3b      	ldr	r3, [r7, #32]
 8013c02:	b29a      	uxth	r2, r3
 8013c04:	f107 0310 	add.w	r3, r7, #16
 8013c08:	9301      	str	r3, [sp, #4]
 8013c0a:	69fb      	ldr	r3, [r7, #28]
 8013c0c:	9300      	str	r3, [sp, #0]
 8013c0e:	68bb      	ldr	r3, [r7, #8]
 8013c10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013c12:	68f8      	ldr	r0, [r7, #12]
 8013c14:	f000 fffe 	bl	8014c14 <xTaskCreate>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	2b01      	cmp	r3, #1
 8013c1c:	d001      	beq.n	8013c22 <osThreadNew+0x11a>
            hTask = NULL;
 8013c1e:	2300      	movs	r3, #0
 8013c20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8013c22:	693b      	ldr	r3, [r7, #16]
}
 8013c24:	4618      	mov	r0, r3
 8013c26:	3728      	adds	r7, #40	@ 0x28
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd80      	pop	{r7, pc}

08013c2c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b084      	sub	sp, #16
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013c34:	f3ef 8305 	mrs	r3, IPSR
 8013c38:	60bb      	str	r3, [r7, #8]
  return(result);
 8013c3a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d003      	beq.n	8013c48 <osDelay+0x1c>
    stat = osErrorISR;
 8013c40:	f06f 0305 	mvn.w	r3, #5
 8013c44:	60fb      	str	r3, [r7, #12]
 8013c46:	e007      	b.n	8013c58 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8013c48:	2300      	movs	r3, #0
 8013c4a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d002      	beq.n	8013c58 <osDelay+0x2c>
      vTaskDelay(ticks);
 8013c52:	6878      	ldr	r0, [r7, #4]
 8013c54:	f001 f93c 	bl	8014ed0 <vTaskDelay>
    }
  }

  return (stat);
 8013c58:	68fb      	ldr	r3, [r7, #12]
}
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	3710      	adds	r7, #16
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd80      	pop	{r7, pc}
	...

08013c64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013c64:	b480      	push	{r7}
 8013c66:	b085      	sub	sp, #20
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	60f8      	str	r0, [r7, #12]
 8013c6c:	60b9      	str	r1, [r7, #8]
 8013c6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	4a07      	ldr	r2, [pc, #28]	@ (8013c90 <vApplicationGetIdleTaskMemory+0x2c>)
 8013c74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013c76:	68bb      	ldr	r3, [r7, #8]
 8013c78:	4a06      	ldr	r2, [pc, #24]	@ (8013c94 <vApplicationGetIdleTaskMemory+0x30>)
 8013c7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	2280      	movs	r2, #128	@ 0x80
 8013c80:	601a      	str	r2, [r3, #0]
}
 8013c82:	bf00      	nop
 8013c84:	3714      	adds	r7, #20
 8013c86:	46bd      	mov	sp, r7
 8013c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8c:	4770      	bx	lr
 8013c8e:	bf00      	nop
 8013c90:	20003fa0 	.word	0x20003fa0
 8013c94:	20004048 	.word	0x20004048

08013c98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013c98:	b480      	push	{r7}
 8013c9a:	b085      	sub	sp, #20
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	60f8      	str	r0, [r7, #12]
 8013ca0:	60b9      	str	r1, [r7, #8]
 8013ca2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	4a07      	ldr	r2, [pc, #28]	@ (8013cc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8013ca8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013caa:	68bb      	ldr	r3, [r7, #8]
 8013cac:	4a06      	ldr	r2, [pc, #24]	@ (8013cc8 <vApplicationGetTimerTaskMemory+0x30>)
 8013cae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013cb6:	601a      	str	r2, [r3, #0]
}
 8013cb8:	bf00      	nop
 8013cba:	3714      	adds	r7, #20
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc2:	4770      	bx	lr
 8013cc4:	20004248 	.word	0x20004248
 8013cc8:	200042f0 	.word	0x200042f0

08013ccc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013ccc:	b480      	push	{r7}
 8013cce:	b083      	sub	sp, #12
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	f103 0208 	add.w	r2, r3, #8
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8013ce4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	f103 0208 	add.w	r2, r3, #8
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	f103 0208 	add.w	r2, r3, #8
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013d00:	bf00      	nop
 8013d02:	370c      	adds	r7, #12
 8013d04:	46bd      	mov	sp, r7
 8013d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0a:	4770      	bx	lr

08013d0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013d0c:	b480      	push	{r7}
 8013d0e:	b083      	sub	sp, #12
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	2200      	movs	r2, #0
 8013d18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013d1a:	bf00      	nop
 8013d1c:	370c      	adds	r7, #12
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d24:	4770      	bx	lr

08013d26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013d26:	b480      	push	{r7}
 8013d28:	b085      	sub	sp, #20
 8013d2a:	af00      	add	r7, sp, #0
 8013d2c:	6078      	str	r0, [r7, #4]
 8013d2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	685b      	ldr	r3, [r3, #4]
 8013d34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013d36:	683b      	ldr	r3, [r7, #0]
 8013d38:	68fa      	ldr	r2, [r7, #12]
 8013d3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	689a      	ldr	r2, [r3, #8]
 8013d40:	683b      	ldr	r3, [r7, #0]
 8013d42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	689b      	ldr	r3, [r3, #8]
 8013d48:	683a      	ldr	r2, [r7, #0]
 8013d4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	683a      	ldr	r2, [r7, #0]
 8013d50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013d52:	683b      	ldr	r3, [r7, #0]
 8013d54:	687a      	ldr	r2, [r7, #4]
 8013d56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	1c5a      	adds	r2, r3, #1
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	601a      	str	r2, [r3, #0]
}
 8013d62:	bf00      	nop
 8013d64:	3714      	adds	r7, #20
 8013d66:	46bd      	mov	sp, r7
 8013d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d6c:	4770      	bx	lr

08013d6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013d6e:	b480      	push	{r7}
 8013d70:	b085      	sub	sp, #20
 8013d72:	af00      	add	r7, sp, #0
 8013d74:	6078      	str	r0, [r7, #4]
 8013d76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013d78:	683b      	ldr	r3, [r7, #0]
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013d7e:	68bb      	ldr	r3, [r7, #8]
 8013d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d84:	d103      	bne.n	8013d8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	691b      	ldr	r3, [r3, #16]
 8013d8a:	60fb      	str	r3, [r7, #12]
 8013d8c:	e00c      	b.n	8013da8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	3308      	adds	r3, #8
 8013d92:	60fb      	str	r3, [r7, #12]
 8013d94:	e002      	b.n	8013d9c <vListInsert+0x2e>
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	685b      	ldr	r3, [r3, #4]
 8013d9a:	60fb      	str	r3, [r7, #12]
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	685b      	ldr	r3, [r3, #4]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	68ba      	ldr	r2, [r7, #8]
 8013da4:	429a      	cmp	r2, r3
 8013da6:	d2f6      	bcs.n	8013d96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	685a      	ldr	r2, [r3, #4]
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013db0:	683b      	ldr	r3, [r7, #0]
 8013db2:	685b      	ldr	r3, [r3, #4]
 8013db4:	683a      	ldr	r2, [r7, #0]
 8013db6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013db8:	683b      	ldr	r3, [r7, #0]
 8013dba:	68fa      	ldr	r2, [r7, #12]
 8013dbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	683a      	ldr	r2, [r7, #0]
 8013dc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013dc4:	683b      	ldr	r3, [r7, #0]
 8013dc6:	687a      	ldr	r2, [r7, #4]
 8013dc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	1c5a      	adds	r2, r3, #1
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	601a      	str	r2, [r3, #0]
}
 8013dd4:	bf00      	nop
 8013dd6:	3714      	adds	r7, #20
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dde:	4770      	bx	lr

08013de0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013de0:	b480      	push	{r7}
 8013de2:	b085      	sub	sp, #20
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	691b      	ldr	r3, [r3, #16]
 8013dec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	685b      	ldr	r3, [r3, #4]
 8013df2:	687a      	ldr	r2, [r7, #4]
 8013df4:	6892      	ldr	r2, [r2, #8]
 8013df6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	689b      	ldr	r3, [r3, #8]
 8013dfc:	687a      	ldr	r2, [r7, #4]
 8013dfe:	6852      	ldr	r2, [r2, #4]
 8013e00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	685b      	ldr	r3, [r3, #4]
 8013e06:	687a      	ldr	r2, [r7, #4]
 8013e08:	429a      	cmp	r2, r3
 8013e0a:	d103      	bne.n	8013e14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	689a      	ldr	r2, [r3, #8]
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	2200      	movs	r2, #0
 8013e18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	1e5a      	subs	r2, r3, #1
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	681b      	ldr	r3, [r3, #0]
}
 8013e28:	4618      	mov	r0, r3
 8013e2a:	3714      	adds	r7, #20
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e32:	4770      	bx	lr

08013e34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b084      	sub	sp, #16
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
 8013e3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d10b      	bne.n	8013e60 <xQueueGenericReset+0x2c>
	__asm volatile
 8013e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e4c:	f383 8811 	msr	BASEPRI, r3
 8013e50:	f3bf 8f6f 	isb	sy
 8013e54:	f3bf 8f4f 	dsb	sy
 8013e58:	60bb      	str	r3, [r7, #8]
}
 8013e5a:	bf00      	nop
 8013e5c:	bf00      	nop
 8013e5e:	e7fd      	b.n	8013e5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013e60:	f002 fc8a 	bl	8016778 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	681a      	ldr	r2, [r3, #0]
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e6c:	68f9      	ldr	r1, [r7, #12]
 8013e6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013e70:	fb01 f303 	mul.w	r3, r1, r3
 8013e74:	441a      	add	r2, r3
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	681a      	ldr	r2, [r3, #0]
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	681a      	ldr	r2, [r3, #0]
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e90:	3b01      	subs	r3, #1
 8013e92:	68f9      	ldr	r1, [r7, #12]
 8013e94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013e96:	fb01 f303 	mul.w	r3, r1, r3
 8013e9a:	441a      	add	r2, r3
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	22ff      	movs	r2, #255	@ 0xff
 8013ea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	22ff      	movs	r2, #255	@ 0xff
 8013eac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8013eb0:	683b      	ldr	r3, [r7, #0]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d114      	bne.n	8013ee0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	691b      	ldr	r3, [r3, #16]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d01a      	beq.n	8013ef4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	3310      	adds	r3, #16
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f001 fad8 	bl	8015478 <xTaskRemoveFromEventList>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d012      	beq.n	8013ef4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013ece:	4b0d      	ldr	r3, [pc, #52]	@ (8013f04 <xQueueGenericReset+0xd0>)
 8013ed0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013ed4:	601a      	str	r2, [r3, #0]
 8013ed6:	f3bf 8f4f 	dsb	sy
 8013eda:	f3bf 8f6f 	isb	sy
 8013ede:	e009      	b.n	8013ef4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	3310      	adds	r3, #16
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f7ff fef1 	bl	8013ccc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	3324      	adds	r3, #36	@ 0x24
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f7ff feec 	bl	8013ccc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013ef4:	f002 fc72 	bl	80167dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013ef8:	2301      	movs	r3, #1
}
 8013efa:	4618      	mov	r0, r3
 8013efc:	3710      	adds	r7, #16
 8013efe:	46bd      	mov	sp, r7
 8013f00:	bd80      	pop	{r7, pc}
 8013f02:	bf00      	nop
 8013f04:	e000ed04 	.word	0xe000ed04

08013f08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b08e      	sub	sp, #56	@ 0x38
 8013f0c:	af02      	add	r7, sp, #8
 8013f0e:	60f8      	str	r0, [r7, #12]
 8013f10:	60b9      	str	r1, [r7, #8]
 8013f12:	607a      	str	r2, [r7, #4]
 8013f14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d10b      	bne.n	8013f34 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8013f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f20:	f383 8811 	msr	BASEPRI, r3
 8013f24:	f3bf 8f6f 	isb	sy
 8013f28:	f3bf 8f4f 	dsb	sy
 8013f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013f2e:	bf00      	nop
 8013f30:	bf00      	nop
 8013f32:	e7fd      	b.n	8013f30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013f34:	683b      	ldr	r3, [r7, #0]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d10b      	bne.n	8013f52 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8013f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f3e:	f383 8811 	msr	BASEPRI, r3
 8013f42:	f3bf 8f6f 	isb	sy
 8013f46:	f3bf 8f4f 	dsb	sy
 8013f4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013f4c:	bf00      	nop
 8013f4e:	bf00      	nop
 8013f50:	e7fd      	b.n	8013f4e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d002      	beq.n	8013f5e <xQueueGenericCreateStatic+0x56>
 8013f58:	68bb      	ldr	r3, [r7, #8]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d001      	beq.n	8013f62 <xQueueGenericCreateStatic+0x5a>
 8013f5e:	2301      	movs	r3, #1
 8013f60:	e000      	b.n	8013f64 <xQueueGenericCreateStatic+0x5c>
 8013f62:	2300      	movs	r3, #0
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d10b      	bne.n	8013f80 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8013f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f6c:	f383 8811 	msr	BASEPRI, r3
 8013f70:	f3bf 8f6f 	isb	sy
 8013f74:	f3bf 8f4f 	dsb	sy
 8013f78:	623b      	str	r3, [r7, #32]
}
 8013f7a:	bf00      	nop
 8013f7c:	bf00      	nop
 8013f7e:	e7fd      	b.n	8013f7c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d102      	bne.n	8013f8c <xQueueGenericCreateStatic+0x84>
 8013f86:	68bb      	ldr	r3, [r7, #8]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d101      	bne.n	8013f90 <xQueueGenericCreateStatic+0x88>
 8013f8c:	2301      	movs	r3, #1
 8013f8e:	e000      	b.n	8013f92 <xQueueGenericCreateStatic+0x8a>
 8013f90:	2300      	movs	r3, #0
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d10b      	bne.n	8013fae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8013f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f9a:	f383 8811 	msr	BASEPRI, r3
 8013f9e:	f3bf 8f6f 	isb	sy
 8013fa2:	f3bf 8f4f 	dsb	sy
 8013fa6:	61fb      	str	r3, [r7, #28]
}
 8013fa8:	bf00      	nop
 8013faa:	bf00      	nop
 8013fac:	e7fd      	b.n	8013faa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013fae:	2350      	movs	r3, #80	@ 0x50
 8013fb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013fb2:	697b      	ldr	r3, [r7, #20]
 8013fb4:	2b50      	cmp	r3, #80	@ 0x50
 8013fb6:	d00b      	beq.n	8013fd0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8013fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fbc:	f383 8811 	msr	BASEPRI, r3
 8013fc0:	f3bf 8f6f 	isb	sy
 8013fc4:	f3bf 8f4f 	dsb	sy
 8013fc8:	61bb      	str	r3, [r7, #24]
}
 8013fca:	bf00      	nop
 8013fcc:	bf00      	nop
 8013fce:	e7fd      	b.n	8013fcc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013fd0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013fd2:	683b      	ldr	r3, [r7, #0]
 8013fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8013fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d00d      	beq.n	8013ff8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fde:	2201      	movs	r2, #1
 8013fe0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013fe4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8013fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fea:	9300      	str	r3, [sp, #0]
 8013fec:	4613      	mov	r3, r2
 8013fee:	687a      	ldr	r2, [r7, #4]
 8013ff0:	68b9      	ldr	r1, [r7, #8]
 8013ff2:	68f8      	ldr	r0, [r7, #12]
 8013ff4:	f000 f840 	bl	8014078 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	3730      	adds	r7, #48	@ 0x30
 8013ffe:	46bd      	mov	sp, r7
 8014000:	bd80      	pop	{r7, pc}

08014002 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014002:	b580      	push	{r7, lr}
 8014004:	b08a      	sub	sp, #40	@ 0x28
 8014006:	af02      	add	r7, sp, #8
 8014008:	60f8      	str	r0, [r7, #12]
 801400a:	60b9      	str	r1, [r7, #8]
 801400c:	4613      	mov	r3, r2
 801400e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d10b      	bne.n	801402e <xQueueGenericCreate+0x2c>
	__asm volatile
 8014016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801401a:	f383 8811 	msr	BASEPRI, r3
 801401e:	f3bf 8f6f 	isb	sy
 8014022:	f3bf 8f4f 	dsb	sy
 8014026:	613b      	str	r3, [r7, #16]
}
 8014028:	bf00      	nop
 801402a:	bf00      	nop
 801402c:	e7fd      	b.n	801402a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	68ba      	ldr	r2, [r7, #8]
 8014032:	fb02 f303 	mul.w	r3, r2, r3
 8014036:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014038:	69fb      	ldr	r3, [r7, #28]
 801403a:	3350      	adds	r3, #80	@ 0x50
 801403c:	4618      	mov	r0, r3
 801403e:	f002 fcbd 	bl	80169bc <pvPortMalloc>
 8014042:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014044:	69bb      	ldr	r3, [r7, #24]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d011      	beq.n	801406e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801404a:	69bb      	ldr	r3, [r7, #24]
 801404c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801404e:	697b      	ldr	r3, [r7, #20]
 8014050:	3350      	adds	r3, #80	@ 0x50
 8014052:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014054:	69bb      	ldr	r3, [r7, #24]
 8014056:	2200      	movs	r2, #0
 8014058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801405c:	79fa      	ldrb	r2, [r7, #7]
 801405e:	69bb      	ldr	r3, [r7, #24]
 8014060:	9300      	str	r3, [sp, #0]
 8014062:	4613      	mov	r3, r2
 8014064:	697a      	ldr	r2, [r7, #20]
 8014066:	68b9      	ldr	r1, [r7, #8]
 8014068:	68f8      	ldr	r0, [r7, #12]
 801406a:	f000 f805 	bl	8014078 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801406e:	69bb      	ldr	r3, [r7, #24]
	}
 8014070:	4618      	mov	r0, r3
 8014072:	3720      	adds	r7, #32
 8014074:	46bd      	mov	sp, r7
 8014076:	bd80      	pop	{r7, pc}

08014078 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b084      	sub	sp, #16
 801407c:	af00      	add	r7, sp, #0
 801407e:	60f8      	str	r0, [r7, #12]
 8014080:	60b9      	str	r1, [r7, #8]
 8014082:	607a      	str	r2, [r7, #4]
 8014084:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014086:	68bb      	ldr	r3, [r7, #8]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d103      	bne.n	8014094 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801408c:	69bb      	ldr	r3, [r7, #24]
 801408e:	69ba      	ldr	r2, [r7, #24]
 8014090:	601a      	str	r2, [r3, #0]
 8014092:	e002      	b.n	801409a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014094:	69bb      	ldr	r3, [r7, #24]
 8014096:	687a      	ldr	r2, [r7, #4]
 8014098:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801409a:	69bb      	ldr	r3, [r7, #24]
 801409c:	68fa      	ldr	r2, [r7, #12]
 801409e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80140a0:	69bb      	ldr	r3, [r7, #24]
 80140a2:	68ba      	ldr	r2, [r7, #8]
 80140a4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80140a6:	2101      	movs	r1, #1
 80140a8:	69b8      	ldr	r0, [r7, #24]
 80140aa:	f7ff fec3 	bl	8013e34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80140ae:	69bb      	ldr	r3, [r7, #24]
 80140b0:	78fa      	ldrb	r2, [r7, #3]
 80140b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80140b6:	bf00      	nop
 80140b8:	3710      	adds	r7, #16
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bd80      	pop	{r7, pc}

080140be <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80140be:	b580      	push	{r7, lr}
 80140c0:	b082      	sub	sp, #8
 80140c2:	af00      	add	r7, sp, #0
 80140c4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d00e      	beq.n	80140ea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	2200      	movs	r2, #0
 80140d0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	2200      	movs	r2, #0
 80140d6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	2200      	movs	r2, #0
 80140dc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80140de:	2300      	movs	r3, #0
 80140e0:	2200      	movs	r2, #0
 80140e2:	2100      	movs	r1, #0
 80140e4:	6878      	ldr	r0, [r7, #4]
 80140e6:	f000 f81d 	bl	8014124 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80140ea:	bf00      	nop
 80140ec:	3708      	adds	r7, #8
 80140ee:	46bd      	mov	sp, r7
 80140f0:	bd80      	pop	{r7, pc}

080140f2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80140f2:	b580      	push	{r7, lr}
 80140f4:	b086      	sub	sp, #24
 80140f6:	af00      	add	r7, sp, #0
 80140f8:	4603      	mov	r3, r0
 80140fa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80140fc:	2301      	movs	r3, #1
 80140fe:	617b      	str	r3, [r7, #20]
 8014100:	2300      	movs	r3, #0
 8014102:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8014104:	79fb      	ldrb	r3, [r7, #7]
 8014106:	461a      	mov	r2, r3
 8014108:	6939      	ldr	r1, [r7, #16]
 801410a:	6978      	ldr	r0, [r7, #20]
 801410c:	f7ff ff79 	bl	8014002 <xQueueGenericCreate>
 8014110:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8014112:	68f8      	ldr	r0, [r7, #12]
 8014114:	f7ff ffd3 	bl	80140be <prvInitialiseMutex>

		return xNewQueue;
 8014118:	68fb      	ldr	r3, [r7, #12]
	}
 801411a:	4618      	mov	r0, r3
 801411c:	3718      	adds	r7, #24
 801411e:	46bd      	mov	sp, r7
 8014120:	bd80      	pop	{r7, pc}
	...

08014124 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b08e      	sub	sp, #56	@ 0x38
 8014128:	af00      	add	r7, sp, #0
 801412a:	60f8      	str	r0, [r7, #12]
 801412c:	60b9      	str	r1, [r7, #8]
 801412e:	607a      	str	r2, [r7, #4]
 8014130:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014132:	2300      	movs	r3, #0
 8014134:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801413a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801413c:	2b00      	cmp	r3, #0
 801413e:	d10b      	bne.n	8014158 <xQueueGenericSend+0x34>
	__asm volatile
 8014140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014144:	f383 8811 	msr	BASEPRI, r3
 8014148:	f3bf 8f6f 	isb	sy
 801414c:	f3bf 8f4f 	dsb	sy
 8014150:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014152:	bf00      	nop
 8014154:	bf00      	nop
 8014156:	e7fd      	b.n	8014154 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014158:	68bb      	ldr	r3, [r7, #8]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d103      	bne.n	8014166 <xQueueGenericSend+0x42>
 801415e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014162:	2b00      	cmp	r3, #0
 8014164:	d101      	bne.n	801416a <xQueueGenericSend+0x46>
 8014166:	2301      	movs	r3, #1
 8014168:	e000      	b.n	801416c <xQueueGenericSend+0x48>
 801416a:	2300      	movs	r3, #0
 801416c:	2b00      	cmp	r3, #0
 801416e:	d10b      	bne.n	8014188 <xQueueGenericSend+0x64>
	__asm volatile
 8014170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014174:	f383 8811 	msr	BASEPRI, r3
 8014178:	f3bf 8f6f 	isb	sy
 801417c:	f3bf 8f4f 	dsb	sy
 8014180:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014182:	bf00      	nop
 8014184:	bf00      	nop
 8014186:	e7fd      	b.n	8014184 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014188:	683b      	ldr	r3, [r7, #0]
 801418a:	2b02      	cmp	r3, #2
 801418c:	d103      	bne.n	8014196 <xQueueGenericSend+0x72>
 801418e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014192:	2b01      	cmp	r3, #1
 8014194:	d101      	bne.n	801419a <xQueueGenericSend+0x76>
 8014196:	2301      	movs	r3, #1
 8014198:	e000      	b.n	801419c <xQueueGenericSend+0x78>
 801419a:	2300      	movs	r3, #0
 801419c:	2b00      	cmp	r3, #0
 801419e:	d10b      	bne.n	80141b8 <xQueueGenericSend+0x94>
	__asm volatile
 80141a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141a4:	f383 8811 	msr	BASEPRI, r3
 80141a8:	f3bf 8f6f 	isb	sy
 80141ac:	f3bf 8f4f 	dsb	sy
 80141b0:	623b      	str	r3, [r7, #32]
}
 80141b2:	bf00      	nop
 80141b4:	bf00      	nop
 80141b6:	e7fd      	b.n	80141b4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80141b8:	f001 fb34 	bl	8015824 <xTaskGetSchedulerState>
 80141bc:	4603      	mov	r3, r0
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d102      	bne.n	80141c8 <xQueueGenericSend+0xa4>
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d101      	bne.n	80141cc <xQueueGenericSend+0xa8>
 80141c8:	2301      	movs	r3, #1
 80141ca:	e000      	b.n	80141ce <xQueueGenericSend+0xaa>
 80141cc:	2300      	movs	r3, #0
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d10b      	bne.n	80141ea <xQueueGenericSend+0xc6>
	__asm volatile
 80141d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141d6:	f383 8811 	msr	BASEPRI, r3
 80141da:	f3bf 8f6f 	isb	sy
 80141de:	f3bf 8f4f 	dsb	sy
 80141e2:	61fb      	str	r3, [r7, #28]
}
 80141e4:	bf00      	nop
 80141e6:	bf00      	nop
 80141e8:	e7fd      	b.n	80141e6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80141ea:	f002 fac5 	bl	8016778 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80141ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80141f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80141f6:	429a      	cmp	r2, r3
 80141f8:	d302      	bcc.n	8014200 <xQueueGenericSend+0xdc>
 80141fa:	683b      	ldr	r3, [r7, #0]
 80141fc:	2b02      	cmp	r3, #2
 80141fe:	d129      	bne.n	8014254 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014200:	683a      	ldr	r2, [r7, #0]
 8014202:	68b9      	ldr	r1, [r7, #8]
 8014204:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014206:	f000 fb37 	bl	8014878 <prvCopyDataToQueue>
 801420a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801420c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014210:	2b00      	cmp	r3, #0
 8014212:	d010      	beq.n	8014236 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014216:	3324      	adds	r3, #36	@ 0x24
 8014218:	4618      	mov	r0, r3
 801421a:	f001 f92d 	bl	8015478 <xTaskRemoveFromEventList>
 801421e:	4603      	mov	r3, r0
 8014220:	2b00      	cmp	r3, #0
 8014222:	d013      	beq.n	801424c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014224:	4b3f      	ldr	r3, [pc, #252]	@ (8014324 <xQueueGenericSend+0x200>)
 8014226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801422a:	601a      	str	r2, [r3, #0]
 801422c:	f3bf 8f4f 	dsb	sy
 8014230:	f3bf 8f6f 	isb	sy
 8014234:	e00a      	b.n	801424c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014238:	2b00      	cmp	r3, #0
 801423a:	d007      	beq.n	801424c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801423c:	4b39      	ldr	r3, [pc, #228]	@ (8014324 <xQueueGenericSend+0x200>)
 801423e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014242:	601a      	str	r2, [r3, #0]
 8014244:	f3bf 8f4f 	dsb	sy
 8014248:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801424c:	f002 fac6 	bl	80167dc <vPortExitCritical>
				return pdPASS;
 8014250:	2301      	movs	r3, #1
 8014252:	e063      	b.n	801431c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d103      	bne.n	8014262 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801425a:	f002 fabf 	bl	80167dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801425e:	2300      	movs	r3, #0
 8014260:	e05c      	b.n	801431c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014264:	2b00      	cmp	r3, #0
 8014266:	d106      	bne.n	8014276 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014268:	f107 0314 	add.w	r3, r7, #20
 801426c:	4618      	mov	r0, r3
 801426e:	f001 f967 	bl	8015540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014272:	2301      	movs	r3, #1
 8014274:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014276:	f002 fab1 	bl	80167dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801427a:	f000 fecf 	bl	801501c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801427e:	f002 fa7b 	bl	8016778 <vPortEnterCritical>
 8014282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014284:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014288:	b25b      	sxtb	r3, r3
 801428a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801428e:	d103      	bne.n	8014298 <xQueueGenericSend+0x174>
 8014290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014292:	2200      	movs	r2, #0
 8014294:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801429a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801429e:	b25b      	sxtb	r3, r3
 80142a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142a4:	d103      	bne.n	80142ae <xQueueGenericSend+0x18a>
 80142a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142a8:	2200      	movs	r2, #0
 80142aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80142ae:	f002 fa95 	bl	80167dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80142b2:	1d3a      	adds	r2, r7, #4
 80142b4:	f107 0314 	add.w	r3, r7, #20
 80142b8:	4611      	mov	r1, r2
 80142ba:	4618      	mov	r0, r3
 80142bc:	f001 f956 	bl	801556c <xTaskCheckForTimeOut>
 80142c0:	4603      	mov	r3, r0
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d124      	bne.n	8014310 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80142c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80142c8:	f000 fbce 	bl	8014a68 <prvIsQueueFull>
 80142cc:	4603      	mov	r3, r0
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d018      	beq.n	8014304 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80142d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142d4:	3310      	adds	r3, #16
 80142d6:	687a      	ldr	r2, [r7, #4]
 80142d8:	4611      	mov	r1, r2
 80142da:	4618      	mov	r0, r3
 80142dc:	f001 f87a 	bl	80153d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80142e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80142e2:	f000 fb59 	bl	8014998 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80142e6:	f000 fea7 	bl	8015038 <xTaskResumeAll>
 80142ea:	4603      	mov	r3, r0
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	f47f af7c 	bne.w	80141ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80142f2:	4b0c      	ldr	r3, [pc, #48]	@ (8014324 <xQueueGenericSend+0x200>)
 80142f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80142f8:	601a      	str	r2, [r3, #0]
 80142fa:	f3bf 8f4f 	dsb	sy
 80142fe:	f3bf 8f6f 	isb	sy
 8014302:	e772      	b.n	80141ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014306:	f000 fb47 	bl	8014998 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801430a:	f000 fe95 	bl	8015038 <xTaskResumeAll>
 801430e:	e76c      	b.n	80141ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014310:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014312:	f000 fb41 	bl	8014998 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014316:	f000 fe8f 	bl	8015038 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801431a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801431c:	4618      	mov	r0, r3
 801431e:	3738      	adds	r7, #56	@ 0x38
 8014320:	46bd      	mov	sp, r7
 8014322:	bd80      	pop	{r7, pc}
 8014324:	e000ed04 	.word	0xe000ed04

08014328 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b090      	sub	sp, #64	@ 0x40
 801432c:	af00      	add	r7, sp, #0
 801432e:	60f8      	str	r0, [r7, #12]
 8014330:	60b9      	str	r1, [r7, #8]
 8014332:	607a      	str	r2, [r7, #4]
 8014334:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 801433a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801433c:	2b00      	cmp	r3, #0
 801433e:	d10b      	bne.n	8014358 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8014340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014344:	f383 8811 	msr	BASEPRI, r3
 8014348:	f3bf 8f6f 	isb	sy
 801434c:	f3bf 8f4f 	dsb	sy
 8014350:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014352:	bf00      	nop
 8014354:	bf00      	nop
 8014356:	e7fd      	b.n	8014354 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014358:	68bb      	ldr	r3, [r7, #8]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d103      	bne.n	8014366 <xQueueGenericSendFromISR+0x3e>
 801435e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014362:	2b00      	cmp	r3, #0
 8014364:	d101      	bne.n	801436a <xQueueGenericSendFromISR+0x42>
 8014366:	2301      	movs	r3, #1
 8014368:	e000      	b.n	801436c <xQueueGenericSendFromISR+0x44>
 801436a:	2300      	movs	r3, #0
 801436c:	2b00      	cmp	r3, #0
 801436e:	d10b      	bne.n	8014388 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8014370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014374:	f383 8811 	msr	BASEPRI, r3
 8014378:	f3bf 8f6f 	isb	sy
 801437c:	f3bf 8f4f 	dsb	sy
 8014380:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014382:	bf00      	nop
 8014384:	bf00      	nop
 8014386:	e7fd      	b.n	8014384 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014388:	683b      	ldr	r3, [r7, #0]
 801438a:	2b02      	cmp	r3, #2
 801438c:	d103      	bne.n	8014396 <xQueueGenericSendFromISR+0x6e>
 801438e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014392:	2b01      	cmp	r3, #1
 8014394:	d101      	bne.n	801439a <xQueueGenericSendFromISR+0x72>
 8014396:	2301      	movs	r3, #1
 8014398:	e000      	b.n	801439c <xQueueGenericSendFromISR+0x74>
 801439a:	2300      	movs	r3, #0
 801439c:	2b00      	cmp	r3, #0
 801439e:	d10b      	bne.n	80143b8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80143a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143a4:	f383 8811 	msr	BASEPRI, r3
 80143a8:	f3bf 8f6f 	isb	sy
 80143ac:	f3bf 8f4f 	dsb	sy
 80143b0:	623b      	str	r3, [r7, #32]
}
 80143b2:	bf00      	nop
 80143b4:	bf00      	nop
 80143b6:	e7fd      	b.n	80143b4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80143b8:	f002 fabe 	bl	8016938 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80143bc:	f3ef 8211 	mrs	r2, BASEPRI
 80143c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143c4:	f383 8811 	msr	BASEPRI, r3
 80143c8:	f3bf 8f6f 	isb	sy
 80143cc:	f3bf 8f4f 	dsb	sy
 80143d0:	61fa      	str	r2, [r7, #28]
 80143d2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80143d4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80143d6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80143d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80143dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80143e0:	429a      	cmp	r2, r3
 80143e2:	d302      	bcc.n	80143ea <xQueueGenericSendFromISR+0xc2>
 80143e4:	683b      	ldr	r3, [r7, #0]
 80143e6:	2b02      	cmp	r3, #2
 80143e8:	d12f      	bne.n	801444a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80143ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80143f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80143f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80143f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80143fa:	683a      	ldr	r2, [r7, #0]
 80143fc:	68b9      	ldr	r1, [r7, #8]
 80143fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014400:	f000 fa3a 	bl	8014878 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014404:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8014408:	f1b3 3fff 	cmp.w	r3, #4294967295
 801440c:	d112      	bne.n	8014434 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801440e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014412:	2b00      	cmp	r3, #0
 8014414:	d016      	beq.n	8014444 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014418:	3324      	adds	r3, #36	@ 0x24
 801441a:	4618      	mov	r0, r3
 801441c:	f001 f82c 	bl	8015478 <xTaskRemoveFromEventList>
 8014420:	4603      	mov	r3, r0
 8014422:	2b00      	cmp	r3, #0
 8014424:	d00e      	beq.n	8014444 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d00b      	beq.n	8014444 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	2201      	movs	r2, #1
 8014430:	601a      	str	r2, [r3, #0]
 8014432:	e007      	b.n	8014444 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014434:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014438:	3301      	adds	r3, #1
 801443a:	b2db      	uxtb	r3, r3
 801443c:	b25a      	sxtb	r2, r3
 801443e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8014444:	2301      	movs	r3, #1
 8014446:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8014448:	e001      	b.n	801444e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801444a:	2300      	movs	r3, #0
 801444c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801444e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014450:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014452:	697b      	ldr	r3, [r7, #20]
 8014454:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014458:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801445a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801445c:	4618      	mov	r0, r3
 801445e:	3740      	adds	r7, #64	@ 0x40
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}

08014464 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b08c      	sub	sp, #48	@ 0x30
 8014468:	af00      	add	r7, sp, #0
 801446a:	60f8      	str	r0, [r7, #12]
 801446c:	60b9      	str	r1, [r7, #8]
 801446e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014470:	2300      	movs	r3, #0
 8014472:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801447a:	2b00      	cmp	r3, #0
 801447c:	d10b      	bne.n	8014496 <xQueueReceive+0x32>
	__asm volatile
 801447e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014482:	f383 8811 	msr	BASEPRI, r3
 8014486:	f3bf 8f6f 	isb	sy
 801448a:	f3bf 8f4f 	dsb	sy
 801448e:	623b      	str	r3, [r7, #32]
}
 8014490:	bf00      	nop
 8014492:	bf00      	nop
 8014494:	e7fd      	b.n	8014492 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014496:	68bb      	ldr	r3, [r7, #8]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d103      	bne.n	80144a4 <xQueueReceive+0x40>
 801449c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d101      	bne.n	80144a8 <xQueueReceive+0x44>
 80144a4:	2301      	movs	r3, #1
 80144a6:	e000      	b.n	80144aa <xQueueReceive+0x46>
 80144a8:	2300      	movs	r3, #0
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d10b      	bne.n	80144c6 <xQueueReceive+0x62>
	__asm volatile
 80144ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144b2:	f383 8811 	msr	BASEPRI, r3
 80144b6:	f3bf 8f6f 	isb	sy
 80144ba:	f3bf 8f4f 	dsb	sy
 80144be:	61fb      	str	r3, [r7, #28]
}
 80144c0:	bf00      	nop
 80144c2:	bf00      	nop
 80144c4:	e7fd      	b.n	80144c2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80144c6:	f001 f9ad 	bl	8015824 <xTaskGetSchedulerState>
 80144ca:	4603      	mov	r3, r0
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d102      	bne.n	80144d6 <xQueueReceive+0x72>
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d101      	bne.n	80144da <xQueueReceive+0x76>
 80144d6:	2301      	movs	r3, #1
 80144d8:	e000      	b.n	80144dc <xQueueReceive+0x78>
 80144da:	2300      	movs	r3, #0
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d10b      	bne.n	80144f8 <xQueueReceive+0x94>
	__asm volatile
 80144e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144e4:	f383 8811 	msr	BASEPRI, r3
 80144e8:	f3bf 8f6f 	isb	sy
 80144ec:	f3bf 8f4f 	dsb	sy
 80144f0:	61bb      	str	r3, [r7, #24]
}
 80144f2:	bf00      	nop
 80144f4:	bf00      	nop
 80144f6:	e7fd      	b.n	80144f4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80144f8:	f002 f93e 	bl	8016778 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80144fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014500:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014504:	2b00      	cmp	r3, #0
 8014506:	d01f      	beq.n	8014548 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014508:	68b9      	ldr	r1, [r7, #8]
 801450a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801450c:	f000 fa1e 	bl	801494c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014512:	1e5a      	subs	r2, r3, #1
 8014514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014516:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801451a:	691b      	ldr	r3, [r3, #16]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d00f      	beq.n	8014540 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014522:	3310      	adds	r3, #16
 8014524:	4618      	mov	r0, r3
 8014526:	f000 ffa7 	bl	8015478 <xTaskRemoveFromEventList>
 801452a:	4603      	mov	r3, r0
 801452c:	2b00      	cmp	r3, #0
 801452e:	d007      	beq.n	8014540 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014530:	4b3c      	ldr	r3, [pc, #240]	@ (8014624 <xQueueReceive+0x1c0>)
 8014532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014536:	601a      	str	r2, [r3, #0]
 8014538:	f3bf 8f4f 	dsb	sy
 801453c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014540:	f002 f94c 	bl	80167dc <vPortExitCritical>
				return pdPASS;
 8014544:	2301      	movs	r3, #1
 8014546:	e069      	b.n	801461c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d103      	bne.n	8014556 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801454e:	f002 f945 	bl	80167dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014552:	2300      	movs	r3, #0
 8014554:	e062      	b.n	801461c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014558:	2b00      	cmp	r3, #0
 801455a:	d106      	bne.n	801456a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801455c:	f107 0310 	add.w	r3, r7, #16
 8014560:	4618      	mov	r0, r3
 8014562:	f000 ffed 	bl	8015540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014566:	2301      	movs	r3, #1
 8014568:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801456a:	f002 f937 	bl	80167dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801456e:	f000 fd55 	bl	801501c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014572:	f002 f901 	bl	8016778 <vPortEnterCritical>
 8014576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014578:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801457c:	b25b      	sxtb	r3, r3
 801457e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014582:	d103      	bne.n	801458c <xQueueReceive+0x128>
 8014584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014586:	2200      	movs	r2, #0
 8014588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801458c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801458e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014592:	b25b      	sxtb	r3, r3
 8014594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014598:	d103      	bne.n	80145a2 <xQueueReceive+0x13e>
 801459a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801459c:	2200      	movs	r2, #0
 801459e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80145a2:	f002 f91b 	bl	80167dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80145a6:	1d3a      	adds	r2, r7, #4
 80145a8:	f107 0310 	add.w	r3, r7, #16
 80145ac:	4611      	mov	r1, r2
 80145ae:	4618      	mov	r0, r3
 80145b0:	f000 ffdc 	bl	801556c <xTaskCheckForTimeOut>
 80145b4:	4603      	mov	r3, r0
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d123      	bne.n	8014602 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80145ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80145bc:	f000 fa3e 	bl	8014a3c <prvIsQueueEmpty>
 80145c0:	4603      	mov	r3, r0
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d017      	beq.n	80145f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80145c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145c8:	3324      	adds	r3, #36	@ 0x24
 80145ca:	687a      	ldr	r2, [r7, #4]
 80145cc:	4611      	mov	r1, r2
 80145ce:	4618      	mov	r0, r3
 80145d0:	f000 ff00 	bl	80153d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80145d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80145d6:	f000 f9df 	bl	8014998 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80145da:	f000 fd2d 	bl	8015038 <xTaskResumeAll>
 80145de:	4603      	mov	r3, r0
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d189      	bne.n	80144f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80145e4:	4b0f      	ldr	r3, [pc, #60]	@ (8014624 <xQueueReceive+0x1c0>)
 80145e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80145ea:	601a      	str	r2, [r3, #0]
 80145ec:	f3bf 8f4f 	dsb	sy
 80145f0:	f3bf 8f6f 	isb	sy
 80145f4:	e780      	b.n	80144f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80145f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80145f8:	f000 f9ce 	bl	8014998 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80145fc:	f000 fd1c 	bl	8015038 <xTaskResumeAll>
 8014600:	e77a      	b.n	80144f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014604:	f000 f9c8 	bl	8014998 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014608:	f000 fd16 	bl	8015038 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801460c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801460e:	f000 fa15 	bl	8014a3c <prvIsQueueEmpty>
 8014612:	4603      	mov	r3, r0
 8014614:	2b00      	cmp	r3, #0
 8014616:	f43f af6f 	beq.w	80144f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801461a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801461c:	4618      	mov	r0, r3
 801461e:	3730      	adds	r7, #48	@ 0x30
 8014620:	46bd      	mov	sp, r7
 8014622:	bd80      	pop	{r7, pc}
 8014624:	e000ed04 	.word	0xe000ed04

08014628 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b08e      	sub	sp, #56	@ 0x38
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]
 8014630:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8014632:	2300      	movs	r3, #0
 8014634:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801463a:	2300      	movs	r3, #0
 801463c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801463e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014640:	2b00      	cmp	r3, #0
 8014642:	d10b      	bne.n	801465c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8014644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014648:	f383 8811 	msr	BASEPRI, r3
 801464c:	f3bf 8f6f 	isb	sy
 8014650:	f3bf 8f4f 	dsb	sy
 8014654:	623b      	str	r3, [r7, #32]
}
 8014656:	bf00      	nop
 8014658:	bf00      	nop
 801465a:	e7fd      	b.n	8014658 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801465c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801465e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014660:	2b00      	cmp	r3, #0
 8014662:	d00b      	beq.n	801467c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8014664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014668:	f383 8811 	msr	BASEPRI, r3
 801466c:	f3bf 8f6f 	isb	sy
 8014670:	f3bf 8f4f 	dsb	sy
 8014674:	61fb      	str	r3, [r7, #28]
}
 8014676:	bf00      	nop
 8014678:	bf00      	nop
 801467a:	e7fd      	b.n	8014678 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801467c:	f001 f8d2 	bl	8015824 <xTaskGetSchedulerState>
 8014680:	4603      	mov	r3, r0
 8014682:	2b00      	cmp	r3, #0
 8014684:	d102      	bne.n	801468c <xQueueSemaphoreTake+0x64>
 8014686:	683b      	ldr	r3, [r7, #0]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d101      	bne.n	8014690 <xQueueSemaphoreTake+0x68>
 801468c:	2301      	movs	r3, #1
 801468e:	e000      	b.n	8014692 <xQueueSemaphoreTake+0x6a>
 8014690:	2300      	movs	r3, #0
 8014692:	2b00      	cmp	r3, #0
 8014694:	d10b      	bne.n	80146ae <xQueueSemaphoreTake+0x86>
	__asm volatile
 8014696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801469a:	f383 8811 	msr	BASEPRI, r3
 801469e:	f3bf 8f6f 	isb	sy
 80146a2:	f3bf 8f4f 	dsb	sy
 80146a6:	61bb      	str	r3, [r7, #24]
}
 80146a8:	bf00      	nop
 80146aa:	bf00      	nop
 80146ac:	e7fd      	b.n	80146aa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80146ae:	f002 f863 	bl	8016778 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80146b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80146b6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80146b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d024      	beq.n	8014708 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80146be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146c0:	1e5a      	subs	r2, r3, #1
 80146c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146c4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80146c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d104      	bne.n	80146d8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80146ce:	f001 fa23 	bl	8015b18 <pvTaskIncrementMutexHeldCount>
 80146d2:	4602      	mov	r2, r0
 80146d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146d6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80146d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146da:	691b      	ldr	r3, [r3, #16]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d00f      	beq.n	8014700 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80146e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146e2:	3310      	adds	r3, #16
 80146e4:	4618      	mov	r0, r3
 80146e6:	f000 fec7 	bl	8015478 <xTaskRemoveFromEventList>
 80146ea:	4603      	mov	r3, r0
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d007      	beq.n	8014700 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80146f0:	4b54      	ldr	r3, [pc, #336]	@ (8014844 <xQueueSemaphoreTake+0x21c>)
 80146f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80146f6:	601a      	str	r2, [r3, #0]
 80146f8:	f3bf 8f4f 	dsb	sy
 80146fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014700:	f002 f86c 	bl	80167dc <vPortExitCritical>
				return pdPASS;
 8014704:	2301      	movs	r3, #1
 8014706:	e098      	b.n	801483a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014708:	683b      	ldr	r3, [r7, #0]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d112      	bne.n	8014734 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801470e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014710:	2b00      	cmp	r3, #0
 8014712:	d00b      	beq.n	801472c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8014714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014718:	f383 8811 	msr	BASEPRI, r3
 801471c:	f3bf 8f6f 	isb	sy
 8014720:	f3bf 8f4f 	dsb	sy
 8014724:	617b      	str	r3, [r7, #20]
}
 8014726:	bf00      	nop
 8014728:	bf00      	nop
 801472a:	e7fd      	b.n	8014728 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801472c:	f002 f856 	bl	80167dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014730:	2300      	movs	r3, #0
 8014732:	e082      	b.n	801483a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014736:	2b00      	cmp	r3, #0
 8014738:	d106      	bne.n	8014748 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801473a:	f107 030c 	add.w	r3, r7, #12
 801473e:	4618      	mov	r0, r3
 8014740:	f000 fefe 	bl	8015540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014744:	2301      	movs	r3, #1
 8014746:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014748:	f002 f848 	bl	80167dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801474c:	f000 fc66 	bl	801501c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014750:	f002 f812 	bl	8016778 <vPortEnterCritical>
 8014754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014756:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801475a:	b25b      	sxtb	r3, r3
 801475c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014760:	d103      	bne.n	801476a <xQueueSemaphoreTake+0x142>
 8014762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014764:	2200      	movs	r2, #0
 8014766:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801476a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801476c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014770:	b25b      	sxtb	r3, r3
 8014772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014776:	d103      	bne.n	8014780 <xQueueSemaphoreTake+0x158>
 8014778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801477a:	2200      	movs	r2, #0
 801477c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014780:	f002 f82c 	bl	80167dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014784:	463a      	mov	r2, r7
 8014786:	f107 030c 	add.w	r3, r7, #12
 801478a:	4611      	mov	r1, r2
 801478c:	4618      	mov	r0, r3
 801478e:	f000 feed 	bl	801556c <xTaskCheckForTimeOut>
 8014792:	4603      	mov	r3, r0
 8014794:	2b00      	cmp	r3, #0
 8014796:	d132      	bne.n	80147fe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014798:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801479a:	f000 f94f 	bl	8014a3c <prvIsQueueEmpty>
 801479e:	4603      	mov	r3, r0
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d026      	beq.n	80147f2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80147a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d109      	bne.n	80147c0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80147ac:	f001 ffe4 	bl	8016778 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80147b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147b2:	689b      	ldr	r3, [r3, #8]
 80147b4:	4618      	mov	r0, r3
 80147b6:	f001 f853 	bl	8015860 <xTaskPriorityInherit>
 80147ba:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80147bc:	f002 f80e 	bl	80167dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80147c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147c2:	3324      	adds	r3, #36	@ 0x24
 80147c4:	683a      	ldr	r2, [r7, #0]
 80147c6:	4611      	mov	r1, r2
 80147c8:	4618      	mov	r0, r3
 80147ca:	f000 fe03 	bl	80153d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80147ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80147d0:	f000 f8e2 	bl	8014998 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80147d4:	f000 fc30 	bl	8015038 <xTaskResumeAll>
 80147d8:	4603      	mov	r3, r0
 80147da:	2b00      	cmp	r3, #0
 80147dc:	f47f af67 	bne.w	80146ae <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80147e0:	4b18      	ldr	r3, [pc, #96]	@ (8014844 <xQueueSemaphoreTake+0x21c>)
 80147e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80147e6:	601a      	str	r2, [r3, #0]
 80147e8:	f3bf 8f4f 	dsb	sy
 80147ec:	f3bf 8f6f 	isb	sy
 80147f0:	e75d      	b.n	80146ae <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80147f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80147f4:	f000 f8d0 	bl	8014998 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80147f8:	f000 fc1e 	bl	8015038 <xTaskResumeAll>
 80147fc:	e757      	b.n	80146ae <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80147fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014800:	f000 f8ca 	bl	8014998 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014804:	f000 fc18 	bl	8015038 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014808:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801480a:	f000 f917 	bl	8014a3c <prvIsQueueEmpty>
 801480e:	4603      	mov	r3, r0
 8014810:	2b00      	cmp	r3, #0
 8014812:	f43f af4c 	beq.w	80146ae <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8014816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014818:	2b00      	cmp	r3, #0
 801481a:	d00d      	beq.n	8014838 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 801481c:	f001 ffac 	bl	8016778 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014820:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014822:	f000 f811 	bl	8014848 <prvGetDisinheritPriorityAfterTimeout>
 8014826:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801482a:	689b      	ldr	r3, [r3, #8]
 801482c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801482e:	4618      	mov	r0, r3
 8014830:	f001 f8ee 	bl	8015a10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014834:	f001 ffd2 	bl	80167dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014838:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801483a:	4618      	mov	r0, r3
 801483c:	3738      	adds	r7, #56	@ 0x38
 801483e:	46bd      	mov	sp, r7
 8014840:	bd80      	pop	{r7, pc}
 8014842:	bf00      	nop
 8014844:	e000ed04 	.word	0xe000ed04

08014848 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014848:	b480      	push	{r7}
 801484a:	b085      	sub	sp, #20
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014854:	2b00      	cmp	r3, #0
 8014856:	d006      	beq.n	8014866 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8014862:	60fb      	str	r3, [r7, #12]
 8014864:	e001      	b.n	801486a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014866:	2300      	movs	r3, #0
 8014868:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801486a:	68fb      	ldr	r3, [r7, #12]
	}
 801486c:	4618      	mov	r0, r3
 801486e:	3714      	adds	r7, #20
 8014870:	46bd      	mov	sp, r7
 8014872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014876:	4770      	bx	lr

08014878 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b086      	sub	sp, #24
 801487c:	af00      	add	r7, sp, #0
 801487e:	60f8      	str	r0, [r7, #12]
 8014880:	60b9      	str	r1, [r7, #8]
 8014882:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014884:	2300      	movs	r3, #0
 8014886:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801488c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014892:	2b00      	cmp	r3, #0
 8014894:	d10d      	bne.n	80148b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d14d      	bne.n	801493a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	689b      	ldr	r3, [r3, #8]
 80148a2:	4618      	mov	r0, r3
 80148a4:	f001 f844 	bl	8015930 <xTaskPriorityDisinherit>
 80148a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	2200      	movs	r2, #0
 80148ae:	609a      	str	r2, [r3, #8]
 80148b0:	e043      	b.n	801493a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d119      	bne.n	80148ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	6858      	ldr	r0, [r3, #4]
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80148c0:	461a      	mov	r2, r3
 80148c2:	68b9      	ldr	r1, [r7, #8]
 80148c4:	f005 ff0b 	bl	801a6de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	685a      	ldr	r2, [r3, #4]
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80148d0:	441a      	add	r2, r3
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	685a      	ldr	r2, [r3, #4]
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	689b      	ldr	r3, [r3, #8]
 80148de:	429a      	cmp	r2, r3
 80148e0:	d32b      	bcc.n	801493a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	681a      	ldr	r2, [r3, #0]
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	605a      	str	r2, [r3, #4]
 80148ea:	e026      	b.n	801493a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	68d8      	ldr	r0, [r3, #12]
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80148f4:	461a      	mov	r2, r3
 80148f6:	68b9      	ldr	r1, [r7, #8]
 80148f8:	f005 fef1 	bl	801a6de <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	68da      	ldr	r2, [r3, #12]
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014904:	425b      	negs	r3, r3
 8014906:	441a      	add	r2, r3
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	68da      	ldr	r2, [r3, #12]
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	429a      	cmp	r2, r3
 8014916:	d207      	bcs.n	8014928 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	689a      	ldr	r2, [r3, #8]
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014920:	425b      	negs	r3, r3
 8014922:	441a      	add	r2, r3
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	2b02      	cmp	r3, #2
 801492c:	d105      	bne.n	801493a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801492e:	693b      	ldr	r3, [r7, #16]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d002      	beq.n	801493a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014934:	693b      	ldr	r3, [r7, #16]
 8014936:	3b01      	subs	r3, #1
 8014938:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801493a:	693b      	ldr	r3, [r7, #16]
 801493c:	1c5a      	adds	r2, r3, #1
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8014942:	697b      	ldr	r3, [r7, #20]
}
 8014944:	4618      	mov	r0, r3
 8014946:	3718      	adds	r7, #24
 8014948:	46bd      	mov	sp, r7
 801494a:	bd80      	pop	{r7, pc}

0801494c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b082      	sub	sp, #8
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
 8014954:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801495a:	2b00      	cmp	r3, #0
 801495c:	d018      	beq.n	8014990 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	68da      	ldr	r2, [r3, #12]
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014966:	441a      	add	r2, r3
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	68da      	ldr	r2, [r3, #12]
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	689b      	ldr	r3, [r3, #8]
 8014974:	429a      	cmp	r2, r3
 8014976:	d303      	bcc.n	8014980 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	681a      	ldr	r2, [r3, #0]
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	68d9      	ldr	r1, [r3, #12]
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014988:	461a      	mov	r2, r3
 801498a:	6838      	ldr	r0, [r7, #0]
 801498c:	f005 fea7 	bl	801a6de <memcpy>
	}
}
 8014990:	bf00      	nop
 8014992:	3708      	adds	r7, #8
 8014994:	46bd      	mov	sp, r7
 8014996:	bd80      	pop	{r7, pc}

08014998 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014998:	b580      	push	{r7, lr}
 801499a:	b084      	sub	sp, #16
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80149a0:	f001 feea 	bl	8016778 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80149aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80149ac:	e011      	b.n	80149d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d012      	beq.n	80149dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	3324      	adds	r3, #36	@ 0x24
 80149ba:	4618      	mov	r0, r3
 80149bc:	f000 fd5c 	bl	8015478 <xTaskRemoveFromEventList>
 80149c0:	4603      	mov	r3, r0
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d001      	beq.n	80149ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80149c6:	f000 fe35 	bl	8015634 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80149ca:	7bfb      	ldrb	r3, [r7, #15]
 80149cc:	3b01      	subs	r3, #1
 80149ce:	b2db      	uxtb	r3, r3
 80149d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80149d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	dce9      	bgt.n	80149ae <prvUnlockQueue+0x16>
 80149da:	e000      	b.n	80149de <prvUnlockQueue+0x46>
					break;
 80149dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	22ff      	movs	r2, #255	@ 0xff
 80149e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80149e6:	f001 fef9 	bl	80167dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80149ea:	f001 fec5 	bl	8016778 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80149f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80149f6:	e011      	b.n	8014a1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	691b      	ldr	r3, [r3, #16]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d012      	beq.n	8014a26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	3310      	adds	r3, #16
 8014a04:	4618      	mov	r0, r3
 8014a06:	f000 fd37 	bl	8015478 <xTaskRemoveFromEventList>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d001      	beq.n	8014a14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014a10:	f000 fe10 	bl	8015634 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014a14:	7bbb      	ldrb	r3, [r7, #14]
 8014a16:	3b01      	subs	r3, #1
 8014a18:	b2db      	uxtb	r3, r3
 8014a1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014a1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	dce9      	bgt.n	80149f8 <prvUnlockQueue+0x60>
 8014a24:	e000      	b.n	8014a28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014a26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	22ff      	movs	r2, #255	@ 0xff
 8014a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8014a30:	f001 fed4 	bl	80167dc <vPortExitCritical>
}
 8014a34:	bf00      	nop
 8014a36:	3710      	adds	r7, #16
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd80      	pop	{r7, pc}

08014a3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b084      	sub	sp, #16
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014a44:	f001 fe98 	bl	8016778 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d102      	bne.n	8014a56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014a50:	2301      	movs	r3, #1
 8014a52:	60fb      	str	r3, [r7, #12]
 8014a54:	e001      	b.n	8014a5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014a56:	2300      	movs	r3, #0
 8014a58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014a5a:	f001 febf 	bl	80167dc <vPortExitCritical>

	return xReturn;
 8014a5e:	68fb      	ldr	r3, [r7, #12]
}
 8014a60:	4618      	mov	r0, r3
 8014a62:	3710      	adds	r7, #16
 8014a64:	46bd      	mov	sp, r7
 8014a66:	bd80      	pop	{r7, pc}

08014a68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014a68:	b580      	push	{r7, lr}
 8014a6a:	b084      	sub	sp, #16
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014a70:	f001 fe82 	bl	8016778 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a7c:	429a      	cmp	r2, r3
 8014a7e:	d102      	bne.n	8014a86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014a80:	2301      	movs	r3, #1
 8014a82:	60fb      	str	r3, [r7, #12]
 8014a84:	e001      	b.n	8014a8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014a86:	2300      	movs	r3, #0
 8014a88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014a8a:	f001 fea7 	bl	80167dc <vPortExitCritical>

	return xReturn;
 8014a8e:	68fb      	ldr	r3, [r7, #12]
}
 8014a90:	4618      	mov	r0, r3
 8014a92:	3710      	adds	r7, #16
 8014a94:	46bd      	mov	sp, r7
 8014a96:	bd80      	pop	{r7, pc}

08014a98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014a98:	b480      	push	{r7}
 8014a9a:	b085      	sub	sp, #20
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	6078      	str	r0, [r7, #4]
 8014aa0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	60fb      	str	r3, [r7, #12]
 8014aa6:	e014      	b.n	8014ad2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014aa8:	4a0f      	ldr	r2, [pc, #60]	@ (8014ae8 <vQueueAddToRegistry+0x50>)
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d10b      	bne.n	8014acc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014ab4:	490c      	ldr	r1, [pc, #48]	@ (8014ae8 <vQueueAddToRegistry+0x50>)
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	683a      	ldr	r2, [r7, #0]
 8014aba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014abe:	4a0a      	ldr	r2, [pc, #40]	@ (8014ae8 <vQueueAddToRegistry+0x50>)
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	00db      	lsls	r3, r3, #3
 8014ac4:	4413      	add	r3, r2
 8014ac6:	687a      	ldr	r2, [r7, #4]
 8014ac8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014aca:	e006      	b.n	8014ada <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	3301      	adds	r3, #1
 8014ad0:	60fb      	str	r3, [r7, #12]
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	2b07      	cmp	r3, #7
 8014ad6:	d9e7      	bls.n	8014aa8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014ad8:	bf00      	nop
 8014ada:	bf00      	nop
 8014adc:	3714      	adds	r7, #20
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae4:	4770      	bx	lr
 8014ae6:	bf00      	nop
 8014ae8:	200046f0 	.word	0x200046f0

08014aec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b086      	sub	sp, #24
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	60f8      	str	r0, [r7, #12]
 8014af4:	60b9      	str	r1, [r7, #8]
 8014af6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014afc:	f001 fe3c 	bl	8016778 <vPortEnterCritical>
 8014b00:	697b      	ldr	r3, [r7, #20]
 8014b02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014b06:	b25b      	sxtb	r3, r3
 8014b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b0c:	d103      	bne.n	8014b16 <vQueueWaitForMessageRestricted+0x2a>
 8014b0e:	697b      	ldr	r3, [r7, #20]
 8014b10:	2200      	movs	r2, #0
 8014b12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014b16:	697b      	ldr	r3, [r7, #20]
 8014b18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014b1c:	b25b      	sxtb	r3, r3
 8014b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b22:	d103      	bne.n	8014b2c <vQueueWaitForMessageRestricted+0x40>
 8014b24:	697b      	ldr	r3, [r7, #20]
 8014b26:	2200      	movs	r2, #0
 8014b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014b2c:	f001 fe56 	bl	80167dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014b30:	697b      	ldr	r3, [r7, #20]
 8014b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d106      	bne.n	8014b46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014b38:	697b      	ldr	r3, [r7, #20]
 8014b3a:	3324      	adds	r3, #36	@ 0x24
 8014b3c:	687a      	ldr	r2, [r7, #4]
 8014b3e:	68b9      	ldr	r1, [r7, #8]
 8014b40:	4618      	mov	r0, r3
 8014b42:	f000 fc6d 	bl	8015420 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014b46:	6978      	ldr	r0, [r7, #20]
 8014b48:	f7ff ff26 	bl	8014998 <prvUnlockQueue>
	}
 8014b4c:	bf00      	nop
 8014b4e:	3718      	adds	r7, #24
 8014b50:	46bd      	mov	sp, r7
 8014b52:	bd80      	pop	{r7, pc}

08014b54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b08e      	sub	sp, #56	@ 0x38
 8014b58:	af04      	add	r7, sp, #16
 8014b5a:	60f8      	str	r0, [r7, #12]
 8014b5c:	60b9      	str	r1, [r7, #8]
 8014b5e:	607a      	str	r2, [r7, #4]
 8014b60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d10b      	bne.n	8014b80 <xTaskCreateStatic+0x2c>
	__asm volatile
 8014b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b6c:	f383 8811 	msr	BASEPRI, r3
 8014b70:	f3bf 8f6f 	isb	sy
 8014b74:	f3bf 8f4f 	dsb	sy
 8014b78:	623b      	str	r3, [r7, #32]
}
 8014b7a:	bf00      	nop
 8014b7c:	bf00      	nop
 8014b7e:	e7fd      	b.n	8014b7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d10b      	bne.n	8014b9e <xTaskCreateStatic+0x4a>
	__asm volatile
 8014b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b8a:	f383 8811 	msr	BASEPRI, r3
 8014b8e:	f3bf 8f6f 	isb	sy
 8014b92:	f3bf 8f4f 	dsb	sy
 8014b96:	61fb      	str	r3, [r7, #28]
}
 8014b98:	bf00      	nop
 8014b9a:	bf00      	nop
 8014b9c:	e7fd      	b.n	8014b9a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014b9e:	23a8      	movs	r3, #168	@ 0xa8
 8014ba0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014ba2:	693b      	ldr	r3, [r7, #16]
 8014ba4:	2ba8      	cmp	r3, #168	@ 0xa8
 8014ba6:	d00b      	beq.n	8014bc0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8014ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bac:	f383 8811 	msr	BASEPRI, r3
 8014bb0:	f3bf 8f6f 	isb	sy
 8014bb4:	f3bf 8f4f 	dsb	sy
 8014bb8:	61bb      	str	r3, [r7, #24]
}
 8014bba:	bf00      	nop
 8014bbc:	bf00      	nop
 8014bbe:	e7fd      	b.n	8014bbc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014bc0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d01e      	beq.n	8014c06 <xTaskCreateStatic+0xb2>
 8014bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d01b      	beq.n	8014c06 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bd0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014bd6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bda:	2202      	movs	r2, #2
 8014bdc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014be0:	2300      	movs	r3, #0
 8014be2:	9303      	str	r3, [sp, #12]
 8014be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014be6:	9302      	str	r3, [sp, #8]
 8014be8:	f107 0314 	add.w	r3, r7, #20
 8014bec:	9301      	str	r3, [sp, #4]
 8014bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bf0:	9300      	str	r3, [sp, #0]
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	687a      	ldr	r2, [r7, #4]
 8014bf6:	68b9      	ldr	r1, [r7, #8]
 8014bf8:	68f8      	ldr	r0, [r7, #12]
 8014bfa:	f000 f851 	bl	8014ca0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014bfe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014c00:	f000 f8f6 	bl	8014df0 <prvAddNewTaskToReadyList>
 8014c04:	e001      	b.n	8014c0a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8014c06:	2300      	movs	r3, #0
 8014c08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014c0a:	697b      	ldr	r3, [r7, #20]
	}
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	3728      	adds	r7, #40	@ 0x28
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bd80      	pop	{r7, pc}

08014c14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b08c      	sub	sp, #48	@ 0x30
 8014c18:	af04      	add	r7, sp, #16
 8014c1a:	60f8      	str	r0, [r7, #12]
 8014c1c:	60b9      	str	r1, [r7, #8]
 8014c1e:	603b      	str	r3, [r7, #0]
 8014c20:	4613      	mov	r3, r2
 8014c22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014c24:	88fb      	ldrh	r3, [r7, #6]
 8014c26:	009b      	lsls	r3, r3, #2
 8014c28:	4618      	mov	r0, r3
 8014c2a:	f001 fec7 	bl	80169bc <pvPortMalloc>
 8014c2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014c30:	697b      	ldr	r3, [r7, #20]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d00e      	beq.n	8014c54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014c36:	20a8      	movs	r0, #168	@ 0xa8
 8014c38:	f001 fec0 	bl	80169bc <pvPortMalloc>
 8014c3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014c3e:	69fb      	ldr	r3, [r7, #28]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d003      	beq.n	8014c4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014c44:	69fb      	ldr	r3, [r7, #28]
 8014c46:	697a      	ldr	r2, [r7, #20]
 8014c48:	631a      	str	r2, [r3, #48]	@ 0x30
 8014c4a:	e005      	b.n	8014c58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014c4c:	6978      	ldr	r0, [r7, #20]
 8014c4e:	f001 ff83 	bl	8016b58 <vPortFree>
 8014c52:	e001      	b.n	8014c58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014c54:	2300      	movs	r3, #0
 8014c56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014c58:	69fb      	ldr	r3, [r7, #28]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d017      	beq.n	8014c8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014c5e:	69fb      	ldr	r3, [r7, #28]
 8014c60:	2200      	movs	r2, #0
 8014c62:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014c66:	88fa      	ldrh	r2, [r7, #6]
 8014c68:	2300      	movs	r3, #0
 8014c6a:	9303      	str	r3, [sp, #12]
 8014c6c:	69fb      	ldr	r3, [r7, #28]
 8014c6e:	9302      	str	r3, [sp, #8]
 8014c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c72:	9301      	str	r3, [sp, #4]
 8014c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c76:	9300      	str	r3, [sp, #0]
 8014c78:	683b      	ldr	r3, [r7, #0]
 8014c7a:	68b9      	ldr	r1, [r7, #8]
 8014c7c:	68f8      	ldr	r0, [r7, #12]
 8014c7e:	f000 f80f 	bl	8014ca0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014c82:	69f8      	ldr	r0, [r7, #28]
 8014c84:	f000 f8b4 	bl	8014df0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014c88:	2301      	movs	r3, #1
 8014c8a:	61bb      	str	r3, [r7, #24]
 8014c8c:	e002      	b.n	8014c94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014c94:	69bb      	ldr	r3, [r7, #24]
	}
 8014c96:	4618      	mov	r0, r3
 8014c98:	3720      	adds	r7, #32
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd80      	pop	{r7, pc}
	...

08014ca0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b088      	sub	sp, #32
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	60f8      	str	r0, [r7, #12]
 8014ca8:	60b9      	str	r1, [r7, #8]
 8014caa:	607a      	str	r2, [r7, #4]
 8014cac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cb0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	009b      	lsls	r3, r3, #2
 8014cb6:	461a      	mov	r2, r3
 8014cb8:	21a5      	movs	r1, #165	@ 0xa5
 8014cba:	f005 fc33 	bl	801a524 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8014cc8:	3b01      	subs	r3, #1
 8014cca:	009b      	lsls	r3, r3, #2
 8014ccc:	4413      	add	r3, r2
 8014cce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014cd0:	69bb      	ldr	r3, [r7, #24]
 8014cd2:	f023 0307 	bic.w	r3, r3, #7
 8014cd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014cd8:	69bb      	ldr	r3, [r7, #24]
 8014cda:	f003 0307 	and.w	r3, r3, #7
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d00b      	beq.n	8014cfa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8014ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ce6:	f383 8811 	msr	BASEPRI, r3
 8014cea:	f3bf 8f6f 	isb	sy
 8014cee:	f3bf 8f4f 	dsb	sy
 8014cf2:	617b      	str	r3, [r7, #20]
}
 8014cf4:	bf00      	nop
 8014cf6:	bf00      	nop
 8014cf8:	e7fd      	b.n	8014cf6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014cfa:	68bb      	ldr	r3, [r7, #8]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d01f      	beq.n	8014d40 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014d00:	2300      	movs	r3, #0
 8014d02:	61fb      	str	r3, [r7, #28]
 8014d04:	e012      	b.n	8014d2c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014d06:	68ba      	ldr	r2, [r7, #8]
 8014d08:	69fb      	ldr	r3, [r7, #28]
 8014d0a:	4413      	add	r3, r2
 8014d0c:	7819      	ldrb	r1, [r3, #0]
 8014d0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014d10:	69fb      	ldr	r3, [r7, #28]
 8014d12:	4413      	add	r3, r2
 8014d14:	3334      	adds	r3, #52	@ 0x34
 8014d16:	460a      	mov	r2, r1
 8014d18:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014d1a:	68ba      	ldr	r2, [r7, #8]
 8014d1c:	69fb      	ldr	r3, [r7, #28]
 8014d1e:	4413      	add	r3, r2
 8014d20:	781b      	ldrb	r3, [r3, #0]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d006      	beq.n	8014d34 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014d26:	69fb      	ldr	r3, [r7, #28]
 8014d28:	3301      	adds	r3, #1
 8014d2a:	61fb      	str	r3, [r7, #28]
 8014d2c:	69fb      	ldr	r3, [r7, #28]
 8014d2e:	2b0f      	cmp	r3, #15
 8014d30:	d9e9      	bls.n	8014d06 <prvInitialiseNewTask+0x66>
 8014d32:	e000      	b.n	8014d36 <prvInitialiseNewTask+0x96>
			{
				break;
 8014d34:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d38:	2200      	movs	r2, #0
 8014d3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014d3e:	e003      	b.n	8014d48 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d42:	2200      	movs	r2, #0
 8014d44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d4a:	2b37      	cmp	r3, #55	@ 0x37
 8014d4c:	d901      	bls.n	8014d52 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014d4e:	2337      	movs	r3, #55	@ 0x37
 8014d50:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014d56:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014d5c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d60:	2200      	movs	r2, #0
 8014d62:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d66:	3304      	adds	r3, #4
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f7fe ffcf 	bl	8013d0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d70:	3318      	adds	r3, #24
 8014d72:	4618      	mov	r0, r3
 8014d74:	f7fe ffca 	bl	8013d0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014d7c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d86:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014d8c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d90:	2200      	movs	r2, #0
 8014d92:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d98:	2200      	movs	r2, #0
 8014d9a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8014d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014da0:	3354      	adds	r3, #84	@ 0x54
 8014da2:	224c      	movs	r2, #76	@ 0x4c
 8014da4:	2100      	movs	r1, #0
 8014da6:	4618      	mov	r0, r3
 8014da8:	f005 fbbc 	bl	801a524 <memset>
 8014dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dae:	4a0d      	ldr	r2, [pc, #52]	@ (8014de4 <prvInitialiseNewTask+0x144>)
 8014db0:	659a      	str	r2, [r3, #88]	@ 0x58
 8014db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014db4:	4a0c      	ldr	r2, [pc, #48]	@ (8014de8 <prvInitialiseNewTask+0x148>)
 8014db6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dba:	4a0c      	ldr	r2, [pc, #48]	@ (8014dec <prvInitialiseNewTask+0x14c>)
 8014dbc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014dbe:	683a      	ldr	r2, [r7, #0]
 8014dc0:	68f9      	ldr	r1, [r7, #12]
 8014dc2:	69b8      	ldr	r0, [r7, #24]
 8014dc4:	f001 fbaa 	bl	801651c <pxPortInitialiseStack>
 8014dc8:	4602      	mov	r2, r0
 8014dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dcc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d002      	beq.n	8014dda <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014dd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014dda:	bf00      	nop
 8014ddc:	3720      	adds	r7, #32
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd80      	pop	{r7, pc}
 8014de2:	bf00      	nop
 8014de4:	2000a564 	.word	0x2000a564
 8014de8:	2000a5cc 	.word	0x2000a5cc
 8014dec:	2000a634 	.word	0x2000a634

08014df0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b082      	sub	sp, #8
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014df8:	f001 fcbe 	bl	8016778 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8014eb4 <prvAddNewTaskToReadyList+0xc4>)
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	3301      	adds	r3, #1
 8014e02:	4a2c      	ldr	r2, [pc, #176]	@ (8014eb4 <prvAddNewTaskToReadyList+0xc4>)
 8014e04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014e06:	4b2c      	ldr	r3, [pc, #176]	@ (8014eb8 <prvAddNewTaskToReadyList+0xc8>)
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d109      	bne.n	8014e22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014e0e:	4a2a      	ldr	r2, [pc, #168]	@ (8014eb8 <prvAddNewTaskToReadyList+0xc8>)
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014e14:	4b27      	ldr	r3, [pc, #156]	@ (8014eb4 <prvAddNewTaskToReadyList+0xc4>)
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	2b01      	cmp	r3, #1
 8014e1a:	d110      	bne.n	8014e3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014e1c:	f000 fc2e 	bl	801567c <prvInitialiseTaskLists>
 8014e20:	e00d      	b.n	8014e3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014e22:	4b26      	ldr	r3, [pc, #152]	@ (8014ebc <prvAddNewTaskToReadyList+0xcc>)
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d109      	bne.n	8014e3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014e2a:	4b23      	ldr	r3, [pc, #140]	@ (8014eb8 <prvAddNewTaskToReadyList+0xc8>)
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e34:	429a      	cmp	r2, r3
 8014e36:	d802      	bhi.n	8014e3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014e38:	4a1f      	ldr	r2, [pc, #124]	@ (8014eb8 <prvAddNewTaskToReadyList+0xc8>)
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014e3e:	4b20      	ldr	r3, [pc, #128]	@ (8014ec0 <prvAddNewTaskToReadyList+0xd0>)
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	3301      	adds	r3, #1
 8014e44:	4a1e      	ldr	r2, [pc, #120]	@ (8014ec0 <prvAddNewTaskToReadyList+0xd0>)
 8014e46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014e48:	4b1d      	ldr	r3, [pc, #116]	@ (8014ec0 <prvAddNewTaskToReadyList+0xd0>)
 8014e4a:	681a      	ldr	r2, [r3, #0]
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e54:	4b1b      	ldr	r3, [pc, #108]	@ (8014ec4 <prvAddNewTaskToReadyList+0xd4>)
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	429a      	cmp	r2, r3
 8014e5a:	d903      	bls.n	8014e64 <prvAddNewTaskToReadyList+0x74>
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e60:	4a18      	ldr	r2, [pc, #96]	@ (8014ec4 <prvAddNewTaskToReadyList+0xd4>)
 8014e62:	6013      	str	r3, [r2, #0]
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e68:	4613      	mov	r3, r2
 8014e6a:	009b      	lsls	r3, r3, #2
 8014e6c:	4413      	add	r3, r2
 8014e6e:	009b      	lsls	r3, r3, #2
 8014e70:	4a15      	ldr	r2, [pc, #84]	@ (8014ec8 <prvAddNewTaskToReadyList+0xd8>)
 8014e72:	441a      	add	r2, r3
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	3304      	adds	r3, #4
 8014e78:	4619      	mov	r1, r3
 8014e7a:	4610      	mov	r0, r2
 8014e7c:	f7fe ff53 	bl	8013d26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014e80:	f001 fcac 	bl	80167dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014e84:	4b0d      	ldr	r3, [pc, #52]	@ (8014ebc <prvAddNewTaskToReadyList+0xcc>)
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d00e      	beq.n	8014eaa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8014eb8 <prvAddNewTaskToReadyList+0xc8>)
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e96:	429a      	cmp	r2, r3
 8014e98:	d207      	bcs.n	8014eaa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8014ecc <prvAddNewTaskToReadyList+0xdc>)
 8014e9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014ea0:	601a      	str	r2, [r3, #0]
 8014ea2:	f3bf 8f4f 	dsb	sy
 8014ea6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014eaa:	bf00      	nop
 8014eac:	3708      	adds	r7, #8
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	bd80      	pop	{r7, pc}
 8014eb2:	bf00      	nop
 8014eb4:	20004c04 	.word	0x20004c04
 8014eb8:	20004730 	.word	0x20004730
 8014ebc:	20004c10 	.word	0x20004c10
 8014ec0:	20004c20 	.word	0x20004c20
 8014ec4:	20004c0c 	.word	0x20004c0c
 8014ec8:	20004734 	.word	0x20004734
 8014ecc:	e000ed04 	.word	0xe000ed04

08014ed0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b084      	sub	sp, #16
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014ed8:	2300      	movs	r3, #0
 8014eda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d018      	beq.n	8014f14 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014ee2:	4b14      	ldr	r3, [pc, #80]	@ (8014f34 <vTaskDelay+0x64>)
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d00b      	beq.n	8014f02 <vTaskDelay+0x32>
	__asm volatile
 8014eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014eee:	f383 8811 	msr	BASEPRI, r3
 8014ef2:	f3bf 8f6f 	isb	sy
 8014ef6:	f3bf 8f4f 	dsb	sy
 8014efa:	60bb      	str	r3, [r7, #8]
}
 8014efc:	bf00      	nop
 8014efe:	bf00      	nop
 8014f00:	e7fd      	b.n	8014efe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014f02:	f000 f88b 	bl	801501c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014f06:	2100      	movs	r1, #0
 8014f08:	6878      	ldr	r0, [r7, #4]
 8014f0a:	f000 fefb 	bl	8015d04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014f0e:	f000 f893 	bl	8015038 <xTaskResumeAll>
 8014f12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d107      	bne.n	8014f2a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8014f1a:	4b07      	ldr	r3, [pc, #28]	@ (8014f38 <vTaskDelay+0x68>)
 8014f1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014f20:	601a      	str	r2, [r3, #0]
 8014f22:	f3bf 8f4f 	dsb	sy
 8014f26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014f2a:	bf00      	nop
 8014f2c:	3710      	adds	r7, #16
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	bd80      	pop	{r7, pc}
 8014f32:	bf00      	nop
 8014f34:	20004c2c 	.word	0x20004c2c
 8014f38:	e000ed04 	.word	0xe000ed04

08014f3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b08a      	sub	sp, #40	@ 0x28
 8014f40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014f42:	2300      	movs	r3, #0
 8014f44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014f46:	2300      	movs	r3, #0
 8014f48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014f4a:	463a      	mov	r2, r7
 8014f4c:	1d39      	adds	r1, r7, #4
 8014f4e:	f107 0308 	add.w	r3, r7, #8
 8014f52:	4618      	mov	r0, r3
 8014f54:	f7fe fe86 	bl	8013c64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014f58:	6839      	ldr	r1, [r7, #0]
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	68ba      	ldr	r2, [r7, #8]
 8014f5e:	9202      	str	r2, [sp, #8]
 8014f60:	9301      	str	r3, [sp, #4]
 8014f62:	2300      	movs	r3, #0
 8014f64:	9300      	str	r3, [sp, #0]
 8014f66:	2300      	movs	r3, #0
 8014f68:	460a      	mov	r2, r1
 8014f6a:	4924      	ldr	r1, [pc, #144]	@ (8014ffc <vTaskStartScheduler+0xc0>)
 8014f6c:	4824      	ldr	r0, [pc, #144]	@ (8015000 <vTaskStartScheduler+0xc4>)
 8014f6e:	f7ff fdf1 	bl	8014b54 <xTaskCreateStatic>
 8014f72:	4603      	mov	r3, r0
 8014f74:	4a23      	ldr	r2, [pc, #140]	@ (8015004 <vTaskStartScheduler+0xc8>)
 8014f76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014f78:	4b22      	ldr	r3, [pc, #136]	@ (8015004 <vTaskStartScheduler+0xc8>)
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d002      	beq.n	8014f86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014f80:	2301      	movs	r3, #1
 8014f82:	617b      	str	r3, [r7, #20]
 8014f84:	e001      	b.n	8014f8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014f86:	2300      	movs	r3, #0
 8014f88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014f8a:	697b      	ldr	r3, [r7, #20]
 8014f8c:	2b01      	cmp	r3, #1
 8014f8e:	d102      	bne.n	8014f96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014f90:	f000 ff0c 	bl	8015dac <xTimerCreateTimerTask>
 8014f94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014f96:	697b      	ldr	r3, [r7, #20]
 8014f98:	2b01      	cmp	r3, #1
 8014f9a:	d11b      	bne.n	8014fd4 <vTaskStartScheduler+0x98>
	__asm volatile
 8014f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fa0:	f383 8811 	msr	BASEPRI, r3
 8014fa4:	f3bf 8f6f 	isb	sy
 8014fa8:	f3bf 8f4f 	dsb	sy
 8014fac:	613b      	str	r3, [r7, #16]
}
 8014fae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014fb0:	4b15      	ldr	r3, [pc, #84]	@ (8015008 <vTaskStartScheduler+0xcc>)
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	3354      	adds	r3, #84	@ 0x54
 8014fb6:	4a15      	ldr	r2, [pc, #84]	@ (801500c <vTaskStartScheduler+0xd0>)
 8014fb8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014fba:	4b15      	ldr	r3, [pc, #84]	@ (8015010 <vTaskStartScheduler+0xd4>)
 8014fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8014fc0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014fc2:	4b14      	ldr	r3, [pc, #80]	@ (8015014 <vTaskStartScheduler+0xd8>)
 8014fc4:	2201      	movs	r2, #1
 8014fc6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014fc8:	4b13      	ldr	r3, [pc, #76]	@ (8015018 <vTaskStartScheduler+0xdc>)
 8014fca:	2200      	movs	r2, #0
 8014fcc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014fce:	f001 fb2f 	bl	8016630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014fd2:	e00f      	b.n	8014ff4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014fd4:	697b      	ldr	r3, [r7, #20]
 8014fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fda:	d10b      	bne.n	8014ff4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8014fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fe0:	f383 8811 	msr	BASEPRI, r3
 8014fe4:	f3bf 8f6f 	isb	sy
 8014fe8:	f3bf 8f4f 	dsb	sy
 8014fec:	60fb      	str	r3, [r7, #12]
}
 8014fee:	bf00      	nop
 8014ff0:	bf00      	nop
 8014ff2:	e7fd      	b.n	8014ff0 <vTaskStartScheduler+0xb4>
}
 8014ff4:	bf00      	nop
 8014ff6:	3718      	adds	r7, #24
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	bd80      	pop	{r7, pc}
 8014ffc:	0802017c 	.word	0x0802017c
 8015000:	0801564d 	.word	0x0801564d
 8015004:	20004c28 	.word	0x20004c28
 8015008:	20004730 	.word	0x20004730
 801500c:	20000160 	.word	0x20000160
 8015010:	20004c24 	.word	0x20004c24
 8015014:	20004c10 	.word	0x20004c10
 8015018:	20004c08 	.word	0x20004c08

0801501c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801501c:	b480      	push	{r7}
 801501e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015020:	4b04      	ldr	r3, [pc, #16]	@ (8015034 <vTaskSuspendAll+0x18>)
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	3301      	adds	r3, #1
 8015026:	4a03      	ldr	r2, [pc, #12]	@ (8015034 <vTaskSuspendAll+0x18>)
 8015028:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801502a:	bf00      	nop
 801502c:	46bd      	mov	sp, r7
 801502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015032:	4770      	bx	lr
 8015034:	20004c2c 	.word	0x20004c2c

08015038 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015038:	b580      	push	{r7, lr}
 801503a:	b084      	sub	sp, #16
 801503c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801503e:	2300      	movs	r3, #0
 8015040:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015042:	2300      	movs	r3, #0
 8015044:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015046:	4b42      	ldr	r3, [pc, #264]	@ (8015150 <xTaskResumeAll+0x118>)
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d10b      	bne.n	8015066 <xTaskResumeAll+0x2e>
	__asm volatile
 801504e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015052:	f383 8811 	msr	BASEPRI, r3
 8015056:	f3bf 8f6f 	isb	sy
 801505a:	f3bf 8f4f 	dsb	sy
 801505e:	603b      	str	r3, [r7, #0]
}
 8015060:	bf00      	nop
 8015062:	bf00      	nop
 8015064:	e7fd      	b.n	8015062 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015066:	f001 fb87 	bl	8016778 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801506a:	4b39      	ldr	r3, [pc, #228]	@ (8015150 <xTaskResumeAll+0x118>)
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	3b01      	subs	r3, #1
 8015070:	4a37      	ldr	r2, [pc, #220]	@ (8015150 <xTaskResumeAll+0x118>)
 8015072:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015074:	4b36      	ldr	r3, [pc, #216]	@ (8015150 <xTaskResumeAll+0x118>)
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d162      	bne.n	8015142 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801507c:	4b35      	ldr	r3, [pc, #212]	@ (8015154 <xTaskResumeAll+0x11c>)
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d05e      	beq.n	8015142 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015084:	e02f      	b.n	80150e6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015086:	4b34      	ldr	r3, [pc, #208]	@ (8015158 <xTaskResumeAll+0x120>)
 8015088:	68db      	ldr	r3, [r3, #12]
 801508a:	68db      	ldr	r3, [r3, #12]
 801508c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	3318      	adds	r3, #24
 8015092:	4618      	mov	r0, r3
 8015094:	f7fe fea4 	bl	8013de0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	3304      	adds	r3, #4
 801509c:	4618      	mov	r0, r3
 801509e:	f7fe fe9f 	bl	8013de0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150a6:	4b2d      	ldr	r3, [pc, #180]	@ (801515c <xTaskResumeAll+0x124>)
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	429a      	cmp	r2, r3
 80150ac:	d903      	bls.n	80150b6 <xTaskResumeAll+0x7e>
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150b2:	4a2a      	ldr	r2, [pc, #168]	@ (801515c <xTaskResumeAll+0x124>)
 80150b4:	6013      	str	r3, [r2, #0]
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150ba:	4613      	mov	r3, r2
 80150bc:	009b      	lsls	r3, r3, #2
 80150be:	4413      	add	r3, r2
 80150c0:	009b      	lsls	r3, r3, #2
 80150c2:	4a27      	ldr	r2, [pc, #156]	@ (8015160 <xTaskResumeAll+0x128>)
 80150c4:	441a      	add	r2, r3
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	3304      	adds	r3, #4
 80150ca:	4619      	mov	r1, r3
 80150cc:	4610      	mov	r0, r2
 80150ce:	f7fe fe2a 	bl	8013d26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150d6:	4b23      	ldr	r3, [pc, #140]	@ (8015164 <xTaskResumeAll+0x12c>)
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150dc:	429a      	cmp	r2, r3
 80150de:	d302      	bcc.n	80150e6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80150e0:	4b21      	ldr	r3, [pc, #132]	@ (8015168 <xTaskResumeAll+0x130>)
 80150e2:	2201      	movs	r2, #1
 80150e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80150e6:	4b1c      	ldr	r3, [pc, #112]	@ (8015158 <xTaskResumeAll+0x120>)
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d1cb      	bne.n	8015086 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d001      	beq.n	80150f8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80150f4:	f000 fb66 	bl	80157c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80150f8:	4b1c      	ldr	r3, [pc, #112]	@ (801516c <xTaskResumeAll+0x134>)
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d010      	beq.n	8015126 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015104:	f000 f846 	bl	8015194 <xTaskIncrementTick>
 8015108:	4603      	mov	r3, r0
 801510a:	2b00      	cmp	r3, #0
 801510c:	d002      	beq.n	8015114 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801510e:	4b16      	ldr	r3, [pc, #88]	@ (8015168 <xTaskResumeAll+0x130>)
 8015110:	2201      	movs	r2, #1
 8015112:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	3b01      	subs	r3, #1
 8015118:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d1f1      	bne.n	8015104 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8015120:	4b12      	ldr	r3, [pc, #72]	@ (801516c <xTaskResumeAll+0x134>)
 8015122:	2200      	movs	r2, #0
 8015124:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015126:	4b10      	ldr	r3, [pc, #64]	@ (8015168 <xTaskResumeAll+0x130>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d009      	beq.n	8015142 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801512e:	2301      	movs	r3, #1
 8015130:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015132:	4b0f      	ldr	r3, [pc, #60]	@ (8015170 <xTaskResumeAll+0x138>)
 8015134:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015138:	601a      	str	r2, [r3, #0]
 801513a:	f3bf 8f4f 	dsb	sy
 801513e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015142:	f001 fb4b 	bl	80167dc <vPortExitCritical>

	return xAlreadyYielded;
 8015146:	68bb      	ldr	r3, [r7, #8]
}
 8015148:	4618      	mov	r0, r3
 801514a:	3710      	adds	r7, #16
 801514c:	46bd      	mov	sp, r7
 801514e:	bd80      	pop	{r7, pc}
 8015150:	20004c2c 	.word	0x20004c2c
 8015154:	20004c04 	.word	0x20004c04
 8015158:	20004bc4 	.word	0x20004bc4
 801515c:	20004c0c 	.word	0x20004c0c
 8015160:	20004734 	.word	0x20004734
 8015164:	20004730 	.word	0x20004730
 8015168:	20004c18 	.word	0x20004c18
 801516c:	20004c14 	.word	0x20004c14
 8015170:	e000ed04 	.word	0xe000ed04

08015174 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015174:	b480      	push	{r7}
 8015176:	b083      	sub	sp, #12
 8015178:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801517a:	4b05      	ldr	r3, [pc, #20]	@ (8015190 <xTaskGetTickCount+0x1c>)
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015180:	687b      	ldr	r3, [r7, #4]
}
 8015182:	4618      	mov	r0, r3
 8015184:	370c      	adds	r7, #12
 8015186:	46bd      	mov	sp, r7
 8015188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518c:	4770      	bx	lr
 801518e:	bf00      	nop
 8015190:	20004c08 	.word	0x20004c08

08015194 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b086      	sub	sp, #24
 8015198:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801519a:	2300      	movs	r3, #0
 801519c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801519e:	4b4f      	ldr	r3, [pc, #316]	@ (80152dc <xTaskIncrementTick+0x148>)
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	f040 8090 	bne.w	80152c8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80151a8:	4b4d      	ldr	r3, [pc, #308]	@ (80152e0 <xTaskIncrementTick+0x14c>)
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	3301      	adds	r3, #1
 80151ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80151b0:	4a4b      	ldr	r2, [pc, #300]	@ (80152e0 <xTaskIncrementTick+0x14c>)
 80151b2:	693b      	ldr	r3, [r7, #16]
 80151b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80151b6:	693b      	ldr	r3, [r7, #16]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d121      	bne.n	8015200 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80151bc:	4b49      	ldr	r3, [pc, #292]	@ (80152e4 <xTaskIncrementTick+0x150>)
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d00b      	beq.n	80151de <xTaskIncrementTick+0x4a>
	__asm volatile
 80151c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151ca:	f383 8811 	msr	BASEPRI, r3
 80151ce:	f3bf 8f6f 	isb	sy
 80151d2:	f3bf 8f4f 	dsb	sy
 80151d6:	603b      	str	r3, [r7, #0]
}
 80151d8:	bf00      	nop
 80151da:	bf00      	nop
 80151dc:	e7fd      	b.n	80151da <xTaskIncrementTick+0x46>
 80151de:	4b41      	ldr	r3, [pc, #260]	@ (80152e4 <xTaskIncrementTick+0x150>)
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	60fb      	str	r3, [r7, #12]
 80151e4:	4b40      	ldr	r3, [pc, #256]	@ (80152e8 <xTaskIncrementTick+0x154>)
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	4a3e      	ldr	r2, [pc, #248]	@ (80152e4 <xTaskIncrementTick+0x150>)
 80151ea:	6013      	str	r3, [r2, #0]
 80151ec:	4a3e      	ldr	r2, [pc, #248]	@ (80152e8 <xTaskIncrementTick+0x154>)
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	6013      	str	r3, [r2, #0]
 80151f2:	4b3e      	ldr	r3, [pc, #248]	@ (80152ec <xTaskIncrementTick+0x158>)
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	3301      	adds	r3, #1
 80151f8:	4a3c      	ldr	r2, [pc, #240]	@ (80152ec <xTaskIncrementTick+0x158>)
 80151fa:	6013      	str	r3, [r2, #0]
 80151fc:	f000 fae2 	bl	80157c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015200:	4b3b      	ldr	r3, [pc, #236]	@ (80152f0 <xTaskIncrementTick+0x15c>)
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	693a      	ldr	r2, [r7, #16]
 8015206:	429a      	cmp	r2, r3
 8015208:	d349      	bcc.n	801529e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801520a:	4b36      	ldr	r3, [pc, #216]	@ (80152e4 <xTaskIncrementTick+0x150>)
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d104      	bne.n	801521e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015214:	4b36      	ldr	r3, [pc, #216]	@ (80152f0 <xTaskIncrementTick+0x15c>)
 8015216:	f04f 32ff 	mov.w	r2, #4294967295
 801521a:	601a      	str	r2, [r3, #0]
					break;
 801521c:	e03f      	b.n	801529e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801521e:	4b31      	ldr	r3, [pc, #196]	@ (80152e4 <xTaskIncrementTick+0x150>)
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	68db      	ldr	r3, [r3, #12]
 8015224:	68db      	ldr	r3, [r3, #12]
 8015226:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015228:	68bb      	ldr	r3, [r7, #8]
 801522a:	685b      	ldr	r3, [r3, #4]
 801522c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801522e:	693a      	ldr	r2, [r7, #16]
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	429a      	cmp	r2, r3
 8015234:	d203      	bcs.n	801523e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015236:	4a2e      	ldr	r2, [pc, #184]	@ (80152f0 <xTaskIncrementTick+0x15c>)
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801523c:	e02f      	b.n	801529e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801523e:	68bb      	ldr	r3, [r7, #8]
 8015240:	3304      	adds	r3, #4
 8015242:	4618      	mov	r0, r3
 8015244:	f7fe fdcc 	bl	8013de0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015248:	68bb      	ldr	r3, [r7, #8]
 801524a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801524c:	2b00      	cmp	r3, #0
 801524e:	d004      	beq.n	801525a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015250:	68bb      	ldr	r3, [r7, #8]
 8015252:	3318      	adds	r3, #24
 8015254:	4618      	mov	r0, r3
 8015256:	f7fe fdc3 	bl	8013de0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801525a:	68bb      	ldr	r3, [r7, #8]
 801525c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801525e:	4b25      	ldr	r3, [pc, #148]	@ (80152f4 <xTaskIncrementTick+0x160>)
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	429a      	cmp	r2, r3
 8015264:	d903      	bls.n	801526e <xTaskIncrementTick+0xda>
 8015266:	68bb      	ldr	r3, [r7, #8]
 8015268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801526a:	4a22      	ldr	r2, [pc, #136]	@ (80152f4 <xTaskIncrementTick+0x160>)
 801526c:	6013      	str	r3, [r2, #0]
 801526e:	68bb      	ldr	r3, [r7, #8]
 8015270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015272:	4613      	mov	r3, r2
 8015274:	009b      	lsls	r3, r3, #2
 8015276:	4413      	add	r3, r2
 8015278:	009b      	lsls	r3, r3, #2
 801527a:	4a1f      	ldr	r2, [pc, #124]	@ (80152f8 <xTaskIncrementTick+0x164>)
 801527c:	441a      	add	r2, r3
 801527e:	68bb      	ldr	r3, [r7, #8]
 8015280:	3304      	adds	r3, #4
 8015282:	4619      	mov	r1, r3
 8015284:	4610      	mov	r0, r2
 8015286:	f7fe fd4e 	bl	8013d26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801528a:	68bb      	ldr	r3, [r7, #8]
 801528c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801528e:	4b1b      	ldr	r3, [pc, #108]	@ (80152fc <xTaskIncrementTick+0x168>)
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015294:	429a      	cmp	r2, r3
 8015296:	d3b8      	bcc.n	801520a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015298:	2301      	movs	r3, #1
 801529a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801529c:	e7b5      	b.n	801520a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801529e:	4b17      	ldr	r3, [pc, #92]	@ (80152fc <xTaskIncrementTick+0x168>)
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80152a4:	4914      	ldr	r1, [pc, #80]	@ (80152f8 <xTaskIncrementTick+0x164>)
 80152a6:	4613      	mov	r3, r2
 80152a8:	009b      	lsls	r3, r3, #2
 80152aa:	4413      	add	r3, r2
 80152ac:	009b      	lsls	r3, r3, #2
 80152ae:	440b      	add	r3, r1
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	2b01      	cmp	r3, #1
 80152b4:	d901      	bls.n	80152ba <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80152b6:	2301      	movs	r3, #1
 80152b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80152ba:	4b11      	ldr	r3, [pc, #68]	@ (8015300 <xTaskIncrementTick+0x16c>)
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d007      	beq.n	80152d2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80152c2:	2301      	movs	r3, #1
 80152c4:	617b      	str	r3, [r7, #20]
 80152c6:	e004      	b.n	80152d2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80152c8:	4b0e      	ldr	r3, [pc, #56]	@ (8015304 <xTaskIncrementTick+0x170>)
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	3301      	adds	r3, #1
 80152ce:	4a0d      	ldr	r2, [pc, #52]	@ (8015304 <xTaskIncrementTick+0x170>)
 80152d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80152d2:	697b      	ldr	r3, [r7, #20]
}
 80152d4:	4618      	mov	r0, r3
 80152d6:	3718      	adds	r7, #24
 80152d8:	46bd      	mov	sp, r7
 80152da:	bd80      	pop	{r7, pc}
 80152dc:	20004c2c 	.word	0x20004c2c
 80152e0:	20004c08 	.word	0x20004c08
 80152e4:	20004bbc 	.word	0x20004bbc
 80152e8:	20004bc0 	.word	0x20004bc0
 80152ec:	20004c1c 	.word	0x20004c1c
 80152f0:	20004c24 	.word	0x20004c24
 80152f4:	20004c0c 	.word	0x20004c0c
 80152f8:	20004734 	.word	0x20004734
 80152fc:	20004730 	.word	0x20004730
 8015300:	20004c18 	.word	0x20004c18
 8015304:	20004c14 	.word	0x20004c14

08015308 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015308:	b480      	push	{r7}
 801530a:	b085      	sub	sp, #20
 801530c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801530e:	4b2b      	ldr	r3, [pc, #172]	@ (80153bc <vTaskSwitchContext+0xb4>)
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d003      	beq.n	801531e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015316:	4b2a      	ldr	r3, [pc, #168]	@ (80153c0 <vTaskSwitchContext+0xb8>)
 8015318:	2201      	movs	r2, #1
 801531a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801531c:	e047      	b.n	80153ae <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 801531e:	4b28      	ldr	r3, [pc, #160]	@ (80153c0 <vTaskSwitchContext+0xb8>)
 8015320:	2200      	movs	r2, #0
 8015322:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015324:	4b27      	ldr	r3, [pc, #156]	@ (80153c4 <vTaskSwitchContext+0xbc>)
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	60fb      	str	r3, [r7, #12]
 801532a:	e011      	b.n	8015350 <vTaskSwitchContext+0x48>
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	2b00      	cmp	r3, #0
 8015330:	d10b      	bne.n	801534a <vTaskSwitchContext+0x42>
	__asm volatile
 8015332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015336:	f383 8811 	msr	BASEPRI, r3
 801533a:	f3bf 8f6f 	isb	sy
 801533e:	f3bf 8f4f 	dsb	sy
 8015342:	607b      	str	r3, [r7, #4]
}
 8015344:	bf00      	nop
 8015346:	bf00      	nop
 8015348:	e7fd      	b.n	8015346 <vTaskSwitchContext+0x3e>
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	3b01      	subs	r3, #1
 801534e:	60fb      	str	r3, [r7, #12]
 8015350:	491d      	ldr	r1, [pc, #116]	@ (80153c8 <vTaskSwitchContext+0xc0>)
 8015352:	68fa      	ldr	r2, [r7, #12]
 8015354:	4613      	mov	r3, r2
 8015356:	009b      	lsls	r3, r3, #2
 8015358:	4413      	add	r3, r2
 801535a:	009b      	lsls	r3, r3, #2
 801535c:	440b      	add	r3, r1
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d0e3      	beq.n	801532c <vTaskSwitchContext+0x24>
 8015364:	68fa      	ldr	r2, [r7, #12]
 8015366:	4613      	mov	r3, r2
 8015368:	009b      	lsls	r3, r3, #2
 801536a:	4413      	add	r3, r2
 801536c:	009b      	lsls	r3, r3, #2
 801536e:	4a16      	ldr	r2, [pc, #88]	@ (80153c8 <vTaskSwitchContext+0xc0>)
 8015370:	4413      	add	r3, r2
 8015372:	60bb      	str	r3, [r7, #8]
 8015374:	68bb      	ldr	r3, [r7, #8]
 8015376:	685b      	ldr	r3, [r3, #4]
 8015378:	685a      	ldr	r2, [r3, #4]
 801537a:	68bb      	ldr	r3, [r7, #8]
 801537c:	605a      	str	r2, [r3, #4]
 801537e:	68bb      	ldr	r3, [r7, #8]
 8015380:	685a      	ldr	r2, [r3, #4]
 8015382:	68bb      	ldr	r3, [r7, #8]
 8015384:	3308      	adds	r3, #8
 8015386:	429a      	cmp	r2, r3
 8015388:	d104      	bne.n	8015394 <vTaskSwitchContext+0x8c>
 801538a:	68bb      	ldr	r3, [r7, #8]
 801538c:	685b      	ldr	r3, [r3, #4]
 801538e:	685a      	ldr	r2, [r3, #4]
 8015390:	68bb      	ldr	r3, [r7, #8]
 8015392:	605a      	str	r2, [r3, #4]
 8015394:	68bb      	ldr	r3, [r7, #8]
 8015396:	685b      	ldr	r3, [r3, #4]
 8015398:	68db      	ldr	r3, [r3, #12]
 801539a:	4a0c      	ldr	r2, [pc, #48]	@ (80153cc <vTaskSwitchContext+0xc4>)
 801539c:	6013      	str	r3, [r2, #0]
 801539e:	4a09      	ldr	r2, [pc, #36]	@ (80153c4 <vTaskSwitchContext+0xbc>)
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80153a4:	4b09      	ldr	r3, [pc, #36]	@ (80153cc <vTaskSwitchContext+0xc4>)
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	3354      	adds	r3, #84	@ 0x54
 80153aa:	4a09      	ldr	r2, [pc, #36]	@ (80153d0 <vTaskSwitchContext+0xc8>)
 80153ac:	6013      	str	r3, [r2, #0]
}
 80153ae:	bf00      	nop
 80153b0:	3714      	adds	r7, #20
 80153b2:	46bd      	mov	sp, r7
 80153b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b8:	4770      	bx	lr
 80153ba:	bf00      	nop
 80153bc:	20004c2c 	.word	0x20004c2c
 80153c0:	20004c18 	.word	0x20004c18
 80153c4:	20004c0c 	.word	0x20004c0c
 80153c8:	20004734 	.word	0x20004734
 80153cc:	20004730 	.word	0x20004730
 80153d0:	20000160 	.word	0x20000160

080153d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80153d4:	b580      	push	{r7, lr}
 80153d6:	b084      	sub	sp, #16
 80153d8:	af00      	add	r7, sp, #0
 80153da:	6078      	str	r0, [r7, #4]
 80153dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d10b      	bne.n	80153fc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80153e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153e8:	f383 8811 	msr	BASEPRI, r3
 80153ec:	f3bf 8f6f 	isb	sy
 80153f0:	f3bf 8f4f 	dsb	sy
 80153f4:	60fb      	str	r3, [r7, #12]
}
 80153f6:	bf00      	nop
 80153f8:	bf00      	nop
 80153fa:	e7fd      	b.n	80153f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80153fc:	4b07      	ldr	r3, [pc, #28]	@ (801541c <vTaskPlaceOnEventList+0x48>)
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	3318      	adds	r3, #24
 8015402:	4619      	mov	r1, r3
 8015404:	6878      	ldr	r0, [r7, #4]
 8015406:	f7fe fcb2 	bl	8013d6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801540a:	2101      	movs	r1, #1
 801540c:	6838      	ldr	r0, [r7, #0]
 801540e:	f000 fc79 	bl	8015d04 <prvAddCurrentTaskToDelayedList>
}
 8015412:	bf00      	nop
 8015414:	3710      	adds	r7, #16
 8015416:	46bd      	mov	sp, r7
 8015418:	bd80      	pop	{r7, pc}
 801541a:	bf00      	nop
 801541c:	20004730 	.word	0x20004730

08015420 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015420:	b580      	push	{r7, lr}
 8015422:	b086      	sub	sp, #24
 8015424:	af00      	add	r7, sp, #0
 8015426:	60f8      	str	r0, [r7, #12]
 8015428:	60b9      	str	r1, [r7, #8]
 801542a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d10b      	bne.n	801544a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8015432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015436:	f383 8811 	msr	BASEPRI, r3
 801543a:	f3bf 8f6f 	isb	sy
 801543e:	f3bf 8f4f 	dsb	sy
 8015442:	617b      	str	r3, [r7, #20]
}
 8015444:	bf00      	nop
 8015446:	bf00      	nop
 8015448:	e7fd      	b.n	8015446 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801544a:	4b0a      	ldr	r3, [pc, #40]	@ (8015474 <vTaskPlaceOnEventListRestricted+0x54>)
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	3318      	adds	r3, #24
 8015450:	4619      	mov	r1, r3
 8015452:	68f8      	ldr	r0, [r7, #12]
 8015454:	f7fe fc67 	bl	8013d26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d002      	beq.n	8015464 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801545e:	f04f 33ff 	mov.w	r3, #4294967295
 8015462:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015464:	6879      	ldr	r1, [r7, #4]
 8015466:	68b8      	ldr	r0, [r7, #8]
 8015468:	f000 fc4c 	bl	8015d04 <prvAddCurrentTaskToDelayedList>
	}
 801546c:	bf00      	nop
 801546e:	3718      	adds	r7, #24
 8015470:	46bd      	mov	sp, r7
 8015472:	bd80      	pop	{r7, pc}
 8015474:	20004730 	.word	0x20004730

08015478 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b086      	sub	sp, #24
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	68db      	ldr	r3, [r3, #12]
 8015484:	68db      	ldr	r3, [r3, #12]
 8015486:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015488:	693b      	ldr	r3, [r7, #16]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d10b      	bne.n	80154a6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801548e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015492:	f383 8811 	msr	BASEPRI, r3
 8015496:	f3bf 8f6f 	isb	sy
 801549a:	f3bf 8f4f 	dsb	sy
 801549e:	60fb      	str	r3, [r7, #12]
}
 80154a0:	bf00      	nop
 80154a2:	bf00      	nop
 80154a4:	e7fd      	b.n	80154a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80154a6:	693b      	ldr	r3, [r7, #16]
 80154a8:	3318      	adds	r3, #24
 80154aa:	4618      	mov	r0, r3
 80154ac:	f7fe fc98 	bl	8013de0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80154b0:	4b1d      	ldr	r3, [pc, #116]	@ (8015528 <xTaskRemoveFromEventList+0xb0>)
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d11d      	bne.n	80154f4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80154b8:	693b      	ldr	r3, [r7, #16]
 80154ba:	3304      	adds	r3, #4
 80154bc:	4618      	mov	r0, r3
 80154be:	f7fe fc8f 	bl	8013de0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80154c2:	693b      	ldr	r3, [r7, #16]
 80154c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80154c6:	4b19      	ldr	r3, [pc, #100]	@ (801552c <xTaskRemoveFromEventList+0xb4>)
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	429a      	cmp	r2, r3
 80154cc:	d903      	bls.n	80154d6 <xTaskRemoveFromEventList+0x5e>
 80154ce:	693b      	ldr	r3, [r7, #16]
 80154d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154d2:	4a16      	ldr	r2, [pc, #88]	@ (801552c <xTaskRemoveFromEventList+0xb4>)
 80154d4:	6013      	str	r3, [r2, #0]
 80154d6:	693b      	ldr	r3, [r7, #16]
 80154d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80154da:	4613      	mov	r3, r2
 80154dc:	009b      	lsls	r3, r3, #2
 80154de:	4413      	add	r3, r2
 80154e0:	009b      	lsls	r3, r3, #2
 80154e2:	4a13      	ldr	r2, [pc, #76]	@ (8015530 <xTaskRemoveFromEventList+0xb8>)
 80154e4:	441a      	add	r2, r3
 80154e6:	693b      	ldr	r3, [r7, #16]
 80154e8:	3304      	adds	r3, #4
 80154ea:	4619      	mov	r1, r3
 80154ec:	4610      	mov	r0, r2
 80154ee:	f7fe fc1a 	bl	8013d26 <vListInsertEnd>
 80154f2:	e005      	b.n	8015500 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80154f4:	693b      	ldr	r3, [r7, #16]
 80154f6:	3318      	adds	r3, #24
 80154f8:	4619      	mov	r1, r3
 80154fa:	480e      	ldr	r0, [pc, #56]	@ (8015534 <xTaskRemoveFromEventList+0xbc>)
 80154fc:	f7fe fc13 	bl	8013d26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015500:	693b      	ldr	r3, [r7, #16]
 8015502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015504:	4b0c      	ldr	r3, [pc, #48]	@ (8015538 <xTaskRemoveFromEventList+0xc0>)
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801550a:	429a      	cmp	r2, r3
 801550c:	d905      	bls.n	801551a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801550e:	2301      	movs	r3, #1
 8015510:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015512:	4b0a      	ldr	r3, [pc, #40]	@ (801553c <xTaskRemoveFromEventList+0xc4>)
 8015514:	2201      	movs	r2, #1
 8015516:	601a      	str	r2, [r3, #0]
 8015518:	e001      	b.n	801551e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801551a:	2300      	movs	r3, #0
 801551c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801551e:	697b      	ldr	r3, [r7, #20]
}
 8015520:	4618      	mov	r0, r3
 8015522:	3718      	adds	r7, #24
 8015524:	46bd      	mov	sp, r7
 8015526:	bd80      	pop	{r7, pc}
 8015528:	20004c2c 	.word	0x20004c2c
 801552c:	20004c0c 	.word	0x20004c0c
 8015530:	20004734 	.word	0x20004734
 8015534:	20004bc4 	.word	0x20004bc4
 8015538:	20004730 	.word	0x20004730
 801553c:	20004c18 	.word	0x20004c18

08015540 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015540:	b480      	push	{r7}
 8015542:	b083      	sub	sp, #12
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015548:	4b06      	ldr	r3, [pc, #24]	@ (8015564 <vTaskInternalSetTimeOutState+0x24>)
 801554a:	681a      	ldr	r2, [r3, #0]
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015550:	4b05      	ldr	r3, [pc, #20]	@ (8015568 <vTaskInternalSetTimeOutState+0x28>)
 8015552:	681a      	ldr	r2, [r3, #0]
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	605a      	str	r2, [r3, #4]
}
 8015558:	bf00      	nop
 801555a:	370c      	adds	r7, #12
 801555c:	46bd      	mov	sp, r7
 801555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015562:	4770      	bx	lr
 8015564:	20004c1c 	.word	0x20004c1c
 8015568:	20004c08 	.word	0x20004c08

0801556c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801556c:	b580      	push	{r7, lr}
 801556e:	b088      	sub	sp, #32
 8015570:	af00      	add	r7, sp, #0
 8015572:	6078      	str	r0, [r7, #4]
 8015574:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d10b      	bne.n	8015594 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 801557c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015580:	f383 8811 	msr	BASEPRI, r3
 8015584:	f3bf 8f6f 	isb	sy
 8015588:	f3bf 8f4f 	dsb	sy
 801558c:	613b      	str	r3, [r7, #16]
}
 801558e:	bf00      	nop
 8015590:	bf00      	nop
 8015592:	e7fd      	b.n	8015590 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015594:	683b      	ldr	r3, [r7, #0]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d10b      	bne.n	80155b2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801559a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801559e:	f383 8811 	msr	BASEPRI, r3
 80155a2:	f3bf 8f6f 	isb	sy
 80155a6:	f3bf 8f4f 	dsb	sy
 80155aa:	60fb      	str	r3, [r7, #12]
}
 80155ac:	bf00      	nop
 80155ae:	bf00      	nop
 80155b0:	e7fd      	b.n	80155ae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80155b2:	f001 f8e1 	bl	8016778 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80155b6:	4b1d      	ldr	r3, [pc, #116]	@ (801562c <xTaskCheckForTimeOut+0xc0>)
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	685b      	ldr	r3, [r3, #4]
 80155c0:	69ba      	ldr	r2, [r7, #24]
 80155c2:	1ad3      	subs	r3, r2, r3
 80155c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80155c6:	683b      	ldr	r3, [r7, #0]
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155ce:	d102      	bne.n	80155d6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80155d0:	2300      	movs	r3, #0
 80155d2:	61fb      	str	r3, [r7, #28]
 80155d4:	e023      	b.n	801561e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	681a      	ldr	r2, [r3, #0]
 80155da:	4b15      	ldr	r3, [pc, #84]	@ (8015630 <xTaskCheckForTimeOut+0xc4>)
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	429a      	cmp	r2, r3
 80155e0:	d007      	beq.n	80155f2 <xTaskCheckForTimeOut+0x86>
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	685b      	ldr	r3, [r3, #4]
 80155e6:	69ba      	ldr	r2, [r7, #24]
 80155e8:	429a      	cmp	r2, r3
 80155ea:	d302      	bcc.n	80155f2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80155ec:	2301      	movs	r3, #1
 80155ee:	61fb      	str	r3, [r7, #28]
 80155f0:	e015      	b.n	801561e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	697a      	ldr	r2, [r7, #20]
 80155f8:	429a      	cmp	r2, r3
 80155fa:	d20b      	bcs.n	8015614 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80155fc:	683b      	ldr	r3, [r7, #0]
 80155fe:	681a      	ldr	r2, [r3, #0]
 8015600:	697b      	ldr	r3, [r7, #20]
 8015602:	1ad2      	subs	r2, r2, r3
 8015604:	683b      	ldr	r3, [r7, #0]
 8015606:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015608:	6878      	ldr	r0, [r7, #4]
 801560a:	f7ff ff99 	bl	8015540 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801560e:	2300      	movs	r3, #0
 8015610:	61fb      	str	r3, [r7, #28]
 8015612:	e004      	b.n	801561e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8015614:	683b      	ldr	r3, [r7, #0]
 8015616:	2200      	movs	r2, #0
 8015618:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801561a:	2301      	movs	r3, #1
 801561c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801561e:	f001 f8dd 	bl	80167dc <vPortExitCritical>

	return xReturn;
 8015622:	69fb      	ldr	r3, [r7, #28]
}
 8015624:	4618      	mov	r0, r3
 8015626:	3720      	adds	r7, #32
 8015628:	46bd      	mov	sp, r7
 801562a:	bd80      	pop	{r7, pc}
 801562c:	20004c08 	.word	0x20004c08
 8015630:	20004c1c 	.word	0x20004c1c

08015634 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015634:	b480      	push	{r7}
 8015636:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015638:	4b03      	ldr	r3, [pc, #12]	@ (8015648 <vTaskMissedYield+0x14>)
 801563a:	2201      	movs	r2, #1
 801563c:	601a      	str	r2, [r3, #0]
}
 801563e:	bf00      	nop
 8015640:	46bd      	mov	sp, r7
 8015642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015646:	4770      	bx	lr
 8015648:	20004c18 	.word	0x20004c18

0801564c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801564c:	b580      	push	{r7, lr}
 801564e:	b082      	sub	sp, #8
 8015650:	af00      	add	r7, sp, #0
 8015652:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015654:	f000 f852 	bl	80156fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015658:	4b06      	ldr	r3, [pc, #24]	@ (8015674 <prvIdleTask+0x28>)
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	2b01      	cmp	r3, #1
 801565e:	d9f9      	bls.n	8015654 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015660:	4b05      	ldr	r3, [pc, #20]	@ (8015678 <prvIdleTask+0x2c>)
 8015662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015666:	601a      	str	r2, [r3, #0]
 8015668:	f3bf 8f4f 	dsb	sy
 801566c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015670:	e7f0      	b.n	8015654 <prvIdleTask+0x8>
 8015672:	bf00      	nop
 8015674:	20004734 	.word	0x20004734
 8015678:	e000ed04 	.word	0xe000ed04

0801567c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b082      	sub	sp, #8
 8015680:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015682:	2300      	movs	r3, #0
 8015684:	607b      	str	r3, [r7, #4]
 8015686:	e00c      	b.n	80156a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015688:	687a      	ldr	r2, [r7, #4]
 801568a:	4613      	mov	r3, r2
 801568c:	009b      	lsls	r3, r3, #2
 801568e:	4413      	add	r3, r2
 8015690:	009b      	lsls	r3, r3, #2
 8015692:	4a12      	ldr	r2, [pc, #72]	@ (80156dc <prvInitialiseTaskLists+0x60>)
 8015694:	4413      	add	r3, r2
 8015696:	4618      	mov	r0, r3
 8015698:	f7fe fb18 	bl	8013ccc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	3301      	adds	r3, #1
 80156a0:	607b      	str	r3, [r7, #4]
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	2b37      	cmp	r3, #55	@ 0x37
 80156a6:	d9ef      	bls.n	8015688 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80156a8:	480d      	ldr	r0, [pc, #52]	@ (80156e0 <prvInitialiseTaskLists+0x64>)
 80156aa:	f7fe fb0f 	bl	8013ccc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80156ae:	480d      	ldr	r0, [pc, #52]	@ (80156e4 <prvInitialiseTaskLists+0x68>)
 80156b0:	f7fe fb0c 	bl	8013ccc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80156b4:	480c      	ldr	r0, [pc, #48]	@ (80156e8 <prvInitialiseTaskLists+0x6c>)
 80156b6:	f7fe fb09 	bl	8013ccc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80156ba:	480c      	ldr	r0, [pc, #48]	@ (80156ec <prvInitialiseTaskLists+0x70>)
 80156bc:	f7fe fb06 	bl	8013ccc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80156c0:	480b      	ldr	r0, [pc, #44]	@ (80156f0 <prvInitialiseTaskLists+0x74>)
 80156c2:	f7fe fb03 	bl	8013ccc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80156c6:	4b0b      	ldr	r3, [pc, #44]	@ (80156f4 <prvInitialiseTaskLists+0x78>)
 80156c8:	4a05      	ldr	r2, [pc, #20]	@ (80156e0 <prvInitialiseTaskLists+0x64>)
 80156ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80156cc:	4b0a      	ldr	r3, [pc, #40]	@ (80156f8 <prvInitialiseTaskLists+0x7c>)
 80156ce:	4a05      	ldr	r2, [pc, #20]	@ (80156e4 <prvInitialiseTaskLists+0x68>)
 80156d0:	601a      	str	r2, [r3, #0]
}
 80156d2:	bf00      	nop
 80156d4:	3708      	adds	r7, #8
 80156d6:	46bd      	mov	sp, r7
 80156d8:	bd80      	pop	{r7, pc}
 80156da:	bf00      	nop
 80156dc:	20004734 	.word	0x20004734
 80156e0:	20004b94 	.word	0x20004b94
 80156e4:	20004ba8 	.word	0x20004ba8
 80156e8:	20004bc4 	.word	0x20004bc4
 80156ec:	20004bd8 	.word	0x20004bd8
 80156f0:	20004bf0 	.word	0x20004bf0
 80156f4:	20004bbc 	.word	0x20004bbc
 80156f8:	20004bc0 	.word	0x20004bc0

080156fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b082      	sub	sp, #8
 8015700:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015702:	e019      	b.n	8015738 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015704:	f001 f838 	bl	8016778 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015708:	4b10      	ldr	r3, [pc, #64]	@ (801574c <prvCheckTasksWaitingTermination+0x50>)
 801570a:	68db      	ldr	r3, [r3, #12]
 801570c:	68db      	ldr	r3, [r3, #12]
 801570e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	3304      	adds	r3, #4
 8015714:	4618      	mov	r0, r3
 8015716:	f7fe fb63 	bl	8013de0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801571a:	4b0d      	ldr	r3, [pc, #52]	@ (8015750 <prvCheckTasksWaitingTermination+0x54>)
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	3b01      	subs	r3, #1
 8015720:	4a0b      	ldr	r2, [pc, #44]	@ (8015750 <prvCheckTasksWaitingTermination+0x54>)
 8015722:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015724:	4b0b      	ldr	r3, [pc, #44]	@ (8015754 <prvCheckTasksWaitingTermination+0x58>)
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	3b01      	subs	r3, #1
 801572a:	4a0a      	ldr	r2, [pc, #40]	@ (8015754 <prvCheckTasksWaitingTermination+0x58>)
 801572c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801572e:	f001 f855 	bl	80167dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015732:	6878      	ldr	r0, [r7, #4]
 8015734:	f000 f810 	bl	8015758 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015738:	4b06      	ldr	r3, [pc, #24]	@ (8015754 <prvCheckTasksWaitingTermination+0x58>)
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d1e1      	bne.n	8015704 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015740:	bf00      	nop
 8015742:	bf00      	nop
 8015744:	3708      	adds	r7, #8
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}
 801574a:	bf00      	nop
 801574c:	20004bd8 	.word	0x20004bd8
 8015750:	20004c04 	.word	0x20004c04
 8015754:	20004bec 	.word	0x20004bec

08015758 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015758:	b580      	push	{r7, lr}
 801575a:	b084      	sub	sp, #16
 801575c:	af00      	add	r7, sp, #0
 801575e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	3354      	adds	r3, #84	@ 0x54
 8015764:	4618      	mov	r0, r3
 8015766:	f004 fef9 	bl	801a55c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8015770:	2b00      	cmp	r3, #0
 8015772:	d108      	bne.n	8015786 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015778:	4618      	mov	r0, r3
 801577a:	f001 f9ed 	bl	8016b58 <vPortFree>
				vPortFree( pxTCB );
 801577e:	6878      	ldr	r0, [r7, #4]
 8015780:	f001 f9ea 	bl	8016b58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015784:	e019      	b.n	80157ba <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801578c:	2b01      	cmp	r3, #1
 801578e:	d103      	bne.n	8015798 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8015790:	6878      	ldr	r0, [r7, #4]
 8015792:	f001 f9e1 	bl	8016b58 <vPortFree>
	}
 8015796:	e010      	b.n	80157ba <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801579e:	2b02      	cmp	r3, #2
 80157a0:	d00b      	beq.n	80157ba <prvDeleteTCB+0x62>
	__asm volatile
 80157a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157a6:	f383 8811 	msr	BASEPRI, r3
 80157aa:	f3bf 8f6f 	isb	sy
 80157ae:	f3bf 8f4f 	dsb	sy
 80157b2:	60fb      	str	r3, [r7, #12]
}
 80157b4:	bf00      	nop
 80157b6:	bf00      	nop
 80157b8:	e7fd      	b.n	80157b6 <prvDeleteTCB+0x5e>
	}
 80157ba:	bf00      	nop
 80157bc:	3710      	adds	r7, #16
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}
	...

080157c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80157c4:	b480      	push	{r7}
 80157c6:	b083      	sub	sp, #12
 80157c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80157ca:	4b0c      	ldr	r3, [pc, #48]	@ (80157fc <prvResetNextTaskUnblockTime+0x38>)
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d104      	bne.n	80157de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80157d4:	4b0a      	ldr	r3, [pc, #40]	@ (8015800 <prvResetNextTaskUnblockTime+0x3c>)
 80157d6:	f04f 32ff 	mov.w	r2, #4294967295
 80157da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80157dc:	e008      	b.n	80157f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80157de:	4b07      	ldr	r3, [pc, #28]	@ (80157fc <prvResetNextTaskUnblockTime+0x38>)
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	68db      	ldr	r3, [r3, #12]
 80157e4:	68db      	ldr	r3, [r3, #12]
 80157e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	685b      	ldr	r3, [r3, #4]
 80157ec:	4a04      	ldr	r2, [pc, #16]	@ (8015800 <prvResetNextTaskUnblockTime+0x3c>)
 80157ee:	6013      	str	r3, [r2, #0]
}
 80157f0:	bf00      	nop
 80157f2:	370c      	adds	r7, #12
 80157f4:	46bd      	mov	sp, r7
 80157f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157fa:	4770      	bx	lr
 80157fc:	20004bbc 	.word	0x20004bbc
 8015800:	20004c24 	.word	0x20004c24

08015804 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8015804:	b480      	push	{r7}
 8015806:	b083      	sub	sp, #12
 8015808:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801580a:	4b05      	ldr	r3, [pc, #20]	@ (8015820 <xTaskGetCurrentTaskHandle+0x1c>)
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8015810:	687b      	ldr	r3, [r7, #4]
	}
 8015812:	4618      	mov	r0, r3
 8015814:	370c      	adds	r7, #12
 8015816:	46bd      	mov	sp, r7
 8015818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801581c:	4770      	bx	lr
 801581e:	bf00      	nop
 8015820:	20004730 	.word	0x20004730

08015824 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015824:	b480      	push	{r7}
 8015826:	b083      	sub	sp, #12
 8015828:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801582a:	4b0b      	ldr	r3, [pc, #44]	@ (8015858 <xTaskGetSchedulerState+0x34>)
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d102      	bne.n	8015838 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015832:	2301      	movs	r3, #1
 8015834:	607b      	str	r3, [r7, #4]
 8015836:	e008      	b.n	801584a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015838:	4b08      	ldr	r3, [pc, #32]	@ (801585c <xTaskGetSchedulerState+0x38>)
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d102      	bne.n	8015846 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015840:	2302      	movs	r3, #2
 8015842:	607b      	str	r3, [r7, #4]
 8015844:	e001      	b.n	801584a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015846:	2300      	movs	r3, #0
 8015848:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801584a:	687b      	ldr	r3, [r7, #4]
	}
 801584c:	4618      	mov	r0, r3
 801584e:	370c      	adds	r7, #12
 8015850:	46bd      	mov	sp, r7
 8015852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015856:	4770      	bx	lr
 8015858:	20004c10 	.word	0x20004c10
 801585c:	20004c2c 	.word	0x20004c2c

08015860 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015860:	b580      	push	{r7, lr}
 8015862:	b084      	sub	sp, #16
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801586c:	2300      	movs	r3, #0
 801586e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d051      	beq.n	801591a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015876:	68bb      	ldr	r3, [r7, #8]
 8015878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801587a:	4b2a      	ldr	r3, [pc, #168]	@ (8015924 <xTaskPriorityInherit+0xc4>)
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015880:	429a      	cmp	r2, r3
 8015882:	d241      	bcs.n	8015908 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015884:	68bb      	ldr	r3, [r7, #8]
 8015886:	699b      	ldr	r3, [r3, #24]
 8015888:	2b00      	cmp	r3, #0
 801588a:	db06      	blt.n	801589a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801588c:	4b25      	ldr	r3, [pc, #148]	@ (8015924 <xTaskPriorityInherit+0xc4>)
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015892:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015896:	68bb      	ldr	r3, [r7, #8]
 8015898:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801589a:	68bb      	ldr	r3, [r7, #8]
 801589c:	6959      	ldr	r1, [r3, #20]
 801589e:	68bb      	ldr	r3, [r7, #8]
 80158a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158a2:	4613      	mov	r3, r2
 80158a4:	009b      	lsls	r3, r3, #2
 80158a6:	4413      	add	r3, r2
 80158a8:	009b      	lsls	r3, r3, #2
 80158aa:	4a1f      	ldr	r2, [pc, #124]	@ (8015928 <xTaskPriorityInherit+0xc8>)
 80158ac:	4413      	add	r3, r2
 80158ae:	4299      	cmp	r1, r3
 80158b0:	d122      	bne.n	80158f8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80158b2:	68bb      	ldr	r3, [r7, #8]
 80158b4:	3304      	adds	r3, #4
 80158b6:	4618      	mov	r0, r3
 80158b8:	f7fe fa92 	bl	8013de0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80158bc:	4b19      	ldr	r3, [pc, #100]	@ (8015924 <xTaskPriorityInherit+0xc4>)
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158c2:	68bb      	ldr	r3, [r7, #8]
 80158c4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80158c6:	68bb      	ldr	r3, [r7, #8]
 80158c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158ca:	4b18      	ldr	r3, [pc, #96]	@ (801592c <xTaskPriorityInherit+0xcc>)
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	429a      	cmp	r2, r3
 80158d0:	d903      	bls.n	80158da <xTaskPriorityInherit+0x7a>
 80158d2:	68bb      	ldr	r3, [r7, #8]
 80158d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80158d6:	4a15      	ldr	r2, [pc, #84]	@ (801592c <xTaskPriorityInherit+0xcc>)
 80158d8:	6013      	str	r3, [r2, #0]
 80158da:	68bb      	ldr	r3, [r7, #8]
 80158dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158de:	4613      	mov	r3, r2
 80158e0:	009b      	lsls	r3, r3, #2
 80158e2:	4413      	add	r3, r2
 80158e4:	009b      	lsls	r3, r3, #2
 80158e6:	4a10      	ldr	r2, [pc, #64]	@ (8015928 <xTaskPriorityInherit+0xc8>)
 80158e8:	441a      	add	r2, r3
 80158ea:	68bb      	ldr	r3, [r7, #8]
 80158ec:	3304      	adds	r3, #4
 80158ee:	4619      	mov	r1, r3
 80158f0:	4610      	mov	r0, r2
 80158f2:	f7fe fa18 	bl	8013d26 <vListInsertEnd>
 80158f6:	e004      	b.n	8015902 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80158f8:	4b0a      	ldr	r3, [pc, #40]	@ (8015924 <xTaskPriorityInherit+0xc4>)
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158fe:	68bb      	ldr	r3, [r7, #8]
 8015900:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015902:	2301      	movs	r3, #1
 8015904:	60fb      	str	r3, [r7, #12]
 8015906:	e008      	b.n	801591a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015908:	68bb      	ldr	r3, [r7, #8]
 801590a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801590c:	4b05      	ldr	r3, [pc, #20]	@ (8015924 <xTaskPriorityInherit+0xc4>)
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015912:	429a      	cmp	r2, r3
 8015914:	d201      	bcs.n	801591a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8015916:	2301      	movs	r3, #1
 8015918:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801591a:	68fb      	ldr	r3, [r7, #12]
	}
 801591c:	4618      	mov	r0, r3
 801591e:	3710      	adds	r7, #16
 8015920:	46bd      	mov	sp, r7
 8015922:	bd80      	pop	{r7, pc}
 8015924:	20004730 	.word	0x20004730
 8015928:	20004734 	.word	0x20004734
 801592c:	20004c0c 	.word	0x20004c0c

08015930 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015930:	b580      	push	{r7, lr}
 8015932:	b086      	sub	sp, #24
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801593c:	2300      	movs	r3, #0
 801593e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d058      	beq.n	80159f8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015946:	4b2f      	ldr	r3, [pc, #188]	@ (8015a04 <xTaskPriorityDisinherit+0xd4>)
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	693a      	ldr	r2, [r7, #16]
 801594c:	429a      	cmp	r2, r3
 801594e:	d00b      	beq.n	8015968 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8015950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015954:	f383 8811 	msr	BASEPRI, r3
 8015958:	f3bf 8f6f 	isb	sy
 801595c:	f3bf 8f4f 	dsb	sy
 8015960:	60fb      	str	r3, [r7, #12]
}
 8015962:	bf00      	nop
 8015964:	bf00      	nop
 8015966:	e7fd      	b.n	8015964 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015968:	693b      	ldr	r3, [r7, #16]
 801596a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801596c:	2b00      	cmp	r3, #0
 801596e:	d10b      	bne.n	8015988 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8015970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015974:	f383 8811 	msr	BASEPRI, r3
 8015978:	f3bf 8f6f 	isb	sy
 801597c:	f3bf 8f4f 	dsb	sy
 8015980:	60bb      	str	r3, [r7, #8]
}
 8015982:	bf00      	nop
 8015984:	bf00      	nop
 8015986:	e7fd      	b.n	8015984 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8015988:	693b      	ldr	r3, [r7, #16]
 801598a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801598c:	1e5a      	subs	r2, r3, #1
 801598e:	693b      	ldr	r3, [r7, #16]
 8015990:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015992:	693b      	ldr	r3, [r7, #16]
 8015994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015996:	693b      	ldr	r3, [r7, #16]
 8015998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801599a:	429a      	cmp	r2, r3
 801599c:	d02c      	beq.n	80159f8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801599e:	693b      	ldr	r3, [r7, #16]
 80159a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d128      	bne.n	80159f8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80159a6:	693b      	ldr	r3, [r7, #16]
 80159a8:	3304      	adds	r3, #4
 80159aa:	4618      	mov	r0, r3
 80159ac:	f7fe fa18 	bl	8013de0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80159b0:	693b      	ldr	r3, [r7, #16]
 80159b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80159b4:	693b      	ldr	r3, [r7, #16]
 80159b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80159b8:	693b      	ldr	r3, [r7, #16]
 80159ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80159c0:	693b      	ldr	r3, [r7, #16]
 80159c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80159c4:	693b      	ldr	r3, [r7, #16]
 80159c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80159c8:	4b0f      	ldr	r3, [pc, #60]	@ (8015a08 <xTaskPriorityDisinherit+0xd8>)
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	429a      	cmp	r2, r3
 80159ce:	d903      	bls.n	80159d8 <xTaskPriorityDisinherit+0xa8>
 80159d0:	693b      	ldr	r3, [r7, #16]
 80159d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159d4:	4a0c      	ldr	r2, [pc, #48]	@ (8015a08 <xTaskPriorityDisinherit+0xd8>)
 80159d6:	6013      	str	r3, [r2, #0]
 80159d8:	693b      	ldr	r3, [r7, #16]
 80159da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80159dc:	4613      	mov	r3, r2
 80159de:	009b      	lsls	r3, r3, #2
 80159e0:	4413      	add	r3, r2
 80159e2:	009b      	lsls	r3, r3, #2
 80159e4:	4a09      	ldr	r2, [pc, #36]	@ (8015a0c <xTaskPriorityDisinherit+0xdc>)
 80159e6:	441a      	add	r2, r3
 80159e8:	693b      	ldr	r3, [r7, #16]
 80159ea:	3304      	adds	r3, #4
 80159ec:	4619      	mov	r1, r3
 80159ee:	4610      	mov	r0, r2
 80159f0:	f7fe f999 	bl	8013d26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80159f4:	2301      	movs	r3, #1
 80159f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80159f8:	697b      	ldr	r3, [r7, #20]
	}
 80159fa:	4618      	mov	r0, r3
 80159fc:	3718      	adds	r7, #24
 80159fe:	46bd      	mov	sp, r7
 8015a00:	bd80      	pop	{r7, pc}
 8015a02:	bf00      	nop
 8015a04:	20004730 	.word	0x20004730
 8015a08:	20004c0c 	.word	0x20004c0c
 8015a0c:	20004734 	.word	0x20004734

08015a10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015a10:	b580      	push	{r7, lr}
 8015a12:	b088      	sub	sp, #32
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	6078      	str	r0, [r7, #4]
 8015a18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015a1e:	2301      	movs	r3, #1
 8015a20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d06c      	beq.n	8015b02 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015a28:	69bb      	ldr	r3, [r7, #24]
 8015a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d10b      	bne.n	8015a48 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8015a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a34:	f383 8811 	msr	BASEPRI, r3
 8015a38:	f3bf 8f6f 	isb	sy
 8015a3c:	f3bf 8f4f 	dsb	sy
 8015a40:	60fb      	str	r3, [r7, #12]
}
 8015a42:	bf00      	nop
 8015a44:	bf00      	nop
 8015a46:	e7fd      	b.n	8015a44 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015a48:	69bb      	ldr	r3, [r7, #24]
 8015a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015a4c:	683a      	ldr	r2, [r7, #0]
 8015a4e:	429a      	cmp	r2, r3
 8015a50:	d902      	bls.n	8015a58 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015a52:	683b      	ldr	r3, [r7, #0]
 8015a54:	61fb      	str	r3, [r7, #28]
 8015a56:	e002      	b.n	8015a5e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015a58:	69bb      	ldr	r3, [r7, #24]
 8015a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015a5c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015a5e:	69bb      	ldr	r3, [r7, #24]
 8015a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a62:	69fa      	ldr	r2, [r7, #28]
 8015a64:	429a      	cmp	r2, r3
 8015a66:	d04c      	beq.n	8015b02 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015a68:	69bb      	ldr	r3, [r7, #24]
 8015a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a6c:	697a      	ldr	r2, [r7, #20]
 8015a6e:	429a      	cmp	r2, r3
 8015a70:	d147      	bne.n	8015b02 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015a72:	4b26      	ldr	r3, [pc, #152]	@ (8015b0c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	69ba      	ldr	r2, [r7, #24]
 8015a78:	429a      	cmp	r2, r3
 8015a7a:	d10b      	bne.n	8015a94 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8015a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a80:	f383 8811 	msr	BASEPRI, r3
 8015a84:	f3bf 8f6f 	isb	sy
 8015a88:	f3bf 8f4f 	dsb	sy
 8015a8c:	60bb      	str	r3, [r7, #8]
}
 8015a8e:	bf00      	nop
 8015a90:	bf00      	nop
 8015a92:	e7fd      	b.n	8015a90 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015a94:	69bb      	ldr	r3, [r7, #24]
 8015a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a98:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8015a9a:	69bb      	ldr	r3, [r7, #24]
 8015a9c:	69fa      	ldr	r2, [r7, #28]
 8015a9e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015aa0:	69bb      	ldr	r3, [r7, #24]
 8015aa2:	699b      	ldr	r3, [r3, #24]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	db04      	blt.n	8015ab2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015aa8:	69fb      	ldr	r3, [r7, #28]
 8015aaa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015aae:	69bb      	ldr	r3, [r7, #24]
 8015ab0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015ab2:	69bb      	ldr	r3, [r7, #24]
 8015ab4:	6959      	ldr	r1, [r3, #20]
 8015ab6:	693a      	ldr	r2, [r7, #16]
 8015ab8:	4613      	mov	r3, r2
 8015aba:	009b      	lsls	r3, r3, #2
 8015abc:	4413      	add	r3, r2
 8015abe:	009b      	lsls	r3, r3, #2
 8015ac0:	4a13      	ldr	r2, [pc, #76]	@ (8015b10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015ac2:	4413      	add	r3, r2
 8015ac4:	4299      	cmp	r1, r3
 8015ac6:	d11c      	bne.n	8015b02 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015ac8:	69bb      	ldr	r3, [r7, #24]
 8015aca:	3304      	adds	r3, #4
 8015acc:	4618      	mov	r0, r3
 8015ace:	f7fe f987 	bl	8013de0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015ad2:	69bb      	ldr	r3, [r7, #24]
 8015ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8015b14 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	429a      	cmp	r2, r3
 8015adc:	d903      	bls.n	8015ae6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8015ade:	69bb      	ldr	r3, [r7, #24]
 8015ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8015b14 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8015ae4:	6013      	str	r3, [r2, #0]
 8015ae6:	69bb      	ldr	r3, [r7, #24]
 8015ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015aea:	4613      	mov	r3, r2
 8015aec:	009b      	lsls	r3, r3, #2
 8015aee:	4413      	add	r3, r2
 8015af0:	009b      	lsls	r3, r3, #2
 8015af2:	4a07      	ldr	r2, [pc, #28]	@ (8015b10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015af4:	441a      	add	r2, r3
 8015af6:	69bb      	ldr	r3, [r7, #24]
 8015af8:	3304      	adds	r3, #4
 8015afa:	4619      	mov	r1, r3
 8015afc:	4610      	mov	r0, r2
 8015afe:	f7fe f912 	bl	8013d26 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015b02:	bf00      	nop
 8015b04:	3720      	adds	r7, #32
 8015b06:	46bd      	mov	sp, r7
 8015b08:	bd80      	pop	{r7, pc}
 8015b0a:	bf00      	nop
 8015b0c:	20004730 	.word	0x20004730
 8015b10:	20004734 	.word	0x20004734
 8015b14:	20004c0c 	.word	0x20004c0c

08015b18 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015b18:	b480      	push	{r7}
 8015b1a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015b1c:	4b07      	ldr	r3, [pc, #28]	@ (8015b3c <pvTaskIncrementMutexHeldCount+0x24>)
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d004      	beq.n	8015b2e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015b24:	4b05      	ldr	r3, [pc, #20]	@ (8015b3c <pvTaskIncrementMutexHeldCount+0x24>)
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015b2a:	3201      	adds	r2, #1
 8015b2c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8015b2e:	4b03      	ldr	r3, [pc, #12]	@ (8015b3c <pvTaskIncrementMutexHeldCount+0x24>)
 8015b30:	681b      	ldr	r3, [r3, #0]
	}
 8015b32:	4618      	mov	r0, r3
 8015b34:	46bd      	mov	sp, r7
 8015b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b3a:	4770      	bx	lr
 8015b3c:	20004730 	.word	0x20004730

08015b40 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b084      	sub	sp, #16
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	6078      	str	r0, [r7, #4]
 8015b48:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8015b4a:	f000 fe15 	bl	8016778 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8015b4e:	4b20      	ldr	r3, [pc, #128]	@ (8015bd0 <ulTaskNotifyTake+0x90>)
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d113      	bne.n	8015b82 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8015b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8015bd0 <ulTaskNotifyTake+0x90>)
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	2201      	movs	r2, #1
 8015b60:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8015b64:	683b      	ldr	r3, [r7, #0]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d00b      	beq.n	8015b82 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015b6a:	2101      	movs	r1, #1
 8015b6c:	6838      	ldr	r0, [r7, #0]
 8015b6e:	f000 f8c9 	bl	8015d04 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8015b72:	4b18      	ldr	r3, [pc, #96]	@ (8015bd4 <ulTaskNotifyTake+0x94>)
 8015b74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015b78:	601a      	str	r2, [r3, #0]
 8015b7a:	f3bf 8f4f 	dsb	sy
 8015b7e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8015b82:	f000 fe2b 	bl	80167dc <vPortExitCritical>

		taskENTER_CRITICAL();
 8015b86:	f000 fdf7 	bl	8016778 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8015b8a:	4b11      	ldr	r3, [pc, #68]	@ (8015bd0 <ulTaskNotifyTake+0x90>)
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015b92:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d00e      	beq.n	8015bb8 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d005      	beq.n	8015bac <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8015ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8015bd0 <ulTaskNotifyTake+0x90>)
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8015baa:	e005      	b.n	8015bb8 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8015bac:	4b08      	ldr	r3, [pc, #32]	@ (8015bd0 <ulTaskNotifyTake+0x90>)
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	68fa      	ldr	r2, [r7, #12]
 8015bb2:	3a01      	subs	r2, #1
 8015bb4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015bb8:	4b05      	ldr	r3, [pc, #20]	@ (8015bd0 <ulTaskNotifyTake+0x90>)
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	2200      	movs	r2, #0
 8015bbe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8015bc2:	f000 fe0b 	bl	80167dc <vPortExitCritical>

		return ulReturn;
 8015bc6:	68fb      	ldr	r3, [r7, #12]
	}
 8015bc8:	4618      	mov	r0, r3
 8015bca:	3710      	adds	r7, #16
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	bd80      	pop	{r7, pc}
 8015bd0:	20004730 	.word	0x20004730
 8015bd4:	e000ed04 	.word	0xe000ed04

08015bd8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b08a      	sub	sp, #40	@ 0x28
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
 8015be0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d10b      	bne.n	8015c00 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8015be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bec:	f383 8811 	msr	BASEPRI, r3
 8015bf0:	f3bf 8f6f 	isb	sy
 8015bf4:	f3bf 8f4f 	dsb	sy
 8015bf8:	61bb      	str	r3, [r7, #24]
}
 8015bfa:	bf00      	nop
 8015bfc:	bf00      	nop
 8015bfe:	e7fd      	b.n	8015bfc <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015c00:	f000 fe9a 	bl	8016938 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8015c08:	f3ef 8211 	mrs	r2, BASEPRI
 8015c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c10:	f383 8811 	msr	BASEPRI, r3
 8015c14:	f3bf 8f6f 	isb	sy
 8015c18:	f3bf 8f4f 	dsb	sy
 8015c1c:	617a      	str	r2, [r7, #20]
 8015c1e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8015c20:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015c22:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c26:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8015c2a:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c2e:	2202      	movs	r2, #2
 8015c30:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8015c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015c3a:	1c5a      	adds	r2, r3, #1
 8015c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c3e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8015c42:	7ffb      	ldrb	r3, [r7, #31]
 8015c44:	2b01      	cmp	r3, #1
 8015c46:	d147      	bne.n	8015cd8 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8015c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d00b      	beq.n	8015c68 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8015c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c54:	f383 8811 	msr	BASEPRI, r3
 8015c58:	f3bf 8f6f 	isb	sy
 8015c5c:	f3bf 8f4f 	dsb	sy
 8015c60:	60fb      	str	r3, [r7, #12]
}
 8015c62:	bf00      	nop
 8015c64:	bf00      	nop
 8015c66:	e7fd      	b.n	8015c64 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015c68:	4b20      	ldr	r3, [pc, #128]	@ (8015cec <vTaskNotifyGiveFromISR+0x114>)
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d11d      	bne.n	8015cac <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c72:	3304      	adds	r3, #4
 8015c74:	4618      	mov	r0, r3
 8015c76:	f7fe f8b3 	bl	8013de0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8015cf0 <vTaskNotifyGiveFromISR+0x118>)
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	429a      	cmp	r2, r3
 8015c84:	d903      	bls.n	8015c8e <vTaskNotifyGiveFromISR+0xb6>
 8015c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c8a:	4a19      	ldr	r2, [pc, #100]	@ (8015cf0 <vTaskNotifyGiveFromISR+0x118>)
 8015c8c:	6013      	str	r3, [r2, #0]
 8015c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c92:	4613      	mov	r3, r2
 8015c94:	009b      	lsls	r3, r3, #2
 8015c96:	4413      	add	r3, r2
 8015c98:	009b      	lsls	r3, r3, #2
 8015c9a:	4a16      	ldr	r2, [pc, #88]	@ (8015cf4 <vTaskNotifyGiveFromISR+0x11c>)
 8015c9c:	441a      	add	r2, r3
 8015c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ca0:	3304      	adds	r3, #4
 8015ca2:	4619      	mov	r1, r3
 8015ca4:	4610      	mov	r0, r2
 8015ca6:	f7fe f83e 	bl	8013d26 <vListInsertEnd>
 8015caa:	e005      	b.n	8015cb8 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8015cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cae:	3318      	adds	r3, #24
 8015cb0:	4619      	mov	r1, r3
 8015cb2:	4811      	ldr	r0, [pc, #68]	@ (8015cf8 <vTaskNotifyGiveFromISR+0x120>)
 8015cb4:	f7fe f837 	bl	8013d26 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8015cfc <vTaskNotifyGiveFromISR+0x124>)
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015cc2:	429a      	cmp	r2, r3
 8015cc4:	d908      	bls.n	8015cd8 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8015cc6:	683b      	ldr	r3, [r7, #0]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d002      	beq.n	8015cd2 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8015ccc:	683b      	ldr	r3, [r7, #0]
 8015cce:	2201      	movs	r2, #1
 8015cd0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8015cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8015d00 <vTaskNotifyGiveFromISR+0x128>)
 8015cd4:	2201      	movs	r2, #1
 8015cd6:	601a      	str	r2, [r3, #0]
 8015cd8:	6a3b      	ldr	r3, [r7, #32]
 8015cda:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8015cdc:	68bb      	ldr	r3, [r7, #8]
 8015cde:	f383 8811 	msr	BASEPRI, r3
}
 8015ce2:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8015ce4:	bf00      	nop
 8015ce6:	3728      	adds	r7, #40	@ 0x28
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	bd80      	pop	{r7, pc}
 8015cec:	20004c2c 	.word	0x20004c2c
 8015cf0:	20004c0c 	.word	0x20004c0c
 8015cf4:	20004734 	.word	0x20004734
 8015cf8:	20004bc4 	.word	0x20004bc4
 8015cfc:	20004730 	.word	0x20004730
 8015d00:	20004c18 	.word	0x20004c18

08015d04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b084      	sub	sp, #16
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	6078      	str	r0, [r7, #4]
 8015d0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015d0e:	4b21      	ldr	r3, [pc, #132]	@ (8015d94 <prvAddCurrentTaskToDelayedList+0x90>)
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015d14:	4b20      	ldr	r3, [pc, #128]	@ (8015d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	3304      	adds	r3, #4
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f7fe f860 	bl	8013de0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d26:	d10a      	bne.n	8015d3e <prvAddCurrentTaskToDelayedList+0x3a>
 8015d28:	683b      	ldr	r3, [r7, #0]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d007      	beq.n	8015d3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8015d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	3304      	adds	r3, #4
 8015d34:	4619      	mov	r1, r3
 8015d36:	4819      	ldr	r0, [pc, #100]	@ (8015d9c <prvAddCurrentTaskToDelayedList+0x98>)
 8015d38:	f7fd fff5 	bl	8013d26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015d3c:	e026      	b.n	8015d8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015d3e:	68fa      	ldr	r2, [r7, #12]
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	4413      	add	r3, r2
 8015d44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015d46:	4b14      	ldr	r3, [pc, #80]	@ (8015d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	68ba      	ldr	r2, [r7, #8]
 8015d4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015d4e:	68ba      	ldr	r2, [r7, #8]
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	429a      	cmp	r2, r3
 8015d54:	d209      	bcs.n	8015d6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015d56:	4b12      	ldr	r3, [pc, #72]	@ (8015da0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015d58:	681a      	ldr	r2, [r3, #0]
 8015d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8015d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	3304      	adds	r3, #4
 8015d60:	4619      	mov	r1, r3
 8015d62:	4610      	mov	r0, r2
 8015d64:	f7fe f803 	bl	8013d6e <vListInsert>
}
 8015d68:	e010      	b.n	8015d8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8015da4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015d6c:	681a      	ldr	r2, [r3, #0]
 8015d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8015d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	3304      	adds	r3, #4
 8015d74:	4619      	mov	r1, r3
 8015d76:	4610      	mov	r0, r2
 8015d78:	f7fd fff9 	bl	8013d6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8015da8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	68ba      	ldr	r2, [r7, #8]
 8015d82:	429a      	cmp	r2, r3
 8015d84:	d202      	bcs.n	8015d8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015d86:	4a08      	ldr	r2, [pc, #32]	@ (8015da8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015d88:	68bb      	ldr	r3, [r7, #8]
 8015d8a:	6013      	str	r3, [r2, #0]
}
 8015d8c:	bf00      	nop
 8015d8e:	3710      	adds	r7, #16
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd80      	pop	{r7, pc}
 8015d94:	20004c08 	.word	0x20004c08
 8015d98:	20004730 	.word	0x20004730
 8015d9c:	20004bf0 	.word	0x20004bf0
 8015da0:	20004bc0 	.word	0x20004bc0
 8015da4:	20004bbc 	.word	0x20004bbc
 8015da8:	20004c24 	.word	0x20004c24

08015dac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015dac:	b580      	push	{r7, lr}
 8015dae:	b08a      	sub	sp, #40	@ 0x28
 8015db0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015db2:	2300      	movs	r3, #0
 8015db4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015db6:	f000 fb71 	bl	801649c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015dba:	4b1d      	ldr	r3, [pc, #116]	@ (8015e30 <xTimerCreateTimerTask+0x84>)
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d021      	beq.n	8015e06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015dca:	1d3a      	adds	r2, r7, #4
 8015dcc:	f107 0108 	add.w	r1, r7, #8
 8015dd0:	f107 030c 	add.w	r3, r7, #12
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	f7fd ff5f 	bl	8013c98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015dda:	6879      	ldr	r1, [r7, #4]
 8015ddc:	68bb      	ldr	r3, [r7, #8]
 8015dde:	68fa      	ldr	r2, [r7, #12]
 8015de0:	9202      	str	r2, [sp, #8]
 8015de2:	9301      	str	r3, [sp, #4]
 8015de4:	2302      	movs	r3, #2
 8015de6:	9300      	str	r3, [sp, #0]
 8015de8:	2300      	movs	r3, #0
 8015dea:	460a      	mov	r2, r1
 8015dec:	4911      	ldr	r1, [pc, #68]	@ (8015e34 <xTimerCreateTimerTask+0x88>)
 8015dee:	4812      	ldr	r0, [pc, #72]	@ (8015e38 <xTimerCreateTimerTask+0x8c>)
 8015df0:	f7fe feb0 	bl	8014b54 <xTaskCreateStatic>
 8015df4:	4603      	mov	r3, r0
 8015df6:	4a11      	ldr	r2, [pc, #68]	@ (8015e3c <xTimerCreateTimerTask+0x90>)
 8015df8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015dfa:	4b10      	ldr	r3, [pc, #64]	@ (8015e3c <xTimerCreateTimerTask+0x90>)
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d001      	beq.n	8015e06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015e02:	2301      	movs	r3, #1
 8015e04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015e06:	697b      	ldr	r3, [r7, #20]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d10b      	bne.n	8015e24 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8015e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e10:	f383 8811 	msr	BASEPRI, r3
 8015e14:	f3bf 8f6f 	isb	sy
 8015e18:	f3bf 8f4f 	dsb	sy
 8015e1c:	613b      	str	r3, [r7, #16]
}
 8015e1e:	bf00      	nop
 8015e20:	bf00      	nop
 8015e22:	e7fd      	b.n	8015e20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015e24:	697b      	ldr	r3, [r7, #20]
}
 8015e26:	4618      	mov	r0, r3
 8015e28:	3718      	adds	r7, #24
 8015e2a:	46bd      	mov	sp, r7
 8015e2c:	bd80      	pop	{r7, pc}
 8015e2e:	bf00      	nop
 8015e30:	20004c60 	.word	0x20004c60
 8015e34:	08020184 	.word	0x08020184
 8015e38:	08016035 	.word	0x08016035
 8015e3c:	20004c64 	.word	0x20004c64

08015e40 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b088      	sub	sp, #32
 8015e44:	af02      	add	r7, sp, #8
 8015e46:	60f8      	str	r0, [r7, #12]
 8015e48:	60b9      	str	r1, [r7, #8]
 8015e4a:	607a      	str	r2, [r7, #4]
 8015e4c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8015e4e:	202c      	movs	r0, #44	@ 0x2c
 8015e50:	f000 fdb4 	bl	80169bc <pvPortMalloc>
 8015e54:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8015e56:	697b      	ldr	r3, [r7, #20]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d00d      	beq.n	8015e78 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8015e5c:	697b      	ldr	r3, [r7, #20]
 8015e5e:	2200      	movs	r2, #0
 8015e60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8015e64:	697b      	ldr	r3, [r7, #20]
 8015e66:	9301      	str	r3, [sp, #4]
 8015e68:	6a3b      	ldr	r3, [r7, #32]
 8015e6a:	9300      	str	r3, [sp, #0]
 8015e6c:	683b      	ldr	r3, [r7, #0]
 8015e6e:	687a      	ldr	r2, [r7, #4]
 8015e70:	68b9      	ldr	r1, [r7, #8]
 8015e72:	68f8      	ldr	r0, [r7, #12]
 8015e74:	f000 f805 	bl	8015e82 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8015e78:	697b      	ldr	r3, [r7, #20]
	}
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	3718      	adds	r7, #24
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bd80      	pop	{r7, pc}

08015e82 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8015e82:	b580      	push	{r7, lr}
 8015e84:	b086      	sub	sp, #24
 8015e86:	af00      	add	r7, sp, #0
 8015e88:	60f8      	str	r0, [r7, #12]
 8015e8a:	60b9      	str	r1, [r7, #8]
 8015e8c:	607a      	str	r2, [r7, #4]
 8015e8e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8015e90:	68bb      	ldr	r3, [r7, #8]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d10b      	bne.n	8015eae <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8015e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e9a:	f383 8811 	msr	BASEPRI, r3
 8015e9e:	f3bf 8f6f 	isb	sy
 8015ea2:	f3bf 8f4f 	dsb	sy
 8015ea6:	617b      	str	r3, [r7, #20]
}
 8015ea8:	bf00      	nop
 8015eaa:	bf00      	nop
 8015eac:	e7fd      	b.n	8015eaa <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8015eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d01e      	beq.n	8015ef2 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8015eb4:	f000 faf2 	bl	801649c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8015eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015eba:	68fa      	ldr	r2, [r7, #12]
 8015ebc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8015ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ec0:	68ba      	ldr	r2, [r7, #8]
 8015ec2:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8015ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ec6:	683a      	ldr	r2, [r7, #0]
 8015ec8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8015eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ecc:	6a3a      	ldr	r2, [r7, #32]
 8015ece:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8015ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ed2:	3304      	adds	r3, #4
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	f7fd ff19 	bl	8013d0c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d008      	beq.n	8015ef2 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8015ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ee2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015ee6:	f043 0304 	orr.w	r3, r3, #4
 8015eea:	b2da      	uxtb	r2, r3
 8015eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015eee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8015ef2:	bf00      	nop
 8015ef4:	3718      	adds	r7, #24
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	bd80      	pop	{r7, pc}
	...

08015efc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015efc:	b580      	push	{r7, lr}
 8015efe:	b08a      	sub	sp, #40	@ 0x28
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	60f8      	str	r0, [r7, #12]
 8015f04:	60b9      	str	r1, [r7, #8]
 8015f06:	607a      	str	r2, [r7, #4]
 8015f08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d10b      	bne.n	8015f2c <xTimerGenericCommand+0x30>
	__asm volatile
 8015f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f18:	f383 8811 	msr	BASEPRI, r3
 8015f1c:	f3bf 8f6f 	isb	sy
 8015f20:	f3bf 8f4f 	dsb	sy
 8015f24:	623b      	str	r3, [r7, #32]
}
 8015f26:	bf00      	nop
 8015f28:	bf00      	nop
 8015f2a:	e7fd      	b.n	8015f28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015f2c:	4b19      	ldr	r3, [pc, #100]	@ (8015f94 <xTimerGenericCommand+0x98>)
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d02a      	beq.n	8015f8a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015f34:	68bb      	ldr	r3, [r7, #8]
 8015f36:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015f40:	68bb      	ldr	r3, [r7, #8]
 8015f42:	2b05      	cmp	r3, #5
 8015f44:	dc18      	bgt.n	8015f78 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015f46:	f7ff fc6d 	bl	8015824 <xTaskGetSchedulerState>
 8015f4a:	4603      	mov	r3, r0
 8015f4c:	2b02      	cmp	r3, #2
 8015f4e:	d109      	bne.n	8015f64 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015f50:	4b10      	ldr	r3, [pc, #64]	@ (8015f94 <xTimerGenericCommand+0x98>)
 8015f52:	6818      	ldr	r0, [r3, #0]
 8015f54:	f107 0110 	add.w	r1, r7, #16
 8015f58:	2300      	movs	r3, #0
 8015f5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015f5c:	f7fe f8e2 	bl	8014124 <xQueueGenericSend>
 8015f60:	6278      	str	r0, [r7, #36]	@ 0x24
 8015f62:	e012      	b.n	8015f8a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015f64:	4b0b      	ldr	r3, [pc, #44]	@ (8015f94 <xTimerGenericCommand+0x98>)
 8015f66:	6818      	ldr	r0, [r3, #0]
 8015f68:	f107 0110 	add.w	r1, r7, #16
 8015f6c:	2300      	movs	r3, #0
 8015f6e:	2200      	movs	r2, #0
 8015f70:	f7fe f8d8 	bl	8014124 <xQueueGenericSend>
 8015f74:	6278      	str	r0, [r7, #36]	@ 0x24
 8015f76:	e008      	b.n	8015f8a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015f78:	4b06      	ldr	r3, [pc, #24]	@ (8015f94 <xTimerGenericCommand+0x98>)
 8015f7a:	6818      	ldr	r0, [r3, #0]
 8015f7c:	f107 0110 	add.w	r1, r7, #16
 8015f80:	2300      	movs	r3, #0
 8015f82:	683a      	ldr	r2, [r7, #0]
 8015f84:	f7fe f9d0 	bl	8014328 <xQueueGenericSendFromISR>
 8015f88:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	3728      	adds	r7, #40	@ 0x28
 8015f90:	46bd      	mov	sp, r7
 8015f92:	bd80      	pop	{r7, pc}
 8015f94:	20004c60 	.word	0x20004c60

08015f98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b088      	sub	sp, #32
 8015f9c:	af02      	add	r7, sp, #8
 8015f9e:	6078      	str	r0, [r7, #4]
 8015fa0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015fa2:	4b23      	ldr	r3, [pc, #140]	@ (8016030 <prvProcessExpiredTimer+0x98>)
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	68db      	ldr	r3, [r3, #12]
 8015fa8:	68db      	ldr	r3, [r3, #12]
 8015faa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015fac:	697b      	ldr	r3, [r7, #20]
 8015fae:	3304      	adds	r3, #4
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	f7fd ff15 	bl	8013de0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015fb6:	697b      	ldr	r3, [r7, #20]
 8015fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015fbc:	f003 0304 	and.w	r3, r3, #4
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d023      	beq.n	801600c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015fc4:	697b      	ldr	r3, [r7, #20]
 8015fc6:	699a      	ldr	r2, [r3, #24]
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	18d1      	adds	r1, r2, r3
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	683a      	ldr	r2, [r7, #0]
 8015fd0:	6978      	ldr	r0, [r7, #20]
 8015fd2:	f000 f8d5 	bl	8016180 <prvInsertTimerInActiveList>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d020      	beq.n	801601e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015fdc:	2300      	movs	r3, #0
 8015fde:	9300      	str	r3, [sp, #0]
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	687a      	ldr	r2, [r7, #4]
 8015fe4:	2100      	movs	r1, #0
 8015fe6:	6978      	ldr	r0, [r7, #20]
 8015fe8:	f7ff ff88 	bl	8015efc <xTimerGenericCommand>
 8015fec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015fee:	693b      	ldr	r3, [r7, #16]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d114      	bne.n	801601e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8015ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ff8:	f383 8811 	msr	BASEPRI, r3
 8015ffc:	f3bf 8f6f 	isb	sy
 8016000:	f3bf 8f4f 	dsb	sy
 8016004:	60fb      	str	r3, [r7, #12]
}
 8016006:	bf00      	nop
 8016008:	bf00      	nop
 801600a:	e7fd      	b.n	8016008 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801600c:	697b      	ldr	r3, [r7, #20]
 801600e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016012:	f023 0301 	bic.w	r3, r3, #1
 8016016:	b2da      	uxtb	r2, r3
 8016018:	697b      	ldr	r3, [r7, #20]
 801601a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801601e:	697b      	ldr	r3, [r7, #20]
 8016020:	6a1b      	ldr	r3, [r3, #32]
 8016022:	6978      	ldr	r0, [r7, #20]
 8016024:	4798      	blx	r3
}
 8016026:	bf00      	nop
 8016028:	3718      	adds	r7, #24
 801602a:	46bd      	mov	sp, r7
 801602c:	bd80      	pop	{r7, pc}
 801602e:	bf00      	nop
 8016030:	20004c58 	.word	0x20004c58

08016034 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8016034:	b580      	push	{r7, lr}
 8016036:	b084      	sub	sp, #16
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801603c:	f107 0308 	add.w	r3, r7, #8
 8016040:	4618      	mov	r0, r3
 8016042:	f000 f859 	bl	80160f8 <prvGetNextExpireTime>
 8016046:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016048:	68bb      	ldr	r3, [r7, #8]
 801604a:	4619      	mov	r1, r3
 801604c:	68f8      	ldr	r0, [r7, #12]
 801604e:	f000 f805 	bl	801605c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8016052:	f000 f8d7 	bl	8016204 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016056:	bf00      	nop
 8016058:	e7f0      	b.n	801603c <prvTimerTask+0x8>
	...

0801605c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801605c:	b580      	push	{r7, lr}
 801605e:	b084      	sub	sp, #16
 8016060:	af00      	add	r7, sp, #0
 8016062:	6078      	str	r0, [r7, #4]
 8016064:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8016066:	f7fe ffd9 	bl	801501c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801606a:	f107 0308 	add.w	r3, r7, #8
 801606e:	4618      	mov	r0, r3
 8016070:	f000 f866 	bl	8016140 <prvSampleTimeNow>
 8016074:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8016076:	68bb      	ldr	r3, [r7, #8]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d130      	bne.n	80160de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801607c:	683b      	ldr	r3, [r7, #0]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d10a      	bne.n	8016098 <prvProcessTimerOrBlockTask+0x3c>
 8016082:	687a      	ldr	r2, [r7, #4]
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	429a      	cmp	r2, r3
 8016088:	d806      	bhi.n	8016098 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801608a:	f7fe ffd5 	bl	8015038 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801608e:	68f9      	ldr	r1, [r7, #12]
 8016090:	6878      	ldr	r0, [r7, #4]
 8016092:	f7ff ff81 	bl	8015f98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8016096:	e024      	b.n	80160e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8016098:	683b      	ldr	r3, [r7, #0]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d008      	beq.n	80160b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801609e:	4b13      	ldr	r3, [pc, #76]	@ (80160ec <prvProcessTimerOrBlockTask+0x90>)
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d101      	bne.n	80160ac <prvProcessTimerOrBlockTask+0x50>
 80160a8:	2301      	movs	r3, #1
 80160aa:	e000      	b.n	80160ae <prvProcessTimerOrBlockTask+0x52>
 80160ac:	2300      	movs	r3, #0
 80160ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80160b0:	4b0f      	ldr	r3, [pc, #60]	@ (80160f0 <prvProcessTimerOrBlockTask+0x94>)
 80160b2:	6818      	ldr	r0, [r3, #0]
 80160b4:	687a      	ldr	r2, [r7, #4]
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	1ad3      	subs	r3, r2, r3
 80160ba:	683a      	ldr	r2, [r7, #0]
 80160bc:	4619      	mov	r1, r3
 80160be:	f7fe fd15 	bl	8014aec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80160c2:	f7fe ffb9 	bl	8015038 <xTaskResumeAll>
 80160c6:	4603      	mov	r3, r0
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d10a      	bne.n	80160e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80160cc:	4b09      	ldr	r3, [pc, #36]	@ (80160f4 <prvProcessTimerOrBlockTask+0x98>)
 80160ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80160d2:	601a      	str	r2, [r3, #0]
 80160d4:	f3bf 8f4f 	dsb	sy
 80160d8:	f3bf 8f6f 	isb	sy
}
 80160dc:	e001      	b.n	80160e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80160de:	f7fe ffab 	bl	8015038 <xTaskResumeAll>
}
 80160e2:	bf00      	nop
 80160e4:	3710      	adds	r7, #16
 80160e6:	46bd      	mov	sp, r7
 80160e8:	bd80      	pop	{r7, pc}
 80160ea:	bf00      	nop
 80160ec:	20004c5c 	.word	0x20004c5c
 80160f0:	20004c60 	.word	0x20004c60
 80160f4:	e000ed04 	.word	0xe000ed04

080160f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80160f8:	b480      	push	{r7}
 80160fa:	b085      	sub	sp, #20
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8016100:	4b0e      	ldr	r3, [pc, #56]	@ (801613c <prvGetNextExpireTime+0x44>)
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d101      	bne.n	801610e <prvGetNextExpireTime+0x16>
 801610a:	2201      	movs	r2, #1
 801610c:	e000      	b.n	8016110 <prvGetNextExpireTime+0x18>
 801610e:	2200      	movs	r2, #0
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d105      	bne.n	8016128 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801611c:	4b07      	ldr	r3, [pc, #28]	@ (801613c <prvGetNextExpireTime+0x44>)
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	68db      	ldr	r3, [r3, #12]
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	60fb      	str	r3, [r7, #12]
 8016126:	e001      	b.n	801612c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8016128:	2300      	movs	r3, #0
 801612a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801612c:	68fb      	ldr	r3, [r7, #12]
}
 801612e:	4618      	mov	r0, r3
 8016130:	3714      	adds	r7, #20
 8016132:	46bd      	mov	sp, r7
 8016134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016138:	4770      	bx	lr
 801613a:	bf00      	nop
 801613c:	20004c58 	.word	0x20004c58

08016140 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b084      	sub	sp, #16
 8016144:	af00      	add	r7, sp, #0
 8016146:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8016148:	f7ff f814 	bl	8015174 <xTaskGetTickCount>
 801614c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801614e:	4b0b      	ldr	r3, [pc, #44]	@ (801617c <prvSampleTimeNow+0x3c>)
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	68fa      	ldr	r2, [r7, #12]
 8016154:	429a      	cmp	r2, r3
 8016156:	d205      	bcs.n	8016164 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8016158:	f000 f93a 	bl	80163d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	2201      	movs	r2, #1
 8016160:	601a      	str	r2, [r3, #0]
 8016162:	e002      	b.n	801616a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	2200      	movs	r2, #0
 8016168:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801616a:	4a04      	ldr	r2, [pc, #16]	@ (801617c <prvSampleTimeNow+0x3c>)
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8016170:	68fb      	ldr	r3, [r7, #12]
}
 8016172:	4618      	mov	r0, r3
 8016174:	3710      	adds	r7, #16
 8016176:	46bd      	mov	sp, r7
 8016178:	bd80      	pop	{r7, pc}
 801617a:	bf00      	nop
 801617c:	20004c68 	.word	0x20004c68

08016180 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b086      	sub	sp, #24
 8016184:	af00      	add	r7, sp, #0
 8016186:	60f8      	str	r0, [r7, #12]
 8016188:	60b9      	str	r1, [r7, #8]
 801618a:	607a      	str	r2, [r7, #4]
 801618c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801618e:	2300      	movs	r3, #0
 8016190:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	68ba      	ldr	r2, [r7, #8]
 8016196:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	68fa      	ldr	r2, [r7, #12]
 801619c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801619e:	68ba      	ldr	r2, [r7, #8]
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	429a      	cmp	r2, r3
 80161a4:	d812      	bhi.n	80161cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80161a6:	687a      	ldr	r2, [r7, #4]
 80161a8:	683b      	ldr	r3, [r7, #0]
 80161aa:	1ad2      	subs	r2, r2, r3
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	699b      	ldr	r3, [r3, #24]
 80161b0:	429a      	cmp	r2, r3
 80161b2:	d302      	bcc.n	80161ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80161b4:	2301      	movs	r3, #1
 80161b6:	617b      	str	r3, [r7, #20]
 80161b8:	e01b      	b.n	80161f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80161ba:	4b10      	ldr	r3, [pc, #64]	@ (80161fc <prvInsertTimerInActiveList+0x7c>)
 80161bc:	681a      	ldr	r2, [r3, #0]
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	3304      	adds	r3, #4
 80161c2:	4619      	mov	r1, r3
 80161c4:	4610      	mov	r0, r2
 80161c6:	f7fd fdd2 	bl	8013d6e <vListInsert>
 80161ca:	e012      	b.n	80161f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80161cc:	687a      	ldr	r2, [r7, #4]
 80161ce:	683b      	ldr	r3, [r7, #0]
 80161d0:	429a      	cmp	r2, r3
 80161d2:	d206      	bcs.n	80161e2 <prvInsertTimerInActiveList+0x62>
 80161d4:	68ba      	ldr	r2, [r7, #8]
 80161d6:	683b      	ldr	r3, [r7, #0]
 80161d8:	429a      	cmp	r2, r3
 80161da:	d302      	bcc.n	80161e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80161dc:	2301      	movs	r3, #1
 80161de:	617b      	str	r3, [r7, #20]
 80161e0:	e007      	b.n	80161f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80161e2:	4b07      	ldr	r3, [pc, #28]	@ (8016200 <prvInsertTimerInActiveList+0x80>)
 80161e4:	681a      	ldr	r2, [r3, #0]
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	3304      	adds	r3, #4
 80161ea:	4619      	mov	r1, r3
 80161ec:	4610      	mov	r0, r2
 80161ee:	f7fd fdbe 	bl	8013d6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80161f2:	697b      	ldr	r3, [r7, #20]
}
 80161f4:	4618      	mov	r0, r3
 80161f6:	3718      	adds	r7, #24
 80161f8:	46bd      	mov	sp, r7
 80161fa:	bd80      	pop	{r7, pc}
 80161fc:	20004c5c 	.word	0x20004c5c
 8016200:	20004c58 	.word	0x20004c58

08016204 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8016204:	b580      	push	{r7, lr}
 8016206:	b08e      	sub	sp, #56	@ 0x38
 8016208:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801620a:	e0ce      	b.n	80163aa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	2b00      	cmp	r3, #0
 8016210:	da19      	bge.n	8016246 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8016212:	1d3b      	adds	r3, r7, #4
 8016214:	3304      	adds	r3, #4
 8016216:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8016218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801621a:	2b00      	cmp	r3, #0
 801621c:	d10b      	bne.n	8016236 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801621e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016222:	f383 8811 	msr	BASEPRI, r3
 8016226:	f3bf 8f6f 	isb	sy
 801622a:	f3bf 8f4f 	dsb	sy
 801622e:	61fb      	str	r3, [r7, #28]
}
 8016230:	bf00      	nop
 8016232:	bf00      	nop
 8016234:	e7fd      	b.n	8016232 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801623c:	6850      	ldr	r0, [r2, #4]
 801623e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016240:	6892      	ldr	r2, [r2, #8]
 8016242:	4611      	mov	r1, r2
 8016244:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	2b00      	cmp	r3, #0
 801624a:	f2c0 80ae 	blt.w	80163aa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8016252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016254:	695b      	ldr	r3, [r3, #20]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d004      	beq.n	8016264 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801625a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801625c:	3304      	adds	r3, #4
 801625e:	4618      	mov	r0, r3
 8016260:	f7fd fdbe 	bl	8013de0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016264:	463b      	mov	r3, r7
 8016266:	4618      	mov	r0, r3
 8016268:	f7ff ff6a 	bl	8016140 <prvSampleTimeNow>
 801626c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	2b09      	cmp	r3, #9
 8016272:	f200 8097 	bhi.w	80163a4 <prvProcessReceivedCommands+0x1a0>
 8016276:	a201      	add	r2, pc, #4	@ (adr r2, 801627c <prvProcessReceivedCommands+0x78>)
 8016278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801627c:	080162a5 	.word	0x080162a5
 8016280:	080162a5 	.word	0x080162a5
 8016284:	080162a5 	.word	0x080162a5
 8016288:	0801631b 	.word	0x0801631b
 801628c:	0801632f 	.word	0x0801632f
 8016290:	0801637b 	.word	0x0801637b
 8016294:	080162a5 	.word	0x080162a5
 8016298:	080162a5 	.word	0x080162a5
 801629c:	0801631b 	.word	0x0801631b
 80162a0:	0801632f 	.word	0x0801632f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80162a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80162aa:	f043 0301 	orr.w	r3, r3, #1
 80162ae:	b2da      	uxtb	r2, r3
 80162b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80162b6:	68ba      	ldr	r2, [r7, #8]
 80162b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162ba:	699b      	ldr	r3, [r3, #24]
 80162bc:	18d1      	adds	r1, r2, r3
 80162be:	68bb      	ldr	r3, [r7, #8]
 80162c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80162c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80162c4:	f7ff ff5c 	bl	8016180 <prvInsertTimerInActiveList>
 80162c8:	4603      	mov	r3, r0
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d06c      	beq.n	80163a8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80162ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162d0:	6a1b      	ldr	r3, [r3, #32]
 80162d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80162d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80162d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80162dc:	f003 0304 	and.w	r3, r3, #4
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d061      	beq.n	80163a8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80162e4:	68ba      	ldr	r2, [r7, #8]
 80162e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162e8:	699b      	ldr	r3, [r3, #24]
 80162ea:	441a      	add	r2, r3
 80162ec:	2300      	movs	r3, #0
 80162ee:	9300      	str	r3, [sp, #0]
 80162f0:	2300      	movs	r3, #0
 80162f2:	2100      	movs	r1, #0
 80162f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80162f6:	f7ff fe01 	bl	8015efc <xTimerGenericCommand>
 80162fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80162fc:	6a3b      	ldr	r3, [r7, #32]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d152      	bne.n	80163a8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8016302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016306:	f383 8811 	msr	BASEPRI, r3
 801630a:	f3bf 8f6f 	isb	sy
 801630e:	f3bf 8f4f 	dsb	sy
 8016312:	61bb      	str	r3, [r7, #24]
}
 8016314:	bf00      	nop
 8016316:	bf00      	nop
 8016318:	e7fd      	b.n	8016316 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801631a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801631c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016320:	f023 0301 	bic.w	r3, r3, #1
 8016324:	b2da      	uxtb	r2, r3
 8016326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016328:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801632c:	e03d      	b.n	80163aa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801632e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016330:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016334:	f043 0301 	orr.w	r3, r3, #1
 8016338:	b2da      	uxtb	r2, r3
 801633a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801633c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016340:	68ba      	ldr	r2, [r7, #8]
 8016342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016344:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016348:	699b      	ldr	r3, [r3, #24]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d10b      	bne.n	8016366 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801634e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016352:	f383 8811 	msr	BASEPRI, r3
 8016356:	f3bf 8f6f 	isb	sy
 801635a:	f3bf 8f4f 	dsb	sy
 801635e:	617b      	str	r3, [r7, #20]
}
 8016360:	bf00      	nop
 8016362:	bf00      	nop
 8016364:	e7fd      	b.n	8016362 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8016366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016368:	699a      	ldr	r2, [r3, #24]
 801636a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801636c:	18d1      	adds	r1, r2, r3
 801636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016372:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016374:	f7ff ff04 	bl	8016180 <prvInsertTimerInActiveList>
					break;
 8016378:	e017      	b.n	80163aa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801637a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801637c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016380:	f003 0302 	and.w	r3, r3, #2
 8016384:	2b00      	cmp	r3, #0
 8016386:	d103      	bne.n	8016390 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8016388:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801638a:	f000 fbe5 	bl	8016b58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801638e:	e00c      	b.n	80163aa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016392:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016396:	f023 0301 	bic.w	r3, r3, #1
 801639a:	b2da      	uxtb	r2, r3
 801639c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801639e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80163a2:	e002      	b.n	80163aa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80163a4:	bf00      	nop
 80163a6:	e000      	b.n	80163aa <prvProcessReceivedCommands+0x1a6>
					break;
 80163a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80163aa:	4b08      	ldr	r3, [pc, #32]	@ (80163cc <prvProcessReceivedCommands+0x1c8>)
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	1d39      	adds	r1, r7, #4
 80163b0:	2200      	movs	r2, #0
 80163b2:	4618      	mov	r0, r3
 80163b4:	f7fe f856 	bl	8014464 <xQueueReceive>
 80163b8:	4603      	mov	r3, r0
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	f47f af26 	bne.w	801620c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80163c0:	bf00      	nop
 80163c2:	bf00      	nop
 80163c4:	3730      	adds	r7, #48	@ 0x30
 80163c6:	46bd      	mov	sp, r7
 80163c8:	bd80      	pop	{r7, pc}
 80163ca:	bf00      	nop
 80163cc:	20004c60 	.word	0x20004c60

080163d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b088      	sub	sp, #32
 80163d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80163d6:	e049      	b.n	801646c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80163d8:	4b2e      	ldr	r3, [pc, #184]	@ (8016494 <prvSwitchTimerLists+0xc4>)
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	68db      	ldr	r3, [r3, #12]
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80163e2:	4b2c      	ldr	r3, [pc, #176]	@ (8016494 <prvSwitchTimerLists+0xc4>)
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	68db      	ldr	r3, [r3, #12]
 80163e8:	68db      	ldr	r3, [r3, #12]
 80163ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	3304      	adds	r3, #4
 80163f0:	4618      	mov	r0, r3
 80163f2:	f7fd fcf5 	bl	8013de0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	6a1b      	ldr	r3, [r3, #32]
 80163fa:	68f8      	ldr	r0, [r7, #12]
 80163fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016404:	f003 0304 	and.w	r3, r3, #4
 8016408:	2b00      	cmp	r3, #0
 801640a:	d02f      	beq.n	801646c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	699b      	ldr	r3, [r3, #24]
 8016410:	693a      	ldr	r2, [r7, #16]
 8016412:	4413      	add	r3, r2
 8016414:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8016416:	68ba      	ldr	r2, [r7, #8]
 8016418:	693b      	ldr	r3, [r7, #16]
 801641a:	429a      	cmp	r2, r3
 801641c:	d90e      	bls.n	801643c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	68ba      	ldr	r2, [r7, #8]
 8016422:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	68fa      	ldr	r2, [r7, #12]
 8016428:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801642a:	4b1a      	ldr	r3, [pc, #104]	@ (8016494 <prvSwitchTimerLists+0xc4>)
 801642c:	681a      	ldr	r2, [r3, #0]
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	3304      	adds	r3, #4
 8016432:	4619      	mov	r1, r3
 8016434:	4610      	mov	r0, r2
 8016436:	f7fd fc9a 	bl	8013d6e <vListInsert>
 801643a:	e017      	b.n	801646c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801643c:	2300      	movs	r3, #0
 801643e:	9300      	str	r3, [sp, #0]
 8016440:	2300      	movs	r3, #0
 8016442:	693a      	ldr	r2, [r7, #16]
 8016444:	2100      	movs	r1, #0
 8016446:	68f8      	ldr	r0, [r7, #12]
 8016448:	f7ff fd58 	bl	8015efc <xTimerGenericCommand>
 801644c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d10b      	bne.n	801646c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8016454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016458:	f383 8811 	msr	BASEPRI, r3
 801645c:	f3bf 8f6f 	isb	sy
 8016460:	f3bf 8f4f 	dsb	sy
 8016464:	603b      	str	r3, [r7, #0]
}
 8016466:	bf00      	nop
 8016468:	bf00      	nop
 801646a:	e7fd      	b.n	8016468 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801646c:	4b09      	ldr	r3, [pc, #36]	@ (8016494 <prvSwitchTimerLists+0xc4>)
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d1b0      	bne.n	80163d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016476:	4b07      	ldr	r3, [pc, #28]	@ (8016494 <prvSwitchTimerLists+0xc4>)
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801647c:	4b06      	ldr	r3, [pc, #24]	@ (8016498 <prvSwitchTimerLists+0xc8>)
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	4a04      	ldr	r2, [pc, #16]	@ (8016494 <prvSwitchTimerLists+0xc4>)
 8016482:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8016484:	4a04      	ldr	r2, [pc, #16]	@ (8016498 <prvSwitchTimerLists+0xc8>)
 8016486:	697b      	ldr	r3, [r7, #20]
 8016488:	6013      	str	r3, [r2, #0]
}
 801648a:	bf00      	nop
 801648c:	3718      	adds	r7, #24
 801648e:	46bd      	mov	sp, r7
 8016490:	bd80      	pop	{r7, pc}
 8016492:	bf00      	nop
 8016494:	20004c58 	.word	0x20004c58
 8016498:	20004c5c 	.word	0x20004c5c

0801649c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801649c:	b580      	push	{r7, lr}
 801649e:	b082      	sub	sp, #8
 80164a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80164a2:	f000 f969 	bl	8016778 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80164a6:	4b15      	ldr	r3, [pc, #84]	@ (80164fc <prvCheckForValidListAndQueue+0x60>)
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d120      	bne.n	80164f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80164ae:	4814      	ldr	r0, [pc, #80]	@ (8016500 <prvCheckForValidListAndQueue+0x64>)
 80164b0:	f7fd fc0c 	bl	8013ccc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80164b4:	4813      	ldr	r0, [pc, #76]	@ (8016504 <prvCheckForValidListAndQueue+0x68>)
 80164b6:	f7fd fc09 	bl	8013ccc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80164ba:	4b13      	ldr	r3, [pc, #76]	@ (8016508 <prvCheckForValidListAndQueue+0x6c>)
 80164bc:	4a10      	ldr	r2, [pc, #64]	@ (8016500 <prvCheckForValidListAndQueue+0x64>)
 80164be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80164c0:	4b12      	ldr	r3, [pc, #72]	@ (801650c <prvCheckForValidListAndQueue+0x70>)
 80164c2:	4a10      	ldr	r2, [pc, #64]	@ (8016504 <prvCheckForValidListAndQueue+0x68>)
 80164c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80164c6:	2300      	movs	r3, #0
 80164c8:	9300      	str	r3, [sp, #0]
 80164ca:	4b11      	ldr	r3, [pc, #68]	@ (8016510 <prvCheckForValidListAndQueue+0x74>)
 80164cc:	4a11      	ldr	r2, [pc, #68]	@ (8016514 <prvCheckForValidListAndQueue+0x78>)
 80164ce:	2110      	movs	r1, #16
 80164d0:	200a      	movs	r0, #10
 80164d2:	f7fd fd19 	bl	8013f08 <xQueueGenericCreateStatic>
 80164d6:	4603      	mov	r3, r0
 80164d8:	4a08      	ldr	r2, [pc, #32]	@ (80164fc <prvCheckForValidListAndQueue+0x60>)
 80164da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80164dc:	4b07      	ldr	r3, [pc, #28]	@ (80164fc <prvCheckForValidListAndQueue+0x60>)
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d005      	beq.n	80164f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80164e4:	4b05      	ldr	r3, [pc, #20]	@ (80164fc <prvCheckForValidListAndQueue+0x60>)
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	490b      	ldr	r1, [pc, #44]	@ (8016518 <prvCheckForValidListAndQueue+0x7c>)
 80164ea:	4618      	mov	r0, r3
 80164ec:	f7fe fad4 	bl	8014a98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80164f0:	f000 f974 	bl	80167dc <vPortExitCritical>
}
 80164f4:	bf00      	nop
 80164f6:	46bd      	mov	sp, r7
 80164f8:	bd80      	pop	{r7, pc}
 80164fa:	bf00      	nop
 80164fc:	20004c60 	.word	0x20004c60
 8016500:	20004c30 	.word	0x20004c30
 8016504:	20004c44 	.word	0x20004c44
 8016508:	20004c58 	.word	0x20004c58
 801650c:	20004c5c 	.word	0x20004c5c
 8016510:	20004d0c 	.word	0x20004d0c
 8016514:	20004c6c 	.word	0x20004c6c
 8016518:	0802018c 	.word	0x0802018c

0801651c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801651c:	b480      	push	{r7}
 801651e:	b085      	sub	sp, #20
 8016520:	af00      	add	r7, sp, #0
 8016522:	60f8      	str	r0, [r7, #12]
 8016524:	60b9      	str	r1, [r7, #8]
 8016526:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	3b04      	subs	r3, #4
 801652c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8016534:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	3b04      	subs	r3, #4
 801653a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801653c:	68bb      	ldr	r3, [r7, #8]
 801653e:	f023 0201 	bic.w	r2, r3, #1
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	3b04      	subs	r3, #4
 801654a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801654c:	4a0c      	ldr	r2, [pc, #48]	@ (8016580 <pxPortInitialiseStack+0x64>)
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	3b14      	subs	r3, #20
 8016556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016558:	687a      	ldr	r2, [r7, #4]
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	3b04      	subs	r3, #4
 8016562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	f06f 0202 	mvn.w	r2, #2
 801656a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	3b20      	subs	r3, #32
 8016570:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016572:	68fb      	ldr	r3, [r7, #12]
}
 8016574:	4618      	mov	r0, r3
 8016576:	3714      	adds	r7, #20
 8016578:	46bd      	mov	sp, r7
 801657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657e:	4770      	bx	lr
 8016580:	08016585 	.word	0x08016585

08016584 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016584:	b480      	push	{r7}
 8016586:	b085      	sub	sp, #20
 8016588:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801658a:	2300      	movs	r3, #0
 801658c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801658e:	4b13      	ldr	r3, [pc, #76]	@ (80165dc <prvTaskExitError+0x58>)
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016596:	d00b      	beq.n	80165b0 <prvTaskExitError+0x2c>
	__asm volatile
 8016598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801659c:	f383 8811 	msr	BASEPRI, r3
 80165a0:	f3bf 8f6f 	isb	sy
 80165a4:	f3bf 8f4f 	dsb	sy
 80165a8:	60fb      	str	r3, [r7, #12]
}
 80165aa:	bf00      	nop
 80165ac:	bf00      	nop
 80165ae:	e7fd      	b.n	80165ac <prvTaskExitError+0x28>
	__asm volatile
 80165b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165b4:	f383 8811 	msr	BASEPRI, r3
 80165b8:	f3bf 8f6f 	isb	sy
 80165bc:	f3bf 8f4f 	dsb	sy
 80165c0:	60bb      	str	r3, [r7, #8]
}
 80165c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80165c4:	bf00      	nop
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d0fc      	beq.n	80165c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80165cc:	bf00      	nop
 80165ce:	bf00      	nop
 80165d0:	3714      	adds	r7, #20
 80165d2:	46bd      	mov	sp, r7
 80165d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d8:	4770      	bx	lr
 80165da:	bf00      	nop
 80165dc:	200000ec 	.word	0x200000ec

080165e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80165e0:	4b07      	ldr	r3, [pc, #28]	@ (8016600 <pxCurrentTCBConst2>)
 80165e2:	6819      	ldr	r1, [r3, #0]
 80165e4:	6808      	ldr	r0, [r1, #0]
 80165e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165ea:	f380 8809 	msr	PSP, r0
 80165ee:	f3bf 8f6f 	isb	sy
 80165f2:	f04f 0000 	mov.w	r0, #0
 80165f6:	f380 8811 	msr	BASEPRI, r0
 80165fa:	4770      	bx	lr
 80165fc:	f3af 8000 	nop.w

08016600 <pxCurrentTCBConst2>:
 8016600:	20004730 	.word	0x20004730
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016604:	bf00      	nop
 8016606:	bf00      	nop

08016608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016608:	4808      	ldr	r0, [pc, #32]	@ (801662c <prvPortStartFirstTask+0x24>)
 801660a:	6800      	ldr	r0, [r0, #0]
 801660c:	6800      	ldr	r0, [r0, #0]
 801660e:	f380 8808 	msr	MSP, r0
 8016612:	f04f 0000 	mov.w	r0, #0
 8016616:	f380 8814 	msr	CONTROL, r0
 801661a:	b662      	cpsie	i
 801661c:	b661      	cpsie	f
 801661e:	f3bf 8f4f 	dsb	sy
 8016622:	f3bf 8f6f 	isb	sy
 8016626:	df00      	svc	0
 8016628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801662a:	bf00      	nop
 801662c:	e000ed08 	.word	0xe000ed08

08016630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016630:	b580      	push	{r7, lr}
 8016632:	b086      	sub	sp, #24
 8016634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016636:	4b47      	ldr	r3, [pc, #284]	@ (8016754 <xPortStartScheduler+0x124>)
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	4a47      	ldr	r2, [pc, #284]	@ (8016758 <xPortStartScheduler+0x128>)
 801663c:	4293      	cmp	r3, r2
 801663e:	d10b      	bne.n	8016658 <xPortStartScheduler+0x28>
	__asm volatile
 8016640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016644:	f383 8811 	msr	BASEPRI, r3
 8016648:	f3bf 8f6f 	isb	sy
 801664c:	f3bf 8f4f 	dsb	sy
 8016650:	60fb      	str	r3, [r7, #12]
}
 8016652:	bf00      	nop
 8016654:	bf00      	nop
 8016656:	e7fd      	b.n	8016654 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016658:	4b3e      	ldr	r3, [pc, #248]	@ (8016754 <xPortStartScheduler+0x124>)
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	4a3f      	ldr	r2, [pc, #252]	@ (801675c <xPortStartScheduler+0x12c>)
 801665e:	4293      	cmp	r3, r2
 8016660:	d10b      	bne.n	801667a <xPortStartScheduler+0x4a>
	__asm volatile
 8016662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016666:	f383 8811 	msr	BASEPRI, r3
 801666a:	f3bf 8f6f 	isb	sy
 801666e:	f3bf 8f4f 	dsb	sy
 8016672:	613b      	str	r3, [r7, #16]
}
 8016674:	bf00      	nop
 8016676:	bf00      	nop
 8016678:	e7fd      	b.n	8016676 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801667a:	4b39      	ldr	r3, [pc, #228]	@ (8016760 <xPortStartScheduler+0x130>)
 801667c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801667e:	697b      	ldr	r3, [r7, #20]
 8016680:	781b      	ldrb	r3, [r3, #0]
 8016682:	b2db      	uxtb	r3, r3
 8016684:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016686:	697b      	ldr	r3, [r7, #20]
 8016688:	22ff      	movs	r2, #255	@ 0xff
 801668a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801668c:	697b      	ldr	r3, [r7, #20]
 801668e:	781b      	ldrb	r3, [r3, #0]
 8016690:	b2db      	uxtb	r3, r3
 8016692:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016694:	78fb      	ldrb	r3, [r7, #3]
 8016696:	b2db      	uxtb	r3, r3
 8016698:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801669c:	b2da      	uxtb	r2, r3
 801669e:	4b31      	ldr	r3, [pc, #196]	@ (8016764 <xPortStartScheduler+0x134>)
 80166a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80166a2:	4b31      	ldr	r3, [pc, #196]	@ (8016768 <xPortStartScheduler+0x138>)
 80166a4:	2207      	movs	r2, #7
 80166a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80166a8:	e009      	b.n	80166be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80166aa:	4b2f      	ldr	r3, [pc, #188]	@ (8016768 <xPortStartScheduler+0x138>)
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	3b01      	subs	r3, #1
 80166b0:	4a2d      	ldr	r2, [pc, #180]	@ (8016768 <xPortStartScheduler+0x138>)
 80166b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80166b4:	78fb      	ldrb	r3, [r7, #3]
 80166b6:	b2db      	uxtb	r3, r3
 80166b8:	005b      	lsls	r3, r3, #1
 80166ba:	b2db      	uxtb	r3, r3
 80166bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80166be:	78fb      	ldrb	r3, [r7, #3]
 80166c0:	b2db      	uxtb	r3, r3
 80166c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80166c6:	2b80      	cmp	r3, #128	@ 0x80
 80166c8:	d0ef      	beq.n	80166aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80166ca:	4b27      	ldr	r3, [pc, #156]	@ (8016768 <xPortStartScheduler+0x138>)
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	f1c3 0307 	rsb	r3, r3, #7
 80166d2:	2b04      	cmp	r3, #4
 80166d4:	d00b      	beq.n	80166ee <xPortStartScheduler+0xbe>
	__asm volatile
 80166d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166da:	f383 8811 	msr	BASEPRI, r3
 80166de:	f3bf 8f6f 	isb	sy
 80166e2:	f3bf 8f4f 	dsb	sy
 80166e6:	60bb      	str	r3, [r7, #8]
}
 80166e8:	bf00      	nop
 80166ea:	bf00      	nop
 80166ec:	e7fd      	b.n	80166ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80166ee:	4b1e      	ldr	r3, [pc, #120]	@ (8016768 <xPortStartScheduler+0x138>)
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	021b      	lsls	r3, r3, #8
 80166f4:	4a1c      	ldr	r2, [pc, #112]	@ (8016768 <xPortStartScheduler+0x138>)
 80166f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80166f8:	4b1b      	ldr	r3, [pc, #108]	@ (8016768 <xPortStartScheduler+0x138>)
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016700:	4a19      	ldr	r2, [pc, #100]	@ (8016768 <xPortStartScheduler+0x138>)
 8016702:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	b2da      	uxtb	r2, r3
 8016708:	697b      	ldr	r3, [r7, #20]
 801670a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801670c:	4b17      	ldr	r3, [pc, #92]	@ (801676c <xPortStartScheduler+0x13c>)
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	4a16      	ldr	r2, [pc, #88]	@ (801676c <xPortStartScheduler+0x13c>)
 8016712:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8016716:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016718:	4b14      	ldr	r3, [pc, #80]	@ (801676c <xPortStartScheduler+0x13c>)
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	4a13      	ldr	r2, [pc, #76]	@ (801676c <xPortStartScheduler+0x13c>)
 801671e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016722:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016724:	f000 f8da 	bl	80168dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016728:	4b11      	ldr	r3, [pc, #68]	@ (8016770 <xPortStartScheduler+0x140>)
 801672a:	2200      	movs	r2, #0
 801672c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801672e:	f000 f8f9 	bl	8016924 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016732:	4b10      	ldr	r3, [pc, #64]	@ (8016774 <xPortStartScheduler+0x144>)
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	4a0f      	ldr	r2, [pc, #60]	@ (8016774 <xPortStartScheduler+0x144>)
 8016738:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801673c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801673e:	f7ff ff63 	bl	8016608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016742:	f7fe fde1 	bl	8015308 <vTaskSwitchContext>
	prvTaskExitError();
 8016746:	f7ff ff1d 	bl	8016584 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801674a:	2300      	movs	r3, #0
}
 801674c:	4618      	mov	r0, r3
 801674e:	3718      	adds	r7, #24
 8016750:	46bd      	mov	sp, r7
 8016752:	bd80      	pop	{r7, pc}
 8016754:	e000ed00 	.word	0xe000ed00
 8016758:	410fc271 	.word	0x410fc271
 801675c:	410fc270 	.word	0x410fc270
 8016760:	e000e400 	.word	0xe000e400
 8016764:	20004d5c 	.word	0x20004d5c
 8016768:	20004d60 	.word	0x20004d60
 801676c:	e000ed20 	.word	0xe000ed20
 8016770:	200000ec 	.word	0x200000ec
 8016774:	e000ef34 	.word	0xe000ef34

08016778 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016778:	b480      	push	{r7}
 801677a:	b083      	sub	sp, #12
 801677c:	af00      	add	r7, sp, #0
	__asm volatile
 801677e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016782:	f383 8811 	msr	BASEPRI, r3
 8016786:	f3bf 8f6f 	isb	sy
 801678a:	f3bf 8f4f 	dsb	sy
 801678e:	607b      	str	r3, [r7, #4]
}
 8016790:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016792:	4b10      	ldr	r3, [pc, #64]	@ (80167d4 <vPortEnterCritical+0x5c>)
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	3301      	adds	r3, #1
 8016798:	4a0e      	ldr	r2, [pc, #56]	@ (80167d4 <vPortEnterCritical+0x5c>)
 801679a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801679c:	4b0d      	ldr	r3, [pc, #52]	@ (80167d4 <vPortEnterCritical+0x5c>)
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	2b01      	cmp	r3, #1
 80167a2:	d110      	bne.n	80167c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80167a4:	4b0c      	ldr	r3, [pc, #48]	@ (80167d8 <vPortEnterCritical+0x60>)
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	b2db      	uxtb	r3, r3
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d00b      	beq.n	80167c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80167ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167b2:	f383 8811 	msr	BASEPRI, r3
 80167b6:	f3bf 8f6f 	isb	sy
 80167ba:	f3bf 8f4f 	dsb	sy
 80167be:	603b      	str	r3, [r7, #0]
}
 80167c0:	bf00      	nop
 80167c2:	bf00      	nop
 80167c4:	e7fd      	b.n	80167c2 <vPortEnterCritical+0x4a>
	}
}
 80167c6:	bf00      	nop
 80167c8:	370c      	adds	r7, #12
 80167ca:	46bd      	mov	sp, r7
 80167cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d0:	4770      	bx	lr
 80167d2:	bf00      	nop
 80167d4:	200000ec 	.word	0x200000ec
 80167d8:	e000ed04 	.word	0xe000ed04

080167dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80167dc:	b480      	push	{r7}
 80167de:	b083      	sub	sp, #12
 80167e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80167e2:	4b12      	ldr	r3, [pc, #72]	@ (801682c <vPortExitCritical+0x50>)
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d10b      	bne.n	8016802 <vPortExitCritical+0x26>
	__asm volatile
 80167ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167ee:	f383 8811 	msr	BASEPRI, r3
 80167f2:	f3bf 8f6f 	isb	sy
 80167f6:	f3bf 8f4f 	dsb	sy
 80167fa:	607b      	str	r3, [r7, #4]
}
 80167fc:	bf00      	nop
 80167fe:	bf00      	nop
 8016800:	e7fd      	b.n	80167fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016802:	4b0a      	ldr	r3, [pc, #40]	@ (801682c <vPortExitCritical+0x50>)
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	3b01      	subs	r3, #1
 8016808:	4a08      	ldr	r2, [pc, #32]	@ (801682c <vPortExitCritical+0x50>)
 801680a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801680c:	4b07      	ldr	r3, [pc, #28]	@ (801682c <vPortExitCritical+0x50>)
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	2b00      	cmp	r3, #0
 8016812:	d105      	bne.n	8016820 <vPortExitCritical+0x44>
 8016814:	2300      	movs	r3, #0
 8016816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016818:	683b      	ldr	r3, [r7, #0]
 801681a:	f383 8811 	msr	BASEPRI, r3
}
 801681e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016820:	bf00      	nop
 8016822:	370c      	adds	r7, #12
 8016824:	46bd      	mov	sp, r7
 8016826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801682a:	4770      	bx	lr
 801682c:	200000ec 	.word	0x200000ec

08016830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016830:	f3ef 8009 	mrs	r0, PSP
 8016834:	f3bf 8f6f 	isb	sy
 8016838:	4b15      	ldr	r3, [pc, #84]	@ (8016890 <pxCurrentTCBConst>)
 801683a:	681a      	ldr	r2, [r3, #0]
 801683c:	f01e 0f10 	tst.w	lr, #16
 8016840:	bf08      	it	eq
 8016842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801684a:	6010      	str	r0, [r2, #0]
 801684c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016850:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8016854:	f380 8811 	msr	BASEPRI, r0
 8016858:	f3bf 8f4f 	dsb	sy
 801685c:	f3bf 8f6f 	isb	sy
 8016860:	f7fe fd52 	bl	8015308 <vTaskSwitchContext>
 8016864:	f04f 0000 	mov.w	r0, #0
 8016868:	f380 8811 	msr	BASEPRI, r0
 801686c:	bc09      	pop	{r0, r3}
 801686e:	6819      	ldr	r1, [r3, #0]
 8016870:	6808      	ldr	r0, [r1, #0]
 8016872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016876:	f01e 0f10 	tst.w	lr, #16
 801687a:	bf08      	it	eq
 801687c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016880:	f380 8809 	msr	PSP, r0
 8016884:	f3bf 8f6f 	isb	sy
 8016888:	4770      	bx	lr
 801688a:	bf00      	nop
 801688c:	f3af 8000 	nop.w

08016890 <pxCurrentTCBConst>:
 8016890:	20004730 	.word	0x20004730
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016894:	bf00      	nop
 8016896:	bf00      	nop

08016898 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016898:	b580      	push	{r7, lr}
 801689a:	b082      	sub	sp, #8
 801689c:	af00      	add	r7, sp, #0
	__asm volatile
 801689e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168a2:	f383 8811 	msr	BASEPRI, r3
 80168a6:	f3bf 8f6f 	isb	sy
 80168aa:	f3bf 8f4f 	dsb	sy
 80168ae:	607b      	str	r3, [r7, #4]
}
 80168b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80168b2:	f7fe fc6f 	bl	8015194 <xTaskIncrementTick>
 80168b6:	4603      	mov	r3, r0
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d003      	beq.n	80168c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80168bc:	4b06      	ldr	r3, [pc, #24]	@ (80168d8 <xPortSysTickHandler+0x40>)
 80168be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80168c2:	601a      	str	r2, [r3, #0]
 80168c4:	2300      	movs	r3, #0
 80168c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80168c8:	683b      	ldr	r3, [r7, #0]
 80168ca:	f383 8811 	msr	BASEPRI, r3
}
 80168ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80168d0:	bf00      	nop
 80168d2:	3708      	adds	r7, #8
 80168d4:	46bd      	mov	sp, r7
 80168d6:	bd80      	pop	{r7, pc}
 80168d8:	e000ed04 	.word	0xe000ed04

080168dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80168dc:	b480      	push	{r7}
 80168de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80168e0:	4b0b      	ldr	r3, [pc, #44]	@ (8016910 <vPortSetupTimerInterrupt+0x34>)
 80168e2:	2200      	movs	r2, #0
 80168e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80168e6:	4b0b      	ldr	r3, [pc, #44]	@ (8016914 <vPortSetupTimerInterrupt+0x38>)
 80168e8:	2200      	movs	r2, #0
 80168ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80168ec:	4b0a      	ldr	r3, [pc, #40]	@ (8016918 <vPortSetupTimerInterrupt+0x3c>)
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	4a0a      	ldr	r2, [pc, #40]	@ (801691c <vPortSetupTimerInterrupt+0x40>)
 80168f2:	fba2 2303 	umull	r2, r3, r2, r3
 80168f6:	099b      	lsrs	r3, r3, #6
 80168f8:	4a09      	ldr	r2, [pc, #36]	@ (8016920 <vPortSetupTimerInterrupt+0x44>)
 80168fa:	3b01      	subs	r3, #1
 80168fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80168fe:	4b04      	ldr	r3, [pc, #16]	@ (8016910 <vPortSetupTimerInterrupt+0x34>)
 8016900:	2207      	movs	r2, #7
 8016902:	601a      	str	r2, [r3, #0]
}
 8016904:	bf00      	nop
 8016906:	46bd      	mov	sp, r7
 8016908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690c:	4770      	bx	lr
 801690e:	bf00      	nop
 8016910:	e000e010 	.word	0xe000e010
 8016914:	e000e018 	.word	0xe000e018
 8016918:	20000054 	.word	0x20000054
 801691c:	10624dd3 	.word	0x10624dd3
 8016920:	e000e014 	.word	0xe000e014

08016924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016924:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8016934 <vPortEnableVFP+0x10>
 8016928:	6801      	ldr	r1, [r0, #0]
 801692a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801692e:	6001      	str	r1, [r0, #0]
 8016930:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016932:	bf00      	nop
 8016934:	e000ed88 	.word	0xe000ed88

08016938 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016938:	b480      	push	{r7}
 801693a:	b085      	sub	sp, #20
 801693c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801693e:	f3ef 8305 	mrs	r3, IPSR
 8016942:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	2b0f      	cmp	r3, #15
 8016948:	d915      	bls.n	8016976 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801694a:	4a18      	ldr	r2, [pc, #96]	@ (80169ac <vPortValidateInterruptPriority+0x74>)
 801694c:	68fb      	ldr	r3, [r7, #12]
 801694e:	4413      	add	r3, r2
 8016950:	781b      	ldrb	r3, [r3, #0]
 8016952:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016954:	4b16      	ldr	r3, [pc, #88]	@ (80169b0 <vPortValidateInterruptPriority+0x78>)
 8016956:	781b      	ldrb	r3, [r3, #0]
 8016958:	7afa      	ldrb	r2, [r7, #11]
 801695a:	429a      	cmp	r2, r3
 801695c:	d20b      	bcs.n	8016976 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801695e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016962:	f383 8811 	msr	BASEPRI, r3
 8016966:	f3bf 8f6f 	isb	sy
 801696a:	f3bf 8f4f 	dsb	sy
 801696e:	607b      	str	r3, [r7, #4]
}
 8016970:	bf00      	nop
 8016972:	bf00      	nop
 8016974:	e7fd      	b.n	8016972 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016976:	4b0f      	ldr	r3, [pc, #60]	@ (80169b4 <vPortValidateInterruptPriority+0x7c>)
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801697e:	4b0e      	ldr	r3, [pc, #56]	@ (80169b8 <vPortValidateInterruptPriority+0x80>)
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	429a      	cmp	r2, r3
 8016984:	d90b      	bls.n	801699e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8016986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801698a:	f383 8811 	msr	BASEPRI, r3
 801698e:	f3bf 8f6f 	isb	sy
 8016992:	f3bf 8f4f 	dsb	sy
 8016996:	603b      	str	r3, [r7, #0]
}
 8016998:	bf00      	nop
 801699a:	bf00      	nop
 801699c:	e7fd      	b.n	801699a <vPortValidateInterruptPriority+0x62>
	}
 801699e:	bf00      	nop
 80169a0:	3714      	adds	r7, #20
 80169a2:	46bd      	mov	sp, r7
 80169a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a8:	4770      	bx	lr
 80169aa:	bf00      	nop
 80169ac:	e000e3f0 	.word	0xe000e3f0
 80169b0:	20004d5c 	.word	0x20004d5c
 80169b4:	e000ed0c 	.word	0xe000ed0c
 80169b8:	20004d60 	.word	0x20004d60

080169bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80169bc:	b580      	push	{r7, lr}
 80169be:	b08a      	sub	sp, #40	@ 0x28
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80169c4:	2300      	movs	r3, #0
 80169c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80169c8:	f7fe fb28 	bl	801501c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80169cc:	4b5c      	ldr	r3, [pc, #368]	@ (8016b40 <pvPortMalloc+0x184>)
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d101      	bne.n	80169d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80169d4:	f000 f924 	bl	8016c20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80169d8:	4b5a      	ldr	r3, [pc, #360]	@ (8016b44 <pvPortMalloc+0x188>)
 80169da:	681a      	ldr	r2, [r3, #0]
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	4013      	ands	r3, r2
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	f040 8095 	bne.w	8016b10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d01e      	beq.n	8016a2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80169ec:	2208      	movs	r2, #8
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	4413      	add	r3, r2
 80169f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	f003 0307 	and.w	r3, r3, #7
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d015      	beq.n	8016a2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	f023 0307 	bic.w	r3, r3, #7
 8016a04:	3308      	adds	r3, #8
 8016a06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	f003 0307 	and.w	r3, r3, #7
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d00b      	beq.n	8016a2a <pvPortMalloc+0x6e>
	__asm volatile
 8016a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a16:	f383 8811 	msr	BASEPRI, r3
 8016a1a:	f3bf 8f6f 	isb	sy
 8016a1e:	f3bf 8f4f 	dsb	sy
 8016a22:	617b      	str	r3, [r7, #20]
}
 8016a24:	bf00      	nop
 8016a26:	bf00      	nop
 8016a28:	e7fd      	b.n	8016a26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d06f      	beq.n	8016b10 <pvPortMalloc+0x154>
 8016a30:	4b45      	ldr	r3, [pc, #276]	@ (8016b48 <pvPortMalloc+0x18c>)
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	687a      	ldr	r2, [r7, #4]
 8016a36:	429a      	cmp	r2, r3
 8016a38:	d86a      	bhi.n	8016b10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016a3a:	4b44      	ldr	r3, [pc, #272]	@ (8016b4c <pvPortMalloc+0x190>)
 8016a3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016a3e:	4b43      	ldr	r3, [pc, #268]	@ (8016b4c <pvPortMalloc+0x190>)
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016a44:	e004      	b.n	8016a50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a52:	685b      	ldr	r3, [r3, #4]
 8016a54:	687a      	ldr	r2, [r7, #4]
 8016a56:	429a      	cmp	r2, r3
 8016a58:	d903      	bls.n	8016a62 <pvPortMalloc+0xa6>
 8016a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d1f1      	bne.n	8016a46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016a62:	4b37      	ldr	r3, [pc, #220]	@ (8016b40 <pvPortMalloc+0x184>)
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a68:	429a      	cmp	r2, r3
 8016a6a:	d051      	beq.n	8016b10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016a6c:	6a3b      	ldr	r3, [r7, #32]
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	2208      	movs	r2, #8
 8016a72:	4413      	add	r3, r2
 8016a74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a78:	681a      	ldr	r2, [r3, #0]
 8016a7a:	6a3b      	ldr	r3, [r7, #32]
 8016a7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a80:	685a      	ldr	r2, [r3, #4]
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	1ad2      	subs	r2, r2, r3
 8016a86:	2308      	movs	r3, #8
 8016a88:	005b      	lsls	r3, r3, #1
 8016a8a:	429a      	cmp	r2, r3
 8016a8c:	d920      	bls.n	8016ad0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	4413      	add	r3, r2
 8016a94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016a96:	69bb      	ldr	r3, [r7, #24]
 8016a98:	f003 0307 	and.w	r3, r3, #7
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d00b      	beq.n	8016ab8 <pvPortMalloc+0xfc>
	__asm volatile
 8016aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016aa4:	f383 8811 	msr	BASEPRI, r3
 8016aa8:	f3bf 8f6f 	isb	sy
 8016aac:	f3bf 8f4f 	dsb	sy
 8016ab0:	613b      	str	r3, [r7, #16]
}
 8016ab2:	bf00      	nop
 8016ab4:	bf00      	nop
 8016ab6:	e7fd      	b.n	8016ab4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aba:	685a      	ldr	r2, [r3, #4]
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	1ad2      	subs	r2, r2, r3
 8016ac0:	69bb      	ldr	r3, [r7, #24]
 8016ac2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ac6:	687a      	ldr	r2, [r7, #4]
 8016ac8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016aca:	69b8      	ldr	r0, [r7, #24]
 8016acc:	f000 f90a 	bl	8016ce4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8016b48 <pvPortMalloc+0x18c>)
 8016ad2:	681a      	ldr	r2, [r3, #0]
 8016ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ad6:	685b      	ldr	r3, [r3, #4]
 8016ad8:	1ad3      	subs	r3, r2, r3
 8016ada:	4a1b      	ldr	r2, [pc, #108]	@ (8016b48 <pvPortMalloc+0x18c>)
 8016adc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016ade:	4b1a      	ldr	r3, [pc, #104]	@ (8016b48 <pvPortMalloc+0x18c>)
 8016ae0:	681a      	ldr	r2, [r3, #0]
 8016ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8016b50 <pvPortMalloc+0x194>)
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	429a      	cmp	r2, r3
 8016ae8:	d203      	bcs.n	8016af2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016aea:	4b17      	ldr	r3, [pc, #92]	@ (8016b48 <pvPortMalloc+0x18c>)
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	4a18      	ldr	r2, [pc, #96]	@ (8016b50 <pvPortMalloc+0x194>)
 8016af0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016af4:	685a      	ldr	r2, [r3, #4]
 8016af6:	4b13      	ldr	r3, [pc, #76]	@ (8016b44 <pvPortMalloc+0x188>)
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	431a      	orrs	r2, r3
 8016afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016afe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b02:	2200      	movs	r2, #0
 8016b04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016b06:	4b13      	ldr	r3, [pc, #76]	@ (8016b54 <pvPortMalloc+0x198>)
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	3301      	adds	r3, #1
 8016b0c:	4a11      	ldr	r2, [pc, #68]	@ (8016b54 <pvPortMalloc+0x198>)
 8016b0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016b10:	f7fe fa92 	bl	8015038 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016b14:	69fb      	ldr	r3, [r7, #28]
 8016b16:	f003 0307 	and.w	r3, r3, #7
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d00b      	beq.n	8016b36 <pvPortMalloc+0x17a>
	__asm volatile
 8016b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b22:	f383 8811 	msr	BASEPRI, r3
 8016b26:	f3bf 8f6f 	isb	sy
 8016b2a:	f3bf 8f4f 	dsb	sy
 8016b2e:	60fb      	str	r3, [r7, #12]
}
 8016b30:	bf00      	nop
 8016b32:	bf00      	nop
 8016b34:	e7fd      	b.n	8016b32 <pvPortMalloc+0x176>
	return pvReturn;
 8016b36:	69fb      	ldr	r3, [r7, #28]
}
 8016b38:	4618      	mov	r0, r3
 8016b3a:	3728      	adds	r7, #40	@ 0x28
 8016b3c:	46bd      	mov	sp, r7
 8016b3e:	bd80      	pop	{r7, pc}
 8016b40:	2000896c 	.word	0x2000896c
 8016b44:	20008980 	.word	0x20008980
 8016b48:	20008970 	.word	0x20008970
 8016b4c:	20008964 	.word	0x20008964
 8016b50:	20008974 	.word	0x20008974
 8016b54:	20008978 	.word	0x20008978

08016b58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016b58:	b580      	push	{r7, lr}
 8016b5a:	b086      	sub	sp, #24
 8016b5c:	af00      	add	r7, sp, #0
 8016b5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d04f      	beq.n	8016c0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016b6a:	2308      	movs	r3, #8
 8016b6c:	425b      	negs	r3, r3
 8016b6e:	697a      	ldr	r2, [r7, #20]
 8016b70:	4413      	add	r3, r2
 8016b72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016b74:	697b      	ldr	r3, [r7, #20]
 8016b76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016b78:	693b      	ldr	r3, [r7, #16]
 8016b7a:	685a      	ldr	r2, [r3, #4]
 8016b7c:	4b25      	ldr	r3, [pc, #148]	@ (8016c14 <vPortFree+0xbc>)
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	4013      	ands	r3, r2
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d10b      	bne.n	8016b9e <vPortFree+0x46>
	__asm volatile
 8016b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b8a:	f383 8811 	msr	BASEPRI, r3
 8016b8e:	f3bf 8f6f 	isb	sy
 8016b92:	f3bf 8f4f 	dsb	sy
 8016b96:	60fb      	str	r3, [r7, #12]
}
 8016b98:	bf00      	nop
 8016b9a:	bf00      	nop
 8016b9c:	e7fd      	b.n	8016b9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016b9e:	693b      	ldr	r3, [r7, #16]
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d00b      	beq.n	8016bbe <vPortFree+0x66>
	__asm volatile
 8016ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016baa:	f383 8811 	msr	BASEPRI, r3
 8016bae:	f3bf 8f6f 	isb	sy
 8016bb2:	f3bf 8f4f 	dsb	sy
 8016bb6:	60bb      	str	r3, [r7, #8]
}
 8016bb8:	bf00      	nop
 8016bba:	bf00      	nop
 8016bbc:	e7fd      	b.n	8016bba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016bbe:	693b      	ldr	r3, [r7, #16]
 8016bc0:	685a      	ldr	r2, [r3, #4]
 8016bc2:	4b14      	ldr	r3, [pc, #80]	@ (8016c14 <vPortFree+0xbc>)
 8016bc4:	681b      	ldr	r3, [r3, #0]
 8016bc6:	4013      	ands	r3, r2
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d01e      	beq.n	8016c0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016bcc:	693b      	ldr	r3, [r7, #16]
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d11a      	bne.n	8016c0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016bd4:	693b      	ldr	r3, [r7, #16]
 8016bd6:	685a      	ldr	r2, [r3, #4]
 8016bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8016c14 <vPortFree+0xbc>)
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	43db      	mvns	r3, r3
 8016bde:	401a      	ands	r2, r3
 8016be0:	693b      	ldr	r3, [r7, #16]
 8016be2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016be4:	f7fe fa1a 	bl	801501c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016be8:	693b      	ldr	r3, [r7, #16]
 8016bea:	685a      	ldr	r2, [r3, #4]
 8016bec:	4b0a      	ldr	r3, [pc, #40]	@ (8016c18 <vPortFree+0xc0>)
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	4413      	add	r3, r2
 8016bf2:	4a09      	ldr	r2, [pc, #36]	@ (8016c18 <vPortFree+0xc0>)
 8016bf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016bf6:	6938      	ldr	r0, [r7, #16]
 8016bf8:	f000 f874 	bl	8016ce4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016bfc:	4b07      	ldr	r3, [pc, #28]	@ (8016c1c <vPortFree+0xc4>)
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	3301      	adds	r3, #1
 8016c02:	4a06      	ldr	r2, [pc, #24]	@ (8016c1c <vPortFree+0xc4>)
 8016c04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016c06:	f7fe fa17 	bl	8015038 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016c0a:	bf00      	nop
 8016c0c:	3718      	adds	r7, #24
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	bd80      	pop	{r7, pc}
 8016c12:	bf00      	nop
 8016c14:	20008980 	.word	0x20008980
 8016c18:	20008970 	.word	0x20008970
 8016c1c:	2000897c 	.word	0x2000897c

08016c20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016c20:	b480      	push	{r7}
 8016c22:	b085      	sub	sp, #20
 8016c24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016c26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8016c2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016c2c:	4b27      	ldr	r3, [pc, #156]	@ (8016ccc <prvHeapInit+0xac>)
 8016c2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	f003 0307 	and.w	r3, r3, #7
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d00c      	beq.n	8016c54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	3307      	adds	r3, #7
 8016c3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	f023 0307 	bic.w	r3, r3, #7
 8016c46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016c48:	68ba      	ldr	r2, [r7, #8]
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	1ad3      	subs	r3, r2, r3
 8016c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8016ccc <prvHeapInit+0xac>)
 8016c50:	4413      	add	r3, r2
 8016c52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016c58:	4a1d      	ldr	r2, [pc, #116]	@ (8016cd0 <prvHeapInit+0xb0>)
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8016cd0 <prvHeapInit+0xb0>)
 8016c60:	2200      	movs	r2, #0
 8016c62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	68ba      	ldr	r2, [r7, #8]
 8016c68:	4413      	add	r3, r2
 8016c6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016c6c:	2208      	movs	r2, #8
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	1a9b      	subs	r3, r3, r2
 8016c72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	f023 0307 	bic.w	r3, r3, #7
 8016c7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	4a15      	ldr	r2, [pc, #84]	@ (8016cd4 <prvHeapInit+0xb4>)
 8016c80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016c82:	4b14      	ldr	r3, [pc, #80]	@ (8016cd4 <prvHeapInit+0xb4>)
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	2200      	movs	r2, #0
 8016c88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016c8a:	4b12      	ldr	r3, [pc, #72]	@ (8016cd4 <prvHeapInit+0xb4>)
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	2200      	movs	r2, #0
 8016c90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016c96:	683b      	ldr	r3, [r7, #0]
 8016c98:	68fa      	ldr	r2, [r7, #12]
 8016c9a:	1ad2      	subs	r2, r2, r3
 8016c9c:	683b      	ldr	r3, [r7, #0]
 8016c9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8016cd4 <prvHeapInit+0xb4>)
 8016ca2:	681a      	ldr	r2, [r3, #0]
 8016ca4:	683b      	ldr	r3, [r7, #0]
 8016ca6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016ca8:	683b      	ldr	r3, [r7, #0]
 8016caa:	685b      	ldr	r3, [r3, #4]
 8016cac:	4a0a      	ldr	r2, [pc, #40]	@ (8016cd8 <prvHeapInit+0xb8>)
 8016cae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016cb0:	683b      	ldr	r3, [r7, #0]
 8016cb2:	685b      	ldr	r3, [r3, #4]
 8016cb4:	4a09      	ldr	r2, [pc, #36]	@ (8016cdc <prvHeapInit+0xbc>)
 8016cb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016cb8:	4b09      	ldr	r3, [pc, #36]	@ (8016ce0 <prvHeapInit+0xc0>)
 8016cba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8016cbe:	601a      	str	r2, [r3, #0]
}
 8016cc0:	bf00      	nop
 8016cc2:	3714      	adds	r7, #20
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cca:	4770      	bx	lr
 8016ccc:	20004d64 	.word	0x20004d64
 8016cd0:	20008964 	.word	0x20008964
 8016cd4:	2000896c 	.word	0x2000896c
 8016cd8:	20008974 	.word	0x20008974
 8016cdc:	20008970 	.word	0x20008970
 8016ce0:	20008980 	.word	0x20008980

08016ce4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016ce4:	b480      	push	{r7}
 8016ce6:	b085      	sub	sp, #20
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016cec:	4b28      	ldr	r3, [pc, #160]	@ (8016d90 <prvInsertBlockIntoFreeList+0xac>)
 8016cee:	60fb      	str	r3, [r7, #12]
 8016cf0:	e002      	b.n	8016cf8 <prvInsertBlockIntoFreeList+0x14>
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	60fb      	str	r3, [r7, #12]
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	687a      	ldr	r2, [r7, #4]
 8016cfe:	429a      	cmp	r2, r3
 8016d00:	d8f7      	bhi.n	8016cf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	685b      	ldr	r3, [r3, #4]
 8016d0a:	68ba      	ldr	r2, [r7, #8]
 8016d0c:	4413      	add	r3, r2
 8016d0e:	687a      	ldr	r2, [r7, #4]
 8016d10:	429a      	cmp	r2, r3
 8016d12:	d108      	bne.n	8016d26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	685a      	ldr	r2, [r3, #4]
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	685b      	ldr	r3, [r3, #4]
 8016d1c:	441a      	add	r2, r3
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	685b      	ldr	r3, [r3, #4]
 8016d2e:	68ba      	ldr	r2, [r7, #8]
 8016d30:	441a      	add	r2, r3
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	429a      	cmp	r2, r3
 8016d38:	d118      	bne.n	8016d6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	681a      	ldr	r2, [r3, #0]
 8016d3e:	4b15      	ldr	r3, [pc, #84]	@ (8016d94 <prvInsertBlockIntoFreeList+0xb0>)
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	429a      	cmp	r2, r3
 8016d44:	d00d      	beq.n	8016d62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	685a      	ldr	r2, [r3, #4]
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	685b      	ldr	r3, [r3, #4]
 8016d50:	441a      	add	r2, r3
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	681a      	ldr	r2, [r3, #0]
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	601a      	str	r2, [r3, #0]
 8016d60:	e008      	b.n	8016d74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016d62:	4b0c      	ldr	r3, [pc, #48]	@ (8016d94 <prvInsertBlockIntoFreeList+0xb0>)
 8016d64:	681a      	ldr	r2, [r3, #0]
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	601a      	str	r2, [r3, #0]
 8016d6a:	e003      	b.n	8016d74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	681a      	ldr	r2, [r3, #0]
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016d74:	68fa      	ldr	r2, [r7, #12]
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	429a      	cmp	r2, r3
 8016d7a:	d002      	beq.n	8016d82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	687a      	ldr	r2, [r7, #4]
 8016d80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016d82:	bf00      	nop
 8016d84:	3714      	adds	r7, #20
 8016d86:	46bd      	mov	sp, r7
 8016d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d8c:	4770      	bx	lr
 8016d8e:	bf00      	nop
 8016d90:	20008964 	.word	0x20008964
 8016d94:	2000896c 	.word	0x2000896c

08016d98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016d98:	b580      	push	{r7, lr}
 8016d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016d9c:	2200      	movs	r2, #0
 8016d9e:	4912      	ldr	r1, [pc, #72]	@ (8016de8 <MX_USB_DEVICE_Init+0x50>)
 8016da0:	4812      	ldr	r0, [pc, #72]	@ (8016dec <MX_USB_DEVICE_Init+0x54>)
 8016da2:	f7fb fb21 	bl	80123e8 <USBD_Init>
 8016da6:	4603      	mov	r3, r0
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d001      	beq.n	8016db0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016dac:	f7f1 fc46 	bl	800863c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016db0:	490f      	ldr	r1, [pc, #60]	@ (8016df0 <MX_USB_DEVICE_Init+0x58>)
 8016db2:	480e      	ldr	r0, [pc, #56]	@ (8016dec <MX_USB_DEVICE_Init+0x54>)
 8016db4:	f7fb fb48 	bl	8012448 <USBD_RegisterClass>
 8016db8:	4603      	mov	r3, r0
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d001      	beq.n	8016dc2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016dbe:	f7f1 fc3d 	bl	800863c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016dc2:	490c      	ldr	r1, [pc, #48]	@ (8016df4 <MX_USB_DEVICE_Init+0x5c>)
 8016dc4:	4809      	ldr	r0, [pc, #36]	@ (8016dec <MX_USB_DEVICE_Init+0x54>)
 8016dc6:	f7fb fa7f 	bl	80122c8 <USBD_CDC_RegisterInterface>
 8016dca:	4603      	mov	r3, r0
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d001      	beq.n	8016dd4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016dd0:	f7f1 fc34 	bl	800863c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016dd4:	4805      	ldr	r0, [pc, #20]	@ (8016dec <MX_USB_DEVICE_Init+0x54>)
 8016dd6:	f7fb fb6d 	bl	80124b4 <USBD_Start>
 8016dda:	4603      	mov	r3, r0
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d001      	beq.n	8016de4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016de0:	f7f1 fc2c 	bl	800863c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016de4:	bf00      	nop
 8016de6:	bd80      	pop	{r7, pc}
 8016de8:	20000104 	.word	0x20000104
 8016dec:	20008984 	.word	0x20008984
 8016df0:	2000006c 	.word	0x2000006c
 8016df4:	200000f0 	.word	0x200000f0

08016df8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016df8:	b580      	push	{r7, lr}
 8016dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016dfc:	2200      	movs	r2, #0
 8016dfe:	4905      	ldr	r1, [pc, #20]	@ (8016e14 <CDC_Init_FS+0x1c>)
 8016e00:	4805      	ldr	r0, [pc, #20]	@ (8016e18 <CDC_Init_FS+0x20>)
 8016e02:	f7fb fa7b 	bl	80122fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016e06:	4905      	ldr	r1, [pc, #20]	@ (8016e1c <CDC_Init_FS+0x24>)
 8016e08:	4803      	ldr	r0, [pc, #12]	@ (8016e18 <CDC_Init_FS+0x20>)
 8016e0a:	f7fb fa99 	bl	8012340 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016e0e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016e10:	4618      	mov	r0, r3
 8016e12:	bd80      	pop	{r7, pc}
 8016e14:	20009460 	.word	0x20009460
 8016e18:	20008984 	.word	0x20008984
 8016e1c:	20008c60 	.word	0x20008c60

08016e20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016e20:	b480      	push	{r7}
 8016e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016e24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016e26:	4618      	mov	r0, r3
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e2e:	4770      	bx	lr

08016e30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016e30:	b480      	push	{r7}
 8016e32:	b083      	sub	sp, #12
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	4603      	mov	r3, r0
 8016e38:	6039      	str	r1, [r7, #0]
 8016e3a:	71fb      	strb	r3, [r7, #7]
 8016e3c:	4613      	mov	r3, r2
 8016e3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016e40:	79fb      	ldrb	r3, [r7, #7]
 8016e42:	2b23      	cmp	r3, #35	@ 0x23
 8016e44:	d84a      	bhi.n	8016edc <CDC_Control_FS+0xac>
 8016e46:	a201      	add	r2, pc, #4	@ (adr r2, 8016e4c <CDC_Control_FS+0x1c>)
 8016e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e4c:	08016edd 	.word	0x08016edd
 8016e50:	08016edd 	.word	0x08016edd
 8016e54:	08016edd 	.word	0x08016edd
 8016e58:	08016edd 	.word	0x08016edd
 8016e5c:	08016edd 	.word	0x08016edd
 8016e60:	08016edd 	.word	0x08016edd
 8016e64:	08016edd 	.word	0x08016edd
 8016e68:	08016edd 	.word	0x08016edd
 8016e6c:	08016edd 	.word	0x08016edd
 8016e70:	08016edd 	.word	0x08016edd
 8016e74:	08016edd 	.word	0x08016edd
 8016e78:	08016edd 	.word	0x08016edd
 8016e7c:	08016edd 	.word	0x08016edd
 8016e80:	08016edd 	.word	0x08016edd
 8016e84:	08016edd 	.word	0x08016edd
 8016e88:	08016edd 	.word	0x08016edd
 8016e8c:	08016edd 	.word	0x08016edd
 8016e90:	08016edd 	.word	0x08016edd
 8016e94:	08016edd 	.word	0x08016edd
 8016e98:	08016edd 	.word	0x08016edd
 8016e9c:	08016edd 	.word	0x08016edd
 8016ea0:	08016edd 	.word	0x08016edd
 8016ea4:	08016edd 	.word	0x08016edd
 8016ea8:	08016edd 	.word	0x08016edd
 8016eac:	08016edd 	.word	0x08016edd
 8016eb0:	08016edd 	.word	0x08016edd
 8016eb4:	08016edd 	.word	0x08016edd
 8016eb8:	08016edd 	.word	0x08016edd
 8016ebc:	08016edd 	.word	0x08016edd
 8016ec0:	08016edd 	.word	0x08016edd
 8016ec4:	08016edd 	.word	0x08016edd
 8016ec8:	08016edd 	.word	0x08016edd
 8016ecc:	08016edd 	.word	0x08016edd
 8016ed0:	08016edd 	.word	0x08016edd
 8016ed4:	08016edd 	.word	0x08016edd
 8016ed8:	08016edd 	.word	0x08016edd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016edc:	bf00      	nop
  }

  return (USBD_OK);
 8016ede:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	370c      	adds	r7, #12
 8016ee4:	46bd      	mov	sp, r7
 8016ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eea:	4770      	bx	lr

08016eec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	b082      	sub	sp, #8
 8016ef0:	af00      	add	r7, sp, #0
 8016ef2:	6078      	str	r0, [r7, #4]
 8016ef4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016ef6:	6879      	ldr	r1, [r7, #4]
 8016ef8:	4805      	ldr	r0, [pc, #20]	@ (8016f10 <CDC_Receive_FS+0x24>)
 8016efa:	f7fb fa21 	bl	8012340 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016efe:	4804      	ldr	r0, [pc, #16]	@ (8016f10 <CDC_Receive_FS+0x24>)
 8016f00:	f7fb fa3c 	bl	801237c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016f04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016f06:	4618      	mov	r0, r3
 8016f08:	3708      	adds	r7, #8
 8016f0a:	46bd      	mov	sp, r7
 8016f0c:	bd80      	pop	{r7, pc}
 8016f0e:	bf00      	nop
 8016f10:	20008984 	.word	0x20008984

08016f14 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016f14:	b480      	push	{r7}
 8016f16:	b087      	sub	sp, #28
 8016f18:	af00      	add	r7, sp, #0
 8016f1a:	60f8      	str	r0, [r7, #12]
 8016f1c:	60b9      	str	r1, [r7, #8]
 8016f1e:	4613      	mov	r3, r2
 8016f20:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016f22:	2300      	movs	r3, #0
 8016f24:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8016f26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	371c      	adds	r7, #28
 8016f2e:	46bd      	mov	sp, r7
 8016f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f34:	4770      	bx	lr
	...

08016f38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f38:	b480      	push	{r7}
 8016f3a:	b083      	sub	sp, #12
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	4603      	mov	r3, r0
 8016f40:	6039      	str	r1, [r7, #0]
 8016f42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016f44:	683b      	ldr	r3, [r7, #0]
 8016f46:	2212      	movs	r2, #18
 8016f48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016f4a:	4b03      	ldr	r3, [pc, #12]	@ (8016f58 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	370c      	adds	r7, #12
 8016f50:	46bd      	mov	sp, r7
 8016f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f56:	4770      	bx	lr
 8016f58:	20000120 	.word	0x20000120

08016f5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f5c:	b480      	push	{r7}
 8016f5e:	b083      	sub	sp, #12
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	4603      	mov	r3, r0
 8016f64:	6039      	str	r1, [r7, #0]
 8016f66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016f68:	683b      	ldr	r3, [r7, #0]
 8016f6a:	2204      	movs	r2, #4
 8016f6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016f6e:	4b03      	ldr	r3, [pc, #12]	@ (8016f7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016f70:	4618      	mov	r0, r3
 8016f72:	370c      	adds	r7, #12
 8016f74:	46bd      	mov	sp, r7
 8016f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f7a:	4770      	bx	lr
 8016f7c:	20000134 	.word	0x20000134

08016f80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f80:	b580      	push	{r7, lr}
 8016f82:	b082      	sub	sp, #8
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	4603      	mov	r3, r0
 8016f88:	6039      	str	r1, [r7, #0]
 8016f8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016f8c:	79fb      	ldrb	r3, [r7, #7]
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d105      	bne.n	8016f9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016f92:	683a      	ldr	r2, [r7, #0]
 8016f94:	4907      	ldr	r1, [pc, #28]	@ (8016fb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8016f96:	4808      	ldr	r0, [pc, #32]	@ (8016fb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8016f98:	f7fc fc3c 	bl	8013814 <USBD_GetString>
 8016f9c:	e004      	b.n	8016fa8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016f9e:	683a      	ldr	r2, [r7, #0]
 8016fa0:	4904      	ldr	r1, [pc, #16]	@ (8016fb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8016fa2:	4805      	ldr	r0, [pc, #20]	@ (8016fb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8016fa4:	f7fc fc36 	bl	8013814 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016fa8:	4b02      	ldr	r3, [pc, #8]	@ (8016fb4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016faa:	4618      	mov	r0, r3
 8016fac:	3708      	adds	r7, #8
 8016fae:	46bd      	mov	sp, r7
 8016fb0:	bd80      	pop	{r7, pc}
 8016fb2:	bf00      	nop
 8016fb4:	20009c60 	.word	0x20009c60
 8016fb8:	08020194 	.word	0x08020194

08016fbc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016fbc:	b580      	push	{r7, lr}
 8016fbe:	b082      	sub	sp, #8
 8016fc0:	af00      	add	r7, sp, #0
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	6039      	str	r1, [r7, #0]
 8016fc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016fc8:	683a      	ldr	r2, [r7, #0]
 8016fca:	4904      	ldr	r1, [pc, #16]	@ (8016fdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016fcc:	4804      	ldr	r0, [pc, #16]	@ (8016fe0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016fce:	f7fc fc21 	bl	8013814 <USBD_GetString>
  return USBD_StrDesc;
 8016fd2:	4b02      	ldr	r3, [pc, #8]	@ (8016fdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	3708      	adds	r7, #8
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	bd80      	pop	{r7, pc}
 8016fdc:	20009c60 	.word	0x20009c60
 8016fe0:	080201ac 	.word	0x080201ac

08016fe4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b082      	sub	sp, #8
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	4603      	mov	r3, r0
 8016fec:	6039      	str	r1, [r7, #0]
 8016fee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016ff0:	683b      	ldr	r3, [r7, #0]
 8016ff2:	221a      	movs	r2, #26
 8016ff4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016ff6:	f000 f843 	bl	8017080 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016ffa:	4b02      	ldr	r3, [pc, #8]	@ (8017004 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	3708      	adds	r7, #8
 8017000:	46bd      	mov	sp, r7
 8017002:	bd80      	pop	{r7, pc}
 8017004:	20000138 	.word	0x20000138

08017008 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017008:	b580      	push	{r7, lr}
 801700a:	b082      	sub	sp, #8
 801700c:	af00      	add	r7, sp, #0
 801700e:	4603      	mov	r3, r0
 8017010:	6039      	str	r1, [r7, #0]
 8017012:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017014:	79fb      	ldrb	r3, [r7, #7]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d105      	bne.n	8017026 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801701a:	683a      	ldr	r2, [r7, #0]
 801701c:	4907      	ldr	r1, [pc, #28]	@ (801703c <USBD_FS_ConfigStrDescriptor+0x34>)
 801701e:	4808      	ldr	r0, [pc, #32]	@ (8017040 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017020:	f7fc fbf8 	bl	8013814 <USBD_GetString>
 8017024:	e004      	b.n	8017030 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017026:	683a      	ldr	r2, [r7, #0]
 8017028:	4904      	ldr	r1, [pc, #16]	@ (801703c <USBD_FS_ConfigStrDescriptor+0x34>)
 801702a:	4805      	ldr	r0, [pc, #20]	@ (8017040 <USBD_FS_ConfigStrDescriptor+0x38>)
 801702c:	f7fc fbf2 	bl	8013814 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017030:	4b02      	ldr	r3, [pc, #8]	@ (801703c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017032:	4618      	mov	r0, r3
 8017034:	3708      	adds	r7, #8
 8017036:	46bd      	mov	sp, r7
 8017038:	bd80      	pop	{r7, pc}
 801703a:	bf00      	nop
 801703c:	20009c60 	.word	0x20009c60
 8017040:	080201c0 	.word	0x080201c0

08017044 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017044:	b580      	push	{r7, lr}
 8017046:	b082      	sub	sp, #8
 8017048:	af00      	add	r7, sp, #0
 801704a:	4603      	mov	r3, r0
 801704c:	6039      	str	r1, [r7, #0]
 801704e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017050:	79fb      	ldrb	r3, [r7, #7]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d105      	bne.n	8017062 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017056:	683a      	ldr	r2, [r7, #0]
 8017058:	4907      	ldr	r1, [pc, #28]	@ (8017078 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801705a:	4808      	ldr	r0, [pc, #32]	@ (801707c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801705c:	f7fc fbda 	bl	8013814 <USBD_GetString>
 8017060:	e004      	b.n	801706c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017062:	683a      	ldr	r2, [r7, #0]
 8017064:	4904      	ldr	r1, [pc, #16]	@ (8017078 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017066:	4805      	ldr	r0, [pc, #20]	@ (801707c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017068:	f7fc fbd4 	bl	8013814 <USBD_GetString>
  }
  return USBD_StrDesc;
 801706c:	4b02      	ldr	r3, [pc, #8]	@ (8017078 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801706e:	4618      	mov	r0, r3
 8017070:	3708      	adds	r7, #8
 8017072:	46bd      	mov	sp, r7
 8017074:	bd80      	pop	{r7, pc}
 8017076:	bf00      	nop
 8017078:	20009c60 	.word	0x20009c60
 801707c:	080201cc 	.word	0x080201cc

08017080 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017080:	b580      	push	{r7, lr}
 8017082:	b084      	sub	sp, #16
 8017084:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017086:	4b0f      	ldr	r3, [pc, #60]	@ (80170c4 <Get_SerialNum+0x44>)
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801708c:	4b0e      	ldr	r3, [pc, #56]	@ (80170c8 <Get_SerialNum+0x48>)
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017092:	4b0e      	ldr	r3, [pc, #56]	@ (80170cc <Get_SerialNum+0x4c>)
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017098:	68fa      	ldr	r2, [r7, #12]
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	4413      	add	r3, r2
 801709e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d009      	beq.n	80170ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80170a6:	2208      	movs	r2, #8
 80170a8:	4909      	ldr	r1, [pc, #36]	@ (80170d0 <Get_SerialNum+0x50>)
 80170aa:	68f8      	ldr	r0, [r7, #12]
 80170ac:	f000 f814 	bl	80170d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80170b0:	2204      	movs	r2, #4
 80170b2:	4908      	ldr	r1, [pc, #32]	@ (80170d4 <Get_SerialNum+0x54>)
 80170b4:	68b8      	ldr	r0, [r7, #8]
 80170b6:	f000 f80f 	bl	80170d8 <IntToUnicode>
  }
}
 80170ba:	bf00      	nop
 80170bc:	3710      	adds	r7, #16
 80170be:	46bd      	mov	sp, r7
 80170c0:	bd80      	pop	{r7, pc}
 80170c2:	bf00      	nop
 80170c4:	1fff7a10 	.word	0x1fff7a10
 80170c8:	1fff7a14 	.word	0x1fff7a14
 80170cc:	1fff7a18 	.word	0x1fff7a18
 80170d0:	2000013a 	.word	0x2000013a
 80170d4:	2000014a 	.word	0x2000014a

080170d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80170d8:	b480      	push	{r7}
 80170da:	b087      	sub	sp, #28
 80170dc:	af00      	add	r7, sp, #0
 80170de:	60f8      	str	r0, [r7, #12]
 80170e0:	60b9      	str	r1, [r7, #8]
 80170e2:	4613      	mov	r3, r2
 80170e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80170e6:	2300      	movs	r3, #0
 80170e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80170ea:	2300      	movs	r3, #0
 80170ec:	75fb      	strb	r3, [r7, #23]
 80170ee:	e027      	b.n	8017140 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	0f1b      	lsrs	r3, r3, #28
 80170f4:	2b09      	cmp	r3, #9
 80170f6:	d80b      	bhi.n	8017110 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	0f1b      	lsrs	r3, r3, #28
 80170fc:	b2da      	uxtb	r2, r3
 80170fe:	7dfb      	ldrb	r3, [r7, #23]
 8017100:	005b      	lsls	r3, r3, #1
 8017102:	4619      	mov	r1, r3
 8017104:	68bb      	ldr	r3, [r7, #8]
 8017106:	440b      	add	r3, r1
 8017108:	3230      	adds	r2, #48	@ 0x30
 801710a:	b2d2      	uxtb	r2, r2
 801710c:	701a      	strb	r2, [r3, #0]
 801710e:	e00a      	b.n	8017126 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	0f1b      	lsrs	r3, r3, #28
 8017114:	b2da      	uxtb	r2, r3
 8017116:	7dfb      	ldrb	r3, [r7, #23]
 8017118:	005b      	lsls	r3, r3, #1
 801711a:	4619      	mov	r1, r3
 801711c:	68bb      	ldr	r3, [r7, #8]
 801711e:	440b      	add	r3, r1
 8017120:	3237      	adds	r2, #55	@ 0x37
 8017122:	b2d2      	uxtb	r2, r2
 8017124:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	011b      	lsls	r3, r3, #4
 801712a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801712c:	7dfb      	ldrb	r3, [r7, #23]
 801712e:	005b      	lsls	r3, r3, #1
 8017130:	3301      	adds	r3, #1
 8017132:	68ba      	ldr	r2, [r7, #8]
 8017134:	4413      	add	r3, r2
 8017136:	2200      	movs	r2, #0
 8017138:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801713a:	7dfb      	ldrb	r3, [r7, #23]
 801713c:	3301      	adds	r3, #1
 801713e:	75fb      	strb	r3, [r7, #23]
 8017140:	7dfa      	ldrb	r2, [r7, #23]
 8017142:	79fb      	ldrb	r3, [r7, #7]
 8017144:	429a      	cmp	r2, r3
 8017146:	d3d3      	bcc.n	80170f0 <IntToUnicode+0x18>
  }
}
 8017148:	bf00      	nop
 801714a:	bf00      	nop
 801714c:	371c      	adds	r7, #28
 801714e:	46bd      	mov	sp, r7
 8017150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017154:	4770      	bx	lr
	...

08017158 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017158:	b580      	push	{r7, lr}
 801715a:	b08a      	sub	sp, #40	@ 0x28
 801715c:	af00      	add	r7, sp, #0
 801715e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017160:	f107 0314 	add.w	r3, r7, #20
 8017164:	2200      	movs	r2, #0
 8017166:	601a      	str	r2, [r3, #0]
 8017168:	605a      	str	r2, [r3, #4]
 801716a:	609a      	str	r2, [r3, #8]
 801716c:	60da      	str	r2, [r3, #12]
 801716e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8017178:	d13a      	bne.n	80171f0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801717a:	2300      	movs	r3, #0
 801717c:	613b      	str	r3, [r7, #16]
 801717e:	4b1e      	ldr	r3, [pc, #120]	@ (80171f8 <HAL_PCD_MspInit+0xa0>)
 8017180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017182:	4a1d      	ldr	r2, [pc, #116]	@ (80171f8 <HAL_PCD_MspInit+0xa0>)
 8017184:	f043 0301 	orr.w	r3, r3, #1
 8017188:	6313      	str	r3, [r2, #48]	@ 0x30
 801718a:	4b1b      	ldr	r3, [pc, #108]	@ (80171f8 <HAL_PCD_MspInit+0xa0>)
 801718c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801718e:	f003 0301 	and.w	r3, r3, #1
 8017192:	613b      	str	r3, [r7, #16]
 8017194:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017196:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801719a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801719c:	2302      	movs	r3, #2
 801719e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80171a0:	2300      	movs	r3, #0
 80171a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80171a4:	2303      	movs	r3, #3
 80171a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80171a8:	230a      	movs	r3, #10
 80171aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80171ac:	f107 0314 	add.w	r3, r7, #20
 80171b0:	4619      	mov	r1, r3
 80171b2:	4812      	ldr	r0, [pc, #72]	@ (80171fc <HAL_PCD_MspInit+0xa4>)
 80171b4:	f7f3 feb2 	bl	800af1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80171b8:	4b0f      	ldr	r3, [pc, #60]	@ (80171f8 <HAL_PCD_MspInit+0xa0>)
 80171ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80171bc:	4a0e      	ldr	r2, [pc, #56]	@ (80171f8 <HAL_PCD_MspInit+0xa0>)
 80171be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80171c2:	6353      	str	r3, [r2, #52]	@ 0x34
 80171c4:	2300      	movs	r3, #0
 80171c6:	60fb      	str	r3, [r7, #12]
 80171c8:	4b0b      	ldr	r3, [pc, #44]	@ (80171f8 <HAL_PCD_MspInit+0xa0>)
 80171ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80171cc:	4a0a      	ldr	r2, [pc, #40]	@ (80171f8 <HAL_PCD_MspInit+0xa0>)
 80171ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80171d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80171d4:	4b08      	ldr	r3, [pc, #32]	@ (80171f8 <HAL_PCD_MspInit+0xa0>)
 80171d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80171d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80171dc:	60fb      	str	r3, [r7, #12]
 80171de:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80171e0:	2200      	movs	r2, #0
 80171e2:	2105      	movs	r1, #5
 80171e4:	2043      	movs	r0, #67	@ 0x43
 80171e6:	f7f3 fa01 	bl	800a5ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80171ea:	2043      	movs	r0, #67	@ 0x43
 80171ec:	f7f3 fa1a 	bl	800a624 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80171f0:	bf00      	nop
 80171f2:	3728      	adds	r7, #40	@ 0x28
 80171f4:	46bd      	mov	sp, r7
 80171f6:	bd80      	pop	{r7, pc}
 80171f8:	40023800 	.word	0x40023800
 80171fc:	40020000 	.word	0x40020000

08017200 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b082      	sub	sp, #8
 8017204:	af00      	add	r7, sp, #0
 8017206:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8017214:	4619      	mov	r1, r3
 8017216:	4610      	mov	r0, r2
 8017218:	f7fb f999 	bl	801254e <USBD_LL_SetupStage>
}
 801721c:	bf00      	nop
 801721e:	3708      	adds	r7, #8
 8017220:	46bd      	mov	sp, r7
 8017222:	bd80      	pop	{r7, pc}

08017224 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017224:	b580      	push	{r7, lr}
 8017226:	b082      	sub	sp, #8
 8017228:	af00      	add	r7, sp, #0
 801722a:	6078      	str	r0, [r7, #4]
 801722c:	460b      	mov	r3, r1
 801722e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017236:	78fa      	ldrb	r2, [r7, #3]
 8017238:	6879      	ldr	r1, [r7, #4]
 801723a:	4613      	mov	r3, r2
 801723c:	00db      	lsls	r3, r3, #3
 801723e:	4413      	add	r3, r2
 8017240:	009b      	lsls	r3, r3, #2
 8017242:	440b      	add	r3, r1
 8017244:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017248:	681a      	ldr	r2, [r3, #0]
 801724a:	78fb      	ldrb	r3, [r7, #3]
 801724c:	4619      	mov	r1, r3
 801724e:	f7fb f9d3 	bl	80125f8 <USBD_LL_DataOutStage>
}
 8017252:	bf00      	nop
 8017254:	3708      	adds	r7, #8
 8017256:	46bd      	mov	sp, r7
 8017258:	bd80      	pop	{r7, pc}

0801725a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801725a:	b580      	push	{r7, lr}
 801725c:	b082      	sub	sp, #8
 801725e:	af00      	add	r7, sp, #0
 8017260:	6078      	str	r0, [r7, #4]
 8017262:	460b      	mov	r3, r1
 8017264:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801726c:	78fa      	ldrb	r2, [r7, #3]
 801726e:	6879      	ldr	r1, [r7, #4]
 8017270:	4613      	mov	r3, r2
 8017272:	00db      	lsls	r3, r3, #3
 8017274:	4413      	add	r3, r2
 8017276:	009b      	lsls	r3, r3, #2
 8017278:	440b      	add	r3, r1
 801727a:	3320      	adds	r3, #32
 801727c:	681a      	ldr	r2, [r3, #0]
 801727e:	78fb      	ldrb	r3, [r7, #3]
 8017280:	4619      	mov	r1, r3
 8017282:	f7fb fa6c 	bl	801275e <USBD_LL_DataInStage>
}
 8017286:	bf00      	nop
 8017288:	3708      	adds	r7, #8
 801728a:	46bd      	mov	sp, r7
 801728c:	bd80      	pop	{r7, pc}

0801728e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801728e:	b580      	push	{r7, lr}
 8017290:	b082      	sub	sp, #8
 8017292:	af00      	add	r7, sp, #0
 8017294:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801729c:	4618      	mov	r0, r3
 801729e:	f7fb fba6 	bl	80129ee <USBD_LL_SOF>
}
 80172a2:	bf00      	nop
 80172a4:	3708      	adds	r7, #8
 80172a6:	46bd      	mov	sp, r7
 80172a8:	bd80      	pop	{r7, pc}

080172aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172aa:	b580      	push	{r7, lr}
 80172ac:	b084      	sub	sp, #16
 80172ae:	af00      	add	r7, sp, #0
 80172b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80172b2:	2301      	movs	r3, #1
 80172b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	79db      	ldrb	r3, [r3, #7]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d102      	bne.n	80172c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80172be:	2300      	movs	r3, #0
 80172c0:	73fb      	strb	r3, [r7, #15]
 80172c2:	e008      	b.n	80172d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	79db      	ldrb	r3, [r3, #7]
 80172c8:	2b02      	cmp	r3, #2
 80172ca:	d102      	bne.n	80172d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80172cc:	2301      	movs	r3, #1
 80172ce:	73fb      	strb	r3, [r7, #15]
 80172d0:	e001      	b.n	80172d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80172d2:	f7f1 f9b3 	bl	800863c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80172dc:	7bfa      	ldrb	r2, [r7, #15]
 80172de:	4611      	mov	r1, r2
 80172e0:	4618      	mov	r0, r3
 80172e2:	f7fb fb40 	bl	8012966 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80172ec:	4618      	mov	r0, r3
 80172ee:	f7fb fae8 	bl	80128c2 <USBD_LL_Reset>
}
 80172f2:	bf00      	nop
 80172f4:	3710      	adds	r7, #16
 80172f6:	46bd      	mov	sp, r7
 80172f8:	bd80      	pop	{r7, pc}
	...

080172fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172fc:	b580      	push	{r7, lr}
 80172fe:	b082      	sub	sp, #8
 8017300:	af00      	add	r7, sp, #0
 8017302:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801730a:	4618      	mov	r0, r3
 801730c:	f7fb fb3b 	bl	8012986 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	687a      	ldr	r2, [r7, #4]
 801731c:	6812      	ldr	r2, [r2, #0]
 801731e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8017322:	f043 0301 	orr.w	r3, r3, #1
 8017326:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	7adb      	ldrb	r3, [r3, #11]
 801732c:	2b00      	cmp	r3, #0
 801732e:	d005      	beq.n	801733c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017330:	4b04      	ldr	r3, [pc, #16]	@ (8017344 <HAL_PCD_SuspendCallback+0x48>)
 8017332:	691b      	ldr	r3, [r3, #16]
 8017334:	4a03      	ldr	r2, [pc, #12]	@ (8017344 <HAL_PCD_SuspendCallback+0x48>)
 8017336:	f043 0306 	orr.w	r3, r3, #6
 801733a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801733c:	bf00      	nop
 801733e:	3708      	adds	r7, #8
 8017340:	46bd      	mov	sp, r7
 8017342:	bd80      	pop	{r7, pc}
 8017344:	e000ed00 	.word	0xe000ed00

08017348 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017348:	b580      	push	{r7, lr}
 801734a:	b082      	sub	sp, #8
 801734c:	af00      	add	r7, sp, #0
 801734e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017356:	4618      	mov	r0, r3
 8017358:	f7fb fb31 	bl	80129be <USBD_LL_Resume>
}
 801735c:	bf00      	nop
 801735e:	3708      	adds	r7, #8
 8017360:	46bd      	mov	sp, r7
 8017362:	bd80      	pop	{r7, pc}

08017364 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b082      	sub	sp, #8
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]
 801736c:	460b      	mov	r3, r1
 801736e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017376:	78fa      	ldrb	r2, [r7, #3]
 8017378:	4611      	mov	r1, r2
 801737a:	4618      	mov	r0, r3
 801737c:	f7fb fb89 	bl	8012a92 <USBD_LL_IsoOUTIncomplete>
}
 8017380:	bf00      	nop
 8017382:	3708      	adds	r7, #8
 8017384:	46bd      	mov	sp, r7
 8017386:	bd80      	pop	{r7, pc}

08017388 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b082      	sub	sp, #8
 801738c:	af00      	add	r7, sp, #0
 801738e:	6078      	str	r0, [r7, #4]
 8017390:	460b      	mov	r3, r1
 8017392:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801739a:	78fa      	ldrb	r2, [r7, #3]
 801739c:	4611      	mov	r1, r2
 801739e:	4618      	mov	r0, r3
 80173a0:	f7fb fb45 	bl	8012a2e <USBD_LL_IsoINIncomplete>
}
 80173a4:	bf00      	nop
 80173a6:	3708      	adds	r7, #8
 80173a8:	46bd      	mov	sp, r7
 80173aa:	bd80      	pop	{r7, pc}

080173ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b082      	sub	sp, #8
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80173ba:	4618      	mov	r0, r3
 80173bc:	f7fb fb9b 	bl	8012af6 <USBD_LL_DevConnected>
}
 80173c0:	bf00      	nop
 80173c2:	3708      	adds	r7, #8
 80173c4:	46bd      	mov	sp, r7
 80173c6:	bd80      	pop	{r7, pc}

080173c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	b082      	sub	sp, #8
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80173d6:	4618      	mov	r0, r3
 80173d8:	f7fb fb98 	bl	8012b0c <USBD_LL_DevDisconnected>
}
 80173dc:	bf00      	nop
 80173de:	3708      	adds	r7, #8
 80173e0:	46bd      	mov	sp, r7
 80173e2:	bd80      	pop	{r7, pc}

080173e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b082      	sub	sp, #8
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	781b      	ldrb	r3, [r3, #0]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d13c      	bne.n	801746e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80173f4:	4a20      	ldr	r2, [pc, #128]	@ (8017478 <USBD_LL_Init+0x94>)
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	4a1e      	ldr	r2, [pc, #120]	@ (8017478 <USBD_LL_Init+0x94>)
 8017400:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017404:	4b1c      	ldr	r3, [pc, #112]	@ (8017478 <USBD_LL_Init+0x94>)
 8017406:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801740a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801740c:	4b1a      	ldr	r3, [pc, #104]	@ (8017478 <USBD_LL_Init+0x94>)
 801740e:	2204      	movs	r2, #4
 8017410:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017412:	4b19      	ldr	r3, [pc, #100]	@ (8017478 <USBD_LL_Init+0x94>)
 8017414:	2202      	movs	r2, #2
 8017416:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017418:	4b17      	ldr	r3, [pc, #92]	@ (8017478 <USBD_LL_Init+0x94>)
 801741a:	2200      	movs	r2, #0
 801741c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801741e:	4b16      	ldr	r3, [pc, #88]	@ (8017478 <USBD_LL_Init+0x94>)
 8017420:	2202      	movs	r2, #2
 8017422:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017424:	4b14      	ldr	r3, [pc, #80]	@ (8017478 <USBD_LL_Init+0x94>)
 8017426:	2200      	movs	r2, #0
 8017428:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801742a:	4b13      	ldr	r3, [pc, #76]	@ (8017478 <USBD_LL_Init+0x94>)
 801742c:	2200      	movs	r2, #0
 801742e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017430:	4b11      	ldr	r3, [pc, #68]	@ (8017478 <USBD_LL_Init+0x94>)
 8017432:	2200      	movs	r2, #0
 8017434:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8017436:	4b10      	ldr	r3, [pc, #64]	@ (8017478 <USBD_LL_Init+0x94>)
 8017438:	2200      	movs	r2, #0
 801743a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801743c:	4b0e      	ldr	r3, [pc, #56]	@ (8017478 <USBD_LL_Init+0x94>)
 801743e:	2200      	movs	r2, #0
 8017440:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017442:	480d      	ldr	r0, [pc, #52]	@ (8017478 <USBD_LL_Init+0x94>)
 8017444:	f7f4 f81b 	bl	800b47e <HAL_PCD_Init>
 8017448:	4603      	mov	r3, r0
 801744a:	2b00      	cmp	r3, #0
 801744c:	d001      	beq.n	8017452 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801744e:	f7f1 f8f5 	bl	800863c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017452:	2180      	movs	r1, #128	@ 0x80
 8017454:	4808      	ldr	r0, [pc, #32]	@ (8017478 <USBD_LL_Init+0x94>)
 8017456:	f7f5 fa48 	bl	800c8ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801745a:	2240      	movs	r2, #64	@ 0x40
 801745c:	2100      	movs	r1, #0
 801745e:	4806      	ldr	r0, [pc, #24]	@ (8017478 <USBD_LL_Init+0x94>)
 8017460:	f7f5 f9fc 	bl	800c85c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017464:	2280      	movs	r2, #128	@ 0x80
 8017466:	2101      	movs	r1, #1
 8017468:	4803      	ldr	r0, [pc, #12]	@ (8017478 <USBD_LL_Init+0x94>)
 801746a:	f7f5 f9f7 	bl	800c85c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801746e:	2300      	movs	r3, #0
}
 8017470:	4618      	mov	r0, r3
 8017472:	3708      	adds	r7, #8
 8017474:	46bd      	mov	sp, r7
 8017476:	bd80      	pop	{r7, pc}
 8017478:	20009e60 	.word	0x20009e60

0801747c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801747c:	b580      	push	{r7, lr}
 801747e:	b084      	sub	sp, #16
 8017480:	af00      	add	r7, sp, #0
 8017482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017484:	2300      	movs	r3, #0
 8017486:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017488:	2300      	movs	r3, #0
 801748a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017492:	4618      	mov	r0, r3
 8017494:	f7f4 f902 	bl	800b69c <HAL_PCD_Start>
 8017498:	4603      	mov	r3, r0
 801749a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801749c:	7bfb      	ldrb	r3, [r7, #15]
 801749e:	4618      	mov	r0, r3
 80174a0:	f000 f942 	bl	8017728 <USBD_Get_USB_Status>
 80174a4:	4603      	mov	r3, r0
 80174a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80174a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80174aa:	4618      	mov	r0, r3
 80174ac:	3710      	adds	r7, #16
 80174ae:	46bd      	mov	sp, r7
 80174b0:	bd80      	pop	{r7, pc}

080174b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80174b2:	b580      	push	{r7, lr}
 80174b4:	b084      	sub	sp, #16
 80174b6:	af00      	add	r7, sp, #0
 80174b8:	6078      	str	r0, [r7, #4]
 80174ba:	4608      	mov	r0, r1
 80174bc:	4611      	mov	r1, r2
 80174be:	461a      	mov	r2, r3
 80174c0:	4603      	mov	r3, r0
 80174c2:	70fb      	strb	r3, [r7, #3]
 80174c4:	460b      	mov	r3, r1
 80174c6:	70bb      	strb	r3, [r7, #2]
 80174c8:	4613      	mov	r3, r2
 80174ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174cc:	2300      	movs	r3, #0
 80174ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80174d0:	2300      	movs	r3, #0
 80174d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80174da:	78bb      	ldrb	r3, [r7, #2]
 80174dc:	883a      	ldrh	r2, [r7, #0]
 80174de:	78f9      	ldrb	r1, [r7, #3]
 80174e0:	f7f4 fdd6 	bl	800c090 <HAL_PCD_EP_Open>
 80174e4:	4603      	mov	r3, r0
 80174e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80174e8:	7bfb      	ldrb	r3, [r7, #15]
 80174ea:	4618      	mov	r0, r3
 80174ec:	f000 f91c 	bl	8017728 <USBD_Get_USB_Status>
 80174f0:	4603      	mov	r3, r0
 80174f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80174f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80174f6:	4618      	mov	r0, r3
 80174f8:	3710      	adds	r7, #16
 80174fa:	46bd      	mov	sp, r7
 80174fc:	bd80      	pop	{r7, pc}

080174fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80174fe:	b580      	push	{r7, lr}
 8017500:	b084      	sub	sp, #16
 8017502:	af00      	add	r7, sp, #0
 8017504:	6078      	str	r0, [r7, #4]
 8017506:	460b      	mov	r3, r1
 8017508:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801750a:	2300      	movs	r3, #0
 801750c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801750e:	2300      	movs	r3, #0
 8017510:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017518:	78fa      	ldrb	r2, [r7, #3]
 801751a:	4611      	mov	r1, r2
 801751c:	4618      	mov	r0, r3
 801751e:	f7f4 fe21 	bl	800c164 <HAL_PCD_EP_Close>
 8017522:	4603      	mov	r3, r0
 8017524:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017526:	7bfb      	ldrb	r3, [r7, #15]
 8017528:	4618      	mov	r0, r3
 801752a:	f000 f8fd 	bl	8017728 <USBD_Get_USB_Status>
 801752e:	4603      	mov	r3, r0
 8017530:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017532:	7bbb      	ldrb	r3, [r7, #14]
}
 8017534:	4618      	mov	r0, r3
 8017536:	3710      	adds	r7, #16
 8017538:	46bd      	mov	sp, r7
 801753a:	bd80      	pop	{r7, pc}

0801753c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801753c:	b580      	push	{r7, lr}
 801753e:	b084      	sub	sp, #16
 8017540:	af00      	add	r7, sp, #0
 8017542:	6078      	str	r0, [r7, #4]
 8017544:	460b      	mov	r3, r1
 8017546:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017548:	2300      	movs	r3, #0
 801754a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801754c:	2300      	movs	r3, #0
 801754e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017556:	78fa      	ldrb	r2, [r7, #3]
 8017558:	4611      	mov	r1, r2
 801755a:	4618      	mov	r0, r3
 801755c:	f7f4 fed9 	bl	800c312 <HAL_PCD_EP_SetStall>
 8017560:	4603      	mov	r3, r0
 8017562:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017564:	7bfb      	ldrb	r3, [r7, #15]
 8017566:	4618      	mov	r0, r3
 8017568:	f000 f8de 	bl	8017728 <USBD_Get_USB_Status>
 801756c:	4603      	mov	r3, r0
 801756e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017570:	7bbb      	ldrb	r3, [r7, #14]
}
 8017572:	4618      	mov	r0, r3
 8017574:	3710      	adds	r7, #16
 8017576:	46bd      	mov	sp, r7
 8017578:	bd80      	pop	{r7, pc}

0801757a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801757a:	b580      	push	{r7, lr}
 801757c:	b084      	sub	sp, #16
 801757e:	af00      	add	r7, sp, #0
 8017580:	6078      	str	r0, [r7, #4]
 8017582:	460b      	mov	r3, r1
 8017584:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017586:	2300      	movs	r3, #0
 8017588:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801758a:	2300      	movs	r3, #0
 801758c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017594:	78fa      	ldrb	r2, [r7, #3]
 8017596:	4611      	mov	r1, r2
 8017598:	4618      	mov	r0, r3
 801759a:	f7f4 ff1d 	bl	800c3d8 <HAL_PCD_EP_ClrStall>
 801759e:	4603      	mov	r3, r0
 80175a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80175a2:	7bfb      	ldrb	r3, [r7, #15]
 80175a4:	4618      	mov	r0, r3
 80175a6:	f000 f8bf 	bl	8017728 <USBD_Get_USB_Status>
 80175aa:	4603      	mov	r3, r0
 80175ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80175ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80175b0:	4618      	mov	r0, r3
 80175b2:	3710      	adds	r7, #16
 80175b4:	46bd      	mov	sp, r7
 80175b6:	bd80      	pop	{r7, pc}

080175b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80175b8:	b480      	push	{r7}
 80175ba:	b085      	sub	sp, #20
 80175bc:	af00      	add	r7, sp, #0
 80175be:	6078      	str	r0, [r7, #4]
 80175c0:	460b      	mov	r3, r1
 80175c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80175ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80175cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	da0b      	bge.n	80175ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80175d4:	78fb      	ldrb	r3, [r7, #3]
 80175d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80175da:	68f9      	ldr	r1, [r7, #12]
 80175dc:	4613      	mov	r3, r2
 80175de:	00db      	lsls	r3, r3, #3
 80175e0:	4413      	add	r3, r2
 80175e2:	009b      	lsls	r3, r3, #2
 80175e4:	440b      	add	r3, r1
 80175e6:	3316      	adds	r3, #22
 80175e8:	781b      	ldrb	r3, [r3, #0]
 80175ea:	e00b      	b.n	8017604 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80175ec:	78fb      	ldrb	r3, [r7, #3]
 80175ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80175f2:	68f9      	ldr	r1, [r7, #12]
 80175f4:	4613      	mov	r3, r2
 80175f6:	00db      	lsls	r3, r3, #3
 80175f8:	4413      	add	r3, r2
 80175fa:	009b      	lsls	r3, r3, #2
 80175fc:	440b      	add	r3, r1
 80175fe:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8017602:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017604:	4618      	mov	r0, r3
 8017606:	3714      	adds	r7, #20
 8017608:	46bd      	mov	sp, r7
 801760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801760e:	4770      	bx	lr

08017610 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017610:	b580      	push	{r7, lr}
 8017612:	b084      	sub	sp, #16
 8017614:	af00      	add	r7, sp, #0
 8017616:	6078      	str	r0, [r7, #4]
 8017618:	460b      	mov	r3, r1
 801761a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801761c:	2300      	movs	r3, #0
 801761e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017620:	2300      	movs	r3, #0
 8017622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801762a:	78fa      	ldrb	r2, [r7, #3]
 801762c:	4611      	mov	r1, r2
 801762e:	4618      	mov	r0, r3
 8017630:	f7f4 fd0a 	bl	800c048 <HAL_PCD_SetAddress>
 8017634:	4603      	mov	r3, r0
 8017636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017638:	7bfb      	ldrb	r3, [r7, #15]
 801763a:	4618      	mov	r0, r3
 801763c:	f000 f874 	bl	8017728 <USBD_Get_USB_Status>
 8017640:	4603      	mov	r3, r0
 8017642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017644:	7bbb      	ldrb	r3, [r7, #14]
}
 8017646:	4618      	mov	r0, r3
 8017648:	3710      	adds	r7, #16
 801764a:	46bd      	mov	sp, r7
 801764c:	bd80      	pop	{r7, pc}

0801764e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801764e:	b580      	push	{r7, lr}
 8017650:	b086      	sub	sp, #24
 8017652:	af00      	add	r7, sp, #0
 8017654:	60f8      	str	r0, [r7, #12]
 8017656:	607a      	str	r2, [r7, #4]
 8017658:	603b      	str	r3, [r7, #0]
 801765a:	460b      	mov	r3, r1
 801765c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801765e:	2300      	movs	r3, #0
 8017660:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017662:	2300      	movs	r3, #0
 8017664:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801766c:	7af9      	ldrb	r1, [r7, #11]
 801766e:	683b      	ldr	r3, [r7, #0]
 8017670:	687a      	ldr	r2, [r7, #4]
 8017672:	f7f4 fe14 	bl	800c29e <HAL_PCD_EP_Transmit>
 8017676:	4603      	mov	r3, r0
 8017678:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801767a:	7dfb      	ldrb	r3, [r7, #23]
 801767c:	4618      	mov	r0, r3
 801767e:	f000 f853 	bl	8017728 <USBD_Get_USB_Status>
 8017682:	4603      	mov	r3, r0
 8017684:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017686:	7dbb      	ldrb	r3, [r7, #22]
}
 8017688:	4618      	mov	r0, r3
 801768a:	3718      	adds	r7, #24
 801768c:	46bd      	mov	sp, r7
 801768e:	bd80      	pop	{r7, pc}

08017690 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017690:	b580      	push	{r7, lr}
 8017692:	b086      	sub	sp, #24
 8017694:	af00      	add	r7, sp, #0
 8017696:	60f8      	str	r0, [r7, #12]
 8017698:	607a      	str	r2, [r7, #4]
 801769a:	603b      	str	r3, [r7, #0]
 801769c:	460b      	mov	r3, r1
 801769e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80176a0:	2300      	movs	r3, #0
 80176a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80176a4:	2300      	movs	r3, #0
 80176a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80176ae:	7af9      	ldrb	r1, [r7, #11]
 80176b0:	683b      	ldr	r3, [r7, #0]
 80176b2:	687a      	ldr	r2, [r7, #4]
 80176b4:	f7f4 fda0 	bl	800c1f8 <HAL_PCD_EP_Receive>
 80176b8:	4603      	mov	r3, r0
 80176ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80176bc:	7dfb      	ldrb	r3, [r7, #23]
 80176be:	4618      	mov	r0, r3
 80176c0:	f000 f832 	bl	8017728 <USBD_Get_USB_Status>
 80176c4:	4603      	mov	r3, r0
 80176c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80176c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80176ca:	4618      	mov	r0, r3
 80176cc:	3718      	adds	r7, #24
 80176ce:	46bd      	mov	sp, r7
 80176d0:	bd80      	pop	{r7, pc}

080176d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80176d2:	b580      	push	{r7, lr}
 80176d4:	b082      	sub	sp, #8
 80176d6:	af00      	add	r7, sp, #0
 80176d8:	6078      	str	r0, [r7, #4]
 80176da:	460b      	mov	r3, r1
 80176dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80176e4:	78fa      	ldrb	r2, [r7, #3]
 80176e6:	4611      	mov	r1, r2
 80176e8:	4618      	mov	r0, r3
 80176ea:	f7f4 fdc0 	bl	800c26e <HAL_PCD_EP_GetRxCount>
 80176ee:	4603      	mov	r3, r0
}
 80176f0:	4618      	mov	r0, r3
 80176f2:	3708      	adds	r7, #8
 80176f4:	46bd      	mov	sp, r7
 80176f6:	bd80      	pop	{r7, pc}

080176f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80176f8:	b480      	push	{r7}
 80176fa:	b083      	sub	sp, #12
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017700:	4b03      	ldr	r3, [pc, #12]	@ (8017710 <USBD_static_malloc+0x18>)
}
 8017702:	4618      	mov	r0, r3
 8017704:	370c      	adds	r7, #12
 8017706:	46bd      	mov	sp, r7
 8017708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801770c:	4770      	bx	lr
 801770e:	bf00      	nop
 8017710:	2000a344 	.word	0x2000a344

08017714 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017714:	b480      	push	{r7}
 8017716:	b083      	sub	sp, #12
 8017718:	af00      	add	r7, sp, #0
 801771a:	6078      	str	r0, [r7, #4]

}
 801771c:	bf00      	nop
 801771e:	370c      	adds	r7, #12
 8017720:	46bd      	mov	sp, r7
 8017722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017726:	4770      	bx	lr

08017728 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017728:	b480      	push	{r7}
 801772a:	b085      	sub	sp, #20
 801772c:	af00      	add	r7, sp, #0
 801772e:	4603      	mov	r3, r0
 8017730:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017732:	2300      	movs	r3, #0
 8017734:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017736:	79fb      	ldrb	r3, [r7, #7]
 8017738:	2b03      	cmp	r3, #3
 801773a:	d817      	bhi.n	801776c <USBD_Get_USB_Status+0x44>
 801773c:	a201      	add	r2, pc, #4	@ (adr r2, 8017744 <USBD_Get_USB_Status+0x1c>)
 801773e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017742:	bf00      	nop
 8017744:	08017755 	.word	0x08017755
 8017748:	0801775b 	.word	0x0801775b
 801774c:	08017761 	.word	0x08017761
 8017750:	08017767 	.word	0x08017767
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017754:	2300      	movs	r3, #0
 8017756:	73fb      	strb	r3, [r7, #15]
    break;
 8017758:	e00b      	b.n	8017772 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801775a:	2303      	movs	r3, #3
 801775c:	73fb      	strb	r3, [r7, #15]
    break;
 801775e:	e008      	b.n	8017772 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017760:	2301      	movs	r3, #1
 8017762:	73fb      	strb	r3, [r7, #15]
    break;
 8017764:	e005      	b.n	8017772 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017766:	2303      	movs	r3, #3
 8017768:	73fb      	strb	r3, [r7, #15]
    break;
 801776a:	e002      	b.n	8017772 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801776c:	2303      	movs	r3, #3
 801776e:	73fb      	strb	r3, [r7, #15]
    break;
 8017770:	bf00      	nop
  }
  return usb_status;
 8017772:	7bfb      	ldrb	r3, [r7, #15]
}
 8017774:	4618      	mov	r0, r3
 8017776:	3714      	adds	r7, #20
 8017778:	46bd      	mov	sp, r7
 801777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801777e:	4770      	bx	lr

08017780 <acosf>:
 8017780:	b508      	push	{r3, lr}
 8017782:	ed2d 8b02 	vpush	{d8}
 8017786:	eeb0 8a40 	vmov.f32	s16, s0
 801778a:	f000 faef 	bl	8017d6c <__ieee754_acosf>
 801778e:	eeb4 8a48 	vcmp.f32	s16, s16
 8017792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017796:	eef0 8a40 	vmov.f32	s17, s0
 801779a:	d615      	bvs.n	80177c8 <acosf+0x48>
 801779c:	eeb0 0a48 	vmov.f32	s0, s16
 80177a0:	f000 f9d6 	bl	8017b50 <fabsf>
 80177a4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80177a8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80177ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177b0:	dd0a      	ble.n	80177c8 <acosf+0x48>
 80177b2:	f002 ff67 	bl	801a684 <__errno>
 80177b6:	ecbd 8b02 	vpop	{d8}
 80177ba:	2321      	movs	r3, #33	@ 0x21
 80177bc:	6003      	str	r3, [r0, #0]
 80177be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80177c2:	4804      	ldr	r0, [pc, #16]	@ (80177d4 <acosf+0x54>)
 80177c4:	f000 ba28 	b.w	8017c18 <nanf>
 80177c8:	eeb0 0a68 	vmov.f32	s0, s17
 80177cc:	ecbd 8b02 	vpop	{d8}
 80177d0:	bd08      	pop	{r3, pc}
 80177d2:	bf00      	nop
 80177d4:	08020303 	.word	0x08020303

080177d8 <asinf>:
 80177d8:	b508      	push	{r3, lr}
 80177da:	ed2d 8b02 	vpush	{d8}
 80177de:	eeb0 8a40 	vmov.f32	s16, s0
 80177e2:	f000 fbb9 	bl	8017f58 <__ieee754_asinf>
 80177e6:	eeb4 8a48 	vcmp.f32	s16, s16
 80177ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177ee:	eef0 8a40 	vmov.f32	s17, s0
 80177f2:	d615      	bvs.n	8017820 <asinf+0x48>
 80177f4:	eeb0 0a48 	vmov.f32	s0, s16
 80177f8:	f000 f9aa 	bl	8017b50 <fabsf>
 80177fc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017800:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8017804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017808:	dd0a      	ble.n	8017820 <asinf+0x48>
 801780a:	f002 ff3b 	bl	801a684 <__errno>
 801780e:	ecbd 8b02 	vpop	{d8}
 8017812:	2321      	movs	r3, #33	@ 0x21
 8017814:	6003      	str	r3, [r0, #0]
 8017816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801781a:	4804      	ldr	r0, [pc, #16]	@ (801782c <asinf+0x54>)
 801781c:	f000 b9fc 	b.w	8017c18 <nanf>
 8017820:	eeb0 0a68 	vmov.f32	s0, s17
 8017824:	ecbd 8b02 	vpop	{d8}
 8017828:	bd08      	pop	{r3, pc}
 801782a:	bf00      	nop
 801782c:	08020303 	.word	0x08020303

08017830 <atan2f>:
 8017830:	f000 bc76 	b.w	8018120 <__ieee754_atan2f>

08017834 <powf>:
 8017834:	b508      	push	{r3, lr}
 8017836:	ed2d 8b04 	vpush	{d8-d9}
 801783a:	eeb0 8a60 	vmov.f32	s16, s1
 801783e:	eeb0 9a40 	vmov.f32	s18, s0
 8017842:	f000 fd0d 	bl	8018260 <__ieee754_powf>
 8017846:	eeb4 8a48 	vcmp.f32	s16, s16
 801784a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801784e:	eef0 8a40 	vmov.f32	s17, s0
 8017852:	d63e      	bvs.n	80178d2 <powf+0x9e>
 8017854:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8017858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801785c:	d112      	bne.n	8017884 <powf+0x50>
 801785e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017866:	d039      	beq.n	80178dc <powf+0xa8>
 8017868:	eeb0 0a48 	vmov.f32	s0, s16
 801786c:	f000 f9be 	bl	8017bec <finitef>
 8017870:	b378      	cbz	r0, 80178d2 <powf+0x9e>
 8017872:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801787a:	d52a      	bpl.n	80178d2 <powf+0x9e>
 801787c:	f002 ff02 	bl	801a684 <__errno>
 8017880:	2322      	movs	r3, #34	@ 0x22
 8017882:	e014      	b.n	80178ae <powf+0x7a>
 8017884:	f000 f9b2 	bl	8017bec <finitef>
 8017888:	b998      	cbnz	r0, 80178b2 <powf+0x7e>
 801788a:	eeb0 0a49 	vmov.f32	s0, s18
 801788e:	f000 f9ad 	bl	8017bec <finitef>
 8017892:	b170      	cbz	r0, 80178b2 <powf+0x7e>
 8017894:	eeb0 0a48 	vmov.f32	s0, s16
 8017898:	f000 f9a8 	bl	8017bec <finitef>
 801789c:	b148      	cbz	r0, 80178b2 <powf+0x7e>
 801789e:	eef4 8a68 	vcmp.f32	s17, s17
 80178a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178a6:	d7e9      	bvc.n	801787c <powf+0x48>
 80178a8:	f002 feec 	bl	801a684 <__errno>
 80178ac:	2321      	movs	r3, #33	@ 0x21
 80178ae:	6003      	str	r3, [r0, #0]
 80178b0:	e00f      	b.n	80178d2 <powf+0x9e>
 80178b2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80178b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178ba:	d10a      	bne.n	80178d2 <powf+0x9e>
 80178bc:	eeb0 0a49 	vmov.f32	s0, s18
 80178c0:	f000 f994 	bl	8017bec <finitef>
 80178c4:	b128      	cbz	r0, 80178d2 <powf+0x9e>
 80178c6:	eeb0 0a48 	vmov.f32	s0, s16
 80178ca:	f000 f98f 	bl	8017bec <finitef>
 80178ce:	2800      	cmp	r0, #0
 80178d0:	d1d4      	bne.n	801787c <powf+0x48>
 80178d2:	eeb0 0a68 	vmov.f32	s0, s17
 80178d6:	ecbd 8b04 	vpop	{d8-d9}
 80178da:	bd08      	pop	{r3, pc}
 80178dc:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80178e0:	e7f7      	b.n	80178d2 <powf+0x9e>
	...

080178e4 <sqrtf>:
 80178e4:	b508      	push	{r3, lr}
 80178e6:	ed2d 8b02 	vpush	{d8}
 80178ea:	eeb0 8a40 	vmov.f32	s16, s0
 80178ee:	f000 f999 	bl	8017c24 <__ieee754_sqrtf>
 80178f2:	eeb4 8a48 	vcmp.f32	s16, s16
 80178f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178fa:	d60c      	bvs.n	8017916 <sqrtf+0x32>
 80178fc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801791c <sqrtf+0x38>
 8017900:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017908:	d505      	bpl.n	8017916 <sqrtf+0x32>
 801790a:	f002 febb 	bl	801a684 <__errno>
 801790e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8017912:	2321      	movs	r3, #33	@ 0x21
 8017914:	6003      	str	r3, [r0, #0]
 8017916:	ecbd 8b02 	vpop	{d8}
 801791a:	bd08      	pop	{r3, pc}
 801791c:	00000000 	.word	0x00000000

08017920 <atanf>:
 8017920:	b538      	push	{r3, r4, r5, lr}
 8017922:	ee10 5a10 	vmov	r5, s0
 8017926:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801792a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801792e:	eef0 7a40 	vmov.f32	s15, s0
 8017932:	d310      	bcc.n	8017956 <atanf+0x36>
 8017934:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8017938:	d904      	bls.n	8017944 <atanf+0x24>
 801793a:	ee70 7a00 	vadd.f32	s15, s0, s0
 801793e:	eeb0 0a67 	vmov.f32	s0, s15
 8017942:	bd38      	pop	{r3, r4, r5, pc}
 8017944:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8017a7c <atanf+0x15c>
 8017948:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8017a80 <atanf+0x160>
 801794c:	2d00      	cmp	r5, #0
 801794e:	bfc8      	it	gt
 8017950:	eef0 7a47 	vmovgt.f32	s15, s14
 8017954:	e7f3      	b.n	801793e <atanf+0x1e>
 8017956:	4b4b      	ldr	r3, [pc, #300]	@ (8017a84 <atanf+0x164>)
 8017958:	429c      	cmp	r4, r3
 801795a:	d810      	bhi.n	801797e <atanf+0x5e>
 801795c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8017960:	d20a      	bcs.n	8017978 <atanf+0x58>
 8017962:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8017a88 <atanf+0x168>
 8017966:	ee30 7a07 	vadd.f32	s14, s0, s14
 801796a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801796e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017976:	dce2      	bgt.n	801793e <atanf+0x1e>
 8017978:	f04f 33ff 	mov.w	r3, #4294967295
 801797c:	e013      	b.n	80179a6 <atanf+0x86>
 801797e:	f000 f8e7 	bl	8017b50 <fabsf>
 8017982:	4b42      	ldr	r3, [pc, #264]	@ (8017a8c <atanf+0x16c>)
 8017984:	429c      	cmp	r4, r3
 8017986:	d84f      	bhi.n	8017a28 <atanf+0x108>
 8017988:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 801798c:	429c      	cmp	r4, r3
 801798e:	d841      	bhi.n	8017a14 <atanf+0xf4>
 8017990:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8017994:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8017998:	eea0 7a27 	vfma.f32	s14, s0, s15
 801799c:	2300      	movs	r3, #0
 801799e:	ee30 0a27 	vadd.f32	s0, s0, s15
 80179a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80179a6:	1c5a      	adds	r2, r3, #1
 80179a8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80179ac:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8017a90 <atanf+0x170>
 80179b0:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8017a94 <atanf+0x174>
 80179b4:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8017a98 <atanf+0x178>
 80179b8:	ee66 6a06 	vmul.f32	s13, s12, s12
 80179bc:	eee6 5a87 	vfma.f32	s11, s13, s14
 80179c0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8017a9c <atanf+0x17c>
 80179c4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80179c8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8017aa0 <atanf+0x180>
 80179cc:	eee7 5a26 	vfma.f32	s11, s14, s13
 80179d0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8017aa4 <atanf+0x184>
 80179d4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80179d8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8017aa8 <atanf+0x188>
 80179dc:	eee7 5a26 	vfma.f32	s11, s14, s13
 80179e0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8017aac <atanf+0x18c>
 80179e4:	eea6 5a87 	vfma.f32	s10, s13, s14
 80179e8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8017ab0 <atanf+0x190>
 80179ec:	eea5 7a26 	vfma.f32	s14, s10, s13
 80179f0:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8017ab4 <atanf+0x194>
 80179f4:	eea7 5a26 	vfma.f32	s10, s14, s13
 80179f8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8017ab8 <atanf+0x198>
 80179fc:	eea5 7a26 	vfma.f32	s14, s10, s13
 8017a00:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017a04:	eea5 7a86 	vfma.f32	s14, s11, s12
 8017a08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8017a0c:	d121      	bne.n	8017a52 <atanf+0x132>
 8017a0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017a12:	e794      	b.n	801793e <atanf+0x1e>
 8017a14:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017a18:	ee30 7a67 	vsub.f32	s14, s0, s15
 8017a1c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017a20:	2301      	movs	r3, #1
 8017a22:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017a26:	e7be      	b.n	80179a6 <atanf+0x86>
 8017a28:	4b24      	ldr	r3, [pc, #144]	@ (8017abc <atanf+0x19c>)
 8017a2a:	429c      	cmp	r4, r3
 8017a2c:	d80b      	bhi.n	8017a46 <atanf+0x126>
 8017a2e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8017a32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017a36:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017a3a:	2302      	movs	r3, #2
 8017a3c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8017a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017a44:	e7af      	b.n	80179a6 <atanf+0x86>
 8017a46:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8017a4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017a4e:	2303      	movs	r3, #3
 8017a50:	e7a9      	b.n	80179a6 <atanf+0x86>
 8017a52:	4a1b      	ldr	r2, [pc, #108]	@ (8017ac0 <atanf+0x1a0>)
 8017a54:	491b      	ldr	r1, [pc, #108]	@ (8017ac4 <atanf+0x1a4>)
 8017a56:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017a5a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017a5e:	edd3 6a00 	vldr	s13, [r3]
 8017a62:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017a66:	2d00      	cmp	r5, #0
 8017a68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017a6c:	edd2 7a00 	vldr	s15, [r2]
 8017a70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017a74:	bfb8      	it	lt
 8017a76:	eef1 7a67 	vneglt.f32	s15, s15
 8017a7a:	e760      	b.n	801793e <atanf+0x1e>
 8017a7c:	bfc90fdb 	.word	0xbfc90fdb
 8017a80:	3fc90fdb 	.word	0x3fc90fdb
 8017a84:	3edfffff 	.word	0x3edfffff
 8017a88:	7149f2ca 	.word	0x7149f2ca
 8017a8c:	3f97ffff 	.word	0x3f97ffff
 8017a90:	3c8569d7 	.word	0x3c8569d7
 8017a94:	3d4bda59 	.word	0x3d4bda59
 8017a98:	bd6ef16b 	.word	0xbd6ef16b
 8017a9c:	3d886b35 	.word	0x3d886b35
 8017aa0:	3dba2e6e 	.word	0x3dba2e6e
 8017aa4:	3e124925 	.word	0x3e124925
 8017aa8:	3eaaaaab 	.word	0x3eaaaaab
 8017aac:	bd15a221 	.word	0xbd15a221
 8017ab0:	bd9d8795 	.word	0xbd9d8795
 8017ab4:	bde38e38 	.word	0xbde38e38
 8017ab8:	be4ccccd 	.word	0xbe4ccccd
 8017abc:	401bffff 	.word	0x401bffff
 8017ac0:	08020480 	.word	0x08020480
 8017ac4:	08020470 	.word	0x08020470

08017ac8 <cosf>:
 8017ac8:	ee10 3a10 	vmov	r3, s0
 8017acc:	b507      	push	{r0, r1, r2, lr}
 8017ace:	4a1e      	ldr	r2, [pc, #120]	@ (8017b48 <cosf+0x80>)
 8017ad0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017ad4:	4293      	cmp	r3, r2
 8017ad6:	d806      	bhi.n	8017ae6 <cosf+0x1e>
 8017ad8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8017b4c <cosf+0x84>
 8017adc:	b003      	add	sp, #12
 8017ade:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ae2:	f000 b8a3 	b.w	8017c2c <__kernel_cosf>
 8017ae6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017aea:	d304      	bcc.n	8017af6 <cosf+0x2e>
 8017aec:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017af0:	b003      	add	sp, #12
 8017af2:	f85d fb04 	ldr.w	pc, [sp], #4
 8017af6:	4668      	mov	r0, sp
 8017af8:	f000 fe80 	bl	80187fc <__ieee754_rem_pio2f>
 8017afc:	f000 0003 	and.w	r0, r0, #3
 8017b00:	2801      	cmp	r0, #1
 8017b02:	d009      	beq.n	8017b18 <cosf+0x50>
 8017b04:	2802      	cmp	r0, #2
 8017b06:	d010      	beq.n	8017b2a <cosf+0x62>
 8017b08:	b9b0      	cbnz	r0, 8017b38 <cosf+0x70>
 8017b0a:	eddd 0a01 	vldr	s1, [sp, #4]
 8017b0e:	ed9d 0a00 	vldr	s0, [sp]
 8017b12:	f000 f88b 	bl	8017c2c <__kernel_cosf>
 8017b16:	e7eb      	b.n	8017af0 <cosf+0x28>
 8017b18:	eddd 0a01 	vldr	s1, [sp, #4]
 8017b1c:	ed9d 0a00 	vldr	s0, [sp]
 8017b20:	f000 f8dc 	bl	8017cdc <__kernel_sinf>
 8017b24:	eeb1 0a40 	vneg.f32	s0, s0
 8017b28:	e7e2      	b.n	8017af0 <cosf+0x28>
 8017b2a:	eddd 0a01 	vldr	s1, [sp, #4]
 8017b2e:	ed9d 0a00 	vldr	s0, [sp]
 8017b32:	f000 f87b 	bl	8017c2c <__kernel_cosf>
 8017b36:	e7f5      	b.n	8017b24 <cosf+0x5c>
 8017b38:	eddd 0a01 	vldr	s1, [sp, #4]
 8017b3c:	ed9d 0a00 	vldr	s0, [sp]
 8017b40:	2001      	movs	r0, #1
 8017b42:	f000 f8cb 	bl	8017cdc <__kernel_sinf>
 8017b46:	e7d3      	b.n	8017af0 <cosf+0x28>
 8017b48:	3f490fd8 	.word	0x3f490fd8
 8017b4c:	00000000 	.word	0x00000000

08017b50 <fabsf>:
 8017b50:	ee10 3a10 	vmov	r3, s0
 8017b54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017b58:	ee00 3a10 	vmov	s0, r3
 8017b5c:	4770      	bx	lr
	...

08017b60 <sinf>:
 8017b60:	ee10 3a10 	vmov	r3, s0
 8017b64:	b507      	push	{r0, r1, r2, lr}
 8017b66:	4a1f      	ldr	r2, [pc, #124]	@ (8017be4 <sinf+0x84>)
 8017b68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017b6c:	4293      	cmp	r3, r2
 8017b6e:	d807      	bhi.n	8017b80 <sinf+0x20>
 8017b70:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8017be8 <sinf+0x88>
 8017b74:	2000      	movs	r0, #0
 8017b76:	b003      	add	sp, #12
 8017b78:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b7c:	f000 b8ae 	b.w	8017cdc <__kernel_sinf>
 8017b80:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017b84:	d304      	bcc.n	8017b90 <sinf+0x30>
 8017b86:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017b8a:	b003      	add	sp, #12
 8017b8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017b90:	4668      	mov	r0, sp
 8017b92:	f000 fe33 	bl	80187fc <__ieee754_rem_pio2f>
 8017b96:	f000 0003 	and.w	r0, r0, #3
 8017b9a:	2801      	cmp	r0, #1
 8017b9c:	d00a      	beq.n	8017bb4 <sinf+0x54>
 8017b9e:	2802      	cmp	r0, #2
 8017ba0:	d00f      	beq.n	8017bc2 <sinf+0x62>
 8017ba2:	b9c0      	cbnz	r0, 8017bd6 <sinf+0x76>
 8017ba4:	eddd 0a01 	vldr	s1, [sp, #4]
 8017ba8:	ed9d 0a00 	vldr	s0, [sp]
 8017bac:	2001      	movs	r0, #1
 8017bae:	f000 f895 	bl	8017cdc <__kernel_sinf>
 8017bb2:	e7ea      	b.n	8017b8a <sinf+0x2a>
 8017bb4:	eddd 0a01 	vldr	s1, [sp, #4]
 8017bb8:	ed9d 0a00 	vldr	s0, [sp]
 8017bbc:	f000 f836 	bl	8017c2c <__kernel_cosf>
 8017bc0:	e7e3      	b.n	8017b8a <sinf+0x2a>
 8017bc2:	eddd 0a01 	vldr	s1, [sp, #4]
 8017bc6:	ed9d 0a00 	vldr	s0, [sp]
 8017bca:	2001      	movs	r0, #1
 8017bcc:	f000 f886 	bl	8017cdc <__kernel_sinf>
 8017bd0:	eeb1 0a40 	vneg.f32	s0, s0
 8017bd4:	e7d9      	b.n	8017b8a <sinf+0x2a>
 8017bd6:	eddd 0a01 	vldr	s1, [sp, #4]
 8017bda:	ed9d 0a00 	vldr	s0, [sp]
 8017bde:	f000 f825 	bl	8017c2c <__kernel_cosf>
 8017be2:	e7f5      	b.n	8017bd0 <sinf+0x70>
 8017be4:	3f490fd8 	.word	0x3f490fd8
 8017be8:	00000000 	.word	0x00000000

08017bec <finitef>:
 8017bec:	ee10 3a10 	vmov	r3, s0
 8017bf0:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8017bf4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8017bf8:	bfac      	ite	ge
 8017bfa:	2000      	movge	r0, #0
 8017bfc:	2001      	movlt	r0, #1
 8017bfe:	4770      	bx	lr

08017c00 <copysignf>:
 8017c00:	ee10 2a10 	vmov	r2, s0
 8017c04:	ee10 3a90 	vmov	r3, s1
 8017c08:	f362 031e 	bfi	r3, r2, #0, #31
 8017c0c:	ee00 3a90 	vmov	s1, r3
 8017c10:	eeb0 0a60 	vmov.f32	s0, s1
 8017c14:	4770      	bx	lr
	...

08017c18 <nanf>:
 8017c18:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8017c20 <nanf+0x8>
 8017c1c:	4770      	bx	lr
 8017c1e:	bf00      	nop
 8017c20:	7fc00000 	.word	0x7fc00000

08017c24 <__ieee754_sqrtf>:
 8017c24:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8017c28:	4770      	bx	lr
	...

08017c2c <__kernel_cosf>:
 8017c2c:	ee10 3a10 	vmov	r3, s0
 8017c30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017c34:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8017c38:	eef0 6a40 	vmov.f32	s13, s0
 8017c3c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017c40:	d204      	bcs.n	8017c4c <__kernel_cosf+0x20>
 8017c42:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8017c46:	ee17 2a90 	vmov	r2, s15
 8017c4a:	b342      	cbz	r2, 8017c9e <__kernel_cosf+0x72>
 8017c4c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8017c50:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8017cbc <__kernel_cosf+0x90>
 8017c54:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8017cc0 <__kernel_cosf+0x94>
 8017c58:	4a1a      	ldr	r2, [pc, #104]	@ (8017cc4 <__kernel_cosf+0x98>)
 8017c5a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8017c5e:	4293      	cmp	r3, r2
 8017c60:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8017cc8 <__kernel_cosf+0x9c>
 8017c64:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017c68:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8017ccc <__kernel_cosf+0xa0>
 8017c6c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8017c70:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8017cd0 <__kernel_cosf+0xa4>
 8017c74:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017c78:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8017cd4 <__kernel_cosf+0xa8>
 8017c7c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8017c80:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8017c84:	ee26 6a07 	vmul.f32	s12, s12, s14
 8017c88:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017c8c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8017c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017c94:	d804      	bhi.n	8017ca0 <__kernel_cosf+0x74>
 8017c96:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8017c9a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017c9e:	4770      	bx	lr
 8017ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8017cd8 <__kernel_cosf+0xac>)
 8017ca2:	4293      	cmp	r3, r2
 8017ca4:	bf9a      	itte	ls
 8017ca6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8017caa:	ee07 3a10 	vmovls	s14, r3
 8017cae:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8017cb2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017cb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017cba:	e7ec      	b.n	8017c96 <__kernel_cosf+0x6a>
 8017cbc:	ad47d74e 	.word	0xad47d74e
 8017cc0:	310f74f6 	.word	0x310f74f6
 8017cc4:	3e999999 	.word	0x3e999999
 8017cc8:	b493f27c 	.word	0xb493f27c
 8017ccc:	37d00d01 	.word	0x37d00d01
 8017cd0:	bab60b61 	.word	0xbab60b61
 8017cd4:	3d2aaaab 	.word	0x3d2aaaab
 8017cd8:	3f480000 	.word	0x3f480000

08017cdc <__kernel_sinf>:
 8017cdc:	ee10 3a10 	vmov	r3, s0
 8017ce0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017ce4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8017ce8:	d204      	bcs.n	8017cf4 <__kernel_sinf+0x18>
 8017cea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8017cee:	ee17 3a90 	vmov	r3, s15
 8017cf2:	b35b      	cbz	r3, 8017d4c <__kernel_sinf+0x70>
 8017cf4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8017cf8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8017d50 <__kernel_sinf+0x74>
 8017cfc:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8017d54 <__kernel_sinf+0x78>
 8017d00:	eea7 6a27 	vfma.f32	s12, s14, s15
 8017d04:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8017d58 <__kernel_sinf+0x7c>
 8017d08:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017d0c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8017d5c <__kernel_sinf+0x80>
 8017d10:	eea7 6a87 	vfma.f32	s12, s15, s14
 8017d14:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8017d60 <__kernel_sinf+0x84>
 8017d18:	ee60 6a07 	vmul.f32	s13, s0, s14
 8017d1c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017d20:	b930      	cbnz	r0, 8017d30 <__kernel_sinf+0x54>
 8017d22:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8017d64 <__kernel_sinf+0x88>
 8017d26:	eea7 6a27 	vfma.f32	s12, s14, s15
 8017d2a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8017d2e:	4770      	bx	lr
 8017d30:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8017d34:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8017d38:	eee0 7a86 	vfma.f32	s15, s1, s12
 8017d3c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8017d40:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8017d68 <__kernel_sinf+0x8c>
 8017d44:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8017d48:	ee30 0a60 	vsub.f32	s0, s0, s1
 8017d4c:	4770      	bx	lr
 8017d4e:	bf00      	nop
 8017d50:	2f2ec9d3 	.word	0x2f2ec9d3
 8017d54:	b2d72f34 	.word	0xb2d72f34
 8017d58:	3638ef1b 	.word	0x3638ef1b
 8017d5c:	b9500d01 	.word	0xb9500d01
 8017d60:	3c088889 	.word	0x3c088889
 8017d64:	be2aaaab 	.word	0xbe2aaaab
 8017d68:	3e2aaaab 	.word	0x3e2aaaab

08017d6c <__ieee754_acosf>:
 8017d6c:	b508      	push	{r3, lr}
 8017d6e:	ee10 3a10 	vmov	r3, s0
 8017d72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8017d76:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8017d7a:	ed2d 8b0c 	vpush	{d8-d13}
 8017d7e:	d10a      	bne.n	8017d96 <__ieee754_acosf+0x2a>
 8017d80:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8017f14 <__ieee754_acosf+0x1a8>
 8017d84:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8017f18 <__ieee754_acosf+0x1ac>
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	bfc8      	it	gt
 8017d8c:	eeb0 0a67 	vmovgt.f32	s0, s15
 8017d90:	ecbd 8b0c 	vpop	{d8-d13}
 8017d94:	bd08      	pop	{r3, pc}
 8017d96:	d904      	bls.n	8017da2 <__ieee754_acosf+0x36>
 8017d98:	ee30 8a40 	vsub.f32	s16, s0, s0
 8017d9c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8017da0:	e7f6      	b.n	8017d90 <__ieee754_acosf+0x24>
 8017da2:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8017da6:	d23c      	bcs.n	8017e22 <__ieee754_acosf+0xb6>
 8017da8:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8017dac:	f240 80af 	bls.w	8017f0e <__ieee754_acosf+0x1a2>
 8017db0:	ee60 7a00 	vmul.f32	s15, s0, s0
 8017db4:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8017f1c <__ieee754_acosf+0x1b0>
 8017db8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8017f20 <__ieee754_acosf+0x1b4>
 8017dbc:	ed9f 6a59 	vldr	s12, [pc, #356]	@ 8017f24 <__ieee754_acosf+0x1b8>
 8017dc0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8017dc4:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8017f28 <__ieee754_acosf+0x1bc>
 8017dc8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8017dcc:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8017f2c <__ieee754_acosf+0x1c0>
 8017dd0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8017dd4:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8017f30 <__ieee754_acosf+0x1c4>
 8017dd8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8017ddc:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8017f34 <__ieee754_acosf+0x1c8>
 8017de0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8017de4:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8017f38 <__ieee754_acosf+0x1cc>
 8017de8:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8017dec:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8017f3c <__ieee754_acosf+0x1d0>
 8017df0:	eee6 6a27 	vfma.f32	s13, s12, s15
 8017df4:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8017f40 <__ieee754_acosf+0x1d4>
 8017df8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8017dfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017e00:	eee6 6a27 	vfma.f32	s13, s12, s15
 8017e04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017e08:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8017f44 <__ieee754_acosf+0x1d8>
 8017e0c:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8017e10:	eee0 7a46 	vfms.f32	s15, s0, s12
 8017e14:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017e18:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8017f48 <__ieee754_acosf+0x1dc>
 8017e1c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017e20:	e7b6      	b.n	8017d90 <__ieee754_acosf+0x24>
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	eddf da3d 	vldr	s27, [pc, #244]	@ 8017f1c <__ieee754_acosf+0x1b0>
 8017e28:	eddf ca3d 	vldr	s25, [pc, #244]	@ 8017f20 <__ieee754_acosf+0x1b4>
 8017e2c:	ed9f ca3e 	vldr	s24, [pc, #248]	@ 8017f28 <__ieee754_acosf+0x1bc>
 8017e30:	eddf ba3e 	vldr	s23, [pc, #248]	@ 8017f2c <__ieee754_acosf+0x1c0>
 8017e34:	ed9f ba3e 	vldr	s22, [pc, #248]	@ 8017f30 <__ieee754_acosf+0x1c4>
 8017e38:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 8017f34 <__ieee754_acosf+0x1c8>
 8017e3c:	ed9f da3e 	vldr	s26, [pc, #248]	@ 8017f38 <__ieee754_acosf+0x1cc>
 8017e40:	eddf aa38 	vldr	s21, [pc, #224]	@ 8017f24 <__ieee754_acosf+0x1b8>
 8017e44:	ed9f aa3d 	vldr	s20, [pc, #244]	@ 8017f3c <__ieee754_acosf+0x1d0>
 8017e48:	eddf 9a3d 	vldr	s19, [pc, #244]	@ 8017f40 <__ieee754_acosf+0x1d4>
 8017e4c:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8017e50:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017e54:	da28      	bge.n	8017ea8 <__ieee754_acosf+0x13c>
 8017e56:	ee30 8a09 	vadd.f32	s16, s0, s18
 8017e5a:	ee28 0a27 	vmul.f32	s0, s16, s15
 8017e5e:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8017e62:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8017e66:	eeac ca80 	vfma.f32	s24, s25, s0
 8017e6a:	eeaa aa80 	vfma.f32	s20, s21, s0
 8017e6e:	eeec ba00 	vfma.f32	s23, s24, s0
 8017e72:	eeea 9a00 	vfma.f32	s19, s20, s0
 8017e76:	eeab ba80 	vfma.f32	s22, s23, s0
 8017e7a:	eea9 9a80 	vfma.f32	s18, s19, s0
 8017e7e:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8017e82:	ee68 8a80 	vmul.f32	s17, s17, s0
 8017e86:	f7ff fecd 	bl	8017c24 <__ieee754_sqrtf>
 8017e8a:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8017e8e:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8017f4c <__ieee754_acosf+0x1e0>
 8017e92:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017e96:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8017e9a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8017e9e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8017f50 <__ieee754_acosf+0x1e4>
 8017ea2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8017ea6:	e773      	b.n	8017d90 <__ieee754_acosf+0x24>
 8017ea8:	ee39 8a40 	vsub.f32	s16, s18, s0
 8017eac:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017eb0:	eeb0 0a48 	vmov.f32	s0, s16
 8017eb4:	f7ff feb6 	bl	8017c24 <__ieee754_sqrtf>
 8017eb8:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8017ebc:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8017ec0:	eeac ca88 	vfma.f32	s24, s25, s16
 8017ec4:	eeaa aa88 	vfma.f32	s20, s21, s16
 8017ec8:	eeec ba08 	vfma.f32	s23, s24, s16
 8017ecc:	ee10 3a10 	vmov	r3, s0
 8017ed0:	eeab ba88 	vfma.f32	s22, s23, s16
 8017ed4:	f36f 030b 	bfc	r3, #0, #12
 8017ed8:	eeea 9a08 	vfma.f32	s19, s20, s16
 8017edc:	ee07 3a90 	vmov	s15, r3
 8017ee0:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8017ee4:	eeb0 6a48 	vmov.f32	s12, s16
 8017ee8:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8017eec:	eea9 9a88 	vfma.f32	s18, s19, s16
 8017ef0:	ee70 6a27 	vadd.f32	s13, s0, s15
 8017ef4:	ee68 8a88 	vmul.f32	s17, s17, s16
 8017ef8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8017efc:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8017f00:	eea0 7a26 	vfma.f32	s14, s0, s13
 8017f04:	ee37 0a87 	vadd.f32	s0, s15, s14
 8017f08:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017f0c:	e740      	b.n	8017d90 <__ieee754_acosf+0x24>
 8017f0e:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8017f54 <__ieee754_acosf+0x1e8>
 8017f12:	e73d      	b.n	8017d90 <__ieee754_acosf+0x24>
 8017f14:	40490fdb 	.word	0x40490fdb
 8017f18:	00000000 	.word	0x00000000
 8017f1c:	3811ef08 	.word	0x3811ef08
 8017f20:	3a4f7f04 	.word	0x3a4f7f04
 8017f24:	bf303361 	.word	0xbf303361
 8017f28:	bd241146 	.word	0xbd241146
 8017f2c:	3e4e0aa8 	.word	0x3e4e0aa8
 8017f30:	bea6b090 	.word	0xbea6b090
 8017f34:	3e2aaaab 	.word	0x3e2aaaab
 8017f38:	3d9dc62e 	.word	0x3d9dc62e
 8017f3c:	4001572d 	.word	0x4001572d
 8017f40:	c019d139 	.word	0xc019d139
 8017f44:	33a22168 	.word	0x33a22168
 8017f48:	3fc90fda 	.word	0x3fc90fda
 8017f4c:	b3a22168 	.word	0xb3a22168
 8017f50:	40490fda 	.word	0x40490fda
 8017f54:	3fc90fdb 	.word	0x3fc90fdb

08017f58 <__ieee754_asinf>:
 8017f58:	b538      	push	{r3, r4, r5, lr}
 8017f5a:	ee10 5a10 	vmov	r5, s0
 8017f5e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8017f62:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8017f66:	ed2d 8b04 	vpush	{d8-d9}
 8017f6a:	d10c      	bne.n	8017f86 <__ieee754_asinf+0x2e>
 8017f6c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80180e0 <__ieee754_asinf+0x188>
 8017f70:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80180e4 <__ieee754_asinf+0x18c>
 8017f74:	ee60 7a27 	vmul.f32	s15, s0, s15
 8017f78:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8017f80:	ecbd 8b04 	vpop	{d8-d9}
 8017f84:	bd38      	pop	{r3, r4, r5, pc}
 8017f86:	d904      	bls.n	8017f92 <__ieee754_asinf+0x3a>
 8017f88:	ee70 7a40 	vsub.f32	s15, s0, s0
 8017f8c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8017f90:	e7f6      	b.n	8017f80 <__ieee754_asinf+0x28>
 8017f92:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8017f96:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8017f9a:	d20b      	bcs.n	8017fb4 <__ieee754_asinf+0x5c>
 8017f9c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8017fa0:	d252      	bcs.n	8018048 <__ieee754_asinf+0xf0>
 8017fa2:	eddf 7a51 	vldr	s15, [pc, #324]	@ 80180e8 <__ieee754_asinf+0x190>
 8017fa6:	ee70 7a27 	vadd.f32	s15, s0, s15
 8017faa:	eef4 7ae8 	vcmpe.f32	s15, s17
 8017fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fb2:	dce5      	bgt.n	8017f80 <__ieee754_asinf+0x28>
 8017fb4:	f7ff fdcc 	bl	8017b50 <fabsf>
 8017fb8:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8017fbc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017fc0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017fc4:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80180ec <__ieee754_asinf+0x194>
 8017fc8:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80180f0 <__ieee754_asinf+0x198>
 8017fcc:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 80180f4 <__ieee754_asinf+0x19c>
 8017fd0:	eea8 7a27 	vfma.f32	s14, s16, s15
 8017fd4:	eddf 7a48 	vldr	s15, [pc, #288]	@ 80180f8 <__ieee754_asinf+0x1a0>
 8017fd8:	eee7 7a08 	vfma.f32	s15, s14, s16
 8017fdc:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80180fc <__ieee754_asinf+0x1a4>
 8017fe0:	eea7 7a88 	vfma.f32	s14, s15, s16
 8017fe4:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8018100 <__ieee754_asinf+0x1a8>
 8017fe8:	eee7 7a08 	vfma.f32	s15, s14, s16
 8017fec:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8018104 <__ieee754_asinf+0x1ac>
 8017ff0:	eea7 9a88 	vfma.f32	s18, s15, s16
 8017ff4:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8018108 <__ieee754_asinf+0x1b0>
 8017ff8:	eee8 7a07 	vfma.f32	s15, s16, s14
 8017ffc:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 801810c <__ieee754_asinf+0x1b4>
 8018000:	eea7 7a88 	vfma.f32	s14, s15, s16
 8018004:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8018110 <__ieee754_asinf+0x1b8>
 8018008:	eee7 7a08 	vfma.f32	s15, s14, s16
 801800c:	eeb0 0a48 	vmov.f32	s0, s16
 8018010:	eee7 8a88 	vfma.f32	s17, s15, s16
 8018014:	f7ff fe06 	bl	8017c24 <__ieee754_sqrtf>
 8018018:	4b3e      	ldr	r3, [pc, #248]	@ (8018114 <__ieee754_asinf+0x1bc>)
 801801a:	ee29 9a08 	vmul.f32	s18, s18, s16
 801801e:	429c      	cmp	r4, r3
 8018020:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8018024:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8018028:	d93d      	bls.n	80180a6 <__ieee754_asinf+0x14e>
 801802a:	eea0 0a06 	vfma.f32	s0, s0, s12
 801802e:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 8018118 <__ieee754_asinf+0x1c0>
 8018032:	eee0 7a26 	vfma.f32	s15, s0, s13
 8018036:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 80180e4 <__ieee754_asinf+0x18c>
 801803a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801803e:	2d00      	cmp	r5, #0
 8018040:	bfd8      	it	le
 8018042:	eeb1 0a40 	vnegle.f32	s0, s0
 8018046:	e79b      	b.n	8017f80 <__ieee754_asinf+0x28>
 8018048:	ee60 7a00 	vmul.f32	s15, s0, s0
 801804c:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80180f0 <__ieee754_asinf+0x198>
 8018050:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80180ec <__ieee754_asinf+0x194>
 8018054:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8018104 <__ieee754_asinf+0x1ac>
 8018058:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801805c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80180f8 <__ieee754_asinf+0x1a0>
 8018060:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018064:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80180fc <__ieee754_asinf+0x1a4>
 8018068:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801806c:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8018100 <__ieee754_asinf+0x1a8>
 8018070:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018074:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80180f4 <__ieee754_asinf+0x19c>
 8018078:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801807c:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8018108 <__ieee754_asinf+0x1b0>
 8018080:	eee7 6a86 	vfma.f32	s13, s15, s12
 8018084:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 801810c <__ieee754_asinf+0x1b4>
 8018088:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801808c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8018110 <__ieee754_asinf+0x1b8>
 8018090:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018094:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018098:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801809c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80180a0:	eea0 0a27 	vfma.f32	s0, s0, s15
 80180a4:	e76c      	b.n	8017f80 <__ieee754_asinf+0x28>
 80180a6:	ee10 3a10 	vmov	r3, s0
 80180aa:	f36f 030b 	bfc	r3, #0, #12
 80180ae:	ee07 3a10 	vmov	s14, r3
 80180b2:	eea7 8a47 	vfms.f32	s16, s14, s14
 80180b6:	ee70 5a00 	vadd.f32	s11, s0, s0
 80180ba:	ee30 0a07 	vadd.f32	s0, s0, s14
 80180be:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80180e0 <__ieee754_asinf+0x188>
 80180c2:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80180c6:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 801811c <__ieee754_asinf+0x1c4>
 80180ca:	eee5 7a66 	vfms.f32	s15, s10, s13
 80180ce:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80180d2:	eeb0 6a40 	vmov.f32	s12, s0
 80180d6:	eea7 6a66 	vfms.f32	s12, s14, s13
 80180da:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80180de:	e7ac      	b.n	801803a <__ieee754_asinf+0xe2>
 80180e0:	b33bbd2e 	.word	0xb33bbd2e
 80180e4:	3fc90fdb 	.word	0x3fc90fdb
 80180e8:	7149f2ca 	.word	0x7149f2ca
 80180ec:	3a4f7f04 	.word	0x3a4f7f04
 80180f0:	3811ef08 	.word	0x3811ef08
 80180f4:	3e2aaaab 	.word	0x3e2aaaab
 80180f8:	bd241146 	.word	0xbd241146
 80180fc:	3e4e0aa8 	.word	0x3e4e0aa8
 8018100:	bea6b090 	.word	0xbea6b090
 8018104:	3d9dc62e 	.word	0x3d9dc62e
 8018108:	bf303361 	.word	0xbf303361
 801810c:	4001572d 	.word	0x4001572d
 8018110:	c019d139 	.word	0xc019d139
 8018114:	3f799999 	.word	0x3f799999
 8018118:	333bbd2e 	.word	0x333bbd2e
 801811c:	3f490fdb 	.word	0x3f490fdb

08018120 <__ieee754_atan2f>:
 8018120:	ee10 2a90 	vmov	r2, s1
 8018124:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8018128:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801812c:	b510      	push	{r4, lr}
 801812e:	eef0 7a40 	vmov.f32	s15, s0
 8018132:	d806      	bhi.n	8018142 <__ieee754_atan2f+0x22>
 8018134:	ee10 0a10 	vmov	r0, s0
 8018138:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 801813c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018140:	d904      	bls.n	801814c <__ieee754_atan2f+0x2c>
 8018142:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8018146:	eeb0 0a67 	vmov.f32	s0, s15
 801814a:	bd10      	pop	{r4, pc}
 801814c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8018150:	d103      	bne.n	801815a <__ieee754_atan2f+0x3a>
 8018152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018156:	f7ff bbe3 	b.w	8017920 <atanf>
 801815a:	1794      	asrs	r4, r2, #30
 801815c:	f004 0402 	and.w	r4, r4, #2
 8018160:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8018164:	b943      	cbnz	r3, 8018178 <__ieee754_atan2f+0x58>
 8018166:	2c02      	cmp	r4, #2
 8018168:	d05e      	beq.n	8018228 <__ieee754_atan2f+0x108>
 801816a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801823c <__ieee754_atan2f+0x11c>
 801816e:	2c03      	cmp	r4, #3
 8018170:	bf08      	it	eq
 8018172:	eef0 7a47 	vmoveq.f32	s15, s14
 8018176:	e7e6      	b.n	8018146 <__ieee754_atan2f+0x26>
 8018178:	b941      	cbnz	r1, 801818c <__ieee754_atan2f+0x6c>
 801817a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8018240 <__ieee754_atan2f+0x120>
 801817e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8018244 <__ieee754_atan2f+0x124>
 8018182:	2800      	cmp	r0, #0
 8018184:	bfa8      	it	ge
 8018186:	eef0 7a47 	vmovge.f32	s15, s14
 801818a:	e7dc      	b.n	8018146 <__ieee754_atan2f+0x26>
 801818c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8018190:	d110      	bne.n	80181b4 <__ieee754_atan2f+0x94>
 8018192:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018196:	f104 34ff 	add.w	r4, r4, #4294967295
 801819a:	d107      	bne.n	80181ac <__ieee754_atan2f+0x8c>
 801819c:	2c02      	cmp	r4, #2
 801819e:	d846      	bhi.n	801822e <__ieee754_atan2f+0x10e>
 80181a0:	4b29      	ldr	r3, [pc, #164]	@ (8018248 <__ieee754_atan2f+0x128>)
 80181a2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80181a6:	edd3 7a00 	vldr	s15, [r3]
 80181aa:	e7cc      	b.n	8018146 <__ieee754_atan2f+0x26>
 80181ac:	2c02      	cmp	r4, #2
 80181ae:	d841      	bhi.n	8018234 <__ieee754_atan2f+0x114>
 80181b0:	4b26      	ldr	r3, [pc, #152]	@ (801824c <__ieee754_atan2f+0x12c>)
 80181b2:	e7f6      	b.n	80181a2 <__ieee754_atan2f+0x82>
 80181b4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80181b8:	d0df      	beq.n	801817a <__ieee754_atan2f+0x5a>
 80181ba:	1a5b      	subs	r3, r3, r1
 80181bc:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80181c0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80181c4:	da1a      	bge.n	80181fc <__ieee754_atan2f+0xdc>
 80181c6:	2a00      	cmp	r2, #0
 80181c8:	da01      	bge.n	80181ce <__ieee754_atan2f+0xae>
 80181ca:	313c      	adds	r1, #60	@ 0x3c
 80181cc:	db19      	blt.n	8018202 <__ieee754_atan2f+0xe2>
 80181ce:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80181d2:	f7ff fcbd 	bl	8017b50 <fabsf>
 80181d6:	f7ff fba3 	bl	8017920 <atanf>
 80181da:	eef0 7a40 	vmov.f32	s15, s0
 80181de:	2c01      	cmp	r4, #1
 80181e0:	d012      	beq.n	8018208 <__ieee754_atan2f+0xe8>
 80181e2:	2c02      	cmp	r4, #2
 80181e4:	d017      	beq.n	8018216 <__ieee754_atan2f+0xf6>
 80181e6:	2c00      	cmp	r4, #0
 80181e8:	d0ad      	beq.n	8018146 <__ieee754_atan2f+0x26>
 80181ea:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8018250 <__ieee754_atan2f+0x130>
 80181ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80181f2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8018254 <__ieee754_atan2f+0x134>
 80181f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80181fa:	e7a4      	b.n	8018146 <__ieee754_atan2f+0x26>
 80181fc:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8018244 <__ieee754_atan2f+0x124>
 8018200:	e7ed      	b.n	80181de <__ieee754_atan2f+0xbe>
 8018202:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8018258 <__ieee754_atan2f+0x138>
 8018206:	e7ea      	b.n	80181de <__ieee754_atan2f+0xbe>
 8018208:	ee17 3a90 	vmov	r3, s15
 801820c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8018210:	ee07 3a90 	vmov	s15, r3
 8018214:	e797      	b.n	8018146 <__ieee754_atan2f+0x26>
 8018216:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8018250 <__ieee754_atan2f+0x130>
 801821a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801821e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8018254 <__ieee754_atan2f+0x134>
 8018222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018226:	e78e      	b.n	8018146 <__ieee754_atan2f+0x26>
 8018228:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8018254 <__ieee754_atan2f+0x134>
 801822c:	e78b      	b.n	8018146 <__ieee754_atan2f+0x26>
 801822e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 801825c <__ieee754_atan2f+0x13c>
 8018232:	e788      	b.n	8018146 <__ieee754_atan2f+0x26>
 8018234:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8018258 <__ieee754_atan2f+0x138>
 8018238:	e785      	b.n	8018146 <__ieee754_atan2f+0x26>
 801823a:	bf00      	nop
 801823c:	c0490fdb 	.word	0xc0490fdb
 8018240:	bfc90fdb 	.word	0xbfc90fdb
 8018244:	3fc90fdb 	.word	0x3fc90fdb
 8018248:	0802049c 	.word	0x0802049c
 801824c:	08020490 	.word	0x08020490
 8018250:	33bbbd2e 	.word	0x33bbbd2e
 8018254:	40490fdb 	.word	0x40490fdb
 8018258:	00000000 	.word	0x00000000
 801825c:	3f490fdb 	.word	0x3f490fdb

08018260 <__ieee754_powf>:
 8018260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018264:	ee10 4a90 	vmov	r4, s1
 8018268:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 801826c:	ed2d 8b02 	vpush	{d8}
 8018270:	ee10 6a10 	vmov	r6, s0
 8018274:	eeb0 8a40 	vmov.f32	s16, s0
 8018278:	eef0 8a60 	vmov.f32	s17, s1
 801827c:	d10c      	bne.n	8018298 <__ieee754_powf+0x38>
 801827e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8018282:	0076      	lsls	r6, r6, #1
 8018284:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8018288:	f240 8274 	bls.w	8018774 <__ieee754_powf+0x514>
 801828c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8018290:	ecbd 8b02 	vpop	{d8}
 8018294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018298:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 801829c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80182a0:	d802      	bhi.n	80182a8 <__ieee754_powf+0x48>
 80182a2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80182a6:	d908      	bls.n	80182ba <__ieee754_powf+0x5a>
 80182a8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80182ac:	d1ee      	bne.n	801828c <__ieee754_powf+0x2c>
 80182ae:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80182b2:	0064      	lsls	r4, r4, #1
 80182b4:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80182b8:	e7e6      	b.n	8018288 <__ieee754_powf+0x28>
 80182ba:	2e00      	cmp	r6, #0
 80182bc:	da1f      	bge.n	80182fe <__ieee754_powf+0x9e>
 80182be:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80182c2:	f080 8260 	bcs.w	8018786 <__ieee754_powf+0x526>
 80182c6:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80182ca:	d32f      	bcc.n	801832c <__ieee754_powf+0xcc>
 80182cc:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80182d0:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80182d4:	fa49 f503 	asr.w	r5, r9, r3
 80182d8:	fa05 f303 	lsl.w	r3, r5, r3
 80182dc:	454b      	cmp	r3, r9
 80182de:	d123      	bne.n	8018328 <__ieee754_powf+0xc8>
 80182e0:	f005 0501 	and.w	r5, r5, #1
 80182e4:	f1c5 0502 	rsb	r5, r5, #2
 80182e8:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80182ec:	d11f      	bne.n	801832e <__ieee754_powf+0xce>
 80182ee:	2c00      	cmp	r4, #0
 80182f0:	f280 8246 	bge.w	8018780 <__ieee754_powf+0x520>
 80182f4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80182f8:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80182fc:	e7c8      	b.n	8018290 <__ieee754_powf+0x30>
 80182fe:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8018302:	d111      	bne.n	8018328 <__ieee754_powf+0xc8>
 8018304:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8018308:	f000 8234 	beq.w	8018774 <__ieee754_powf+0x514>
 801830c:	d906      	bls.n	801831c <__ieee754_powf+0xbc>
 801830e:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8018624 <__ieee754_powf+0x3c4>
 8018312:	2c00      	cmp	r4, #0
 8018314:	bfa8      	it	ge
 8018316:	eeb0 0a68 	vmovge.f32	s0, s17
 801831a:	e7b9      	b.n	8018290 <__ieee754_powf+0x30>
 801831c:	2c00      	cmp	r4, #0
 801831e:	f280 822c 	bge.w	801877a <__ieee754_powf+0x51a>
 8018322:	eeb1 0a68 	vneg.f32	s0, s17
 8018326:	e7b3      	b.n	8018290 <__ieee754_powf+0x30>
 8018328:	2500      	movs	r5, #0
 801832a:	e7dd      	b.n	80182e8 <__ieee754_powf+0x88>
 801832c:	2500      	movs	r5, #0
 801832e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8018332:	d102      	bne.n	801833a <__ieee754_powf+0xda>
 8018334:	ee28 0a08 	vmul.f32	s0, s16, s16
 8018338:	e7aa      	b.n	8018290 <__ieee754_powf+0x30>
 801833a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801833e:	f040 8227 	bne.w	8018790 <__ieee754_powf+0x530>
 8018342:	2e00      	cmp	r6, #0
 8018344:	f2c0 8224 	blt.w	8018790 <__ieee754_powf+0x530>
 8018348:	eeb0 0a48 	vmov.f32	s0, s16
 801834c:	ecbd 8b02 	vpop	{d8}
 8018350:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018354:	f7ff bc66 	b.w	8017c24 <__ieee754_sqrtf>
 8018358:	2d01      	cmp	r5, #1
 801835a:	d199      	bne.n	8018290 <__ieee754_powf+0x30>
 801835c:	eeb1 0a40 	vneg.f32	s0, s0
 8018360:	e796      	b.n	8018290 <__ieee754_powf+0x30>
 8018362:	0ff0      	lsrs	r0, r6, #31
 8018364:	3801      	subs	r0, #1
 8018366:	ea55 0300 	orrs.w	r3, r5, r0
 801836a:	d104      	bne.n	8018376 <__ieee754_powf+0x116>
 801836c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8018370:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018374:	e78c      	b.n	8018290 <__ieee754_powf+0x30>
 8018376:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801837a:	d96d      	bls.n	8018458 <__ieee754_powf+0x1f8>
 801837c:	4baa      	ldr	r3, [pc, #680]	@ (8018628 <__ieee754_powf+0x3c8>)
 801837e:	4598      	cmp	r8, r3
 8018380:	d808      	bhi.n	8018394 <__ieee754_powf+0x134>
 8018382:	2c00      	cmp	r4, #0
 8018384:	da0b      	bge.n	801839e <__ieee754_powf+0x13e>
 8018386:	2000      	movs	r0, #0
 8018388:	ecbd 8b02 	vpop	{d8}
 801838c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018390:	f000 bbea 	b.w	8018b68 <__math_oflowf>
 8018394:	4ba5      	ldr	r3, [pc, #660]	@ (801862c <__ieee754_powf+0x3cc>)
 8018396:	4598      	cmp	r8, r3
 8018398:	d908      	bls.n	80183ac <__ieee754_powf+0x14c>
 801839a:	2c00      	cmp	r4, #0
 801839c:	dcf3      	bgt.n	8018386 <__ieee754_powf+0x126>
 801839e:	2000      	movs	r0, #0
 80183a0:	ecbd 8b02 	vpop	{d8}
 80183a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80183a8:	f000 bbd8 	b.w	8018b5c <__math_uflowf>
 80183ac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80183b0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80183b4:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8018630 <__ieee754_powf+0x3d0>
 80183b8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80183bc:	eee0 6a67 	vfms.f32	s13, s0, s15
 80183c0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80183c4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80183c8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80183cc:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8018634 <__ieee754_powf+0x3d4>
 80183d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80183d4:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8018638 <__ieee754_powf+0x3d8>
 80183d8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80183dc:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 801863c <__ieee754_powf+0x3dc>
 80183e0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80183e4:	eeb0 7a67 	vmov.f32	s14, s15
 80183e8:	eea0 7a26 	vfma.f32	s14, s0, s13
 80183ec:	ee17 3a10 	vmov	r3, s14
 80183f0:	f36f 030b 	bfc	r3, #0, #12
 80183f4:	ee07 3a10 	vmov	s14, r3
 80183f8:	eeb0 6a47 	vmov.f32	s12, s14
 80183fc:	eea0 6a66 	vfms.f32	s12, s0, s13
 8018400:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018404:	3d01      	subs	r5, #1
 8018406:	4305      	orrs	r5, r0
 8018408:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801840c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8018410:	f36f 040b 	bfc	r4, #0, #12
 8018414:	bf18      	it	ne
 8018416:	eeb0 8a66 	vmovne.f32	s16, s13
 801841a:	ee06 4a90 	vmov	s13, r4
 801841e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8018422:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8018426:	ee67 7a26 	vmul.f32	s15, s14, s13
 801842a:	eee6 0a07 	vfma.f32	s1, s12, s14
 801842e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8018432:	ee17 1a10 	vmov	r1, s14
 8018436:	2900      	cmp	r1, #0
 8018438:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801843c:	f340 80dd 	ble.w	80185fa <__ieee754_powf+0x39a>
 8018440:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8018444:	f240 80ca 	bls.w	80185dc <__ieee754_powf+0x37c>
 8018448:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801844c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018450:	bf4c      	ite	mi
 8018452:	2001      	movmi	r0, #1
 8018454:	2000      	movpl	r0, #0
 8018456:	e797      	b.n	8018388 <__ieee754_powf+0x128>
 8018458:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801845c:	bf01      	itttt	eq
 801845e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8018640 <__ieee754_powf+0x3e0>
 8018462:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8018466:	f06f 0317 	mvneq.w	r3, #23
 801846a:	ee17 7a90 	vmoveq	r7, s15
 801846e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8018472:	bf18      	it	ne
 8018474:	2300      	movne	r3, #0
 8018476:	3a7f      	subs	r2, #127	@ 0x7f
 8018478:	441a      	add	r2, r3
 801847a:	4b72      	ldr	r3, [pc, #456]	@ (8018644 <__ieee754_powf+0x3e4>)
 801847c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8018480:	429f      	cmp	r7, r3
 8018482:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8018486:	dd06      	ble.n	8018496 <__ieee754_powf+0x236>
 8018488:	4b6f      	ldr	r3, [pc, #444]	@ (8018648 <__ieee754_powf+0x3e8>)
 801848a:	429f      	cmp	r7, r3
 801848c:	f340 80a4 	ble.w	80185d8 <__ieee754_powf+0x378>
 8018490:	3201      	adds	r2, #1
 8018492:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8018496:	2600      	movs	r6, #0
 8018498:	4b6c      	ldr	r3, [pc, #432]	@ (801864c <__ieee754_powf+0x3ec>)
 801849a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801849e:	ee07 1a10 	vmov	s14, r1
 80184a2:	edd3 5a00 	vldr	s11, [r3]
 80184a6:	4b6a      	ldr	r3, [pc, #424]	@ (8018650 <__ieee754_powf+0x3f0>)
 80184a8:	ee75 7a87 	vadd.f32	s15, s11, s14
 80184ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80184b0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80184b4:	1049      	asrs	r1, r1, #1
 80184b6:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80184ba:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80184be:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80184c2:	ee37 6a65 	vsub.f32	s12, s14, s11
 80184c6:	ee07 1a90 	vmov	s15, r1
 80184ca:	ee26 5a24 	vmul.f32	s10, s12, s9
 80184ce:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80184d2:	ee15 7a10 	vmov	r7, s10
 80184d6:	401f      	ands	r7, r3
 80184d8:	ee06 7a90 	vmov	s13, r7
 80184dc:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80184e0:	ee37 7a65 	vsub.f32	s14, s14, s11
 80184e4:	ee65 7a05 	vmul.f32	s15, s10, s10
 80184e8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80184ec:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8018654 <__ieee754_powf+0x3f4>
 80184f0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8018658 <__ieee754_powf+0x3f8>
 80184f4:	eee7 5a87 	vfma.f32	s11, s15, s14
 80184f8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801865c <__ieee754_powf+0x3fc>
 80184fc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018500:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8018630 <__ieee754_powf+0x3d0>
 8018504:	eee7 5a27 	vfma.f32	s11, s14, s15
 8018508:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8018660 <__ieee754_powf+0x400>
 801850c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018510:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8018664 <__ieee754_powf+0x404>
 8018514:	ee26 6a24 	vmul.f32	s12, s12, s9
 8018518:	eee7 5a27 	vfma.f32	s11, s14, s15
 801851c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8018520:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8018524:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018528:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801852c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8018530:	eef0 5a67 	vmov.f32	s11, s15
 8018534:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8018538:	ee75 5a87 	vadd.f32	s11, s11, s14
 801853c:	ee15 1a90 	vmov	r1, s11
 8018540:	4019      	ands	r1, r3
 8018542:	ee05 1a90 	vmov	s11, r1
 8018546:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801854a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801854e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018552:	ee67 7a85 	vmul.f32	s15, s15, s10
 8018556:	eee6 7a25 	vfma.f32	s15, s12, s11
 801855a:	eeb0 6a67 	vmov.f32	s12, s15
 801855e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018562:	ee16 1a10 	vmov	r1, s12
 8018566:	4019      	ands	r1, r3
 8018568:	ee06 1a10 	vmov	s12, r1
 801856c:	eeb0 7a46 	vmov.f32	s14, s12
 8018570:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8018574:	493c      	ldr	r1, [pc, #240]	@ (8018668 <__ieee754_powf+0x408>)
 8018576:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801857a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801857e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801866c <__ieee754_powf+0x40c>
 8018582:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8018670 <__ieee754_powf+0x410>
 8018586:	ee67 7a87 	vmul.f32	s15, s15, s14
 801858a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8018674 <__ieee754_powf+0x414>
 801858e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018592:	ed91 7a00 	vldr	s14, [r1]
 8018596:	ee77 7a87 	vadd.f32	s15, s15, s14
 801859a:	ee07 2a10 	vmov	s14, r2
 801859e:	4a36      	ldr	r2, [pc, #216]	@ (8018678 <__ieee754_powf+0x418>)
 80185a0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80185a4:	eeb0 7a67 	vmov.f32	s14, s15
 80185a8:	eea6 7a25 	vfma.f32	s14, s12, s11
 80185ac:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80185b0:	ed92 5a00 	vldr	s10, [r2]
 80185b4:	ee37 7a05 	vadd.f32	s14, s14, s10
 80185b8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80185bc:	ee17 2a10 	vmov	r2, s14
 80185c0:	401a      	ands	r2, r3
 80185c2:	ee07 2a10 	vmov	s14, r2
 80185c6:	ee77 6a66 	vsub.f32	s13, s14, s13
 80185ca:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80185ce:	eee6 6a65 	vfms.f32	s13, s12, s11
 80185d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80185d6:	e715      	b.n	8018404 <__ieee754_powf+0x1a4>
 80185d8:	2601      	movs	r6, #1
 80185da:	e75d      	b.n	8018498 <__ieee754_powf+0x238>
 80185dc:	d152      	bne.n	8018684 <__ieee754_powf+0x424>
 80185de:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801867c <__ieee754_powf+0x41c>
 80185e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80185e6:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80185ea:	eef4 6ac7 	vcmpe.f32	s13, s14
 80185ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185f2:	f73f af29 	bgt.w	8018448 <__ieee754_powf+0x1e8>
 80185f6:	2386      	movs	r3, #134	@ 0x86
 80185f8:	e048      	b.n	801868c <__ieee754_powf+0x42c>
 80185fa:	4a21      	ldr	r2, [pc, #132]	@ (8018680 <__ieee754_powf+0x420>)
 80185fc:	4293      	cmp	r3, r2
 80185fe:	d907      	bls.n	8018610 <__ieee754_powf+0x3b0>
 8018600:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018608:	bf4c      	ite	mi
 801860a:	2001      	movmi	r0, #1
 801860c:	2000      	movpl	r0, #0
 801860e:	e6c7      	b.n	80183a0 <__ieee754_powf+0x140>
 8018610:	d138      	bne.n	8018684 <__ieee754_powf+0x424>
 8018612:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018616:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801861a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801861e:	dbea      	blt.n	80185f6 <__ieee754_powf+0x396>
 8018620:	e7ee      	b.n	8018600 <__ieee754_powf+0x3a0>
 8018622:	bf00      	nop
 8018624:	00000000 	.word	0x00000000
 8018628:	3f7ffff3 	.word	0x3f7ffff3
 801862c:	3f800007 	.word	0x3f800007
 8018630:	3eaaaaab 	.word	0x3eaaaaab
 8018634:	3fb8aa00 	.word	0x3fb8aa00
 8018638:	3fb8aa3b 	.word	0x3fb8aa3b
 801863c:	36eca570 	.word	0x36eca570
 8018640:	4b800000 	.word	0x4b800000
 8018644:	001cc471 	.word	0x001cc471
 8018648:	005db3d6 	.word	0x005db3d6
 801864c:	080204b8 	.word	0x080204b8
 8018650:	fffff000 	.word	0xfffff000
 8018654:	3e6c3255 	.word	0x3e6c3255
 8018658:	3e53f142 	.word	0x3e53f142
 801865c:	3e8ba305 	.word	0x3e8ba305
 8018660:	3edb6db7 	.word	0x3edb6db7
 8018664:	3f19999a 	.word	0x3f19999a
 8018668:	080204a8 	.word	0x080204a8
 801866c:	3f76384f 	.word	0x3f76384f
 8018670:	3f763800 	.word	0x3f763800
 8018674:	369dc3a0 	.word	0x369dc3a0
 8018678:	080204b0 	.word	0x080204b0
 801867c:	3338aa3c 	.word	0x3338aa3c
 8018680:	43160000 	.word	0x43160000
 8018684:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8018688:	d96f      	bls.n	801876a <__ieee754_powf+0x50a>
 801868a:	15db      	asrs	r3, r3, #23
 801868c:	3b7e      	subs	r3, #126	@ 0x7e
 801868e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8018692:	4118      	asrs	r0, r3
 8018694:	4408      	add	r0, r1
 8018696:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801869a:	4a4e      	ldr	r2, [pc, #312]	@ (80187d4 <__ieee754_powf+0x574>)
 801869c:	3b7f      	subs	r3, #127	@ 0x7f
 801869e:	411a      	asrs	r2, r3
 80186a0:	4002      	ands	r2, r0
 80186a2:	ee07 2a10 	vmov	s14, r2
 80186a6:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80186aa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80186ae:	f1c3 0317 	rsb	r3, r3, #23
 80186b2:	4118      	asrs	r0, r3
 80186b4:	2900      	cmp	r1, #0
 80186b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80186ba:	bfb8      	it	lt
 80186bc:	4240      	neglt	r0, r0
 80186be:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80186c2:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80187d8 <__ieee754_powf+0x578>
 80186c6:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 80187dc <__ieee754_powf+0x57c>
 80186ca:	ee16 3a90 	vmov	r3, s13
 80186ce:	f36f 030b 	bfc	r3, #0, #12
 80186d2:	ee06 3a90 	vmov	s13, r3
 80186d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80186da:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80186de:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80186e2:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 80187e0 <__ieee754_powf+0x580>
 80186e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80186ea:	eee0 7a87 	vfma.f32	s15, s1, s14
 80186ee:	eeb0 7a67 	vmov.f32	s14, s15
 80186f2:	eea6 7a86 	vfma.f32	s14, s13, s12
 80186f6:	eef0 5a47 	vmov.f32	s11, s14
 80186fa:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80186fe:	ee67 6a07 	vmul.f32	s13, s14, s14
 8018702:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8018706:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 80187e4 <__ieee754_powf+0x584>
 801870a:	eddf 5a37 	vldr	s11, [pc, #220]	@ 80187e8 <__ieee754_powf+0x588>
 801870e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018712:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80187ec <__ieee754_powf+0x58c>
 8018716:	eee6 5a26 	vfma.f32	s11, s12, s13
 801871a:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 80187f0 <__ieee754_powf+0x590>
 801871e:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8018722:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80187f4 <__ieee754_powf+0x594>
 8018726:	eee6 5a26 	vfma.f32	s11, s12, s13
 801872a:	eeb0 6a47 	vmov.f32	s12, s14
 801872e:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8018732:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8018736:	ee67 5a06 	vmul.f32	s11, s14, s12
 801873a:	ee36 6a66 	vsub.f32	s12, s12, s13
 801873e:	eee7 7a27 	vfma.f32	s15, s14, s15
 8018742:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8018746:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801874a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801874e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018752:	ee10 3a10 	vmov	r3, s0
 8018756:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801875a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801875e:	da06      	bge.n	801876e <__ieee754_powf+0x50e>
 8018760:	f000 f97c 	bl	8018a5c <scalbnf>
 8018764:	ee20 0a08 	vmul.f32	s0, s0, s16
 8018768:	e592      	b.n	8018290 <__ieee754_powf+0x30>
 801876a:	2000      	movs	r0, #0
 801876c:	e7a7      	b.n	80186be <__ieee754_powf+0x45e>
 801876e:	ee00 3a10 	vmov	s0, r3
 8018772:	e7f7      	b.n	8018764 <__ieee754_powf+0x504>
 8018774:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018778:	e58a      	b.n	8018290 <__ieee754_powf+0x30>
 801877a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80187f8 <__ieee754_powf+0x598>
 801877e:	e587      	b.n	8018290 <__ieee754_powf+0x30>
 8018780:	eeb0 0a48 	vmov.f32	s0, s16
 8018784:	e584      	b.n	8018290 <__ieee754_powf+0x30>
 8018786:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801878a:	f43f adbb 	beq.w	8018304 <__ieee754_powf+0xa4>
 801878e:	2502      	movs	r5, #2
 8018790:	eeb0 0a48 	vmov.f32	s0, s16
 8018794:	f7ff f9dc 	bl	8017b50 <fabsf>
 8018798:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 801879c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80187a0:	4647      	mov	r7, r8
 80187a2:	d003      	beq.n	80187ac <__ieee754_powf+0x54c>
 80187a4:	f1b8 0f00 	cmp.w	r8, #0
 80187a8:	f47f addb 	bne.w	8018362 <__ieee754_powf+0x102>
 80187ac:	2c00      	cmp	r4, #0
 80187ae:	bfbc      	itt	lt
 80187b0:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 80187b4:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80187b8:	2e00      	cmp	r6, #0
 80187ba:	f6bf ad69 	bge.w	8018290 <__ieee754_powf+0x30>
 80187be:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80187c2:	ea58 0805 	orrs.w	r8, r8, r5
 80187c6:	f47f adc7 	bne.w	8018358 <__ieee754_powf+0xf8>
 80187ca:	ee70 7a40 	vsub.f32	s15, s0, s0
 80187ce:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80187d2:	e55d      	b.n	8018290 <__ieee754_powf+0x30>
 80187d4:	ff800000 	.word	0xff800000
 80187d8:	3f317218 	.word	0x3f317218
 80187dc:	3f317200 	.word	0x3f317200
 80187e0:	35bfbe8c 	.word	0x35bfbe8c
 80187e4:	b5ddea0e 	.word	0xb5ddea0e
 80187e8:	3331bb4c 	.word	0x3331bb4c
 80187ec:	388ab355 	.word	0x388ab355
 80187f0:	bb360b61 	.word	0xbb360b61
 80187f4:	3e2aaaab 	.word	0x3e2aaaab
 80187f8:	00000000 	.word	0x00000000

080187fc <__ieee754_rem_pio2f>:
 80187fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187fe:	ee10 6a10 	vmov	r6, s0
 8018802:	4b88      	ldr	r3, [pc, #544]	@ (8018a24 <__ieee754_rem_pio2f+0x228>)
 8018804:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8018808:	429d      	cmp	r5, r3
 801880a:	b087      	sub	sp, #28
 801880c:	4604      	mov	r4, r0
 801880e:	d805      	bhi.n	801881c <__ieee754_rem_pio2f+0x20>
 8018810:	2300      	movs	r3, #0
 8018812:	ed80 0a00 	vstr	s0, [r0]
 8018816:	6043      	str	r3, [r0, #4]
 8018818:	2000      	movs	r0, #0
 801881a:	e022      	b.n	8018862 <__ieee754_rem_pio2f+0x66>
 801881c:	4b82      	ldr	r3, [pc, #520]	@ (8018a28 <__ieee754_rem_pio2f+0x22c>)
 801881e:	429d      	cmp	r5, r3
 8018820:	d83a      	bhi.n	8018898 <__ieee754_rem_pio2f+0x9c>
 8018822:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8018826:	2e00      	cmp	r6, #0
 8018828:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8018a2c <__ieee754_rem_pio2f+0x230>
 801882c:	4a80      	ldr	r2, [pc, #512]	@ (8018a30 <__ieee754_rem_pio2f+0x234>)
 801882e:	f023 030f 	bic.w	r3, r3, #15
 8018832:	dd18      	ble.n	8018866 <__ieee754_rem_pio2f+0x6a>
 8018834:	4293      	cmp	r3, r2
 8018836:	ee70 7a47 	vsub.f32	s15, s0, s14
 801883a:	bf09      	itett	eq
 801883c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8018a34 <__ieee754_rem_pio2f+0x238>
 8018840:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8018a38 <__ieee754_rem_pio2f+0x23c>
 8018844:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8018a3c <__ieee754_rem_pio2f+0x240>
 8018848:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801884c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8018850:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018854:	ed80 7a00 	vstr	s14, [r0]
 8018858:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801885c:	edc0 7a01 	vstr	s15, [r0, #4]
 8018860:	2001      	movs	r0, #1
 8018862:	b007      	add	sp, #28
 8018864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018866:	4293      	cmp	r3, r2
 8018868:	ee70 7a07 	vadd.f32	s15, s0, s14
 801886c:	bf09      	itett	eq
 801886e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8018a34 <__ieee754_rem_pio2f+0x238>
 8018872:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8018a38 <__ieee754_rem_pio2f+0x23c>
 8018876:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8018a3c <__ieee754_rem_pio2f+0x240>
 801887a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801887e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018882:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018886:	ed80 7a00 	vstr	s14, [r0]
 801888a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801888e:	edc0 7a01 	vstr	s15, [r0, #4]
 8018892:	f04f 30ff 	mov.w	r0, #4294967295
 8018896:	e7e4      	b.n	8018862 <__ieee754_rem_pio2f+0x66>
 8018898:	4b69      	ldr	r3, [pc, #420]	@ (8018a40 <__ieee754_rem_pio2f+0x244>)
 801889a:	429d      	cmp	r5, r3
 801889c:	d873      	bhi.n	8018986 <__ieee754_rem_pio2f+0x18a>
 801889e:	f7ff f957 	bl	8017b50 <fabsf>
 80188a2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8018a44 <__ieee754_rem_pio2f+0x248>
 80188a6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80188aa:	eee0 7a07 	vfma.f32	s15, s0, s14
 80188ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80188b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80188b6:	ee17 0a90 	vmov	r0, s15
 80188ba:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8018a2c <__ieee754_rem_pio2f+0x230>
 80188be:	eea7 0a67 	vfms.f32	s0, s14, s15
 80188c2:	281f      	cmp	r0, #31
 80188c4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8018a38 <__ieee754_rem_pio2f+0x23c>
 80188c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80188cc:	eeb1 6a47 	vneg.f32	s12, s14
 80188d0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80188d4:	ee16 1a90 	vmov	r1, s13
 80188d8:	dc09      	bgt.n	80188ee <__ieee754_rem_pio2f+0xf2>
 80188da:	4a5b      	ldr	r2, [pc, #364]	@ (8018a48 <__ieee754_rem_pio2f+0x24c>)
 80188dc:	1e47      	subs	r7, r0, #1
 80188de:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80188e2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80188e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80188ea:	4293      	cmp	r3, r2
 80188ec:	d107      	bne.n	80188fe <__ieee754_rem_pio2f+0x102>
 80188ee:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80188f2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80188f6:	2a08      	cmp	r2, #8
 80188f8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80188fc:	dc14      	bgt.n	8018928 <__ieee754_rem_pio2f+0x12c>
 80188fe:	6021      	str	r1, [r4, #0]
 8018900:	ed94 7a00 	vldr	s14, [r4]
 8018904:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018908:	2e00      	cmp	r6, #0
 801890a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801890e:	ed84 0a01 	vstr	s0, [r4, #4]
 8018912:	daa6      	bge.n	8018862 <__ieee754_rem_pio2f+0x66>
 8018914:	eeb1 7a47 	vneg.f32	s14, s14
 8018918:	eeb1 0a40 	vneg.f32	s0, s0
 801891c:	ed84 7a00 	vstr	s14, [r4]
 8018920:	ed84 0a01 	vstr	s0, [r4, #4]
 8018924:	4240      	negs	r0, r0
 8018926:	e79c      	b.n	8018862 <__ieee754_rem_pio2f+0x66>
 8018928:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8018a34 <__ieee754_rem_pio2f+0x238>
 801892c:	eef0 6a40 	vmov.f32	s13, s0
 8018930:	eee6 6a25 	vfma.f32	s13, s12, s11
 8018934:	ee70 7a66 	vsub.f32	s15, s0, s13
 8018938:	eee6 7a25 	vfma.f32	s15, s12, s11
 801893c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8018a3c <__ieee754_rem_pio2f+0x240>
 8018940:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8018944:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8018948:	ee15 2a90 	vmov	r2, s11
 801894c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8018950:	1a5b      	subs	r3, r3, r1
 8018952:	2b19      	cmp	r3, #25
 8018954:	dc04      	bgt.n	8018960 <__ieee754_rem_pio2f+0x164>
 8018956:	edc4 5a00 	vstr	s11, [r4]
 801895a:	eeb0 0a66 	vmov.f32	s0, s13
 801895e:	e7cf      	b.n	8018900 <__ieee754_rem_pio2f+0x104>
 8018960:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8018a4c <__ieee754_rem_pio2f+0x250>
 8018964:	eeb0 0a66 	vmov.f32	s0, s13
 8018968:	eea6 0a25 	vfma.f32	s0, s12, s11
 801896c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8018970:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8018a50 <__ieee754_rem_pio2f+0x254>
 8018974:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018978:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801897c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8018980:	ed84 7a00 	vstr	s14, [r4]
 8018984:	e7bc      	b.n	8018900 <__ieee754_rem_pio2f+0x104>
 8018986:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801898a:	d306      	bcc.n	801899a <__ieee754_rem_pio2f+0x19e>
 801898c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018990:	edc0 7a01 	vstr	s15, [r0, #4]
 8018994:	edc0 7a00 	vstr	s15, [r0]
 8018998:	e73e      	b.n	8018818 <__ieee754_rem_pio2f+0x1c>
 801899a:	15ea      	asrs	r2, r5, #23
 801899c:	3a86      	subs	r2, #134	@ 0x86
 801899e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80189a2:	ee07 3a90 	vmov	s15, r3
 80189a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80189aa:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8018a54 <__ieee754_rem_pio2f+0x258>
 80189ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80189b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80189b6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80189ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80189be:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80189c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80189c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80189ca:	ed8d 7a04 	vstr	s14, [sp, #16]
 80189ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80189d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80189d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189da:	edcd 7a05 	vstr	s15, [sp, #20]
 80189de:	d11e      	bne.n	8018a1e <__ieee754_rem_pio2f+0x222>
 80189e0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80189e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189e8:	bf0c      	ite	eq
 80189ea:	2301      	moveq	r3, #1
 80189ec:	2302      	movne	r3, #2
 80189ee:	491a      	ldr	r1, [pc, #104]	@ (8018a58 <__ieee754_rem_pio2f+0x25c>)
 80189f0:	9101      	str	r1, [sp, #4]
 80189f2:	2102      	movs	r1, #2
 80189f4:	9100      	str	r1, [sp, #0]
 80189f6:	a803      	add	r0, sp, #12
 80189f8:	4621      	mov	r1, r4
 80189fa:	f000 f8bb 	bl	8018b74 <__kernel_rem_pio2f>
 80189fe:	2e00      	cmp	r6, #0
 8018a00:	f6bf af2f 	bge.w	8018862 <__ieee754_rem_pio2f+0x66>
 8018a04:	edd4 7a00 	vldr	s15, [r4]
 8018a08:	eef1 7a67 	vneg.f32	s15, s15
 8018a0c:	edc4 7a00 	vstr	s15, [r4]
 8018a10:	edd4 7a01 	vldr	s15, [r4, #4]
 8018a14:	eef1 7a67 	vneg.f32	s15, s15
 8018a18:	edc4 7a01 	vstr	s15, [r4, #4]
 8018a1c:	e782      	b.n	8018924 <__ieee754_rem_pio2f+0x128>
 8018a1e:	2303      	movs	r3, #3
 8018a20:	e7e5      	b.n	80189ee <__ieee754_rem_pio2f+0x1f2>
 8018a22:	bf00      	nop
 8018a24:	3f490fd8 	.word	0x3f490fd8
 8018a28:	4016cbe3 	.word	0x4016cbe3
 8018a2c:	3fc90f80 	.word	0x3fc90f80
 8018a30:	3fc90fd0 	.word	0x3fc90fd0
 8018a34:	37354400 	.word	0x37354400
 8018a38:	37354443 	.word	0x37354443
 8018a3c:	2e85a308 	.word	0x2e85a308
 8018a40:	43490f80 	.word	0x43490f80
 8018a44:	3f22f984 	.word	0x3f22f984
 8018a48:	080204c0 	.word	0x080204c0
 8018a4c:	2e85a300 	.word	0x2e85a300
 8018a50:	248d3132 	.word	0x248d3132
 8018a54:	43800000 	.word	0x43800000
 8018a58:	08020540 	.word	0x08020540

08018a5c <scalbnf>:
 8018a5c:	ee10 3a10 	vmov	r3, s0
 8018a60:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8018a64:	d02b      	beq.n	8018abe <scalbnf+0x62>
 8018a66:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8018a6a:	d302      	bcc.n	8018a72 <scalbnf+0x16>
 8018a6c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018a70:	4770      	bx	lr
 8018a72:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8018a76:	d123      	bne.n	8018ac0 <scalbnf+0x64>
 8018a78:	4b24      	ldr	r3, [pc, #144]	@ (8018b0c <scalbnf+0xb0>)
 8018a7a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8018b10 <scalbnf+0xb4>
 8018a7e:	4298      	cmp	r0, r3
 8018a80:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018a84:	db17      	blt.n	8018ab6 <scalbnf+0x5a>
 8018a86:	ee10 3a10 	vmov	r3, s0
 8018a8a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018a8e:	3a19      	subs	r2, #25
 8018a90:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8018a94:	4288      	cmp	r0, r1
 8018a96:	dd15      	ble.n	8018ac4 <scalbnf+0x68>
 8018a98:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8018b14 <scalbnf+0xb8>
 8018a9c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8018b18 <scalbnf+0xbc>
 8018aa0:	ee10 3a10 	vmov	r3, s0
 8018aa4:	eeb0 7a67 	vmov.f32	s14, s15
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	bfb8      	it	lt
 8018aac:	eef0 7a66 	vmovlt.f32	s15, s13
 8018ab0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8018ab4:	4770      	bx	lr
 8018ab6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8018b1c <scalbnf+0xc0>
 8018aba:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018abe:	4770      	bx	lr
 8018ac0:	0dd2      	lsrs	r2, r2, #23
 8018ac2:	e7e5      	b.n	8018a90 <scalbnf+0x34>
 8018ac4:	4410      	add	r0, r2
 8018ac6:	28fe      	cmp	r0, #254	@ 0xfe
 8018ac8:	dce6      	bgt.n	8018a98 <scalbnf+0x3c>
 8018aca:	2800      	cmp	r0, #0
 8018acc:	dd06      	ble.n	8018adc <scalbnf+0x80>
 8018ace:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018ad2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018ad6:	ee00 3a10 	vmov	s0, r3
 8018ada:	4770      	bx	lr
 8018adc:	f110 0f16 	cmn.w	r0, #22
 8018ae0:	da09      	bge.n	8018af6 <scalbnf+0x9a>
 8018ae2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8018b1c <scalbnf+0xc0>
 8018ae6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8018b20 <scalbnf+0xc4>
 8018aea:	ee10 3a10 	vmov	r3, s0
 8018aee:	eeb0 7a67 	vmov.f32	s14, s15
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	e7d9      	b.n	8018aaa <scalbnf+0x4e>
 8018af6:	3019      	adds	r0, #25
 8018af8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018afc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018b00:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8018b24 <scalbnf+0xc8>
 8018b04:	ee07 3a90 	vmov	s15, r3
 8018b08:	e7d7      	b.n	8018aba <scalbnf+0x5e>
 8018b0a:	bf00      	nop
 8018b0c:	ffff3cb0 	.word	0xffff3cb0
 8018b10:	4c000000 	.word	0x4c000000
 8018b14:	7149f2ca 	.word	0x7149f2ca
 8018b18:	f149f2ca 	.word	0xf149f2ca
 8018b1c:	0da24260 	.word	0x0da24260
 8018b20:	8da24260 	.word	0x8da24260
 8018b24:	33000000 	.word	0x33000000

08018b28 <with_errnof>:
 8018b28:	b510      	push	{r4, lr}
 8018b2a:	ed2d 8b02 	vpush	{d8}
 8018b2e:	eeb0 8a40 	vmov.f32	s16, s0
 8018b32:	4604      	mov	r4, r0
 8018b34:	f001 fda6 	bl	801a684 <__errno>
 8018b38:	eeb0 0a48 	vmov.f32	s0, s16
 8018b3c:	ecbd 8b02 	vpop	{d8}
 8018b40:	6004      	str	r4, [r0, #0]
 8018b42:	bd10      	pop	{r4, pc}

08018b44 <xflowf>:
 8018b44:	b130      	cbz	r0, 8018b54 <xflowf+0x10>
 8018b46:	eef1 7a40 	vneg.f32	s15, s0
 8018b4a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018b4e:	2022      	movs	r0, #34	@ 0x22
 8018b50:	f7ff bfea 	b.w	8018b28 <with_errnof>
 8018b54:	eef0 7a40 	vmov.f32	s15, s0
 8018b58:	e7f7      	b.n	8018b4a <xflowf+0x6>
	...

08018b5c <__math_uflowf>:
 8018b5c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018b64 <__math_uflowf+0x8>
 8018b60:	f7ff bff0 	b.w	8018b44 <xflowf>
 8018b64:	10000000 	.word	0x10000000

08018b68 <__math_oflowf>:
 8018b68:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018b70 <__math_oflowf+0x8>
 8018b6c:	f7ff bfea 	b.w	8018b44 <xflowf>
 8018b70:	70000000 	.word	0x70000000

08018b74 <__kernel_rem_pio2f>:
 8018b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b78:	ed2d 8b04 	vpush	{d8-d9}
 8018b7c:	b0d9      	sub	sp, #356	@ 0x164
 8018b7e:	4690      	mov	r8, r2
 8018b80:	9001      	str	r0, [sp, #4]
 8018b82:	4ab6      	ldr	r2, [pc, #728]	@ (8018e5c <__kernel_rem_pio2f+0x2e8>)
 8018b84:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8018b86:	f118 0f04 	cmn.w	r8, #4
 8018b8a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8018b8e:	460f      	mov	r7, r1
 8018b90:	f103 3bff 	add.w	fp, r3, #4294967295
 8018b94:	db26      	blt.n	8018be4 <__kernel_rem_pio2f+0x70>
 8018b96:	f1b8 0203 	subs.w	r2, r8, #3
 8018b9a:	bf48      	it	mi
 8018b9c:	f108 0204 	addmi.w	r2, r8, #4
 8018ba0:	10d2      	asrs	r2, r2, #3
 8018ba2:	1c55      	adds	r5, r2, #1
 8018ba4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8018ba6:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8018e6c <__kernel_rem_pio2f+0x2f8>
 8018baa:	00e8      	lsls	r0, r5, #3
 8018bac:	eba2 060b 	sub.w	r6, r2, fp
 8018bb0:	9002      	str	r0, [sp, #8]
 8018bb2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8018bb6:	eb0a 0c0b 	add.w	ip, sl, fp
 8018bba:	ac1c      	add	r4, sp, #112	@ 0x70
 8018bbc:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8018bc0:	2000      	movs	r0, #0
 8018bc2:	4560      	cmp	r0, ip
 8018bc4:	dd10      	ble.n	8018be8 <__kernel_rem_pio2f+0x74>
 8018bc6:	a91c      	add	r1, sp, #112	@ 0x70
 8018bc8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8018bcc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8018bd0:	2600      	movs	r6, #0
 8018bd2:	4556      	cmp	r6, sl
 8018bd4:	dc24      	bgt.n	8018c20 <__kernel_rem_pio2f+0xac>
 8018bd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8018bda:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8018e6c <__kernel_rem_pio2f+0x2f8>
 8018bde:	4684      	mov	ip, r0
 8018be0:	2400      	movs	r4, #0
 8018be2:	e016      	b.n	8018c12 <__kernel_rem_pio2f+0x9e>
 8018be4:	2200      	movs	r2, #0
 8018be6:	e7dc      	b.n	8018ba2 <__kernel_rem_pio2f+0x2e>
 8018be8:	42c6      	cmn	r6, r0
 8018bea:	bf5d      	ittte	pl
 8018bec:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8018bf0:	ee07 1a90 	vmovpl	s15, r1
 8018bf4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8018bf8:	eef0 7a47 	vmovmi.f32	s15, s14
 8018bfc:	ece4 7a01 	vstmia	r4!, {s15}
 8018c00:	3001      	adds	r0, #1
 8018c02:	e7de      	b.n	8018bc2 <__kernel_rem_pio2f+0x4e>
 8018c04:	ecfe 6a01 	vldmia	lr!, {s13}
 8018c08:	ed3c 7a01 	vldmdb	ip!, {s14}
 8018c0c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018c10:	3401      	adds	r4, #1
 8018c12:	455c      	cmp	r4, fp
 8018c14:	ddf6      	ble.n	8018c04 <__kernel_rem_pio2f+0x90>
 8018c16:	ece9 7a01 	vstmia	r9!, {s15}
 8018c1a:	3601      	adds	r6, #1
 8018c1c:	3004      	adds	r0, #4
 8018c1e:	e7d8      	b.n	8018bd2 <__kernel_rem_pio2f+0x5e>
 8018c20:	a908      	add	r1, sp, #32
 8018c22:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018c26:	9104      	str	r1, [sp, #16]
 8018c28:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8018c2a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8018e68 <__kernel_rem_pio2f+0x2f4>
 8018c2e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8018e64 <__kernel_rem_pio2f+0x2f0>
 8018c32:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8018c36:	9203      	str	r2, [sp, #12]
 8018c38:	4654      	mov	r4, sl
 8018c3a:	00a2      	lsls	r2, r4, #2
 8018c3c:	9205      	str	r2, [sp, #20]
 8018c3e:	aa58      	add	r2, sp, #352	@ 0x160
 8018c40:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8018c44:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8018c48:	a944      	add	r1, sp, #272	@ 0x110
 8018c4a:	aa08      	add	r2, sp, #32
 8018c4c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8018c50:	4694      	mov	ip, r2
 8018c52:	4626      	mov	r6, r4
 8018c54:	2e00      	cmp	r6, #0
 8018c56:	dc4c      	bgt.n	8018cf2 <__kernel_rem_pio2f+0x17e>
 8018c58:	4628      	mov	r0, r5
 8018c5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018c5e:	f7ff fefd 	bl	8018a5c <scalbnf>
 8018c62:	eeb0 8a40 	vmov.f32	s16, s0
 8018c66:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8018c6a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8018c6e:	f000 f9e9 	bl	8019044 <floorf>
 8018c72:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8018c76:	eea0 8a67 	vfms.f32	s16, s0, s15
 8018c7a:	2d00      	cmp	r5, #0
 8018c7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018c80:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8018c84:	ee17 9a90 	vmov	r9, s15
 8018c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018c8c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8018c90:	dd41      	ble.n	8018d16 <__kernel_rem_pio2f+0x1a2>
 8018c92:	f104 3cff 	add.w	ip, r4, #4294967295
 8018c96:	a908      	add	r1, sp, #32
 8018c98:	f1c5 0e08 	rsb	lr, r5, #8
 8018c9c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8018ca0:	fa46 f00e 	asr.w	r0, r6, lr
 8018ca4:	4481      	add	r9, r0
 8018ca6:	fa00 f00e 	lsl.w	r0, r0, lr
 8018caa:	1a36      	subs	r6, r6, r0
 8018cac:	f1c5 0007 	rsb	r0, r5, #7
 8018cb0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8018cb4:	4106      	asrs	r6, r0
 8018cb6:	2e00      	cmp	r6, #0
 8018cb8:	dd3c      	ble.n	8018d34 <__kernel_rem_pio2f+0x1c0>
 8018cba:	f04f 0e00 	mov.w	lr, #0
 8018cbe:	f109 0901 	add.w	r9, r9, #1
 8018cc2:	4670      	mov	r0, lr
 8018cc4:	4574      	cmp	r4, lr
 8018cc6:	dc68      	bgt.n	8018d9a <__kernel_rem_pio2f+0x226>
 8018cc8:	2d00      	cmp	r5, #0
 8018cca:	dd03      	ble.n	8018cd4 <__kernel_rem_pio2f+0x160>
 8018ccc:	2d01      	cmp	r5, #1
 8018cce:	d074      	beq.n	8018dba <__kernel_rem_pio2f+0x246>
 8018cd0:	2d02      	cmp	r5, #2
 8018cd2:	d07d      	beq.n	8018dd0 <__kernel_rem_pio2f+0x25c>
 8018cd4:	2e02      	cmp	r6, #2
 8018cd6:	d12d      	bne.n	8018d34 <__kernel_rem_pio2f+0x1c0>
 8018cd8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018cdc:	ee30 8a48 	vsub.f32	s16, s0, s16
 8018ce0:	b340      	cbz	r0, 8018d34 <__kernel_rem_pio2f+0x1c0>
 8018ce2:	4628      	mov	r0, r5
 8018ce4:	9306      	str	r3, [sp, #24]
 8018ce6:	f7ff feb9 	bl	8018a5c <scalbnf>
 8018cea:	9b06      	ldr	r3, [sp, #24]
 8018cec:	ee38 8a40 	vsub.f32	s16, s16, s0
 8018cf0:	e020      	b.n	8018d34 <__kernel_rem_pio2f+0x1c0>
 8018cf2:	ee60 7a28 	vmul.f32	s15, s0, s17
 8018cf6:	3e01      	subs	r6, #1
 8018cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018d00:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8018d04:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018d08:	ecac 0a01 	vstmia	ip!, {s0}
 8018d0c:	ed30 0a01 	vldmdb	r0!, {s0}
 8018d10:	ee37 0a80 	vadd.f32	s0, s15, s0
 8018d14:	e79e      	b.n	8018c54 <__kernel_rem_pio2f+0xe0>
 8018d16:	d105      	bne.n	8018d24 <__kernel_rem_pio2f+0x1b0>
 8018d18:	1e60      	subs	r0, r4, #1
 8018d1a:	a908      	add	r1, sp, #32
 8018d1c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8018d20:	11f6      	asrs	r6, r6, #7
 8018d22:	e7c8      	b.n	8018cb6 <__kernel_rem_pio2f+0x142>
 8018d24:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018d28:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d30:	da31      	bge.n	8018d96 <__kernel_rem_pio2f+0x222>
 8018d32:	2600      	movs	r6, #0
 8018d34:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d3c:	f040 8098 	bne.w	8018e70 <__kernel_rem_pio2f+0x2fc>
 8018d40:	1e60      	subs	r0, r4, #1
 8018d42:	2200      	movs	r2, #0
 8018d44:	4550      	cmp	r0, sl
 8018d46:	da4b      	bge.n	8018de0 <__kernel_rem_pio2f+0x26c>
 8018d48:	2a00      	cmp	r2, #0
 8018d4a:	d065      	beq.n	8018e18 <__kernel_rem_pio2f+0x2a4>
 8018d4c:	3c01      	subs	r4, #1
 8018d4e:	ab08      	add	r3, sp, #32
 8018d50:	3d08      	subs	r5, #8
 8018d52:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	d0f8      	beq.n	8018d4c <__kernel_rem_pio2f+0x1d8>
 8018d5a:	4628      	mov	r0, r5
 8018d5c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018d60:	f7ff fe7c 	bl	8018a5c <scalbnf>
 8018d64:	1c63      	adds	r3, r4, #1
 8018d66:	aa44      	add	r2, sp, #272	@ 0x110
 8018d68:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8018e68 <__kernel_rem_pio2f+0x2f4>
 8018d6c:	0099      	lsls	r1, r3, #2
 8018d6e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8018d72:	4623      	mov	r3, r4
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	f280 80a9 	bge.w	8018ecc <__kernel_rem_pio2f+0x358>
 8018d7a:	4623      	mov	r3, r4
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	f2c0 80c7 	blt.w	8018f10 <__kernel_rem_pio2f+0x39c>
 8018d82:	aa44      	add	r2, sp, #272	@ 0x110
 8018d84:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8018d88:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8018e60 <__kernel_rem_pio2f+0x2ec>
 8018d8c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8018e6c <__kernel_rem_pio2f+0x2f8>
 8018d90:	2000      	movs	r0, #0
 8018d92:	1ae2      	subs	r2, r4, r3
 8018d94:	e0b1      	b.n	8018efa <__kernel_rem_pio2f+0x386>
 8018d96:	2602      	movs	r6, #2
 8018d98:	e78f      	b.n	8018cba <__kernel_rem_pio2f+0x146>
 8018d9a:	f852 1b04 	ldr.w	r1, [r2], #4
 8018d9e:	b948      	cbnz	r0, 8018db4 <__kernel_rem_pio2f+0x240>
 8018da0:	b121      	cbz	r1, 8018dac <__kernel_rem_pio2f+0x238>
 8018da2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8018da6:	f842 1c04 	str.w	r1, [r2, #-4]
 8018daa:	2101      	movs	r1, #1
 8018dac:	f10e 0e01 	add.w	lr, lr, #1
 8018db0:	4608      	mov	r0, r1
 8018db2:	e787      	b.n	8018cc4 <__kernel_rem_pio2f+0x150>
 8018db4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8018db8:	e7f5      	b.n	8018da6 <__kernel_rem_pio2f+0x232>
 8018dba:	f104 3cff 	add.w	ip, r4, #4294967295
 8018dbe:	aa08      	add	r2, sp, #32
 8018dc0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8018dc4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8018dc8:	a908      	add	r1, sp, #32
 8018dca:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8018dce:	e781      	b.n	8018cd4 <__kernel_rem_pio2f+0x160>
 8018dd0:	f104 3cff 	add.w	ip, r4, #4294967295
 8018dd4:	aa08      	add	r2, sp, #32
 8018dd6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8018dda:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8018dde:	e7f3      	b.n	8018dc8 <__kernel_rem_pio2f+0x254>
 8018de0:	a908      	add	r1, sp, #32
 8018de2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8018de6:	3801      	subs	r0, #1
 8018de8:	430a      	orrs	r2, r1
 8018dea:	e7ab      	b.n	8018d44 <__kernel_rem_pio2f+0x1d0>
 8018dec:	3201      	adds	r2, #1
 8018dee:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8018df2:	2e00      	cmp	r6, #0
 8018df4:	d0fa      	beq.n	8018dec <__kernel_rem_pio2f+0x278>
 8018df6:	9905      	ldr	r1, [sp, #20]
 8018df8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8018dfc:	eb0d 0001 	add.w	r0, sp, r1
 8018e00:	18e6      	adds	r6, r4, r3
 8018e02:	a91c      	add	r1, sp, #112	@ 0x70
 8018e04:	f104 0c01 	add.w	ip, r4, #1
 8018e08:	384c      	subs	r0, #76	@ 0x4c
 8018e0a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8018e0e:	4422      	add	r2, r4
 8018e10:	4562      	cmp	r2, ip
 8018e12:	da04      	bge.n	8018e1e <__kernel_rem_pio2f+0x2aa>
 8018e14:	4614      	mov	r4, r2
 8018e16:	e710      	b.n	8018c3a <__kernel_rem_pio2f+0xc6>
 8018e18:	9804      	ldr	r0, [sp, #16]
 8018e1a:	2201      	movs	r2, #1
 8018e1c:	e7e7      	b.n	8018dee <__kernel_rem_pio2f+0x27a>
 8018e1e:	9903      	ldr	r1, [sp, #12]
 8018e20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8018e24:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8018e28:	9105      	str	r1, [sp, #20]
 8018e2a:	ee07 1a90 	vmov	s15, r1
 8018e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e32:	2400      	movs	r4, #0
 8018e34:	ece6 7a01 	vstmia	r6!, {s15}
 8018e38:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8018e6c <__kernel_rem_pio2f+0x2f8>
 8018e3c:	46b1      	mov	r9, r6
 8018e3e:	455c      	cmp	r4, fp
 8018e40:	dd04      	ble.n	8018e4c <__kernel_rem_pio2f+0x2d8>
 8018e42:	ece0 7a01 	vstmia	r0!, {s15}
 8018e46:	f10c 0c01 	add.w	ip, ip, #1
 8018e4a:	e7e1      	b.n	8018e10 <__kernel_rem_pio2f+0x29c>
 8018e4c:	ecfe 6a01 	vldmia	lr!, {s13}
 8018e50:	ed39 7a01 	vldmdb	r9!, {s14}
 8018e54:	3401      	adds	r4, #1
 8018e56:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018e5a:	e7f0      	b.n	8018e3e <__kernel_rem_pio2f+0x2ca>
 8018e5c:	08020884 	.word	0x08020884
 8018e60:	08020858 	.word	0x08020858
 8018e64:	43800000 	.word	0x43800000
 8018e68:	3b800000 	.word	0x3b800000
 8018e6c:	00000000 	.word	0x00000000
 8018e70:	9b02      	ldr	r3, [sp, #8]
 8018e72:	eeb0 0a48 	vmov.f32	s0, s16
 8018e76:	eba3 0008 	sub.w	r0, r3, r8
 8018e7a:	f7ff fdef 	bl	8018a5c <scalbnf>
 8018e7e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8018e64 <__kernel_rem_pio2f+0x2f0>
 8018e82:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8018e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e8a:	db19      	blt.n	8018ec0 <__kernel_rem_pio2f+0x34c>
 8018e8c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8018e68 <__kernel_rem_pio2f+0x2f4>
 8018e90:	ee60 7a27 	vmul.f32	s15, s0, s15
 8018e94:	aa08      	add	r2, sp, #32
 8018e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018e9a:	3508      	adds	r5, #8
 8018e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ea0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8018ea4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018ea8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018eac:	ee10 3a10 	vmov	r3, s0
 8018eb0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8018eb4:	ee17 3a90 	vmov	r3, s15
 8018eb8:	3401      	adds	r4, #1
 8018eba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8018ebe:	e74c      	b.n	8018d5a <__kernel_rem_pio2f+0x1e6>
 8018ec0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018ec4:	aa08      	add	r2, sp, #32
 8018ec6:	ee10 3a10 	vmov	r3, s0
 8018eca:	e7f6      	b.n	8018eba <__kernel_rem_pio2f+0x346>
 8018ecc:	a808      	add	r0, sp, #32
 8018ece:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8018ed2:	9001      	str	r0, [sp, #4]
 8018ed4:	ee07 0a90 	vmov	s15, r0
 8018ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018edc:	3b01      	subs	r3, #1
 8018ede:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018ee2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8018ee6:	ed62 7a01 	vstmdb	r2!, {s15}
 8018eea:	e743      	b.n	8018d74 <__kernel_rem_pio2f+0x200>
 8018eec:	ecfc 6a01 	vldmia	ip!, {s13}
 8018ef0:	ecb5 7a01 	vldmia	r5!, {s14}
 8018ef4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018ef8:	3001      	adds	r0, #1
 8018efa:	4550      	cmp	r0, sl
 8018efc:	dc01      	bgt.n	8018f02 <__kernel_rem_pio2f+0x38e>
 8018efe:	4290      	cmp	r0, r2
 8018f00:	ddf4      	ble.n	8018eec <__kernel_rem_pio2f+0x378>
 8018f02:	a858      	add	r0, sp, #352	@ 0x160
 8018f04:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8018f08:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8018f0c:	3b01      	subs	r3, #1
 8018f0e:	e735      	b.n	8018d7c <__kernel_rem_pio2f+0x208>
 8018f10:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8018f12:	2b02      	cmp	r3, #2
 8018f14:	dc09      	bgt.n	8018f2a <__kernel_rem_pio2f+0x3b6>
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	dc27      	bgt.n	8018f6a <__kernel_rem_pio2f+0x3f6>
 8018f1a:	d040      	beq.n	8018f9e <__kernel_rem_pio2f+0x42a>
 8018f1c:	f009 0007 	and.w	r0, r9, #7
 8018f20:	b059      	add	sp, #356	@ 0x164
 8018f22:	ecbd 8b04 	vpop	{d8-d9}
 8018f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f2a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8018f2c:	2b03      	cmp	r3, #3
 8018f2e:	d1f5      	bne.n	8018f1c <__kernel_rem_pio2f+0x3a8>
 8018f30:	aa30      	add	r2, sp, #192	@ 0xc0
 8018f32:	1f0b      	subs	r3, r1, #4
 8018f34:	4413      	add	r3, r2
 8018f36:	461a      	mov	r2, r3
 8018f38:	4620      	mov	r0, r4
 8018f3a:	2800      	cmp	r0, #0
 8018f3c:	dc50      	bgt.n	8018fe0 <__kernel_rem_pio2f+0x46c>
 8018f3e:	4622      	mov	r2, r4
 8018f40:	2a01      	cmp	r2, #1
 8018f42:	dc5d      	bgt.n	8019000 <__kernel_rem_pio2f+0x48c>
 8018f44:	ab30      	add	r3, sp, #192	@ 0xc0
 8018f46:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8018e6c <__kernel_rem_pio2f+0x2f8>
 8018f4a:	440b      	add	r3, r1
 8018f4c:	2c01      	cmp	r4, #1
 8018f4e:	dc67      	bgt.n	8019020 <__kernel_rem_pio2f+0x4ac>
 8018f50:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8018f54:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8018f58:	2e00      	cmp	r6, #0
 8018f5a:	d167      	bne.n	801902c <__kernel_rem_pio2f+0x4b8>
 8018f5c:	edc7 6a00 	vstr	s13, [r7]
 8018f60:	ed87 7a01 	vstr	s14, [r7, #4]
 8018f64:	edc7 7a02 	vstr	s15, [r7, #8]
 8018f68:	e7d8      	b.n	8018f1c <__kernel_rem_pio2f+0x3a8>
 8018f6a:	ab30      	add	r3, sp, #192	@ 0xc0
 8018f6c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8018e6c <__kernel_rem_pio2f+0x2f8>
 8018f70:	440b      	add	r3, r1
 8018f72:	4622      	mov	r2, r4
 8018f74:	2a00      	cmp	r2, #0
 8018f76:	da24      	bge.n	8018fc2 <__kernel_rem_pio2f+0x44e>
 8018f78:	b34e      	cbz	r6, 8018fce <__kernel_rem_pio2f+0x45a>
 8018f7a:	eef1 7a47 	vneg.f32	s15, s14
 8018f7e:	edc7 7a00 	vstr	s15, [r7]
 8018f82:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8018f86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018f8a:	aa31      	add	r2, sp, #196	@ 0xc4
 8018f8c:	2301      	movs	r3, #1
 8018f8e:	429c      	cmp	r4, r3
 8018f90:	da20      	bge.n	8018fd4 <__kernel_rem_pio2f+0x460>
 8018f92:	b10e      	cbz	r6, 8018f98 <__kernel_rem_pio2f+0x424>
 8018f94:	eef1 7a67 	vneg.f32	s15, s15
 8018f98:	edc7 7a01 	vstr	s15, [r7, #4]
 8018f9c:	e7be      	b.n	8018f1c <__kernel_rem_pio2f+0x3a8>
 8018f9e:	ab30      	add	r3, sp, #192	@ 0xc0
 8018fa0:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8018e6c <__kernel_rem_pio2f+0x2f8>
 8018fa4:	440b      	add	r3, r1
 8018fa6:	2c00      	cmp	r4, #0
 8018fa8:	da05      	bge.n	8018fb6 <__kernel_rem_pio2f+0x442>
 8018faa:	b10e      	cbz	r6, 8018fb0 <__kernel_rem_pio2f+0x43c>
 8018fac:	eef1 7a67 	vneg.f32	s15, s15
 8018fb0:	edc7 7a00 	vstr	s15, [r7]
 8018fb4:	e7b2      	b.n	8018f1c <__kernel_rem_pio2f+0x3a8>
 8018fb6:	ed33 7a01 	vldmdb	r3!, {s14}
 8018fba:	3c01      	subs	r4, #1
 8018fbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018fc0:	e7f1      	b.n	8018fa6 <__kernel_rem_pio2f+0x432>
 8018fc2:	ed73 7a01 	vldmdb	r3!, {s15}
 8018fc6:	3a01      	subs	r2, #1
 8018fc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018fcc:	e7d2      	b.n	8018f74 <__kernel_rem_pio2f+0x400>
 8018fce:	eef0 7a47 	vmov.f32	s15, s14
 8018fd2:	e7d4      	b.n	8018f7e <__kernel_rem_pio2f+0x40a>
 8018fd4:	ecb2 7a01 	vldmia	r2!, {s14}
 8018fd8:	3301      	adds	r3, #1
 8018fda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018fde:	e7d6      	b.n	8018f8e <__kernel_rem_pio2f+0x41a>
 8018fe0:	ed72 7a01 	vldmdb	r2!, {s15}
 8018fe4:	edd2 6a01 	vldr	s13, [r2, #4]
 8018fe8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018fec:	3801      	subs	r0, #1
 8018fee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018ff2:	ed82 7a00 	vstr	s14, [r2]
 8018ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018ffa:	edc2 7a01 	vstr	s15, [r2, #4]
 8018ffe:	e79c      	b.n	8018f3a <__kernel_rem_pio2f+0x3c6>
 8019000:	ed73 7a01 	vldmdb	r3!, {s15}
 8019004:	edd3 6a01 	vldr	s13, [r3, #4]
 8019008:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801900c:	3a01      	subs	r2, #1
 801900e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019012:	ed83 7a00 	vstr	s14, [r3]
 8019016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801901a:	edc3 7a01 	vstr	s15, [r3, #4]
 801901e:	e78f      	b.n	8018f40 <__kernel_rem_pio2f+0x3cc>
 8019020:	ed33 7a01 	vldmdb	r3!, {s14}
 8019024:	3c01      	subs	r4, #1
 8019026:	ee77 7a87 	vadd.f32	s15, s15, s14
 801902a:	e78f      	b.n	8018f4c <__kernel_rem_pio2f+0x3d8>
 801902c:	eef1 6a66 	vneg.f32	s13, s13
 8019030:	eeb1 7a47 	vneg.f32	s14, s14
 8019034:	edc7 6a00 	vstr	s13, [r7]
 8019038:	ed87 7a01 	vstr	s14, [r7, #4]
 801903c:	eef1 7a67 	vneg.f32	s15, s15
 8019040:	e790      	b.n	8018f64 <__kernel_rem_pio2f+0x3f0>
 8019042:	bf00      	nop

08019044 <floorf>:
 8019044:	ee10 3a10 	vmov	r3, s0
 8019048:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801904c:	3a7f      	subs	r2, #127	@ 0x7f
 801904e:	2a16      	cmp	r2, #22
 8019050:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8019054:	dc2b      	bgt.n	80190ae <floorf+0x6a>
 8019056:	2a00      	cmp	r2, #0
 8019058:	da12      	bge.n	8019080 <floorf+0x3c>
 801905a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80190c0 <floorf+0x7c>
 801905e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019062:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801906a:	dd06      	ble.n	801907a <floorf+0x36>
 801906c:	2b00      	cmp	r3, #0
 801906e:	da24      	bge.n	80190ba <floorf+0x76>
 8019070:	2900      	cmp	r1, #0
 8019072:	4b14      	ldr	r3, [pc, #80]	@ (80190c4 <floorf+0x80>)
 8019074:	bf08      	it	eq
 8019076:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801907a:	ee00 3a10 	vmov	s0, r3
 801907e:	4770      	bx	lr
 8019080:	4911      	ldr	r1, [pc, #68]	@ (80190c8 <floorf+0x84>)
 8019082:	4111      	asrs	r1, r2
 8019084:	420b      	tst	r3, r1
 8019086:	d0fa      	beq.n	801907e <floorf+0x3a>
 8019088:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80190c0 <floorf+0x7c>
 801908c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019090:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019098:	ddef      	ble.n	801907a <floorf+0x36>
 801909a:	2b00      	cmp	r3, #0
 801909c:	bfbe      	ittt	lt
 801909e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80190a2:	fa40 f202 	asrlt.w	r2, r0, r2
 80190a6:	189b      	addlt	r3, r3, r2
 80190a8:	ea23 0301 	bic.w	r3, r3, r1
 80190ac:	e7e5      	b.n	801907a <floorf+0x36>
 80190ae:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80190b2:	d3e4      	bcc.n	801907e <floorf+0x3a>
 80190b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80190b8:	4770      	bx	lr
 80190ba:	2300      	movs	r3, #0
 80190bc:	e7dd      	b.n	801907a <floorf+0x36>
 80190be:	bf00      	nop
 80190c0:	7149f2ca 	.word	0x7149f2ca
 80190c4:	bf800000 	.word	0xbf800000
 80190c8:	007fffff 	.word	0x007fffff

080190cc <__cvt>:
 80190cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80190d0:	ec57 6b10 	vmov	r6, r7, d0
 80190d4:	2f00      	cmp	r7, #0
 80190d6:	460c      	mov	r4, r1
 80190d8:	4619      	mov	r1, r3
 80190da:	463b      	mov	r3, r7
 80190dc:	bfbb      	ittet	lt
 80190de:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80190e2:	461f      	movlt	r7, r3
 80190e4:	2300      	movge	r3, #0
 80190e6:	232d      	movlt	r3, #45	@ 0x2d
 80190e8:	700b      	strb	r3, [r1, #0]
 80190ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80190ec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80190f0:	4691      	mov	r9, r2
 80190f2:	f023 0820 	bic.w	r8, r3, #32
 80190f6:	bfbc      	itt	lt
 80190f8:	4632      	movlt	r2, r6
 80190fa:	4616      	movlt	r6, r2
 80190fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8019100:	d005      	beq.n	801910e <__cvt+0x42>
 8019102:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8019106:	d100      	bne.n	801910a <__cvt+0x3e>
 8019108:	3401      	adds	r4, #1
 801910a:	2102      	movs	r1, #2
 801910c:	e000      	b.n	8019110 <__cvt+0x44>
 801910e:	2103      	movs	r1, #3
 8019110:	ab03      	add	r3, sp, #12
 8019112:	9301      	str	r3, [sp, #4]
 8019114:	ab02      	add	r3, sp, #8
 8019116:	9300      	str	r3, [sp, #0]
 8019118:	ec47 6b10 	vmov	d0, r6, r7
 801911c:	4653      	mov	r3, sl
 801911e:	4622      	mov	r2, r4
 8019120:	f001 fb92 	bl	801a848 <_dtoa_r>
 8019124:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8019128:	4605      	mov	r5, r0
 801912a:	d119      	bne.n	8019160 <__cvt+0x94>
 801912c:	f019 0f01 	tst.w	r9, #1
 8019130:	d00e      	beq.n	8019150 <__cvt+0x84>
 8019132:	eb00 0904 	add.w	r9, r0, r4
 8019136:	2200      	movs	r2, #0
 8019138:	2300      	movs	r3, #0
 801913a:	4630      	mov	r0, r6
 801913c:	4639      	mov	r1, r7
 801913e:	f7e7 fcc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8019142:	b108      	cbz	r0, 8019148 <__cvt+0x7c>
 8019144:	f8cd 900c 	str.w	r9, [sp, #12]
 8019148:	2230      	movs	r2, #48	@ 0x30
 801914a:	9b03      	ldr	r3, [sp, #12]
 801914c:	454b      	cmp	r3, r9
 801914e:	d31e      	bcc.n	801918e <__cvt+0xc2>
 8019150:	9b03      	ldr	r3, [sp, #12]
 8019152:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019154:	1b5b      	subs	r3, r3, r5
 8019156:	4628      	mov	r0, r5
 8019158:	6013      	str	r3, [r2, #0]
 801915a:	b004      	add	sp, #16
 801915c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019160:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8019164:	eb00 0904 	add.w	r9, r0, r4
 8019168:	d1e5      	bne.n	8019136 <__cvt+0x6a>
 801916a:	7803      	ldrb	r3, [r0, #0]
 801916c:	2b30      	cmp	r3, #48	@ 0x30
 801916e:	d10a      	bne.n	8019186 <__cvt+0xba>
 8019170:	2200      	movs	r2, #0
 8019172:	2300      	movs	r3, #0
 8019174:	4630      	mov	r0, r6
 8019176:	4639      	mov	r1, r7
 8019178:	f7e7 fca6 	bl	8000ac8 <__aeabi_dcmpeq>
 801917c:	b918      	cbnz	r0, 8019186 <__cvt+0xba>
 801917e:	f1c4 0401 	rsb	r4, r4, #1
 8019182:	f8ca 4000 	str.w	r4, [sl]
 8019186:	f8da 3000 	ldr.w	r3, [sl]
 801918a:	4499      	add	r9, r3
 801918c:	e7d3      	b.n	8019136 <__cvt+0x6a>
 801918e:	1c59      	adds	r1, r3, #1
 8019190:	9103      	str	r1, [sp, #12]
 8019192:	701a      	strb	r2, [r3, #0]
 8019194:	e7d9      	b.n	801914a <__cvt+0x7e>

08019196 <__exponent>:
 8019196:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019198:	2900      	cmp	r1, #0
 801919a:	bfba      	itte	lt
 801919c:	4249      	neglt	r1, r1
 801919e:	232d      	movlt	r3, #45	@ 0x2d
 80191a0:	232b      	movge	r3, #43	@ 0x2b
 80191a2:	2909      	cmp	r1, #9
 80191a4:	7002      	strb	r2, [r0, #0]
 80191a6:	7043      	strb	r3, [r0, #1]
 80191a8:	dd29      	ble.n	80191fe <__exponent+0x68>
 80191aa:	f10d 0307 	add.w	r3, sp, #7
 80191ae:	461d      	mov	r5, r3
 80191b0:	270a      	movs	r7, #10
 80191b2:	461a      	mov	r2, r3
 80191b4:	fbb1 f6f7 	udiv	r6, r1, r7
 80191b8:	fb07 1416 	mls	r4, r7, r6, r1
 80191bc:	3430      	adds	r4, #48	@ 0x30
 80191be:	f802 4c01 	strb.w	r4, [r2, #-1]
 80191c2:	460c      	mov	r4, r1
 80191c4:	2c63      	cmp	r4, #99	@ 0x63
 80191c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80191ca:	4631      	mov	r1, r6
 80191cc:	dcf1      	bgt.n	80191b2 <__exponent+0x1c>
 80191ce:	3130      	adds	r1, #48	@ 0x30
 80191d0:	1e94      	subs	r4, r2, #2
 80191d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80191d6:	1c41      	adds	r1, r0, #1
 80191d8:	4623      	mov	r3, r4
 80191da:	42ab      	cmp	r3, r5
 80191dc:	d30a      	bcc.n	80191f4 <__exponent+0x5e>
 80191de:	f10d 0309 	add.w	r3, sp, #9
 80191e2:	1a9b      	subs	r3, r3, r2
 80191e4:	42ac      	cmp	r4, r5
 80191e6:	bf88      	it	hi
 80191e8:	2300      	movhi	r3, #0
 80191ea:	3302      	adds	r3, #2
 80191ec:	4403      	add	r3, r0
 80191ee:	1a18      	subs	r0, r3, r0
 80191f0:	b003      	add	sp, #12
 80191f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191f4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80191f8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80191fc:	e7ed      	b.n	80191da <__exponent+0x44>
 80191fe:	2330      	movs	r3, #48	@ 0x30
 8019200:	3130      	adds	r1, #48	@ 0x30
 8019202:	7083      	strb	r3, [r0, #2]
 8019204:	70c1      	strb	r1, [r0, #3]
 8019206:	1d03      	adds	r3, r0, #4
 8019208:	e7f1      	b.n	80191ee <__exponent+0x58>
	...

0801920c <_printf_float>:
 801920c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019210:	b08d      	sub	sp, #52	@ 0x34
 8019212:	460c      	mov	r4, r1
 8019214:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8019218:	4616      	mov	r6, r2
 801921a:	461f      	mov	r7, r3
 801921c:	4605      	mov	r5, r0
 801921e:	f001 f989 	bl	801a534 <_localeconv_r>
 8019222:	6803      	ldr	r3, [r0, #0]
 8019224:	9304      	str	r3, [sp, #16]
 8019226:	4618      	mov	r0, r3
 8019228:	f7e7 f822 	bl	8000270 <strlen>
 801922c:	2300      	movs	r3, #0
 801922e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019230:	f8d8 3000 	ldr.w	r3, [r8]
 8019234:	9005      	str	r0, [sp, #20]
 8019236:	3307      	adds	r3, #7
 8019238:	f023 0307 	bic.w	r3, r3, #7
 801923c:	f103 0208 	add.w	r2, r3, #8
 8019240:	f894 a018 	ldrb.w	sl, [r4, #24]
 8019244:	f8d4 b000 	ldr.w	fp, [r4]
 8019248:	f8c8 2000 	str.w	r2, [r8]
 801924c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019250:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8019254:	9307      	str	r3, [sp, #28]
 8019256:	f8cd 8018 	str.w	r8, [sp, #24]
 801925a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801925e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019262:	4b9c      	ldr	r3, [pc, #624]	@ (80194d4 <_printf_float+0x2c8>)
 8019264:	f04f 32ff 	mov.w	r2, #4294967295
 8019268:	f7e7 fc60 	bl	8000b2c <__aeabi_dcmpun>
 801926c:	bb70      	cbnz	r0, 80192cc <_printf_float+0xc0>
 801926e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019272:	4b98      	ldr	r3, [pc, #608]	@ (80194d4 <_printf_float+0x2c8>)
 8019274:	f04f 32ff 	mov.w	r2, #4294967295
 8019278:	f7e7 fc3a 	bl	8000af0 <__aeabi_dcmple>
 801927c:	bb30      	cbnz	r0, 80192cc <_printf_float+0xc0>
 801927e:	2200      	movs	r2, #0
 8019280:	2300      	movs	r3, #0
 8019282:	4640      	mov	r0, r8
 8019284:	4649      	mov	r1, r9
 8019286:	f7e7 fc29 	bl	8000adc <__aeabi_dcmplt>
 801928a:	b110      	cbz	r0, 8019292 <_printf_float+0x86>
 801928c:	232d      	movs	r3, #45	@ 0x2d
 801928e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019292:	4a91      	ldr	r2, [pc, #580]	@ (80194d8 <_printf_float+0x2cc>)
 8019294:	4b91      	ldr	r3, [pc, #580]	@ (80194dc <_printf_float+0x2d0>)
 8019296:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801929a:	bf8c      	ite	hi
 801929c:	4690      	movhi	r8, r2
 801929e:	4698      	movls	r8, r3
 80192a0:	2303      	movs	r3, #3
 80192a2:	6123      	str	r3, [r4, #16]
 80192a4:	f02b 0304 	bic.w	r3, fp, #4
 80192a8:	6023      	str	r3, [r4, #0]
 80192aa:	f04f 0900 	mov.w	r9, #0
 80192ae:	9700      	str	r7, [sp, #0]
 80192b0:	4633      	mov	r3, r6
 80192b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80192b4:	4621      	mov	r1, r4
 80192b6:	4628      	mov	r0, r5
 80192b8:	f000 fb1e 	bl	80198f8 <_printf_common>
 80192bc:	3001      	adds	r0, #1
 80192be:	f040 808d 	bne.w	80193dc <_printf_float+0x1d0>
 80192c2:	f04f 30ff 	mov.w	r0, #4294967295
 80192c6:	b00d      	add	sp, #52	@ 0x34
 80192c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192cc:	4642      	mov	r2, r8
 80192ce:	464b      	mov	r3, r9
 80192d0:	4640      	mov	r0, r8
 80192d2:	4649      	mov	r1, r9
 80192d4:	f7e7 fc2a 	bl	8000b2c <__aeabi_dcmpun>
 80192d8:	b140      	cbz	r0, 80192ec <_printf_float+0xe0>
 80192da:	464b      	mov	r3, r9
 80192dc:	2b00      	cmp	r3, #0
 80192de:	bfbc      	itt	lt
 80192e0:	232d      	movlt	r3, #45	@ 0x2d
 80192e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80192e6:	4a7e      	ldr	r2, [pc, #504]	@ (80194e0 <_printf_float+0x2d4>)
 80192e8:	4b7e      	ldr	r3, [pc, #504]	@ (80194e4 <_printf_float+0x2d8>)
 80192ea:	e7d4      	b.n	8019296 <_printf_float+0x8a>
 80192ec:	6863      	ldr	r3, [r4, #4]
 80192ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80192f2:	9206      	str	r2, [sp, #24]
 80192f4:	1c5a      	adds	r2, r3, #1
 80192f6:	d13b      	bne.n	8019370 <_printf_float+0x164>
 80192f8:	2306      	movs	r3, #6
 80192fa:	6063      	str	r3, [r4, #4]
 80192fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8019300:	2300      	movs	r3, #0
 8019302:	6022      	str	r2, [r4, #0]
 8019304:	9303      	str	r3, [sp, #12]
 8019306:	ab0a      	add	r3, sp, #40	@ 0x28
 8019308:	e9cd a301 	strd	sl, r3, [sp, #4]
 801930c:	ab09      	add	r3, sp, #36	@ 0x24
 801930e:	9300      	str	r3, [sp, #0]
 8019310:	6861      	ldr	r1, [r4, #4]
 8019312:	ec49 8b10 	vmov	d0, r8, r9
 8019316:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801931a:	4628      	mov	r0, r5
 801931c:	f7ff fed6 	bl	80190cc <__cvt>
 8019320:	9b06      	ldr	r3, [sp, #24]
 8019322:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019324:	2b47      	cmp	r3, #71	@ 0x47
 8019326:	4680      	mov	r8, r0
 8019328:	d129      	bne.n	801937e <_printf_float+0x172>
 801932a:	1cc8      	adds	r0, r1, #3
 801932c:	db02      	blt.n	8019334 <_printf_float+0x128>
 801932e:	6863      	ldr	r3, [r4, #4]
 8019330:	4299      	cmp	r1, r3
 8019332:	dd41      	ble.n	80193b8 <_printf_float+0x1ac>
 8019334:	f1aa 0a02 	sub.w	sl, sl, #2
 8019338:	fa5f fa8a 	uxtb.w	sl, sl
 801933c:	3901      	subs	r1, #1
 801933e:	4652      	mov	r2, sl
 8019340:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8019344:	9109      	str	r1, [sp, #36]	@ 0x24
 8019346:	f7ff ff26 	bl	8019196 <__exponent>
 801934a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801934c:	1813      	adds	r3, r2, r0
 801934e:	2a01      	cmp	r2, #1
 8019350:	4681      	mov	r9, r0
 8019352:	6123      	str	r3, [r4, #16]
 8019354:	dc02      	bgt.n	801935c <_printf_float+0x150>
 8019356:	6822      	ldr	r2, [r4, #0]
 8019358:	07d2      	lsls	r2, r2, #31
 801935a:	d501      	bpl.n	8019360 <_printf_float+0x154>
 801935c:	3301      	adds	r3, #1
 801935e:	6123      	str	r3, [r4, #16]
 8019360:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8019364:	2b00      	cmp	r3, #0
 8019366:	d0a2      	beq.n	80192ae <_printf_float+0xa2>
 8019368:	232d      	movs	r3, #45	@ 0x2d
 801936a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801936e:	e79e      	b.n	80192ae <_printf_float+0xa2>
 8019370:	9a06      	ldr	r2, [sp, #24]
 8019372:	2a47      	cmp	r2, #71	@ 0x47
 8019374:	d1c2      	bne.n	80192fc <_printf_float+0xf0>
 8019376:	2b00      	cmp	r3, #0
 8019378:	d1c0      	bne.n	80192fc <_printf_float+0xf0>
 801937a:	2301      	movs	r3, #1
 801937c:	e7bd      	b.n	80192fa <_printf_float+0xee>
 801937e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8019382:	d9db      	bls.n	801933c <_printf_float+0x130>
 8019384:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8019388:	d118      	bne.n	80193bc <_printf_float+0x1b0>
 801938a:	2900      	cmp	r1, #0
 801938c:	6863      	ldr	r3, [r4, #4]
 801938e:	dd0b      	ble.n	80193a8 <_printf_float+0x19c>
 8019390:	6121      	str	r1, [r4, #16]
 8019392:	b913      	cbnz	r3, 801939a <_printf_float+0x18e>
 8019394:	6822      	ldr	r2, [r4, #0]
 8019396:	07d0      	lsls	r0, r2, #31
 8019398:	d502      	bpl.n	80193a0 <_printf_float+0x194>
 801939a:	3301      	adds	r3, #1
 801939c:	440b      	add	r3, r1
 801939e:	6123      	str	r3, [r4, #16]
 80193a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80193a2:	f04f 0900 	mov.w	r9, #0
 80193a6:	e7db      	b.n	8019360 <_printf_float+0x154>
 80193a8:	b913      	cbnz	r3, 80193b0 <_printf_float+0x1a4>
 80193aa:	6822      	ldr	r2, [r4, #0]
 80193ac:	07d2      	lsls	r2, r2, #31
 80193ae:	d501      	bpl.n	80193b4 <_printf_float+0x1a8>
 80193b0:	3302      	adds	r3, #2
 80193b2:	e7f4      	b.n	801939e <_printf_float+0x192>
 80193b4:	2301      	movs	r3, #1
 80193b6:	e7f2      	b.n	801939e <_printf_float+0x192>
 80193b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80193bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80193be:	4299      	cmp	r1, r3
 80193c0:	db05      	blt.n	80193ce <_printf_float+0x1c2>
 80193c2:	6823      	ldr	r3, [r4, #0]
 80193c4:	6121      	str	r1, [r4, #16]
 80193c6:	07d8      	lsls	r0, r3, #31
 80193c8:	d5ea      	bpl.n	80193a0 <_printf_float+0x194>
 80193ca:	1c4b      	adds	r3, r1, #1
 80193cc:	e7e7      	b.n	801939e <_printf_float+0x192>
 80193ce:	2900      	cmp	r1, #0
 80193d0:	bfd4      	ite	le
 80193d2:	f1c1 0202 	rsble	r2, r1, #2
 80193d6:	2201      	movgt	r2, #1
 80193d8:	4413      	add	r3, r2
 80193da:	e7e0      	b.n	801939e <_printf_float+0x192>
 80193dc:	6823      	ldr	r3, [r4, #0]
 80193de:	055a      	lsls	r2, r3, #21
 80193e0:	d407      	bmi.n	80193f2 <_printf_float+0x1e6>
 80193e2:	6923      	ldr	r3, [r4, #16]
 80193e4:	4642      	mov	r2, r8
 80193e6:	4631      	mov	r1, r6
 80193e8:	4628      	mov	r0, r5
 80193ea:	47b8      	blx	r7
 80193ec:	3001      	adds	r0, #1
 80193ee:	d12b      	bne.n	8019448 <_printf_float+0x23c>
 80193f0:	e767      	b.n	80192c2 <_printf_float+0xb6>
 80193f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80193f6:	f240 80dd 	bls.w	80195b4 <_printf_float+0x3a8>
 80193fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80193fe:	2200      	movs	r2, #0
 8019400:	2300      	movs	r3, #0
 8019402:	f7e7 fb61 	bl	8000ac8 <__aeabi_dcmpeq>
 8019406:	2800      	cmp	r0, #0
 8019408:	d033      	beq.n	8019472 <_printf_float+0x266>
 801940a:	4a37      	ldr	r2, [pc, #220]	@ (80194e8 <_printf_float+0x2dc>)
 801940c:	2301      	movs	r3, #1
 801940e:	4631      	mov	r1, r6
 8019410:	4628      	mov	r0, r5
 8019412:	47b8      	blx	r7
 8019414:	3001      	adds	r0, #1
 8019416:	f43f af54 	beq.w	80192c2 <_printf_float+0xb6>
 801941a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801941e:	4543      	cmp	r3, r8
 8019420:	db02      	blt.n	8019428 <_printf_float+0x21c>
 8019422:	6823      	ldr	r3, [r4, #0]
 8019424:	07d8      	lsls	r0, r3, #31
 8019426:	d50f      	bpl.n	8019448 <_printf_float+0x23c>
 8019428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801942c:	4631      	mov	r1, r6
 801942e:	4628      	mov	r0, r5
 8019430:	47b8      	blx	r7
 8019432:	3001      	adds	r0, #1
 8019434:	f43f af45 	beq.w	80192c2 <_printf_float+0xb6>
 8019438:	f04f 0900 	mov.w	r9, #0
 801943c:	f108 38ff 	add.w	r8, r8, #4294967295
 8019440:	f104 0a1a 	add.w	sl, r4, #26
 8019444:	45c8      	cmp	r8, r9
 8019446:	dc09      	bgt.n	801945c <_printf_float+0x250>
 8019448:	6823      	ldr	r3, [r4, #0]
 801944a:	079b      	lsls	r3, r3, #30
 801944c:	f100 8103 	bmi.w	8019656 <_printf_float+0x44a>
 8019450:	68e0      	ldr	r0, [r4, #12]
 8019452:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019454:	4298      	cmp	r0, r3
 8019456:	bfb8      	it	lt
 8019458:	4618      	movlt	r0, r3
 801945a:	e734      	b.n	80192c6 <_printf_float+0xba>
 801945c:	2301      	movs	r3, #1
 801945e:	4652      	mov	r2, sl
 8019460:	4631      	mov	r1, r6
 8019462:	4628      	mov	r0, r5
 8019464:	47b8      	blx	r7
 8019466:	3001      	adds	r0, #1
 8019468:	f43f af2b 	beq.w	80192c2 <_printf_float+0xb6>
 801946c:	f109 0901 	add.w	r9, r9, #1
 8019470:	e7e8      	b.n	8019444 <_printf_float+0x238>
 8019472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019474:	2b00      	cmp	r3, #0
 8019476:	dc39      	bgt.n	80194ec <_printf_float+0x2e0>
 8019478:	4a1b      	ldr	r2, [pc, #108]	@ (80194e8 <_printf_float+0x2dc>)
 801947a:	2301      	movs	r3, #1
 801947c:	4631      	mov	r1, r6
 801947e:	4628      	mov	r0, r5
 8019480:	47b8      	blx	r7
 8019482:	3001      	adds	r0, #1
 8019484:	f43f af1d 	beq.w	80192c2 <_printf_float+0xb6>
 8019488:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801948c:	ea59 0303 	orrs.w	r3, r9, r3
 8019490:	d102      	bne.n	8019498 <_printf_float+0x28c>
 8019492:	6823      	ldr	r3, [r4, #0]
 8019494:	07d9      	lsls	r1, r3, #31
 8019496:	d5d7      	bpl.n	8019448 <_printf_float+0x23c>
 8019498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801949c:	4631      	mov	r1, r6
 801949e:	4628      	mov	r0, r5
 80194a0:	47b8      	blx	r7
 80194a2:	3001      	adds	r0, #1
 80194a4:	f43f af0d 	beq.w	80192c2 <_printf_float+0xb6>
 80194a8:	f04f 0a00 	mov.w	sl, #0
 80194ac:	f104 0b1a 	add.w	fp, r4, #26
 80194b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80194b2:	425b      	negs	r3, r3
 80194b4:	4553      	cmp	r3, sl
 80194b6:	dc01      	bgt.n	80194bc <_printf_float+0x2b0>
 80194b8:	464b      	mov	r3, r9
 80194ba:	e793      	b.n	80193e4 <_printf_float+0x1d8>
 80194bc:	2301      	movs	r3, #1
 80194be:	465a      	mov	r2, fp
 80194c0:	4631      	mov	r1, r6
 80194c2:	4628      	mov	r0, r5
 80194c4:	47b8      	blx	r7
 80194c6:	3001      	adds	r0, #1
 80194c8:	f43f aefb 	beq.w	80192c2 <_printf_float+0xb6>
 80194cc:	f10a 0a01 	add.w	sl, sl, #1
 80194d0:	e7ee      	b.n	80194b0 <_printf_float+0x2a4>
 80194d2:	bf00      	nop
 80194d4:	7fefffff 	.word	0x7fefffff
 80194d8:	08020284 	.word	0x08020284
 80194dc:	08020280 	.word	0x08020280
 80194e0:	0802028c 	.word	0x0802028c
 80194e4:	08020288 	.word	0x08020288
 80194e8:	08020402 	.word	0x08020402
 80194ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80194ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80194f2:	4553      	cmp	r3, sl
 80194f4:	bfa8      	it	ge
 80194f6:	4653      	movge	r3, sl
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	4699      	mov	r9, r3
 80194fc:	dc36      	bgt.n	801956c <_printf_float+0x360>
 80194fe:	f04f 0b00 	mov.w	fp, #0
 8019502:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019506:	f104 021a 	add.w	r2, r4, #26
 801950a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801950c:	9306      	str	r3, [sp, #24]
 801950e:	eba3 0309 	sub.w	r3, r3, r9
 8019512:	455b      	cmp	r3, fp
 8019514:	dc31      	bgt.n	801957a <_printf_float+0x36e>
 8019516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019518:	459a      	cmp	sl, r3
 801951a:	dc3a      	bgt.n	8019592 <_printf_float+0x386>
 801951c:	6823      	ldr	r3, [r4, #0]
 801951e:	07da      	lsls	r2, r3, #31
 8019520:	d437      	bmi.n	8019592 <_printf_float+0x386>
 8019522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019524:	ebaa 0903 	sub.w	r9, sl, r3
 8019528:	9b06      	ldr	r3, [sp, #24]
 801952a:	ebaa 0303 	sub.w	r3, sl, r3
 801952e:	4599      	cmp	r9, r3
 8019530:	bfa8      	it	ge
 8019532:	4699      	movge	r9, r3
 8019534:	f1b9 0f00 	cmp.w	r9, #0
 8019538:	dc33      	bgt.n	80195a2 <_printf_float+0x396>
 801953a:	f04f 0800 	mov.w	r8, #0
 801953e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019542:	f104 0b1a 	add.w	fp, r4, #26
 8019546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019548:	ebaa 0303 	sub.w	r3, sl, r3
 801954c:	eba3 0309 	sub.w	r3, r3, r9
 8019550:	4543      	cmp	r3, r8
 8019552:	f77f af79 	ble.w	8019448 <_printf_float+0x23c>
 8019556:	2301      	movs	r3, #1
 8019558:	465a      	mov	r2, fp
 801955a:	4631      	mov	r1, r6
 801955c:	4628      	mov	r0, r5
 801955e:	47b8      	blx	r7
 8019560:	3001      	adds	r0, #1
 8019562:	f43f aeae 	beq.w	80192c2 <_printf_float+0xb6>
 8019566:	f108 0801 	add.w	r8, r8, #1
 801956a:	e7ec      	b.n	8019546 <_printf_float+0x33a>
 801956c:	4642      	mov	r2, r8
 801956e:	4631      	mov	r1, r6
 8019570:	4628      	mov	r0, r5
 8019572:	47b8      	blx	r7
 8019574:	3001      	adds	r0, #1
 8019576:	d1c2      	bne.n	80194fe <_printf_float+0x2f2>
 8019578:	e6a3      	b.n	80192c2 <_printf_float+0xb6>
 801957a:	2301      	movs	r3, #1
 801957c:	4631      	mov	r1, r6
 801957e:	4628      	mov	r0, r5
 8019580:	9206      	str	r2, [sp, #24]
 8019582:	47b8      	blx	r7
 8019584:	3001      	adds	r0, #1
 8019586:	f43f ae9c 	beq.w	80192c2 <_printf_float+0xb6>
 801958a:	9a06      	ldr	r2, [sp, #24]
 801958c:	f10b 0b01 	add.w	fp, fp, #1
 8019590:	e7bb      	b.n	801950a <_printf_float+0x2fe>
 8019592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019596:	4631      	mov	r1, r6
 8019598:	4628      	mov	r0, r5
 801959a:	47b8      	blx	r7
 801959c:	3001      	adds	r0, #1
 801959e:	d1c0      	bne.n	8019522 <_printf_float+0x316>
 80195a0:	e68f      	b.n	80192c2 <_printf_float+0xb6>
 80195a2:	9a06      	ldr	r2, [sp, #24]
 80195a4:	464b      	mov	r3, r9
 80195a6:	4442      	add	r2, r8
 80195a8:	4631      	mov	r1, r6
 80195aa:	4628      	mov	r0, r5
 80195ac:	47b8      	blx	r7
 80195ae:	3001      	adds	r0, #1
 80195b0:	d1c3      	bne.n	801953a <_printf_float+0x32e>
 80195b2:	e686      	b.n	80192c2 <_printf_float+0xb6>
 80195b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80195b8:	f1ba 0f01 	cmp.w	sl, #1
 80195bc:	dc01      	bgt.n	80195c2 <_printf_float+0x3b6>
 80195be:	07db      	lsls	r3, r3, #31
 80195c0:	d536      	bpl.n	8019630 <_printf_float+0x424>
 80195c2:	2301      	movs	r3, #1
 80195c4:	4642      	mov	r2, r8
 80195c6:	4631      	mov	r1, r6
 80195c8:	4628      	mov	r0, r5
 80195ca:	47b8      	blx	r7
 80195cc:	3001      	adds	r0, #1
 80195ce:	f43f ae78 	beq.w	80192c2 <_printf_float+0xb6>
 80195d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80195d6:	4631      	mov	r1, r6
 80195d8:	4628      	mov	r0, r5
 80195da:	47b8      	blx	r7
 80195dc:	3001      	adds	r0, #1
 80195de:	f43f ae70 	beq.w	80192c2 <_printf_float+0xb6>
 80195e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80195e6:	2200      	movs	r2, #0
 80195e8:	2300      	movs	r3, #0
 80195ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80195ee:	f7e7 fa6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80195f2:	b9c0      	cbnz	r0, 8019626 <_printf_float+0x41a>
 80195f4:	4653      	mov	r3, sl
 80195f6:	f108 0201 	add.w	r2, r8, #1
 80195fa:	4631      	mov	r1, r6
 80195fc:	4628      	mov	r0, r5
 80195fe:	47b8      	blx	r7
 8019600:	3001      	adds	r0, #1
 8019602:	d10c      	bne.n	801961e <_printf_float+0x412>
 8019604:	e65d      	b.n	80192c2 <_printf_float+0xb6>
 8019606:	2301      	movs	r3, #1
 8019608:	465a      	mov	r2, fp
 801960a:	4631      	mov	r1, r6
 801960c:	4628      	mov	r0, r5
 801960e:	47b8      	blx	r7
 8019610:	3001      	adds	r0, #1
 8019612:	f43f ae56 	beq.w	80192c2 <_printf_float+0xb6>
 8019616:	f108 0801 	add.w	r8, r8, #1
 801961a:	45d0      	cmp	r8, sl
 801961c:	dbf3      	blt.n	8019606 <_printf_float+0x3fa>
 801961e:	464b      	mov	r3, r9
 8019620:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8019624:	e6df      	b.n	80193e6 <_printf_float+0x1da>
 8019626:	f04f 0800 	mov.w	r8, #0
 801962a:	f104 0b1a 	add.w	fp, r4, #26
 801962e:	e7f4      	b.n	801961a <_printf_float+0x40e>
 8019630:	2301      	movs	r3, #1
 8019632:	4642      	mov	r2, r8
 8019634:	e7e1      	b.n	80195fa <_printf_float+0x3ee>
 8019636:	2301      	movs	r3, #1
 8019638:	464a      	mov	r2, r9
 801963a:	4631      	mov	r1, r6
 801963c:	4628      	mov	r0, r5
 801963e:	47b8      	blx	r7
 8019640:	3001      	adds	r0, #1
 8019642:	f43f ae3e 	beq.w	80192c2 <_printf_float+0xb6>
 8019646:	f108 0801 	add.w	r8, r8, #1
 801964a:	68e3      	ldr	r3, [r4, #12]
 801964c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801964e:	1a5b      	subs	r3, r3, r1
 8019650:	4543      	cmp	r3, r8
 8019652:	dcf0      	bgt.n	8019636 <_printf_float+0x42a>
 8019654:	e6fc      	b.n	8019450 <_printf_float+0x244>
 8019656:	f04f 0800 	mov.w	r8, #0
 801965a:	f104 0919 	add.w	r9, r4, #25
 801965e:	e7f4      	b.n	801964a <_printf_float+0x43e>

08019660 <__sfputc_r>:
 8019660:	6893      	ldr	r3, [r2, #8]
 8019662:	3b01      	subs	r3, #1
 8019664:	2b00      	cmp	r3, #0
 8019666:	b410      	push	{r4}
 8019668:	6093      	str	r3, [r2, #8]
 801966a:	da08      	bge.n	801967e <__sfputc_r+0x1e>
 801966c:	6994      	ldr	r4, [r2, #24]
 801966e:	42a3      	cmp	r3, r4
 8019670:	db01      	blt.n	8019676 <__sfputc_r+0x16>
 8019672:	290a      	cmp	r1, #10
 8019674:	d103      	bne.n	801967e <__sfputc_r+0x1e>
 8019676:	f85d 4b04 	ldr.w	r4, [sp], #4
 801967a:	f000 bea4 	b.w	801a3c6 <__swbuf_r>
 801967e:	6813      	ldr	r3, [r2, #0]
 8019680:	1c58      	adds	r0, r3, #1
 8019682:	6010      	str	r0, [r2, #0]
 8019684:	7019      	strb	r1, [r3, #0]
 8019686:	4608      	mov	r0, r1
 8019688:	f85d 4b04 	ldr.w	r4, [sp], #4
 801968c:	4770      	bx	lr

0801968e <__sfputs_r>:
 801968e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019690:	4606      	mov	r6, r0
 8019692:	460f      	mov	r7, r1
 8019694:	4614      	mov	r4, r2
 8019696:	18d5      	adds	r5, r2, r3
 8019698:	42ac      	cmp	r4, r5
 801969a:	d101      	bne.n	80196a0 <__sfputs_r+0x12>
 801969c:	2000      	movs	r0, #0
 801969e:	e007      	b.n	80196b0 <__sfputs_r+0x22>
 80196a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80196a4:	463a      	mov	r2, r7
 80196a6:	4630      	mov	r0, r6
 80196a8:	f7ff ffda 	bl	8019660 <__sfputc_r>
 80196ac:	1c43      	adds	r3, r0, #1
 80196ae:	d1f3      	bne.n	8019698 <__sfputs_r+0xa>
 80196b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080196b4 <_vfiprintf_r>:
 80196b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196b8:	460d      	mov	r5, r1
 80196ba:	b09d      	sub	sp, #116	@ 0x74
 80196bc:	4614      	mov	r4, r2
 80196be:	4698      	mov	r8, r3
 80196c0:	4606      	mov	r6, r0
 80196c2:	b118      	cbz	r0, 80196cc <_vfiprintf_r+0x18>
 80196c4:	6a03      	ldr	r3, [r0, #32]
 80196c6:	b90b      	cbnz	r3, 80196cc <_vfiprintf_r+0x18>
 80196c8:	f000 fd3c 	bl	801a144 <__sinit>
 80196cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80196ce:	07d9      	lsls	r1, r3, #31
 80196d0:	d405      	bmi.n	80196de <_vfiprintf_r+0x2a>
 80196d2:	89ab      	ldrh	r3, [r5, #12]
 80196d4:	059a      	lsls	r2, r3, #22
 80196d6:	d402      	bmi.n	80196de <_vfiprintf_r+0x2a>
 80196d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80196da:	f000 fffe 	bl	801a6da <__retarget_lock_acquire_recursive>
 80196de:	89ab      	ldrh	r3, [r5, #12]
 80196e0:	071b      	lsls	r3, r3, #28
 80196e2:	d501      	bpl.n	80196e8 <_vfiprintf_r+0x34>
 80196e4:	692b      	ldr	r3, [r5, #16]
 80196e6:	b99b      	cbnz	r3, 8019710 <_vfiprintf_r+0x5c>
 80196e8:	4629      	mov	r1, r5
 80196ea:	4630      	mov	r0, r6
 80196ec:	f000 feaa 	bl	801a444 <__swsetup_r>
 80196f0:	b170      	cbz	r0, 8019710 <_vfiprintf_r+0x5c>
 80196f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80196f4:	07dc      	lsls	r4, r3, #31
 80196f6:	d504      	bpl.n	8019702 <_vfiprintf_r+0x4e>
 80196f8:	f04f 30ff 	mov.w	r0, #4294967295
 80196fc:	b01d      	add	sp, #116	@ 0x74
 80196fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019702:	89ab      	ldrh	r3, [r5, #12]
 8019704:	0598      	lsls	r0, r3, #22
 8019706:	d4f7      	bmi.n	80196f8 <_vfiprintf_r+0x44>
 8019708:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801970a:	f000 ffe7 	bl	801a6dc <__retarget_lock_release_recursive>
 801970e:	e7f3      	b.n	80196f8 <_vfiprintf_r+0x44>
 8019710:	2300      	movs	r3, #0
 8019712:	9309      	str	r3, [sp, #36]	@ 0x24
 8019714:	2320      	movs	r3, #32
 8019716:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801971a:	f8cd 800c 	str.w	r8, [sp, #12]
 801971e:	2330      	movs	r3, #48	@ 0x30
 8019720:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80198d0 <_vfiprintf_r+0x21c>
 8019724:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019728:	f04f 0901 	mov.w	r9, #1
 801972c:	4623      	mov	r3, r4
 801972e:	469a      	mov	sl, r3
 8019730:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019734:	b10a      	cbz	r2, 801973a <_vfiprintf_r+0x86>
 8019736:	2a25      	cmp	r2, #37	@ 0x25
 8019738:	d1f9      	bne.n	801972e <_vfiprintf_r+0x7a>
 801973a:	ebba 0b04 	subs.w	fp, sl, r4
 801973e:	d00b      	beq.n	8019758 <_vfiprintf_r+0xa4>
 8019740:	465b      	mov	r3, fp
 8019742:	4622      	mov	r2, r4
 8019744:	4629      	mov	r1, r5
 8019746:	4630      	mov	r0, r6
 8019748:	f7ff ffa1 	bl	801968e <__sfputs_r>
 801974c:	3001      	adds	r0, #1
 801974e:	f000 80a7 	beq.w	80198a0 <_vfiprintf_r+0x1ec>
 8019752:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019754:	445a      	add	r2, fp
 8019756:	9209      	str	r2, [sp, #36]	@ 0x24
 8019758:	f89a 3000 	ldrb.w	r3, [sl]
 801975c:	2b00      	cmp	r3, #0
 801975e:	f000 809f 	beq.w	80198a0 <_vfiprintf_r+0x1ec>
 8019762:	2300      	movs	r3, #0
 8019764:	f04f 32ff 	mov.w	r2, #4294967295
 8019768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801976c:	f10a 0a01 	add.w	sl, sl, #1
 8019770:	9304      	str	r3, [sp, #16]
 8019772:	9307      	str	r3, [sp, #28]
 8019774:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019778:	931a      	str	r3, [sp, #104]	@ 0x68
 801977a:	4654      	mov	r4, sl
 801977c:	2205      	movs	r2, #5
 801977e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019782:	4853      	ldr	r0, [pc, #332]	@ (80198d0 <_vfiprintf_r+0x21c>)
 8019784:	f7e6 fd24 	bl	80001d0 <memchr>
 8019788:	9a04      	ldr	r2, [sp, #16]
 801978a:	b9d8      	cbnz	r0, 80197c4 <_vfiprintf_r+0x110>
 801978c:	06d1      	lsls	r1, r2, #27
 801978e:	bf44      	itt	mi
 8019790:	2320      	movmi	r3, #32
 8019792:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019796:	0713      	lsls	r3, r2, #28
 8019798:	bf44      	itt	mi
 801979a:	232b      	movmi	r3, #43	@ 0x2b
 801979c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80197a0:	f89a 3000 	ldrb.w	r3, [sl]
 80197a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80197a6:	d015      	beq.n	80197d4 <_vfiprintf_r+0x120>
 80197a8:	9a07      	ldr	r2, [sp, #28]
 80197aa:	4654      	mov	r4, sl
 80197ac:	2000      	movs	r0, #0
 80197ae:	f04f 0c0a 	mov.w	ip, #10
 80197b2:	4621      	mov	r1, r4
 80197b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80197b8:	3b30      	subs	r3, #48	@ 0x30
 80197ba:	2b09      	cmp	r3, #9
 80197bc:	d94b      	bls.n	8019856 <_vfiprintf_r+0x1a2>
 80197be:	b1b0      	cbz	r0, 80197ee <_vfiprintf_r+0x13a>
 80197c0:	9207      	str	r2, [sp, #28]
 80197c2:	e014      	b.n	80197ee <_vfiprintf_r+0x13a>
 80197c4:	eba0 0308 	sub.w	r3, r0, r8
 80197c8:	fa09 f303 	lsl.w	r3, r9, r3
 80197cc:	4313      	orrs	r3, r2
 80197ce:	9304      	str	r3, [sp, #16]
 80197d0:	46a2      	mov	sl, r4
 80197d2:	e7d2      	b.n	801977a <_vfiprintf_r+0xc6>
 80197d4:	9b03      	ldr	r3, [sp, #12]
 80197d6:	1d19      	adds	r1, r3, #4
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	9103      	str	r1, [sp, #12]
 80197dc:	2b00      	cmp	r3, #0
 80197de:	bfbb      	ittet	lt
 80197e0:	425b      	neglt	r3, r3
 80197e2:	f042 0202 	orrlt.w	r2, r2, #2
 80197e6:	9307      	strge	r3, [sp, #28]
 80197e8:	9307      	strlt	r3, [sp, #28]
 80197ea:	bfb8      	it	lt
 80197ec:	9204      	strlt	r2, [sp, #16]
 80197ee:	7823      	ldrb	r3, [r4, #0]
 80197f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80197f2:	d10a      	bne.n	801980a <_vfiprintf_r+0x156>
 80197f4:	7863      	ldrb	r3, [r4, #1]
 80197f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80197f8:	d132      	bne.n	8019860 <_vfiprintf_r+0x1ac>
 80197fa:	9b03      	ldr	r3, [sp, #12]
 80197fc:	1d1a      	adds	r2, r3, #4
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	9203      	str	r2, [sp, #12]
 8019802:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019806:	3402      	adds	r4, #2
 8019808:	9305      	str	r3, [sp, #20]
 801980a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80198e0 <_vfiprintf_r+0x22c>
 801980e:	7821      	ldrb	r1, [r4, #0]
 8019810:	2203      	movs	r2, #3
 8019812:	4650      	mov	r0, sl
 8019814:	f7e6 fcdc 	bl	80001d0 <memchr>
 8019818:	b138      	cbz	r0, 801982a <_vfiprintf_r+0x176>
 801981a:	9b04      	ldr	r3, [sp, #16]
 801981c:	eba0 000a 	sub.w	r0, r0, sl
 8019820:	2240      	movs	r2, #64	@ 0x40
 8019822:	4082      	lsls	r2, r0
 8019824:	4313      	orrs	r3, r2
 8019826:	3401      	adds	r4, #1
 8019828:	9304      	str	r3, [sp, #16]
 801982a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801982e:	4829      	ldr	r0, [pc, #164]	@ (80198d4 <_vfiprintf_r+0x220>)
 8019830:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019834:	2206      	movs	r2, #6
 8019836:	f7e6 fccb 	bl	80001d0 <memchr>
 801983a:	2800      	cmp	r0, #0
 801983c:	d03f      	beq.n	80198be <_vfiprintf_r+0x20a>
 801983e:	4b26      	ldr	r3, [pc, #152]	@ (80198d8 <_vfiprintf_r+0x224>)
 8019840:	bb1b      	cbnz	r3, 801988a <_vfiprintf_r+0x1d6>
 8019842:	9b03      	ldr	r3, [sp, #12]
 8019844:	3307      	adds	r3, #7
 8019846:	f023 0307 	bic.w	r3, r3, #7
 801984a:	3308      	adds	r3, #8
 801984c:	9303      	str	r3, [sp, #12]
 801984e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019850:	443b      	add	r3, r7
 8019852:	9309      	str	r3, [sp, #36]	@ 0x24
 8019854:	e76a      	b.n	801972c <_vfiprintf_r+0x78>
 8019856:	fb0c 3202 	mla	r2, ip, r2, r3
 801985a:	460c      	mov	r4, r1
 801985c:	2001      	movs	r0, #1
 801985e:	e7a8      	b.n	80197b2 <_vfiprintf_r+0xfe>
 8019860:	2300      	movs	r3, #0
 8019862:	3401      	adds	r4, #1
 8019864:	9305      	str	r3, [sp, #20]
 8019866:	4619      	mov	r1, r3
 8019868:	f04f 0c0a 	mov.w	ip, #10
 801986c:	4620      	mov	r0, r4
 801986e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019872:	3a30      	subs	r2, #48	@ 0x30
 8019874:	2a09      	cmp	r2, #9
 8019876:	d903      	bls.n	8019880 <_vfiprintf_r+0x1cc>
 8019878:	2b00      	cmp	r3, #0
 801987a:	d0c6      	beq.n	801980a <_vfiprintf_r+0x156>
 801987c:	9105      	str	r1, [sp, #20]
 801987e:	e7c4      	b.n	801980a <_vfiprintf_r+0x156>
 8019880:	fb0c 2101 	mla	r1, ip, r1, r2
 8019884:	4604      	mov	r4, r0
 8019886:	2301      	movs	r3, #1
 8019888:	e7f0      	b.n	801986c <_vfiprintf_r+0x1b8>
 801988a:	ab03      	add	r3, sp, #12
 801988c:	9300      	str	r3, [sp, #0]
 801988e:	462a      	mov	r2, r5
 8019890:	4b12      	ldr	r3, [pc, #72]	@ (80198dc <_vfiprintf_r+0x228>)
 8019892:	a904      	add	r1, sp, #16
 8019894:	4630      	mov	r0, r6
 8019896:	f7ff fcb9 	bl	801920c <_printf_float>
 801989a:	4607      	mov	r7, r0
 801989c:	1c78      	adds	r0, r7, #1
 801989e:	d1d6      	bne.n	801984e <_vfiprintf_r+0x19a>
 80198a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80198a2:	07d9      	lsls	r1, r3, #31
 80198a4:	d405      	bmi.n	80198b2 <_vfiprintf_r+0x1fe>
 80198a6:	89ab      	ldrh	r3, [r5, #12]
 80198a8:	059a      	lsls	r2, r3, #22
 80198aa:	d402      	bmi.n	80198b2 <_vfiprintf_r+0x1fe>
 80198ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80198ae:	f000 ff15 	bl	801a6dc <__retarget_lock_release_recursive>
 80198b2:	89ab      	ldrh	r3, [r5, #12]
 80198b4:	065b      	lsls	r3, r3, #25
 80198b6:	f53f af1f 	bmi.w	80196f8 <_vfiprintf_r+0x44>
 80198ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80198bc:	e71e      	b.n	80196fc <_vfiprintf_r+0x48>
 80198be:	ab03      	add	r3, sp, #12
 80198c0:	9300      	str	r3, [sp, #0]
 80198c2:	462a      	mov	r2, r5
 80198c4:	4b05      	ldr	r3, [pc, #20]	@ (80198dc <_vfiprintf_r+0x228>)
 80198c6:	a904      	add	r1, sp, #16
 80198c8:	4630      	mov	r0, r6
 80198ca:	f000 f883 	bl	80199d4 <_printf_i>
 80198ce:	e7e4      	b.n	801989a <_vfiprintf_r+0x1e6>
 80198d0:	08020290 	.word	0x08020290
 80198d4:	0802029a 	.word	0x0802029a
 80198d8:	0801920d 	.word	0x0801920d
 80198dc:	0801968f 	.word	0x0801968f
 80198e0:	08020296 	.word	0x08020296

080198e4 <vfiprintf>:
 80198e4:	4613      	mov	r3, r2
 80198e6:	460a      	mov	r2, r1
 80198e8:	4601      	mov	r1, r0
 80198ea:	4802      	ldr	r0, [pc, #8]	@ (80198f4 <vfiprintf+0x10>)
 80198ec:	6800      	ldr	r0, [r0, #0]
 80198ee:	f7ff bee1 	b.w	80196b4 <_vfiprintf_r>
 80198f2:	bf00      	nop
 80198f4:	20000160 	.word	0x20000160

080198f8 <_printf_common>:
 80198f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198fc:	4616      	mov	r6, r2
 80198fe:	4698      	mov	r8, r3
 8019900:	688a      	ldr	r2, [r1, #8]
 8019902:	690b      	ldr	r3, [r1, #16]
 8019904:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019908:	4293      	cmp	r3, r2
 801990a:	bfb8      	it	lt
 801990c:	4613      	movlt	r3, r2
 801990e:	6033      	str	r3, [r6, #0]
 8019910:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019914:	4607      	mov	r7, r0
 8019916:	460c      	mov	r4, r1
 8019918:	b10a      	cbz	r2, 801991e <_printf_common+0x26>
 801991a:	3301      	adds	r3, #1
 801991c:	6033      	str	r3, [r6, #0]
 801991e:	6823      	ldr	r3, [r4, #0]
 8019920:	0699      	lsls	r1, r3, #26
 8019922:	bf42      	ittt	mi
 8019924:	6833      	ldrmi	r3, [r6, #0]
 8019926:	3302      	addmi	r3, #2
 8019928:	6033      	strmi	r3, [r6, #0]
 801992a:	6825      	ldr	r5, [r4, #0]
 801992c:	f015 0506 	ands.w	r5, r5, #6
 8019930:	d106      	bne.n	8019940 <_printf_common+0x48>
 8019932:	f104 0a19 	add.w	sl, r4, #25
 8019936:	68e3      	ldr	r3, [r4, #12]
 8019938:	6832      	ldr	r2, [r6, #0]
 801993a:	1a9b      	subs	r3, r3, r2
 801993c:	42ab      	cmp	r3, r5
 801993e:	dc26      	bgt.n	801998e <_printf_common+0x96>
 8019940:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019944:	6822      	ldr	r2, [r4, #0]
 8019946:	3b00      	subs	r3, #0
 8019948:	bf18      	it	ne
 801994a:	2301      	movne	r3, #1
 801994c:	0692      	lsls	r2, r2, #26
 801994e:	d42b      	bmi.n	80199a8 <_printf_common+0xb0>
 8019950:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019954:	4641      	mov	r1, r8
 8019956:	4638      	mov	r0, r7
 8019958:	47c8      	blx	r9
 801995a:	3001      	adds	r0, #1
 801995c:	d01e      	beq.n	801999c <_printf_common+0xa4>
 801995e:	6823      	ldr	r3, [r4, #0]
 8019960:	6922      	ldr	r2, [r4, #16]
 8019962:	f003 0306 	and.w	r3, r3, #6
 8019966:	2b04      	cmp	r3, #4
 8019968:	bf02      	ittt	eq
 801996a:	68e5      	ldreq	r5, [r4, #12]
 801996c:	6833      	ldreq	r3, [r6, #0]
 801996e:	1aed      	subeq	r5, r5, r3
 8019970:	68a3      	ldr	r3, [r4, #8]
 8019972:	bf0c      	ite	eq
 8019974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019978:	2500      	movne	r5, #0
 801997a:	4293      	cmp	r3, r2
 801997c:	bfc4      	itt	gt
 801997e:	1a9b      	subgt	r3, r3, r2
 8019980:	18ed      	addgt	r5, r5, r3
 8019982:	2600      	movs	r6, #0
 8019984:	341a      	adds	r4, #26
 8019986:	42b5      	cmp	r5, r6
 8019988:	d11a      	bne.n	80199c0 <_printf_common+0xc8>
 801998a:	2000      	movs	r0, #0
 801998c:	e008      	b.n	80199a0 <_printf_common+0xa8>
 801998e:	2301      	movs	r3, #1
 8019990:	4652      	mov	r2, sl
 8019992:	4641      	mov	r1, r8
 8019994:	4638      	mov	r0, r7
 8019996:	47c8      	blx	r9
 8019998:	3001      	adds	r0, #1
 801999a:	d103      	bne.n	80199a4 <_printf_common+0xac>
 801999c:	f04f 30ff 	mov.w	r0, #4294967295
 80199a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199a4:	3501      	adds	r5, #1
 80199a6:	e7c6      	b.n	8019936 <_printf_common+0x3e>
 80199a8:	18e1      	adds	r1, r4, r3
 80199aa:	1c5a      	adds	r2, r3, #1
 80199ac:	2030      	movs	r0, #48	@ 0x30
 80199ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80199b2:	4422      	add	r2, r4
 80199b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80199b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80199bc:	3302      	adds	r3, #2
 80199be:	e7c7      	b.n	8019950 <_printf_common+0x58>
 80199c0:	2301      	movs	r3, #1
 80199c2:	4622      	mov	r2, r4
 80199c4:	4641      	mov	r1, r8
 80199c6:	4638      	mov	r0, r7
 80199c8:	47c8      	blx	r9
 80199ca:	3001      	adds	r0, #1
 80199cc:	d0e6      	beq.n	801999c <_printf_common+0xa4>
 80199ce:	3601      	adds	r6, #1
 80199d0:	e7d9      	b.n	8019986 <_printf_common+0x8e>
	...

080199d4 <_printf_i>:
 80199d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80199d8:	7e0f      	ldrb	r7, [r1, #24]
 80199da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80199dc:	2f78      	cmp	r7, #120	@ 0x78
 80199de:	4691      	mov	r9, r2
 80199e0:	4680      	mov	r8, r0
 80199e2:	460c      	mov	r4, r1
 80199e4:	469a      	mov	sl, r3
 80199e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80199ea:	d807      	bhi.n	80199fc <_printf_i+0x28>
 80199ec:	2f62      	cmp	r7, #98	@ 0x62
 80199ee:	d80a      	bhi.n	8019a06 <_printf_i+0x32>
 80199f0:	2f00      	cmp	r7, #0
 80199f2:	f000 80d1 	beq.w	8019b98 <_printf_i+0x1c4>
 80199f6:	2f58      	cmp	r7, #88	@ 0x58
 80199f8:	f000 80b8 	beq.w	8019b6c <_printf_i+0x198>
 80199fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019a00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019a04:	e03a      	b.n	8019a7c <_printf_i+0xa8>
 8019a06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019a0a:	2b15      	cmp	r3, #21
 8019a0c:	d8f6      	bhi.n	80199fc <_printf_i+0x28>
 8019a0e:	a101      	add	r1, pc, #4	@ (adr r1, 8019a14 <_printf_i+0x40>)
 8019a10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019a14:	08019a6d 	.word	0x08019a6d
 8019a18:	08019a81 	.word	0x08019a81
 8019a1c:	080199fd 	.word	0x080199fd
 8019a20:	080199fd 	.word	0x080199fd
 8019a24:	080199fd 	.word	0x080199fd
 8019a28:	080199fd 	.word	0x080199fd
 8019a2c:	08019a81 	.word	0x08019a81
 8019a30:	080199fd 	.word	0x080199fd
 8019a34:	080199fd 	.word	0x080199fd
 8019a38:	080199fd 	.word	0x080199fd
 8019a3c:	080199fd 	.word	0x080199fd
 8019a40:	08019b7f 	.word	0x08019b7f
 8019a44:	08019aab 	.word	0x08019aab
 8019a48:	08019b39 	.word	0x08019b39
 8019a4c:	080199fd 	.word	0x080199fd
 8019a50:	080199fd 	.word	0x080199fd
 8019a54:	08019ba1 	.word	0x08019ba1
 8019a58:	080199fd 	.word	0x080199fd
 8019a5c:	08019aab 	.word	0x08019aab
 8019a60:	080199fd 	.word	0x080199fd
 8019a64:	080199fd 	.word	0x080199fd
 8019a68:	08019b41 	.word	0x08019b41
 8019a6c:	6833      	ldr	r3, [r6, #0]
 8019a6e:	1d1a      	adds	r2, r3, #4
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	6032      	str	r2, [r6, #0]
 8019a74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019a78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019a7c:	2301      	movs	r3, #1
 8019a7e:	e09c      	b.n	8019bba <_printf_i+0x1e6>
 8019a80:	6833      	ldr	r3, [r6, #0]
 8019a82:	6820      	ldr	r0, [r4, #0]
 8019a84:	1d19      	adds	r1, r3, #4
 8019a86:	6031      	str	r1, [r6, #0]
 8019a88:	0606      	lsls	r6, r0, #24
 8019a8a:	d501      	bpl.n	8019a90 <_printf_i+0xbc>
 8019a8c:	681d      	ldr	r5, [r3, #0]
 8019a8e:	e003      	b.n	8019a98 <_printf_i+0xc4>
 8019a90:	0645      	lsls	r5, r0, #25
 8019a92:	d5fb      	bpl.n	8019a8c <_printf_i+0xb8>
 8019a94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019a98:	2d00      	cmp	r5, #0
 8019a9a:	da03      	bge.n	8019aa4 <_printf_i+0xd0>
 8019a9c:	232d      	movs	r3, #45	@ 0x2d
 8019a9e:	426d      	negs	r5, r5
 8019aa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019aa4:	4858      	ldr	r0, [pc, #352]	@ (8019c08 <_printf_i+0x234>)
 8019aa6:	230a      	movs	r3, #10
 8019aa8:	e011      	b.n	8019ace <_printf_i+0xfa>
 8019aaa:	6821      	ldr	r1, [r4, #0]
 8019aac:	6833      	ldr	r3, [r6, #0]
 8019aae:	0608      	lsls	r0, r1, #24
 8019ab0:	f853 5b04 	ldr.w	r5, [r3], #4
 8019ab4:	d402      	bmi.n	8019abc <_printf_i+0xe8>
 8019ab6:	0649      	lsls	r1, r1, #25
 8019ab8:	bf48      	it	mi
 8019aba:	b2ad      	uxthmi	r5, r5
 8019abc:	2f6f      	cmp	r7, #111	@ 0x6f
 8019abe:	4852      	ldr	r0, [pc, #328]	@ (8019c08 <_printf_i+0x234>)
 8019ac0:	6033      	str	r3, [r6, #0]
 8019ac2:	bf14      	ite	ne
 8019ac4:	230a      	movne	r3, #10
 8019ac6:	2308      	moveq	r3, #8
 8019ac8:	2100      	movs	r1, #0
 8019aca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019ace:	6866      	ldr	r6, [r4, #4]
 8019ad0:	60a6      	str	r6, [r4, #8]
 8019ad2:	2e00      	cmp	r6, #0
 8019ad4:	db05      	blt.n	8019ae2 <_printf_i+0x10e>
 8019ad6:	6821      	ldr	r1, [r4, #0]
 8019ad8:	432e      	orrs	r6, r5
 8019ada:	f021 0104 	bic.w	r1, r1, #4
 8019ade:	6021      	str	r1, [r4, #0]
 8019ae0:	d04b      	beq.n	8019b7a <_printf_i+0x1a6>
 8019ae2:	4616      	mov	r6, r2
 8019ae4:	fbb5 f1f3 	udiv	r1, r5, r3
 8019ae8:	fb03 5711 	mls	r7, r3, r1, r5
 8019aec:	5dc7      	ldrb	r7, [r0, r7]
 8019aee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019af2:	462f      	mov	r7, r5
 8019af4:	42bb      	cmp	r3, r7
 8019af6:	460d      	mov	r5, r1
 8019af8:	d9f4      	bls.n	8019ae4 <_printf_i+0x110>
 8019afa:	2b08      	cmp	r3, #8
 8019afc:	d10b      	bne.n	8019b16 <_printf_i+0x142>
 8019afe:	6823      	ldr	r3, [r4, #0]
 8019b00:	07df      	lsls	r7, r3, #31
 8019b02:	d508      	bpl.n	8019b16 <_printf_i+0x142>
 8019b04:	6923      	ldr	r3, [r4, #16]
 8019b06:	6861      	ldr	r1, [r4, #4]
 8019b08:	4299      	cmp	r1, r3
 8019b0a:	bfde      	ittt	le
 8019b0c:	2330      	movle	r3, #48	@ 0x30
 8019b0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019b12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019b16:	1b92      	subs	r2, r2, r6
 8019b18:	6122      	str	r2, [r4, #16]
 8019b1a:	f8cd a000 	str.w	sl, [sp]
 8019b1e:	464b      	mov	r3, r9
 8019b20:	aa03      	add	r2, sp, #12
 8019b22:	4621      	mov	r1, r4
 8019b24:	4640      	mov	r0, r8
 8019b26:	f7ff fee7 	bl	80198f8 <_printf_common>
 8019b2a:	3001      	adds	r0, #1
 8019b2c:	d14a      	bne.n	8019bc4 <_printf_i+0x1f0>
 8019b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8019b32:	b004      	add	sp, #16
 8019b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b38:	6823      	ldr	r3, [r4, #0]
 8019b3a:	f043 0320 	orr.w	r3, r3, #32
 8019b3e:	6023      	str	r3, [r4, #0]
 8019b40:	4832      	ldr	r0, [pc, #200]	@ (8019c0c <_printf_i+0x238>)
 8019b42:	2778      	movs	r7, #120	@ 0x78
 8019b44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019b48:	6823      	ldr	r3, [r4, #0]
 8019b4a:	6831      	ldr	r1, [r6, #0]
 8019b4c:	061f      	lsls	r7, r3, #24
 8019b4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8019b52:	d402      	bmi.n	8019b5a <_printf_i+0x186>
 8019b54:	065f      	lsls	r7, r3, #25
 8019b56:	bf48      	it	mi
 8019b58:	b2ad      	uxthmi	r5, r5
 8019b5a:	6031      	str	r1, [r6, #0]
 8019b5c:	07d9      	lsls	r1, r3, #31
 8019b5e:	bf44      	itt	mi
 8019b60:	f043 0320 	orrmi.w	r3, r3, #32
 8019b64:	6023      	strmi	r3, [r4, #0]
 8019b66:	b11d      	cbz	r5, 8019b70 <_printf_i+0x19c>
 8019b68:	2310      	movs	r3, #16
 8019b6a:	e7ad      	b.n	8019ac8 <_printf_i+0xf4>
 8019b6c:	4826      	ldr	r0, [pc, #152]	@ (8019c08 <_printf_i+0x234>)
 8019b6e:	e7e9      	b.n	8019b44 <_printf_i+0x170>
 8019b70:	6823      	ldr	r3, [r4, #0]
 8019b72:	f023 0320 	bic.w	r3, r3, #32
 8019b76:	6023      	str	r3, [r4, #0]
 8019b78:	e7f6      	b.n	8019b68 <_printf_i+0x194>
 8019b7a:	4616      	mov	r6, r2
 8019b7c:	e7bd      	b.n	8019afa <_printf_i+0x126>
 8019b7e:	6833      	ldr	r3, [r6, #0]
 8019b80:	6825      	ldr	r5, [r4, #0]
 8019b82:	6961      	ldr	r1, [r4, #20]
 8019b84:	1d18      	adds	r0, r3, #4
 8019b86:	6030      	str	r0, [r6, #0]
 8019b88:	062e      	lsls	r6, r5, #24
 8019b8a:	681b      	ldr	r3, [r3, #0]
 8019b8c:	d501      	bpl.n	8019b92 <_printf_i+0x1be>
 8019b8e:	6019      	str	r1, [r3, #0]
 8019b90:	e002      	b.n	8019b98 <_printf_i+0x1c4>
 8019b92:	0668      	lsls	r0, r5, #25
 8019b94:	d5fb      	bpl.n	8019b8e <_printf_i+0x1ba>
 8019b96:	8019      	strh	r1, [r3, #0]
 8019b98:	2300      	movs	r3, #0
 8019b9a:	6123      	str	r3, [r4, #16]
 8019b9c:	4616      	mov	r6, r2
 8019b9e:	e7bc      	b.n	8019b1a <_printf_i+0x146>
 8019ba0:	6833      	ldr	r3, [r6, #0]
 8019ba2:	1d1a      	adds	r2, r3, #4
 8019ba4:	6032      	str	r2, [r6, #0]
 8019ba6:	681e      	ldr	r6, [r3, #0]
 8019ba8:	6862      	ldr	r2, [r4, #4]
 8019baa:	2100      	movs	r1, #0
 8019bac:	4630      	mov	r0, r6
 8019bae:	f7e6 fb0f 	bl	80001d0 <memchr>
 8019bb2:	b108      	cbz	r0, 8019bb8 <_printf_i+0x1e4>
 8019bb4:	1b80      	subs	r0, r0, r6
 8019bb6:	6060      	str	r0, [r4, #4]
 8019bb8:	6863      	ldr	r3, [r4, #4]
 8019bba:	6123      	str	r3, [r4, #16]
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019bc2:	e7aa      	b.n	8019b1a <_printf_i+0x146>
 8019bc4:	6923      	ldr	r3, [r4, #16]
 8019bc6:	4632      	mov	r2, r6
 8019bc8:	4649      	mov	r1, r9
 8019bca:	4640      	mov	r0, r8
 8019bcc:	47d0      	blx	sl
 8019bce:	3001      	adds	r0, #1
 8019bd0:	d0ad      	beq.n	8019b2e <_printf_i+0x15a>
 8019bd2:	6823      	ldr	r3, [r4, #0]
 8019bd4:	079b      	lsls	r3, r3, #30
 8019bd6:	d413      	bmi.n	8019c00 <_printf_i+0x22c>
 8019bd8:	68e0      	ldr	r0, [r4, #12]
 8019bda:	9b03      	ldr	r3, [sp, #12]
 8019bdc:	4298      	cmp	r0, r3
 8019bde:	bfb8      	it	lt
 8019be0:	4618      	movlt	r0, r3
 8019be2:	e7a6      	b.n	8019b32 <_printf_i+0x15e>
 8019be4:	2301      	movs	r3, #1
 8019be6:	4632      	mov	r2, r6
 8019be8:	4649      	mov	r1, r9
 8019bea:	4640      	mov	r0, r8
 8019bec:	47d0      	blx	sl
 8019bee:	3001      	adds	r0, #1
 8019bf0:	d09d      	beq.n	8019b2e <_printf_i+0x15a>
 8019bf2:	3501      	adds	r5, #1
 8019bf4:	68e3      	ldr	r3, [r4, #12]
 8019bf6:	9903      	ldr	r1, [sp, #12]
 8019bf8:	1a5b      	subs	r3, r3, r1
 8019bfa:	42ab      	cmp	r3, r5
 8019bfc:	dcf2      	bgt.n	8019be4 <_printf_i+0x210>
 8019bfe:	e7eb      	b.n	8019bd8 <_printf_i+0x204>
 8019c00:	2500      	movs	r5, #0
 8019c02:	f104 0619 	add.w	r6, r4, #25
 8019c06:	e7f5      	b.n	8019bf4 <_printf_i+0x220>
 8019c08:	080202a1 	.word	0x080202a1
 8019c0c:	080202b2 	.word	0x080202b2

08019c10 <_scanf_float>:
 8019c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c14:	b087      	sub	sp, #28
 8019c16:	4691      	mov	r9, r2
 8019c18:	9303      	str	r3, [sp, #12]
 8019c1a:	688b      	ldr	r3, [r1, #8]
 8019c1c:	1e5a      	subs	r2, r3, #1
 8019c1e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8019c22:	bf81      	itttt	hi
 8019c24:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8019c28:	eb03 0b05 	addhi.w	fp, r3, r5
 8019c2c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8019c30:	608b      	strhi	r3, [r1, #8]
 8019c32:	680b      	ldr	r3, [r1, #0]
 8019c34:	460a      	mov	r2, r1
 8019c36:	f04f 0500 	mov.w	r5, #0
 8019c3a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8019c3e:	f842 3b1c 	str.w	r3, [r2], #28
 8019c42:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019c46:	4680      	mov	r8, r0
 8019c48:	460c      	mov	r4, r1
 8019c4a:	bf98      	it	ls
 8019c4c:	f04f 0b00 	movls.w	fp, #0
 8019c50:	9201      	str	r2, [sp, #4]
 8019c52:	4616      	mov	r6, r2
 8019c54:	46aa      	mov	sl, r5
 8019c56:	462f      	mov	r7, r5
 8019c58:	9502      	str	r5, [sp, #8]
 8019c5a:	68a2      	ldr	r2, [r4, #8]
 8019c5c:	b15a      	cbz	r2, 8019c76 <_scanf_float+0x66>
 8019c5e:	f8d9 3000 	ldr.w	r3, [r9]
 8019c62:	781b      	ldrb	r3, [r3, #0]
 8019c64:	2b4e      	cmp	r3, #78	@ 0x4e
 8019c66:	d863      	bhi.n	8019d30 <_scanf_float+0x120>
 8019c68:	2b40      	cmp	r3, #64	@ 0x40
 8019c6a:	d83b      	bhi.n	8019ce4 <_scanf_float+0xd4>
 8019c6c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8019c70:	b2c8      	uxtb	r0, r1
 8019c72:	280e      	cmp	r0, #14
 8019c74:	d939      	bls.n	8019cea <_scanf_float+0xda>
 8019c76:	b11f      	cbz	r7, 8019c80 <_scanf_float+0x70>
 8019c78:	6823      	ldr	r3, [r4, #0]
 8019c7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019c7e:	6023      	str	r3, [r4, #0]
 8019c80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019c84:	f1ba 0f01 	cmp.w	sl, #1
 8019c88:	f200 8114 	bhi.w	8019eb4 <_scanf_float+0x2a4>
 8019c8c:	9b01      	ldr	r3, [sp, #4]
 8019c8e:	429e      	cmp	r6, r3
 8019c90:	f200 8105 	bhi.w	8019e9e <_scanf_float+0x28e>
 8019c94:	2001      	movs	r0, #1
 8019c96:	b007      	add	sp, #28
 8019c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c9c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8019ca0:	2a0d      	cmp	r2, #13
 8019ca2:	d8e8      	bhi.n	8019c76 <_scanf_float+0x66>
 8019ca4:	a101      	add	r1, pc, #4	@ (adr r1, 8019cac <_scanf_float+0x9c>)
 8019ca6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019caa:	bf00      	nop
 8019cac:	08019df5 	.word	0x08019df5
 8019cb0:	08019c77 	.word	0x08019c77
 8019cb4:	08019c77 	.word	0x08019c77
 8019cb8:	08019c77 	.word	0x08019c77
 8019cbc:	08019e51 	.word	0x08019e51
 8019cc0:	08019e2b 	.word	0x08019e2b
 8019cc4:	08019c77 	.word	0x08019c77
 8019cc8:	08019c77 	.word	0x08019c77
 8019ccc:	08019e03 	.word	0x08019e03
 8019cd0:	08019c77 	.word	0x08019c77
 8019cd4:	08019c77 	.word	0x08019c77
 8019cd8:	08019c77 	.word	0x08019c77
 8019cdc:	08019c77 	.word	0x08019c77
 8019ce0:	08019dbf 	.word	0x08019dbf
 8019ce4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8019ce8:	e7da      	b.n	8019ca0 <_scanf_float+0x90>
 8019cea:	290e      	cmp	r1, #14
 8019cec:	d8c3      	bhi.n	8019c76 <_scanf_float+0x66>
 8019cee:	a001      	add	r0, pc, #4	@ (adr r0, 8019cf4 <_scanf_float+0xe4>)
 8019cf0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019cf4:	08019daf 	.word	0x08019daf
 8019cf8:	08019c77 	.word	0x08019c77
 8019cfc:	08019daf 	.word	0x08019daf
 8019d00:	08019e3f 	.word	0x08019e3f
 8019d04:	08019c77 	.word	0x08019c77
 8019d08:	08019d51 	.word	0x08019d51
 8019d0c:	08019d95 	.word	0x08019d95
 8019d10:	08019d95 	.word	0x08019d95
 8019d14:	08019d95 	.word	0x08019d95
 8019d18:	08019d95 	.word	0x08019d95
 8019d1c:	08019d95 	.word	0x08019d95
 8019d20:	08019d95 	.word	0x08019d95
 8019d24:	08019d95 	.word	0x08019d95
 8019d28:	08019d95 	.word	0x08019d95
 8019d2c:	08019d95 	.word	0x08019d95
 8019d30:	2b6e      	cmp	r3, #110	@ 0x6e
 8019d32:	d809      	bhi.n	8019d48 <_scanf_float+0x138>
 8019d34:	2b60      	cmp	r3, #96	@ 0x60
 8019d36:	d8b1      	bhi.n	8019c9c <_scanf_float+0x8c>
 8019d38:	2b54      	cmp	r3, #84	@ 0x54
 8019d3a:	d07b      	beq.n	8019e34 <_scanf_float+0x224>
 8019d3c:	2b59      	cmp	r3, #89	@ 0x59
 8019d3e:	d19a      	bne.n	8019c76 <_scanf_float+0x66>
 8019d40:	2d07      	cmp	r5, #7
 8019d42:	d198      	bne.n	8019c76 <_scanf_float+0x66>
 8019d44:	2508      	movs	r5, #8
 8019d46:	e02f      	b.n	8019da8 <_scanf_float+0x198>
 8019d48:	2b74      	cmp	r3, #116	@ 0x74
 8019d4a:	d073      	beq.n	8019e34 <_scanf_float+0x224>
 8019d4c:	2b79      	cmp	r3, #121	@ 0x79
 8019d4e:	e7f6      	b.n	8019d3e <_scanf_float+0x12e>
 8019d50:	6821      	ldr	r1, [r4, #0]
 8019d52:	05c8      	lsls	r0, r1, #23
 8019d54:	d51e      	bpl.n	8019d94 <_scanf_float+0x184>
 8019d56:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8019d5a:	6021      	str	r1, [r4, #0]
 8019d5c:	3701      	adds	r7, #1
 8019d5e:	f1bb 0f00 	cmp.w	fp, #0
 8019d62:	d003      	beq.n	8019d6c <_scanf_float+0x15c>
 8019d64:	3201      	adds	r2, #1
 8019d66:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019d6a:	60a2      	str	r2, [r4, #8]
 8019d6c:	68a3      	ldr	r3, [r4, #8]
 8019d6e:	3b01      	subs	r3, #1
 8019d70:	60a3      	str	r3, [r4, #8]
 8019d72:	6923      	ldr	r3, [r4, #16]
 8019d74:	3301      	adds	r3, #1
 8019d76:	6123      	str	r3, [r4, #16]
 8019d78:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019d7c:	3b01      	subs	r3, #1
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	f8c9 3004 	str.w	r3, [r9, #4]
 8019d84:	f340 8082 	ble.w	8019e8c <_scanf_float+0x27c>
 8019d88:	f8d9 3000 	ldr.w	r3, [r9]
 8019d8c:	3301      	adds	r3, #1
 8019d8e:	f8c9 3000 	str.w	r3, [r9]
 8019d92:	e762      	b.n	8019c5a <_scanf_float+0x4a>
 8019d94:	eb1a 0105 	adds.w	r1, sl, r5
 8019d98:	f47f af6d 	bne.w	8019c76 <_scanf_float+0x66>
 8019d9c:	6822      	ldr	r2, [r4, #0]
 8019d9e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8019da2:	6022      	str	r2, [r4, #0]
 8019da4:	460d      	mov	r5, r1
 8019da6:	468a      	mov	sl, r1
 8019da8:	f806 3b01 	strb.w	r3, [r6], #1
 8019dac:	e7de      	b.n	8019d6c <_scanf_float+0x15c>
 8019dae:	6822      	ldr	r2, [r4, #0]
 8019db0:	0610      	lsls	r0, r2, #24
 8019db2:	f57f af60 	bpl.w	8019c76 <_scanf_float+0x66>
 8019db6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8019dba:	6022      	str	r2, [r4, #0]
 8019dbc:	e7f4      	b.n	8019da8 <_scanf_float+0x198>
 8019dbe:	f1ba 0f00 	cmp.w	sl, #0
 8019dc2:	d10c      	bne.n	8019dde <_scanf_float+0x1ce>
 8019dc4:	b977      	cbnz	r7, 8019de4 <_scanf_float+0x1d4>
 8019dc6:	6822      	ldr	r2, [r4, #0]
 8019dc8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8019dcc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8019dd0:	d108      	bne.n	8019de4 <_scanf_float+0x1d4>
 8019dd2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8019dd6:	6022      	str	r2, [r4, #0]
 8019dd8:	f04f 0a01 	mov.w	sl, #1
 8019ddc:	e7e4      	b.n	8019da8 <_scanf_float+0x198>
 8019dde:	f1ba 0f02 	cmp.w	sl, #2
 8019de2:	d050      	beq.n	8019e86 <_scanf_float+0x276>
 8019de4:	2d01      	cmp	r5, #1
 8019de6:	d002      	beq.n	8019dee <_scanf_float+0x1de>
 8019de8:	2d04      	cmp	r5, #4
 8019dea:	f47f af44 	bne.w	8019c76 <_scanf_float+0x66>
 8019dee:	3501      	adds	r5, #1
 8019df0:	b2ed      	uxtb	r5, r5
 8019df2:	e7d9      	b.n	8019da8 <_scanf_float+0x198>
 8019df4:	f1ba 0f01 	cmp.w	sl, #1
 8019df8:	f47f af3d 	bne.w	8019c76 <_scanf_float+0x66>
 8019dfc:	f04f 0a02 	mov.w	sl, #2
 8019e00:	e7d2      	b.n	8019da8 <_scanf_float+0x198>
 8019e02:	b975      	cbnz	r5, 8019e22 <_scanf_float+0x212>
 8019e04:	2f00      	cmp	r7, #0
 8019e06:	f47f af37 	bne.w	8019c78 <_scanf_float+0x68>
 8019e0a:	6822      	ldr	r2, [r4, #0]
 8019e0c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8019e10:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8019e14:	f040 8103 	bne.w	801a01e <_scanf_float+0x40e>
 8019e18:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8019e1c:	6022      	str	r2, [r4, #0]
 8019e1e:	2501      	movs	r5, #1
 8019e20:	e7c2      	b.n	8019da8 <_scanf_float+0x198>
 8019e22:	2d03      	cmp	r5, #3
 8019e24:	d0e3      	beq.n	8019dee <_scanf_float+0x1de>
 8019e26:	2d05      	cmp	r5, #5
 8019e28:	e7df      	b.n	8019dea <_scanf_float+0x1da>
 8019e2a:	2d02      	cmp	r5, #2
 8019e2c:	f47f af23 	bne.w	8019c76 <_scanf_float+0x66>
 8019e30:	2503      	movs	r5, #3
 8019e32:	e7b9      	b.n	8019da8 <_scanf_float+0x198>
 8019e34:	2d06      	cmp	r5, #6
 8019e36:	f47f af1e 	bne.w	8019c76 <_scanf_float+0x66>
 8019e3a:	2507      	movs	r5, #7
 8019e3c:	e7b4      	b.n	8019da8 <_scanf_float+0x198>
 8019e3e:	6822      	ldr	r2, [r4, #0]
 8019e40:	0591      	lsls	r1, r2, #22
 8019e42:	f57f af18 	bpl.w	8019c76 <_scanf_float+0x66>
 8019e46:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8019e4a:	6022      	str	r2, [r4, #0]
 8019e4c:	9702      	str	r7, [sp, #8]
 8019e4e:	e7ab      	b.n	8019da8 <_scanf_float+0x198>
 8019e50:	6822      	ldr	r2, [r4, #0]
 8019e52:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8019e56:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8019e5a:	d005      	beq.n	8019e68 <_scanf_float+0x258>
 8019e5c:	0550      	lsls	r0, r2, #21
 8019e5e:	f57f af0a 	bpl.w	8019c76 <_scanf_float+0x66>
 8019e62:	2f00      	cmp	r7, #0
 8019e64:	f000 80db 	beq.w	801a01e <_scanf_float+0x40e>
 8019e68:	0591      	lsls	r1, r2, #22
 8019e6a:	bf58      	it	pl
 8019e6c:	9902      	ldrpl	r1, [sp, #8]
 8019e6e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8019e72:	bf58      	it	pl
 8019e74:	1a79      	subpl	r1, r7, r1
 8019e76:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8019e7a:	bf58      	it	pl
 8019e7c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8019e80:	6022      	str	r2, [r4, #0]
 8019e82:	2700      	movs	r7, #0
 8019e84:	e790      	b.n	8019da8 <_scanf_float+0x198>
 8019e86:	f04f 0a03 	mov.w	sl, #3
 8019e8a:	e78d      	b.n	8019da8 <_scanf_float+0x198>
 8019e8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8019e90:	4649      	mov	r1, r9
 8019e92:	4640      	mov	r0, r8
 8019e94:	4798      	blx	r3
 8019e96:	2800      	cmp	r0, #0
 8019e98:	f43f aedf 	beq.w	8019c5a <_scanf_float+0x4a>
 8019e9c:	e6eb      	b.n	8019c76 <_scanf_float+0x66>
 8019e9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019ea2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019ea6:	464a      	mov	r2, r9
 8019ea8:	4640      	mov	r0, r8
 8019eaa:	4798      	blx	r3
 8019eac:	6923      	ldr	r3, [r4, #16]
 8019eae:	3b01      	subs	r3, #1
 8019eb0:	6123      	str	r3, [r4, #16]
 8019eb2:	e6eb      	b.n	8019c8c <_scanf_float+0x7c>
 8019eb4:	1e6b      	subs	r3, r5, #1
 8019eb6:	2b06      	cmp	r3, #6
 8019eb8:	d824      	bhi.n	8019f04 <_scanf_float+0x2f4>
 8019eba:	2d02      	cmp	r5, #2
 8019ebc:	d836      	bhi.n	8019f2c <_scanf_float+0x31c>
 8019ebe:	9b01      	ldr	r3, [sp, #4]
 8019ec0:	429e      	cmp	r6, r3
 8019ec2:	f67f aee7 	bls.w	8019c94 <_scanf_float+0x84>
 8019ec6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019eca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019ece:	464a      	mov	r2, r9
 8019ed0:	4640      	mov	r0, r8
 8019ed2:	4798      	blx	r3
 8019ed4:	6923      	ldr	r3, [r4, #16]
 8019ed6:	3b01      	subs	r3, #1
 8019ed8:	6123      	str	r3, [r4, #16]
 8019eda:	e7f0      	b.n	8019ebe <_scanf_float+0x2ae>
 8019edc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019ee0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8019ee4:	464a      	mov	r2, r9
 8019ee6:	4640      	mov	r0, r8
 8019ee8:	4798      	blx	r3
 8019eea:	6923      	ldr	r3, [r4, #16]
 8019eec:	3b01      	subs	r3, #1
 8019eee:	6123      	str	r3, [r4, #16]
 8019ef0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019ef4:	fa5f fa8a 	uxtb.w	sl, sl
 8019ef8:	f1ba 0f02 	cmp.w	sl, #2
 8019efc:	d1ee      	bne.n	8019edc <_scanf_float+0x2cc>
 8019efe:	3d03      	subs	r5, #3
 8019f00:	b2ed      	uxtb	r5, r5
 8019f02:	1b76      	subs	r6, r6, r5
 8019f04:	6823      	ldr	r3, [r4, #0]
 8019f06:	05da      	lsls	r2, r3, #23
 8019f08:	d530      	bpl.n	8019f6c <_scanf_float+0x35c>
 8019f0a:	055b      	lsls	r3, r3, #21
 8019f0c:	d511      	bpl.n	8019f32 <_scanf_float+0x322>
 8019f0e:	9b01      	ldr	r3, [sp, #4]
 8019f10:	429e      	cmp	r6, r3
 8019f12:	f67f aebf 	bls.w	8019c94 <_scanf_float+0x84>
 8019f16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019f1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019f1e:	464a      	mov	r2, r9
 8019f20:	4640      	mov	r0, r8
 8019f22:	4798      	blx	r3
 8019f24:	6923      	ldr	r3, [r4, #16]
 8019f26:	3b01      	subs	r3, #1
 8019f28:	6123      	str	r3, [r4, #16]
 8019f2a:	e7f0      	b.n	8019f0e <_scanf_float+0x2fe>
 8019f2c:	46aa      	mov	sl, r5
 8019f2e:	46b3      	mov	fp, r6
 8019f30:	e7de      	b.n	8019ef0 <_scanf_float+0x2e0>
 8019f32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8019f36:	6923      	ldr	r3, [r4, #16]
 8019f38:	2965      	cmp	r1, #101	@ 0x65
 8019f3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8019f3e:	f106 35ff 	add.w	r5, r6, #4294967295
 8019f42:	6123      	str	r3, [r4, #16]
 8019f44:	d00c      	beq.n	8019f60 <_scanf_float+0x350>
 8019f46:	2945      	cmp	r1, #69	@ 0x45
 8019f48:	d00a      	beq.n	8019f60 <_scanf_float+0x350>
 8019f4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019f4e:	464a      	mov	r2, r9
 8019f50:	4640      	mov	r0, r8
 8019f52:	4798      	blx	r3
 8019f54:	6923      	ldr	r3, [r4, #16]
 8019f56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8019f5a:	3b01      	subs	r3, #1
 8019f5c:	1eb5      	subs	r5, r6, #2
 8019f5e:	6123      	str	r3, [r4, #16]
 8019f60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019f64:	464a      	mov	r2, r9
 8019f66:	4640      	mov	r0, r8
 8019f68:	4798      	blx	r3
 8019f6a:	462e      	mov	r6, r5
 8019f6c:	6822      	ldr	r2, [r4, #0]
 8019f6e:	f012 0210 	ands.w	r2, r2, #16
 8019f72:	d001      	beq.n	8019f78 <_scanf_float+0x368>
 8019f74:	2000      	movs	r0, #0
 8019f76:	e68e      	b.n	8019c96 <_scanf_float+0x86>
 8019f78:	7032      	strb	r2, [r6, #0]
 8019f7a:	6823      	ldr	r3, [r4, #0]
 8019f7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8019f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019f84:	d125      	bne.n	8019fd2 <_scanf_float+0x3c2>
 8019f86:	9b02      	ldr	r3, [sp, #8]
 8019f88:	429f      	cmp	r7, r3
 8019f8a:	d00a      	beq.n	8019fa2 <_scanf_float+0x392>
 8019f8c:	1bda      	subs	r2, r3, r7
 8019f8e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8019f92:	429e      	cmp	r6, r3
 8019f94:	bf28      	it	cs
 8019f96:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8019f9a:	4922      	ldr	r1, [pc, #136]	@ (801a024 <_scanf_float+0x414>)
 8019f9c:	4630      	mov	r0, r6
 8019f9e:	f000 f97f 	bl	801a2a0 <siprintf>
 8019fa2:	9901      	ldr	r1, [sp, #4]
 8019fa4:	2200      	movs	r2, #0
 8019fa6:	4640      	mov	r0, r8
 8019fa8:	f002 fdfa 	bl	801cba0 <_strtod_r>
 8019fac:	9b03      	ldr	r3, [sp, #12]
 8019fae:	6821      	ldr	r1, [r4, #0]
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	f011 0f02 	tst.w	r1, #2
 8019fb6:	ec57 6b10 	vmov	r6, r7, d0
 8019fba:	f103 0204 	add.w	r2, r3, #4
 8019fbe:	d015      	beq.n	8019fec <_scanf_float+0x3dc>
 8019fc0:	9903      	ldr	r1, [sp, #12]
 8019fc2:	600a      	str	r2, [r1, #0]
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	e9c3 6700 	strd	r6, r7, [r3]
 8019fca:	68e3      	ldr	r3, [r4, #12]
 8019fcc:	3301      	adds	r3, #1
 8019fce:	60e3      	str	r3, [r4, #12]
 8019fd0:	e7d0      	b.n	8019f74 <_scanf_float+0x364>
 8019fd2:	9b04      	ldr	r3, [sp, #16]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d0e4      	beq.n	8019fa2 <_scanf_float+0x392>
 8019fd8:	9905      	ldr	r1, [sp, #20]
 8019fda:	230a      	movs	r3, #10
 8019fdc:	3101      	adds	r1, #1
 8019fde:	4640      	mov	r0, r8
 8019fe0:	f002 fe5e 	bl	801cca0 <_strtol_r>
 8019fe4:	9b04      	ldr	r3, [sp, #16]
 8019fe6:	9e05      	ldr	r6, [sp, #20]
 8019fe8:	1ac2      	subs	r2, r0, r3
 8019fea:	e7d0      	b.n	8019f8e <_scanf_float+0x37e>
 8019fec:	f011 0f04 	tst.w	r1, #4
 8019ff0:	9903      	ldr	r1, [sp, #12]
 8019ff2:	600a      	str	r2, [r1, #0]
 8019ff4:	d1e6      	bne.n	8019fc4 <_scanf_float+0x3b4>
 8019ff6:	681d      	ldr	r5, [r3, #0]
 8019ff8:	4632      	mov	r2, r6
 8019ffa:	463b      	mov	r3, r7
 8019ffc:	4630      	mov	r0, r6
 8019ffe:	4639      	mov	r1, r7
 801a000:	f7e6 fd94 	bl	8000b2c <__aeabi_dcmpun>
 801a004:	b128      	cbz	r0, 801a012 <_scanf_float+0x402>
 801a006:	4808      	ldr	r0, [pc, #32]	@ (801a028 <_scanf_float+0x418>)
 801a008:	f7fd fe06 	bl	8017c18 <nanf>
 801a00c:	ed85 0a00 	vstr	s0, [r5]
 801a010:	e7db      	b.n	8019fca <_scanf_float+0x3ba>
 801a012:	4630      	mov	r0, r6
 801a014:	4639      	mov	r1, r7
 801a016:	f7e6 fde7 	bl	8000be8 <__aeabi_d2f>
 801a01a:	6028      	str	r0, [r5, #0]
 801a01c:	e7d5      	b.n	8019fca <_scanf_float+0x3ba>
 801a01e:	2700      	movs	r7, #0
 801a020:	e62e      	b.n	8019c80 <_scanf_float+0x70>
 801a022:	bf00      	nop
 801a024:	080202c3 	.word	0x080202c3
 801a028:	08020303 	.word	0x08020303

0801a02c <std>:
 801a02c:	2300      	movs	r3, #0
 801a02e:	b510      	push	{r4, lr}
 801a030:	4604      	mov	r4, r0
 801a032:	e9c0 3300 	strd	r3, r3, [r0]
 801a036:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a03a:	6083      	str	r3, [r0, #8]
 801a03c:	8181      	strh	r1, [r0, #12]
 801a03e:	6643      	str	r3, [r0, #100]	@ 0x64
 801a040:	81c2      	strh	r2, [r0, #14]
 801a042:	6183      	str	r3, [r0, #24]
 801a044:	4619      	mov	r1, r3
 801a046:	2208      	movs	r2, #8
 801a048:	305c      	adds	r0, #92	@ 0x5c
 801a04a:	f000 fa6b 	bl	801a524 <memset>
 801a04e:	4b0d      	ldr	r3, [pc, #52]	@ (801a084 <std+0x58>)
 801a050:	6263      	str	r3, [r4, #36]	@ 0x24
 801a052:	4b0d      	ldr	r3, [pc, #52]	@ (801a088 <std+0x5c>)
 801a054:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a056:	4b0d      	ldr	r3, [pc, #52]	@ (801a08c <std+0x60>)
 801a058:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a05a:	4b0d      	ldr	r3, [pc, #52]	@ (801a090 <std+0x64>)
 801a05c:	6323      	str	r3, [r4, #48]	@ 0x30
 801a05e:	4b0d      	ldr	r3, [pc, #52]	@ (801a094 <std+0x68>)
 801a060:	6224      	str	r4, [r4, #32]
 801a062:	429c      	cmp	r4, r3
 801a064:	d006      	beq.n	801a074 <std+0x48>
 801a066:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a06a:	4294      	cmp	r4, r2
 801a06c:	d002      	beq.n	801a074 <std+0x48>
 801a06e:	33d0      	adds	r3, #208	@ 0xd0
 801a070:	429c      	cmp	r4, r3
 801a072:	d105      	bne.n	801a080 <std+0x54>
 801a074:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a07c:	f000 bb2c 	b.w	801a6d8 <__retarget_lock_init_recursive>
 801a080:	bd10      	pop	{r4, pc}
 801a082:	bf00      	nop
 801a084:	0801a33d 	.word	0x0801a33d
 801a088:	0801a363 	.word	0x0801a363
 801a08c:	0801a39b 	.word	0x0801a39b
 801a090:	0801a3bf 	.word	0x0801a3bf
 801a094:	2000a564 	.word	0x2000a564

0801a098 <stdio_exit_handler>:
 801a098:	4a02      	ldr	r2, [pc, #8]	@ (801a0a4 <stdio_exit_handler+0xc>)
 801a09a:	4903      	ldr	r1, [pc, #12]	@ (801a0a8 <stdio_exit_handler+0x10>)
 801a09c:	4803      	ldr	r0, [pc, #12]	@ (801a0ac <stdio_exit_handler+0x14>)
 801a09e:	f000 b869 	b.w	801a174 <_fwalk_sglue>
 801a0a2:	bf00      	nop
 801a0a4:	20000154 	.word	0x20000154
 801a0a8:	0801d699 	.word	0x0801d699
 801a0ac:	20000164 	.word	0x20000164

0801a0b0 <cleanup_stdio>:
 801a0b0:	6841      	ldr	r1, [r0, #4]
 801a0b2:	4b0c      	ldr	r3, [pc, #48]	@ (801a0e4 <cleanup_stdio+0x34>)
 801a0b4:	4299      	cmp	r1, r3
 801a0b6:	b510      	push	{r4, lr}
 801a0b8:	4604      	mov	r4, r0
 801a0ba:	d001      	beq.n	801a0c0 <cleanup_stdio+0x10>
 801a0bc:	f003 faec 	bl	801d698 <_fflush_r>
 801a0c0:	68a1      	ldr	r1, [r4, #8]
 801a0c2:	4b09      	ldr	r3, [pc, #36]	@ (801a0e8 <cleanup_stdio+0x38>)
 801a0c4:	4299      	cmp	r1, r3
 801a0c6:	d002      	beq.n	801a0ce <cleanup_stdio+0x1e>
 801a0c8:	4620      	mov	r0, r4
 801a0ca:	f003 fae5 	bl	801d698 <_fflush_r>
 801a0ce:	68e1      	ldr	r1, [r4, #12]
 801a0d0:	4b06      	ldr	r3, [pc, #24]	@ (801a0ec <cleanup_stdio+0x3c>)
 801a0d2:	4299      	cmp	r1, r3
 801a0d4:	d004      	beq.n	801a0e0 <cleanup_stdio+0x30>
 801a0d6:	4620      	mov	r0, r4
 801a0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0dc:	f003 badc 	b.w	801d698 <_fflush_r>
 801a0e0:	bd10      	pop	{r4, pc}
 801a0e2:	bf00      	nop
 801a0e4:	2000a564 	.word	0x2000a564
 801a0e8:	2000a5cc 	.word	0x2000a5cc
 801a0ec:	2000a634 	.word	0x2000a634

0801a0f0 <global_stdio_init.part.0>:
 801a0f0:	b510      	push	{r4, lr}
 801a0f2:	4b0b      	ldr	r3, [pc, #44]	@ (801a120 <global_stdio_init.part.0+0x30>)
 801a0f4:	4c0b      	ldr	r4, [pc, #44]	@ (801a124 <global_stdio_init.part.0+0x34>)
 801a0f6:	4a0c      	ldr	r2, [pc, #48]	@ (801a128 <global_stdio_init.part.0+0x38>)
 801a0f8:	601a      	str	r2, [r3, #0]
 801a0fa:	4620      	mov	r0, r4
 801a0fc:	2200      	movs	r2, #0
 801a0fe:	2104      	movs	r1, #4
 801a100:	f7ff ff94 	bl	801a02c <std>
 801a104:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a108:	2201      	movs	r2, #1
 801a10a:	2109      	movs	r1, #9
 801a10c:	f7ff ff8e 	bl	801a02c <std>
 801a110:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a114:	2202      	movs	r2, #2
 801a116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a11a:	2112      	movs	r1, #18
 801a11c:	f7ff bf86 	b.w	801a02c <std>
 801a120:	2000a69c 	.word	0x2000a69c
 801a124:	2000a564 	.word	0x2000a564
 801a128:	0801a099 	.word	0x0801a099

0801a12c <__sfp_lock_acquire>:
 801a12c:	4801      	ldr	r0, [pc, #4]	@ (801a134 <__sfp_lock_acquire+0x8>)
 801a12e:	f000 bad4 	b.w	801a6da <__retarget_lock_acquire_recursive>
 801a132:	bf00      	nop
 801a134:	2000a6a5 	.word	0x2000a6a5

0801a138 <__sfp_lock_release>:
 801a138:	4801      	ldr	r0, [pc, #4]	@ (801a140 <__sfp_lock_release+0x8>)
 801a13a:	f000 bacf 	b.w	801a6dc <__retarget_lock_release_recursive>
 801a13e:	bf00      	nop
 801a140:	2000a6a5 	.word	0x2000a6a5

0801a144 <__sinit>:
 801a144:	b510      	push	{r4, lr}
 801a146:	4604      	mov	r4, r0
 801a148:	f7ff fff0 	bl	801a12c <__sfp_lock_acquire>
 801a14c:	6a23      	ldr	r3, [r4, #32]
 801a14e:	b11b      	cbz	r3, 801a158 <__sinit+0x14>
 801a150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a154:	f7ff bff0 	b.w	801a138 <__sfp_lock_release>
 801a158:	4b04      	ldr	r3, [pc, #16]	@ (801a16c <__sinit+0x28>)
 801a15a:	6223      	str	r3, [r4, #32]
 801a15c:	4b04      	ldr	r3, [pc, #16]	@ (801a170 <__sinit+0x2c>)
 801a15e:	681b      	ldr	r3, [r3, #0]
 801a160:	2b00      	cmp	r3, #0
 801a162:	d1f5      	bne.n	801a150 <__sinit+0xc>
 801a164:	f7ff ffc4 	bl	801a0f0 <global_stdio_init.part.0>
 801a168:	e7f2      	b.n	801a150 <__sinit+0xc>
 801a16a:	bf00      	nop
 801a16c:	0801a0b1 	.word	0x0801a0b1
 801a170:	2000a69c 	.word	0x2000a69c

0801a174 <_fwalk_sglue>:
 801a174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a178:	4607      	mov	r7, r0
 801a17a:	4688      	mov	r8, r1
 801a17c:	4614      	mov	r4, r2
 801a17e:	2600      	movs	r6, #0
 801a180:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a184:	f1b9 0901 	subs.w	r9, r9, #1
 801a188:	d505      	bpl.n	801a196 <_fwalk_sglue+0x22>
 801a18a:	6824      	ldr	r4, [r4, #0]
 801a18c:	2c00      	cmp	r4, #0
 801a18e:	d1f7      	bne.n	801a180 <_fwalk_sglue+0xc>
 801a190:	4630      	mov	r0, r6
 801a192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a196:	89ab      	ldrh	r3, [r5, #12]
 801a198:	2b01      	cmp	r3, #1
 801a19a:	d907      	bls.n	801a1ac <_fwalk_sglue+0x38>
 801a19c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a1a0:	3301      	adds	r3, #1
 801a1a2:	d003      	beq.n	801a1ac <_fwalk_sglue+0x38>
 801a1a4:	4629      	mov	r1, r5
 801a1a6:	4638      	mov	r0, r7
 801a1a8:	47c0      	blx	r8
 801a1aa:	4306      	orrs	r6, r0
 801a1ac:	3568      	adds	r5, #104	@ 0x68
 801a1ae:	e7e9      	b.n	801a184 <_fwalk_sglue+0x10>

0801a1b0 <iprintf>:
 801a1b0:	b40f      	push	{r0, r1, r2, r3}
 801a1b2:	b507      	push	{r0, r1, r2, lr}
 801a1b4:	4906      	ldr	r1, [pc, #24]	@ (801a1d0 <iprintf+0x20>)
 801a1b6:	ab04      	add	r3, sp, #16
 801a1b8:	6808      	ldr	r0, [r1, #0]
 801a1ba:	f853 2b04 	ldr.w	r2, [r3], #4
 801a1be:	6881      	ldr	r1, [r0, #8]
 801a1c0:	9301      	str	r3, [sp, #4]
 801a1c2:	f7ff fa77 	bl	80196b4 <_vfiprintf_r>
 801a1c6:	b003      	add	sp, #12
 801a1c8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a1cc:	b004      	add	sp, #16
 801a1ce:	4770      	bx	lr
 801a1d0:	20000160 	.word	0x20000160

0801a1d4 <putchar>:
 801a1d4:	4b02      	ldr	r3, [pc, #8]	@ (801a1e0 <putchar+0xc>)
 801a1d6:	4601      	mov	r1, r0
 801a1d8:	6818      	ldr	r0, [r3, #0]
 801a1da:	6882      	ldr	r2, [r0, #8]
 801a1dc:	f003 baf8 	b.w	801d7d0 <_putc_r>
 801a1e0:	20000160 	.word	0x20000160

0801a1e4 <_puts_r>:
 801a1e4:	6a03      	ldr	r3, [r0, #32]
 801a1e6:	b570      	push	{r4, r5, r6, lr}
 801a1e8:	6884      	ldr	r4, [r0, #8]
 801a1ea:	4605      	mov	r5, r0
 801a1ec:	460e      	mov	r6, r1
 801a1ee:	b90b      	cbnz	r3, 801a1f4 <_puts_r+0x10>
 801a1f0:	f7ff ffa8 	bl	801a144 <__sinit>
 801a1f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a1f6:	07db      	lsls	r3, r3, #31
 801a1f8:	d405      	bmi.n	801a206 <_puts_r+0x22>
 801a1fa:	89a3      	ldrh	r3, [r4, #12]
 801a1fc:	0598      	lsls	r0, r3, #22
 801a1fe:	d402      	bmi.n	801a206 <_puts_r+0x22>
 801a200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a202:	f000 fa6a 	bl	801a6da <__retarget_lock_acquire_recursive>
 801a206:	89a3      	ldrh	r3, [r4, #12]
 801a208:	0719      	lsls	r1, r3, #28
 801a20a:	d502      	bpl.n	801a212 <_puts_r+0x2e>
 801a20c:	6923      	ldr	r3, [r4, #16]
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d135      	bne.n	801a27e <_puts_r+0x9a>
 801a212:	4621      	mov	r1, r4
 801a214:	4628      	mov	r0, r5
 801a216:	f000 f915 	bl	801a444 <__swsetup_r>
 801a21a:	b380      	cbz	r0, 801a27e <_puts_r+0x9a>
 801a21c:	f04f 35ff 	mov.w	r5, #4294967295
 801a220:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a222:	07da      	lsls	r2, r3, #31
 801a224:	d405      	bmi.n	801a232 <_puts_r+0x4e>
 801a226:	89a3      	ldrh	r3, [r4, #12]
 801a228:	059b      	lsls	r3, r3, #22
 801a22a:	d402      	bmi.n	801a232 <_puts_r+0x4e>
 801a22c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a22e:	f000 fa55 	bl	801a6dc <__retarget_lock_release_recursive>
 801a232:	4628      	mov	r0, r5
 801a234:	bd70      	pop	{r4, r5, r6, pc}
 801a236:	2b00      	cmp	r3, #0
 801a238:	da04      	bge.n	801a244 <_puts_r+0x60>
 801a23a:	69a2      	ldr	r2, [r4, #24]
 801a23c:	429a      	cmp	r2, r3
 801a23e:	dc17      	bgt.n	801a270 <_puts_r+0x8c>
 801a240:	290a      	cmp	r1, #10
 801a242:	d015      	beq.n	801a270 <_puts_r+0x8c>
 801a244:	6823      	ldr	r3, [r4, #0]
 801a246:	1c5a      	adds	r2, r3, #1
 801a248:	6022      	str	r2, [r4, #0]
 801a24a:	7019      	strb	r1, [r3, #0]
 801a24c:	68a3      	ldr	r3, [r4, #8]
 801a24e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a252:	3b01      	subs	r3, #1
 801a254:	60a3      	str	r3, [r4, #8]
 801a256:	2900      	cmp	r1, #0
 801a258:	d1ed      	bne.n	801a236 <_puts_r+0x52>
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	da11      	bge.n	801a282 <_puts_r+0x9e>
 801a25e:	4622      	mov	r2, r4
 801a260:	210a      	movs	r1, #10
 801a262:	4628      	mov	r0, r5
 801a264:	f000 f8af 	bl	801a3c6 <__swbuf_r>
 801a268:	3001      	adds	r0, #1
 801a26a:	d0d7      	beq.n	801a21c <_puts_r+0x38>
 801a26c:	250a      	movs	r5, #10
 801a26e:	e7d7      	b.n	801a220 <_puts_r+0x3c>
 801a270:	4622      	mov	r2, r4
 801a272:	4628      	mov	r0, r5
 801a274:	f000 f8a7 	bl	801a3c6 <__swbuf_r>
 801a278:	3001      	adds	r0, #1
 801a27a:	d1e7      	bne.n	801a24c <_puts_r+0x68>
 801a27c:	e7ce      	b.n	801a21c <_puts_r+0x38>
 801a27e:	3e01      	subs	r6, #1
 801a280:	e7e4      	b.n	801a24c <_puts_r+0x68>
 801a282:	6823      	ldr	r3, [r4, #0]
 801a284:	1c5a      	adds	r2, r3, #1
 801a286:	6022      	str	r2, [r4, #0]
 801a288:	220a      	movs	r2, #10
 801a28a:	701a      	strb	r2, [r3, #0]
 801a28c:	e7ee      	b.n	801a26c <_puts_r+0x88>
	...

0801a290 <puts>:
 801a290:	4b02      	ldr	r3, [pc, #8]	@ (801a29c <puts+0xc>)
 801a292:	4601      	mov	r1, r0
 801a294:	6818      	ldr	r0, [r3, #0]
 801a296:	f7ff bfa5 	b.w	801a1e4 <_puts_r>
 801a29a:	bf00      	nop
 801a29c:	20000160 	.word	0x20000160

0801a2a0 <siprintf>:
 801a2a0:	b40e      	push	{r1, r2, r3}
 801a2a2:	b510      	push	{r4, lr}
 801a2a4:	b09d      	sub	sp, #116	@ 0x74
 801a2a6:	ab1f      	add	r3, sp, #124	@ 0x7c
 801a2a8:	9002      	str	r0, [sp, #8]
 801a2aa:	9006      	str	r0, [sp, #24]
 801a2ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a2b0:	480a      	ldr	r0, [pc, #40]	@ (801a2dc <siprintf+0x3c>)
 801a2b2:	9107      	str	r1, [sp, #28]
 801a2b4:	9104      	str	r1, [sp, #16]
 801a2b6:	490a      	ldr	r1, [pc, #40]	@ (801a2e0 <siprintf+0x40>)
 801a2b8:	f853 2b04 	ldr.w	r2, [r3], #4
 801a2bc:	9105      	str	r1, [sp, #20]
 801a2be:	2400      	movs	r4, #0
 801a2c0:	a902      	add	r1, sp, #8
 801a2c2:	6800      	ldr	r0, [r0, #0]
 801a2c4:	9301      	str	r3, [sp, #4]
 801a2c6:	941b      	str	r4, [sp, #108]	@ 0x6c
 801a2c8:	f002 fd48 	bl	801cd5c <_svfiprintf_r>
 801a2cc:	9b02      	ldr	r3, [sp, #8]
 801a2ce:	701c      	strb	r4, [r3, #0]
 801a2d0:	b01d      	add	sp, #116	@ 0x74
 801a2d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2d6:	b003      	add	sp, #12
 801a2d8:	4770      	bx	lr
 801a2da:	bf00      	nop
 801a2dc:	20000160 	.word	0x20000160
 801a2e0:	ffff0208 	.word	0xffff0208

0801a2e4 <siscanf>:
 801a2e4:	b40e      	push	{r1, r2, r3}
 801a2e6:	b570      	push	{r4, r5, r6, lr}
 801a2e8:	b09d      	sub	sp, #116	@ 0x74
 801a2ea:	ac21      	add	r4, sp, #132	@ 0x84
 801a2ec:	2500      	movs	r5, #0
 801a2ee:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801a2f2:	f854 6b04 	ldr.w	r6, [r4], #4
 801a2f6:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a2fa:	951b      	str	r5, [sp, #108]	@ 0x6c
 801a2fc:	9002      	str	r0, [sp, #8]
 801a2fe:	9006      	str	r0, [sp, #24]
 801a300:	f7e5 ffb6 	bl	8000270 <strlen>
 801a304:	4b0b      	ldr	r3, [pc, #44]	@ (801a334 <siscanf+0x50>)
 801a306:	9003      	str	r0, [sp, #12]
 801a308:	9007      	str	r0, [sp, #28]
 801a30a:	480b      	ldr	r0, [pc, #44]	@ (801a338 <siscanf+0x54>)
 801a30c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a30e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a312:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a316:	4632      	mov	r2, r6
 801a318:	4623      	mov	r3, r4
 801a31a:	a902      	add	r1, sp, #8
 801a31c:	6800      	ldr	r0, [r0, #0]
 801a31e:	950f      	str	r5, [sp, #60]	@ 0x3c
 801a320:	9514      	str	r5, [sp, #80]	@ 0x50
 801a322:	9401      	str	r4, [sp, #4]
 801a324:	f002 fe70 	bl	801d008 <__ssvfiscanf_r>
 801a328:	b01d      	add	sp, #116	@ 0x74
 801a32a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a32e:	b003      	add	sp, #12
 801a330:	4770      	bx	lr
 801a332:	bf00      	nop
 801a334:	0801a35f 	.word	0x0801a35f
 801a338:	20000160 	.word	0x20000160

0801a33c <__sread>:
 801a33c:	b510      	push	{r4, lr}
 801a33e:	460c      	mov	r4, r1
 801a340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a344:	f000 f97a 	bl	801a63c <_read_r>
 801a348:	2800      	cmp	r0, #0
 801a34a:	bfab      	itete	ge
 801a34c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a34e:	89a3      	ldrhlt	r3, [r4, #12]
 801a350:	181b      	addge	r3, r3, r0
 801a352:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a356:	bfac      	ite	ge
 801a358:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a35a:	81a3      	strhlt	r3, [r4, #12]
 801a35c:	bd10      	pop	{r4, pc}

0801a35e <__seofread>:
 801a35e:	2000      	movs	r0, #0
 801a360:	4770      	bx	lr

0801a362 <__swrite>:
 801a362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a366:	461f      	mov	r7, r3
 801a368:	898b      	ldrh	r3, [r1, #12]
 801a36a:	05db      	lsls	r3, r3, #23
 801a36c:	4605      	mov	r5, r0
 801a36e:	460c      	mov	r4, r1
 801a370:	4616      	mov	r6, r2
 801a372:	d505      	bpl.n	801a380 <__swrite+0x1e>
 801a374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a378:	2302      	movs	r3, #2
 801a37a:	2200      	movs	r2, #0
 801a37c:	f000 f94c 	bl	801a618 <_lseek_r>
 801a380:	89a3      	ldrh	r3, [r4, #12]
 801a382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a386:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a38a:	81a3      	strh	r3, [r4, #12]
 801a38c:	4632      	mov	r2, r6
 801a38e:	463b      	mov	r3, r7
 801a390:	4628      	mov	r0, r5
 801a392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a396:	f000 b963 	b.w	801a660 <_write_r>

0801a39a <__sseek>:
 801a39a:	b510      	push	{r4, lr}
 801a39c:	460c      	mov	r4, r1
 801a39e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3a2:	f000 f939 	bl	801a618 <_lseek_r>
 801a3a6:	1c43      	adds	r3, r0, #1
 801a3a8:	89a3      	ldrh	r3, [r4, #12]
 801a3aa:	bf15      	itete	ne
 801a3ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a3ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a3b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a3b6:	81a3      	strheq	r3, [r4, #12]
 801a3b8:	bf18      	it	ne
 801a3ba:	81a3      	strhne	r3, [r4, #12]
 801a3bc:	bd10      	pop	{r4, pc}

0801a3be <__sclose>:
 801a3be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3c2:	f000 b8bb 	b.w	801a53c <_close_r>

0801a3c6 <__swbuf_r>:
 801a3c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3c8:	460e      	mov	r6, r1
 801a3ca:	4614      	mov	r4, r2
 801a3cc:	4605      	mov	r5, r0
 801a3ce:	b118      	cbz	r0, 801a3d8 <__swbuf_r+0x12>
 801a3d0:	6a03      	ldr	r3, [r0, #32]
 801a3d2:	b90b      	cbnz	r3, 801a3d8 <__swbuf_r+0x12>
 801a3d4:	f7ff feb6 	bl	801a144 <__sinit>
 801a3d8:	69a3      	ldr	r3, [r4, #24]
 801a3da:	60a3      	str	r3, [r4, #8]
 801a3dc:	89a3      	ldrh	r3, [r4, #12]
 801a3de:	071a      	lsls	r2, r3, #28
 801a3e0:	d501      	bpl.n	801a3e6 <__swbuf_r+0x20>
 801a3e2:	6923      	ldr	r3, [r4, #16]
 801a3e4:	b943      	cbnz	r3, 801a3f8 <__swbuf_r+0x32>
 801a3e6:	4621      	mov	r1, r4
 801a3e8:	4628      	mov	r0, r5
 801a3ea:	f000 f82b 	bl	801a444 <__swsetup_r>
 801a3ee:	b118      	cbz	r0, 801a3f8 <__swbuf_r+0x32>
 801a3f0:	f04f 37ff 	mov.w	r7, #4294967295
 801a3f4:	4638      	mov	r0, r7
 801a3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3f8:	6823      	ldr	r3, [r4, #0]
 801a3fa:	6922      	ldr	r2, [r4, #16]
 801a3fc:	1a98      	subs	r0, r3, r2
 801a3fe:	6963      	ldr	r3, [r4, #20]
 801a400:	b2f6      	uxtb	r6, r6
 801a402:	4283      	cmp	r3, r0
 801a404:	4637      	mov	r7, r6
 801a406:	dc05      	bgt.n	801a414 <__swbuf_r+0x4e>
 801a408:	4621      	mov	r1, r4
 801a40a:	4628      	mov	r0, r5
 801a40c:	f003 f944 	bl	801d698 <_fflush_r>
 801a410:	2800      	cmp	r0, #0
 801a412:	d1ed      	bne.n	801a3f0 <__swbuf_r+0x2a>
 801a414:	68a3      	ldr	r3, [r4, #8]
 801a416:	3b01      	subs	r3, #1
 801a418:	60a3      	str	r3, [r4, #8]
 801a41a:	6823      	ldr	r3, [r4, #0]
 801a41c:	1c5a      	adds	r2, r3, #1
 801a41e:	6022      	str	r2, [r4, #0]
 801a420:	701e      	strb	r6, [r3, #0]
 801a422:	6962      	ldr	r2, [r4, #20]
 801a424:	1c43      	adds	r3, r0, #1
 801a426:	429a      	cmp	r2, r3
 801a428:	d004      	beq.n	801a434 <__swbuf_r+0x6e>
 801a42a:	89a3      	ldrh	r3, [r4, #12]
 801a42c:	07db      	lsls	r3, r3, #31
 801a42e:	d5e1      	bpl.n	801a3f4 <__swbuf_r+0x2e>
 801a430:	2e0a      	cmp	r6, #10
 801a432:	d1df      	bne.n	801a3f4 <__swbuf_r+0x2e>
 801a434:	4621      	mov	r1, r4
 801a436:	4628      	mov	r0, r5
 801a438:	f003 f92e 	bl	801d698 <_fflush_r>
 801a43c:	2800      	cmp	r0, #0
 801a43e:	d0d9      	beq.n	801a3f4 <__swbuf_r+0x2e>
 801a440:	e7d6      	b.n	801a3f0 <__swbuf_r+0x2a>
	...

0801a444 <__swsetup_r>:
 801a444:	b538      	push	{r3, r4, r5, lr}
 801a446:	4b29      	ldr	r3, [pc, #164]	@ (801a4ec <__swsetup_r+0xa8>)
 801a448:	4605      	mov	r5, r0
 801a44a:	6818      	ldr	r0, [r3, #0]
 801a44c:	460c      	mov	r4, r1
 801a44e:	b118      	cbz	r0, 801a458 <__swsetup_r+0x14>
 801a450:	6a03      	ldr	r3, [r0, #32]
 801a452:	b90b      	cbnz	r3, 801a458 <__swsetup_r+0x14>
 801a454:	f7ff fe76 	bl	801a144 <__sinit>
 801a458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a45c:	0719      	lsls	r1, r3, #28
 801a45e:	d422      	bmi.n	801a4a6 <__swsetup_r+0x62>
 801a460:	06da      	lsls	r2, r3, #27
 801a462:	d407      	bmi.n	801a474 <__swsetup_r+0x30>
 801a464:	2209      	movs	r2, #9
 801a466:	602a      	str	r2, [r5, #0]
 801a468:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a46c:	81a3      	strh	r3, [r4, #12]
 801a46e:	f04f 30ff 	mov.w	r0, #4294967295
 801a472:	e033      	b.n	801a4dc <__swsetup_r+0x98>
 801a474:	0758      	lsls	r0, r3, #29
 801a476:	d512      	bpl.n	801a49e <__swsetup_r+0x5a>
 801a478:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a47a:	b141      	cbz	r1, 801a48e <__swsetup_r+0x4a>
 801a47c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a480:	4299      	cmp	r1, r3
 801a482:	d002      	beq.n	801a48a <__swsetup_r+0x46>
 801a484:	4628      	mov	r0, r5
 801a486:	f000 ffaf 	bl	801b3e8 <_free_r>
 801a48a:	2300      	movs	r3, #0
 801a48c:	6363      	str	r3, [r4, #52]	@ 0x34
 801a48e:	89a3      	ldrh	r3, [r4, #12]
 801a490:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a494:	81a3      	strh	r3, [r4, #12]
 801a496:	2300      	movs	r3, #0
 801a498:	6063      	str	r3, [r4, #4]
 801a49a:	6923      	ldr	r3, [r4, #16]
 801a49c:	6023      	str	r3, [r4, #0]
 801a49e:	89a3      	ldrh	r3, [r4, #12]
 801a4a0:	f043 0308 	orr.w	r3, r3, #8
 801a4a4:	81a3      	strh	r3, [r4, #12]
 801a4a6:	6923      	ldr	r3, [r4, #16]
 801a4a8:	b94b      	cbnz	r3, 801a4be <__swsetup_r+0x7a>
 801a4aa:	89a3      	ldrh	r3, [r4, #12]
 801a4ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a4b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a4b4:	d003      	beq.n	801a4be <__swsetup_r+0x7a>
 801a4b6:	4621      	mov	r1, r4
 801a4b8:	4628      	mov	r0, r5
 801a4ba:	f003 f94d 	bl	801d758 <__smakebuf_r>
 801a4be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4c2:	f013 0201 	ands.w	r2, r3, #1
 801a4c6:	d00a      	beq.n	801a4de <__swsetup_r+0x9a>
 801a4c8:	2200      	movs	r2, #0
 801a4ca:	60a2      	str	r2, [r4, #8]
 801a4cc:	6962      	ldr	r2, [r4, #20]
 801a4ce:	4252      	negs	r2, r2
 801a4d0:	61a2      	str	r2, [r4, #24]
 801a4d2:	6922      	ldr	r2, [r4, #16]
 801a4d4:	b942      	cbnz	r2, 801a4e8 <__swsetup_r+0xa4>
 801a4d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a4da:	d1c5      	bne.n	801a468 <__swsetup_r+0x24>
 801a4dc:	bd38      	pop	{r3, r4, r5, pc}
 801a4de:	0799      	lsls	r1, r3, #30
 801a4e0:	bf58      	it	pl
 801a4e2:	6962      	ldrpl	r2, [r4, #20]
 801a4e4:	60a2      	str	r2, [r4, #8]
 801a4e6:	e7f4      	b.n	801a4d2 <__swsetup_r+0x8e>
 801a4e8:	2000      	movs	r0, #0
 801a4ea:	e7f7      	b.n	801a4dc <__swsetup_r+0x98>
 801a4ec:	20000160 	.word	0x20000160

0801a4f0 <memmove>:
 801a4f0:	4288      	cmp	r0, r1
 801a4f2:	b510      	push	{r4, lr}
 801a4f4:	eb01 0402 	add.w	r4, r1, r2
 801a4f8:	d902      	bls.n	801a500 <memmove+0x10>
 801a4fa:	4284      	cmp	r4, r0
 801a4fc:	4623      	mov	r3, r4
 801a4fe:	d807      	bhi.n	801a510 <memmove+0x20>
 801a500:	1e43      	subs	r3, r0, #1
 801a502:	42a1      	cmp	r1, r4
 801a504:	d008      	beq.n	801a518 <memmove+0x28>
 801a506:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a50a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a50e:	e7f8      	b.n	801a502 <memmove+0x12>
 801a510:	4402      	add	r2, r0
 801a512:	4601      	mov	r1, r0
 801a514:	428a      	cmp	r2, r1
 801a516:	d100      	bne.n	801a51a <memmove+0x2a>
 801a518:	bd10      	pop	{r4, pc}
 801a51a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a51e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a522:	e7f7      	b.n	801a514 <memmove+0x24>

0801a524 <memset>:
 801a524:	4402      	add	r2, r0
 801a526:	4603      	mov	r3, r0
 801a528:	4293      	cmp	r3, r2
 801a52a:	d100      	bne.n	801a52e <memset+0xa>
 801a52c:	4770      	bx	lr
 801a52e:	f803 1b01 	strb.w	r1, [r3], #1
 801a532:	e7f9      	b.n	801a528 <memset+0x4>

0801a534 <_localeconv_r>:
 801a534:	4800      	ldr	r0, [pc, #0]	@ (801a538 <_localeconv_r+0x4>)
 801a536:	4770      	bx	lr
 801a538:	200002a0 	.word	0x200002a0

0801a53c <_close_r>:
 801a53c:	b538      	push	{r3, r4, r5, lr}
 801a53e:	4d06      	ldr	r5, [pc, #24]	@ (801a558 <_close_r+0x1c>)
 801a540:	2300      	movs	r3, #0
 801a542:	4604      	mov	r4, r0
 801a544:	4608      	mov	r0, r1
 801a546:	602b      	str	r3, [r5, #0]
 801a548:	f7ef f89c 	bl	8009684 <_close>
 801a54c:	1c43      	adds	r3, r0, #1
 801a54e:	d102      	bne.n	801a556 <_close_r+0x1a>
 801a550:	682b      	ldr	r3, [r5, #0]
 801a552:	b103      	cbz	r3, 801a556 <_close_r+0x1a>
 801a554:	6023      	str	r3, [r4, #0]
 801a556:	bd38      	pop	{r3, r4, r5, pc}
 801a558:	2000a6a0 	.word	0x2000a6a0

0801a55c <_reclaim_reent>:
 801a55c:	4b2d      	ldr	r3, [pc, #180]	@ (801a614 <_reclaim_reent+0xb8>)
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	4283      	cmp	r3, r0
 801a562:	b570      	push	{r4, r5, r6, lr}
 801a564:	4604      	mov	r4, r0
 801a566:	d053      	beq.n	801a610 <_reclaim_reent+0xb4>
 801a568:	69c3      	ldr	r3, [r0, #28]
 801a56a:	b31b      	cbz	r3, 801a5b4 <_reclaim_reent+0x58>
 801a56c:	68db      	ldr	r3, [r3, #12]
 801a56e:	b163      	cbz	r3, 801a58a <_reclaim_reent+0x2e>
 801a570:	2500      	movs	r5, #0
 801a572:	69e3      	ldr	r3, [r4, #28]
 801a574:	68db      	ldr	r3, [r3, #12]
 801a576:	5959      	ldr	r1, [r3, r5]
 801a578:	b9b1      	cbnz	r1, 801a5a8 <_reclaim_reent+0x4c>
 801a57a:	3504      	adds	r5, #4
 801a57c:	2d80      	cmp	r5, #128	@ 0x80
 801a57e:	d1f8      	bne.n	801a572 <_reclaim_reent+0x16>
 801a580:	69e3      	ldr	r3, [r4, #28]
 801a582:	4620      	mov	r0, r4
 801a584:	68d9      	ldr	r1, [r3, #12]
 801a586:	f000 ff2f 	bl	801b3e8 <_free_r>
 801a58a:	69e3      	ldr	r3, [r4, #28]
 801a58c:	6819      	ldr	r1, [r3, #0]
 801a58e:	b111      	cbz	r1, 801a596 <_reclaim_reent+0x3a>
 801a590:	4620      	mov	r0, r4
 801a592:	f000 ff29 	bl	801b3e8 <_free_r>
 801a596:	69e3      	ldr	r3, [r4, #28]
 801a598:	689d      	ldr	r5, [r3, #8]
 801a59a:	b15d      	cbz	r5, 801a5b4 <_reclaim_reent+0x58>
 801a59c:	4629      	mov	r1, r5
 801a59e:	4620      	mov	r0, r4
 801a5a0:	682d      	ldr	r5, [r5, #0]
 801a5a2:	f000 ff21 	bl	801b3e8 <_free_r>
 801a5a6:	e7f8      	b.n	801a59a <_reclaim_reent+0x3e>
 801a5a8:	680e      	ldr	r6, [r1, #0]
 801a5aa:	4620      	mov	r0, r4
 801a5ac:	f000 ff1c 	bl	801b3e8 <_free_r>
 801a5b0:	4631      	mov	r1, r6
 801a5b2:	e7e1      	b.n	801a578 <_reclaim_reent+0x1c>
 801a5b4:	6961      	ldr	r1, [r4, #20]
 801a5b6:	b111      	cbz	r1, 801a5be <_reclaim_reent+0x62>
 801a5b8:	4620      	mov	r0, r4
 801a5ba:	f000 ff15 	bl	801b3e8 <_free_r>
 801a5be:	69e1      	ldr	r1, [r4, #28]
 801a5c0:	b111      	cbz	r1, 801a5c8 <_reclaim_reent+0x6c>
 801a5c2:	4620      	mov	r0, r4
 801a5c4:	f000 ff10 	bl	801b3e8 <_free_r>
 801a5c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a5ca:	b111      	cbz	r1, 801a5d2 <_reclaim_reent+0x76>
 801a5cc:	4620      	mov	r0, r4
 801a5ce:	f000 ff0b 	bl	801b3e8 <_free_r>
 801a5d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a5d4:	b111      	cbz	r1, 801a5dc <_reclaim_reent+0x80>
 801a5d6:	4620      	mov	r0, r4
 801a5d8:	f000 ff06 	bl	801b3e8 <_free_r>
 801a5dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801a5de:	b111      	cbz	r1, 801a5e6 <_reclaim_reent+0x8a>
 801a5e0:	4620      	mov	r0, r4
 801a5e2:	f000 ff01 	bl	801b3e8 <_free_r>
 801a5e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801a5e8:	b111      	cbz	r1, 801a5f0 <_reclaim_reent+0x94>
 801a5ea:	4620      	mov	r0, r4
 801a5ec:	f000 fefc 	bl	801b3e8 <_free_r>
 801a5f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801a5f2:	b111      	cbz	r1, 801a5fa <_reclaim_reent+0x9e>
 801a5f4:	4620      	mov	r0, r4
 801a5f6:	f000 fef7 	bl	801b3e8 <_free_r>
 801a5fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801a5fc:	b111      	cbz	r1, 801a604 <_reclaim_reent+0xa8>
 801a5fe:	4620      	mov	r0, r4
 801a600:	f000 fef2 	bl	801b3e8 <_free_r>
 801a604:	6a23      	ldr	r3, [r4, #32]
 801a606:	b11b      	cbz	r3, 801a610 <_reclaim_reent+0xb4>
 801a608:	4620      	mov	r0, r4
 801a60a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a60e:	4718      	bx	r3
 801a610:	bd70      	pop	{r4, r5, r6, pc}
 801a612:	bf00      	nop
 801a614:	20000160 	.word	0x20000160

0801a618 <_lseek_r>:
 801a618:	b538      	push	{r3, r4, r5, lr}
 801a61a:	4d07      	ldr	r5, [pc, #28]	@ (801a638 <_lseek_r+0x20>)
 801a61c:	4604      	mov	r4, r0
 801a61e:	4608      	mov	r0, r1
 801a620:	4611      	mov	r1, r2
 801a622:	2200      	movs	r2, #0
 801a624:	602a      	str	r2, [r5, #0]
 801a626:	461a      	mov	r2, r3
 801a628:	f7ef f853 	bl	80096d2 <_lseek>
 801a62c:	1c43      	adds	r3, r0, #1
 801a62e:	d102      	bne.n	801a636 <_lseek_r+0x1e>
 801a630:	682b      	ldr	r3, [r5, #0]
 801a632:	b103      	cbz	r3, 801a636 <_lseek_r+0x1e>
 801a634:	6023      	str	r3, [r4, #0]
 801a636:	bd38      	pop	{r3, r4, r5, pc}
 801a638:	2000a6a0 	.word	0x2000a6a0

0801a63c <_read_r>:
 801a63c:	b538      	push	{r3, r4, r5, lr}
 801a63e:	4d07      	ldr	r5, [pc, #28]	@ (801a65c <_read_r+0x20>)
 801a640:	4604      	mov	r4, r0
 801a642:	4608      	mov	r0, r1
 801a644:	4611      	mov	r1, r2
 801a646:	2200      	movs	r2, #0
 801a648:	602a      	str	r2, [r5, #0]
 801a64a:	461a      	mov	r2, r3
 801a64c:	f7ee fffd 	bl	800964a <_read>
 801a650:	1c43      	adds	r3, r0, #1
 801a652:	d102      	bne.n	801a65a <_read_r+0x1e>
 801a654:	682b      	ldr	r3, [r5, #0]
 801a656:	b103      	cbz	r3, 801a65a <_read_r+0x1e>
 801a658:	6023      	str	r3, [r4, #0]
 801a65a:	bd38      	pop	{r3, r4, r5, pc}
 801a65c:	2000a6a0 	.word	0x2000a6a0

0801a660 <_write_r>:
 801a660:	b538      	push	{r3, r4, r5, lr}
 801a662:	4d07      	ldr	r5, [pc, #28]	@ (801a680 <_write_r+0x20>)
 801a664:	4604      	mov	r4, r0
 801a666:	4608      	mov	r0, r1
 801a668:	4611      	mov	r1, r2
 801a66a:	2200      	movs	r2, #0
 801a66c:	602a      	str	r2, [r5, #0]
 801a66e:	461a      	mov	r2, r3
 801a670:	f7ed ff2c 	bl	80084cc <_write>
 801a674:	1c43      	adds	r3, r0, #1
 801a676:	d102      	bne.n	801a67e <_write_r+0x1e>
 801a678:	682b      	ldr	r3, [r5, #0]
 801a67a:	b103      	cbz	r3, 801a67e <_write_r+0x1e>
 801a67c:	6023      	str	r3, [r4, #0]
 801a67e:	bd38      	pop	{r3, r4, r5, pc}
 801a680:	2000a6a0 	.word	0x2000a6a0

0801a684 <__errno>:
 801a684:	4b01      	ldr	r3, [pc, #4]	@ (801a68c <__errno+0x8>)
 801a686:	6818      	ldr	r0, [r3, #0]
 801a688:	4770      	bx	lr
 801a68a:	bf00      	nop
 801a68c:	20000160 	.word	0x20000160

0801a690 <__libc_init_array>:
 801a690:	b570      	push	{r4, r5, r6, lr}
 801a692:	4d0d      	ldr	r5, [pc, #52]	@ (801a6c8 <__libc_init_array+0x38>)
 801a694:	4c0d      	ldr	r4, [pc, #52]	@ (801a6cc <__libc_init_array+0x3c>)
 801a696:	1b64      	subs	r4, r4, r5
 801a698:	10a4      	asrs	r4, r4, #2
 801a69a:	2600      	movs	r6, #0
 801a69c:	42a6      	cmp	r6, r4
 801a69e:	d109      	bne.n	801a6b4 <__libc_init_array+0x24>
 801a6a0:	4d0b      	ldr	r5, [pc, #44]	@ (801a6d0 <__libc_init_array+0x40>)
 801a6a2:	4c0c      	ldr	r4, [pc, #48]	@ (801a6d4 <__libc_init_array+0x44>)
 801a6a4:	f003 fdb8 	bl	801e218 <_init>
 801a6a8:	1b64      	subs	r4, r4, r5
 801a6aa:	10a4      	asrs	r4, r4, #2
 801a6ac:	2600      	movs	r6, #0
 801a6ae:	42a6      	cmp	r6, r4
 801a6b0:	d105      	bne.n	801a6be <__libc_init_array+0x2e>
 801a6b2:	bd70      	pop	{r4, r5, r6, pc}
 801a6b4:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6b8:	4798      	blx	r3
 801a6ba:	3601      	adds	r6, #1
 801a6bc:	e7ee      	b.n	801a69c <__libc_init_array+0xc>
 801a6be:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6c2:	4798      	blx	r3
 801a6c4:	3601      	adds	r6, #1
 801a6c6:	e7f2      	b.n	801a6ae <__libc_init_array+0x1e>
 801a6c8:	08020aec 	.word	0x08020aec
 801a6cc:	08020aec 	.word	0x08020aec
 801a6d0:	08020aec 	.word	0x08020aec
 801a6d4:	08020af0 	.word	0x08020af0

0801a6d8 <__retarget_lock_init_recursive>:
 801a6d8:	4770      	bx	lr

0801a6da <__retarget_lock_acquire_recursive>:
 801a6da:	4770      	bx	lr

0801a6dc <__retarget_lock_release_recursive>:
 801a6dc:	4770      	bx	lr

0801a6de <memcpy>:
 801a6de:	440a      	add	r2, r1
 801a6e0:	4291      	cmp	r1, r2
 801a6e2:	f100 33ff 	add.w	r3, r0, #4294967295
 801a6e6:	d100      	bne.n	801a6ea <memcpy+0xc>
 801a6e8:	4770      	bx	lr
 801a6ea:	b510      	push	{r4, lr}
 801a6ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a6f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a6f4:	4291      	cmp	r1, r2
 801a6f6:	d1f9      	bne.n	801a6ec <memcpy+0xe>
 801a6f8:	bd10      	pop	{r4, pc}
	...

0801a6fc <__assert_func>:
 801a6fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a6fe:	4614      	mov	r4, r2
 801a700:	461a      	mov	r2, r3
 801a702:	4b09      	ldr	r3, [pc, #36]	@ (801a728 <__assert_func+0x2c>)
 801a704:	681b      	ldr	r3, [r3, #0]
 801a706:	4605      	mov	r5, r0
 801a708:	68d8      	ldr	r0, [r3, #12]
 801a70a:	b14c      	cbz	r4, 801a720 <__assert_func+0x24>
 801a70c:	4b07      	ldr	r3, [pc, #28]	@ (801a72c <__assert_func+0x30>)
 801a70e:	9100      	str	r1, [sp, #0]
 801a710:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a714:	4906      	ldr	r1, [pc, #24]	@ (801a730 <__assert_func+0x34>)
 801a716:	462b      	mov	r3, r5
 801a718:	f002 ffe6 	bl	801d6e8 <fiprintf>
 801a71c:	f003 f94c 	bl	801d9b8 <abort>
 801a720:	4b04      	ldr	r3, [pc, #16]	@ (801a734 <__assert_func+0x38>)
 801a722:	461c      	mov	r4, r3
 801a724:	e7f3      	b.n	801a70e <__assert_func+0x12>
 801a726:	bf00      	nop
 801a728:	20000160 	.word	0x20000160
 801a72c:	080202c8 	.word	0x080202c8
 801a730:	080202d5 	.word	0x080202d5
 801a734:	08020303 	.word	0x08020303

0801a738 <quorem>:
 801a738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a73c:	6903      	ldr	r3, [r0, #16]
 801a73e:	690c      	ldr	r4, [r1, #16]
 801a740:	42a3      	cmp	r3, r4
 801a742:	4607      	mov	r7, r0
 801a744:	db7e      	blt.n	801a844 <quorem+0x10c>
 801a746:	3c01      	subs	r4, #1
 801a748:	f101 0814 	add.w	r8, r1, #20
 801a74c:	00a3      	lsls	r3, r4, #2
 801a74e:	f100 0514 	add.w	r5, r0, #20
 801a752:	9300      	str	r3, [sp, #0]
 801a754:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a758:	9301      	str	r3, [sp, #4]
 801a75a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a75e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a762:	3301      	adds	r3, #1
 801a764:	429a      	cmp	r2, r3
 801a766:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a76a:	fbb2 f6f3 	udiv	r6, r2, r3
 801a76e:	d32e      	bcc.n	801a7ce <quorem+0x96>
 801a770:	f04f 0a00 	mov.w	sl, #0
 801a774:	46c4      	mov	ip, r8
 801a776:	46ae      	mov	lr, r5
 801a778:	46d3      	mov	fp, sl
 801a77a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801a77e:	b298      	uxth	r0, r3
 801a780:	fb06 a000 	mla	r0, r6, r0, sl
 801a784:	0c02      	lsrs	r2, r0, #16
 801a786:	0c1b      	lsrs	r3, r3, #16
 801a788:	fb06 2303 	mla	r3, r6, r3, r2
 801a78c:	f8de 2000 	ldr.w	r2, [lr]
 801a790:	b280      	uxth	r0, r0
 801a792:	b292      	uxth	r2, r2
 801a794:	1a12      	subs	r2, r2, r0
 801a796:	445a      	add	r2, fp
 801a798:	f8de 0000 	ldr.w	r0, [lr]
 801a79c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a7a0:	b29b      	uxth	r3, r3
 801a7a2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801a7a6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801a7aa:	b292      	uxth	r2, r2
 801a7ac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801a7b0:	45e1      	cmp	r9, ip
 801a7b2:	f84e 2b04 	str.w	r2, [lr], #4
 801a7b6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801a7ba:	d2de      	bcs.n	801a77a <quorem+0x42>
 801a7bc:	9b00      	ldr	r3, [sp, #0]
 801a7be:	58eb      	ldr	r3, [r5, r3]
 801a7c0:	b92b      	cbnz	r3, 801a7ce <quorem+0x96>
 801a7c2:	9b01      	ldr	r3, [sp, #4]
 801a7c4:	3b04      	subs	r3, #4
 801a7c6:	429d      	cmp	r5, r3
 801a7c8:	461a      	mov	r2, r3
 801a7ca:	d32f      	bcc.n	801a82c <quorem+0xf4>
 801a7cc:	613c      	str	r4, [r7, #16]
 801a7ce:	4638      	mov	r0, r7
 801a7d0:	f001 f9c6 	bl	801bb60 <__mcmp>
 801a7d4:	2800      	cmp	r0, #0
 801a7d6:	db25      	blt.n	801a824 <quorem+0xec>
 801a7d8:	4629      	mov	r1, r5
 801a7da:	2000      	movs	r0, #0
 801a7dc:	f858 2b04 	ldr.w	r2, [r8], #4
 801a7e0:	f8d1 c000 	ldr.w	ip, [r1]
 801a7e4:	fa1f fe82 	uxth.w	lr, r2
 801a7e8:	fa1f f38c 	uxth.w	r3, ip
 801a7ec:	eba3 030e 	sub.w	r3, r3, lr
 801a7f0:	4403      	add	r3, r0
 801a7f2:	0c12      	lsrs	r2, r2, #16
 801a7f4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801a7f8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801a7fc:	b29b      	uxth	r3, r3
 801a7fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a802:	45c1      	cmp	r9, r8
 801a804:	f841 3b04 	str.w	r3, [r1], #4
 801a808:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a80c:	d2e6      	bcs.n	801a7dc <quorem+0xa4>
 801a80e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a812:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a816:	b922      	cbnz	r2, 801a822 <quorem+0xea>
 801a818:	3b04      	subs	r3, #4
 801a81a:	429d      	cmp	r5, r3
 801a81c:	461a      	mov	r2, r3
 801a81e:	d30b      	bcc.n	801a838 <quorem+0x100>
 801a820:	613c      	str	r4, [r7, #16]
 801a822:	3601      	adds	r6, #1
 801a824:	4630      	mov	r0, r6
 801a826:	b003      	add	sp, #12
 801a828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a82c:	6812      	ldr	r2, [r2, #0]
 801a82e:	3b04      	subs	r3, #4
 801a830:	2a00      	cmp	r2, #0
 801a832:	d1cb      	bne.n	801a7cc <quorem+0x94>
 801a834:	3c01      	subs	r4, #1
 801a836:	e7c6      	b.n	801a7c6 <quorem+0x8e>
 801a838:	6812      	ldr	r2, [r2, #0]
 801a83a:	3b04      	subs	r3, #4
 801a83c:	2a00      	cmp	r2, #0
 801a83e:	d1ef      	bne.n	801a820 <quorem+0xe8>
 801a840:	3c01      	subs	r4, #1
 801a842:	e7ea      	b.n	801a81a <quorem+0xe2>
 801a844:	2000      	movs	r0, #0
 801a846:	e7ee      	b.n	801a826 <quorem+0xee>

0801a848 <_dtoa_r>:
 801a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a84c:	69c7      	ldr	r7, [r0, #28]
 801a84e:	b097      	sub	sp, #92	@ 0x5c
 801a850:	ed8d 0b04 	vstr	d0, [sp, #16]
 801a854:	ec55 4b10 	vmov	r4, r5, d0
 801a858:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801a85a:	9107      	str	r1, [sp, #28]
 801a85c:	4681      	mov	r9, r0
 801a85e:	920c      	str	r2, [sp, #48]	@ 0x30
 801a860:	9311      	str	r3, [sp, #68]	@ 0x44
 801a862:	b97f      	cbnz	r7, 801a884 <_dtoa_r+0x3c>
 801a864:	2010      	movs	r0, #16
 801a866:	f000 fe09 	bl	801b47c <malloc>
 801a86a:	4602      	mov	r2, r0
 801a86c:	f8c9 001c 	str.w	r0, [r9, #28]
 801a870:	b920      	cbnz	r0, 801a87c <_dtoa_r+0x34>
 801a872:	4ba9      	ldr	r3, [pc, #676]	@ (801ab18 <_dtoa_r+0x2d0>)
 801a874:	21ef      	movs	r1, #239	@ 0xef
 801a876:	48a9      	ldr	r0, [pc, #676]	@ (801ab1c <_dtoa_r+0x2d4>)
 801a878:	f7ff ff40 	bl	801a6fc <__assert_func>
 801a87c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801a880:	6007      	str	r7, [r0, #0]
 801a882:	60c7      	str	r7, [r0, #12]
 801a884:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a888:	6819      	ldr	r1, [r3, #0]
 801a88a:	b159      	cbz	r1, 801a8a4 <_dtoa_r+0x5c>
 801a88c:	685a      	ldr	r2, [r3, #4]
 801a88e:	604a      	str	r2, [r1, #4]
 801a890:	2301      	movs	r3, #1
 801a892:	4093      	lsls	r3, r2
 801a894:	608b      	str	r3, [r1, #8]
 801a896:	4648      	mov	r0, r9
 801a898:	f000 fee6 	bl	801b668 <_Bfree>
 801a89c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a8a0:	2200      	movs	r2, #0
 801a8a2:	601a      	str	r2, [r3, #0]
 801a8a4:	1e2b      	subs	r3, r5, #0
 801a8a6:	bfb9      	ittee	lt
 801a8a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801a8ac:	9305      	strlt	r3, [sp, #20]
 801a8ae:	2300      	movge	r3, #0
 801a8b0:	6033      	strge	r3, [r6, #0]
 801a8b2:	9f05      	ldr	r7, [sp, #20]
 801a8b4:	4b9a      	ldr	r3, [pc, #616]	@ (801ab20 <_dtoa_r+0x2d8>)
 801a8b6:	bfbc      	itt	lt
 801a8b8:	2201      	movlt	r2, #1
 801a8ba:	6032      	strlt	r2, [r6, #0]
 801a8bc:	43bb      	bics	r3, r7
 801a8be:	d112      	bne.n	801a8e6 <_dtoa_r+0x9e>
 801a8c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a8c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 801a8c6:	6013      	str	r3, [r2, #0]
 801a8c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a8cc:	4323      	orrs	r3, r4
 801a8ce:	f000 855a 	beq.w	801b386 <_dtoa_r+0xb3e>
 801a8d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801a8d4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801ab34 <_dtoa_r+0x2ec>
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	f000 855c 	beq.w	801b396 <_dtoa_r+0xb4e>
 801a8de:	f10a 0303 	add.w	r3, sl, #3
 801a8e2:	f000 bd56 	b.w	801b392 <_dtoa_r+0xb4a>
 801a8e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 801a8ea:	2200      	movs	r2, #0
 801a8ec:	ec51 0b17 	vmov	r0, r1, d7
 801a8f0:	2300      	movs	r3, #0
 801a8f2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801a8f6:	f7e6 f8e7 	bl	8000ac8 <__aeabi_dcmpeq>
 801a8fa:	4680      	mov	r8, r0
 801a8fc:	b158      	cbz	r0, 801a916 <_dtoa_r+0xce>
 801a8fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a900:	2301      	movs	r3, #1
 801a902:	6013      	str	r3, [r2, #0]
 801a904:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801a906:	b113      	cbz	r3, 801a90e <_dtoa_r+0xc6>
 801a908:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a90a:	4b86      	ldr	r3, [pc, #536]	@ (801ab24 <_dtoa_r+0x2dc>)
 801a90c:	6013      	str	r3, [r2, #0]
 801a90e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 801ab38 <_dtoa_r+0x2f0>
 801a912:	f000 bd40 	b.w	801b396 <_dtoa_r+0xb4e>
 801a916:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801a91a:	aa14      	add	r2, sp, #80	@ 0x50
 801a91c:	a915      	add	r1, sp, #84	@ 0x54
 801a91e:	4648      	mov	r0, r9
 801a920:	f001 fa3e 	bl	801bda0 <__d2b>
 801a924:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801a928:	9002      	str	r0, [sp, #8]
 801a92a:	2e00      	cmp	r6, #0
 801a92c:	d078      	beq.n	801aa20 <_dtoa_r+0x1d8>
 801a92e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a930:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801a934:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a938:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801a93c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801a940:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801a944:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801a948:	4619      	mov	r1, r3
 801a94a:	2200      	movs	r2, #0
 801a94c:	4b76      	ldr	r3, [pc, #472]	@ (801ab28 <_dtoa_r+0x2e0>)
 801a94e:	f7e5 fc9b 	bl	8000288 <__aeabi_dsub>
 801a952:	a36b      	add	r3, pc, #428	@ (adr r3, 801ab00 <_dtoa_r+0x2b8>)
 801a954:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a958:	f7e5 fe4e 	bl	80005f8 <__aeabi_dmul>
 801a95c:	a36a      	add	r3, pc, #424	@ (adr r3, 801ab08 <_dtoa_r+0x2c0>)
 801a95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a962:	f7e5 fc93 	bl	800028c <__adddf3>
 801a966:	4604      	mov	r4, r0
 801a968:	4630      	mov	r0, r6
 801a96a:	460d      	mov	r5, r1
 801a96c:	f7e5 fdda 	bl	8000524 <__aeabi_i2d>
 801a970:	a367      	add	r3, pc, #412	@ (adr r3, 801ab10 <_dtoa_r+0x2c8>)
 801a972:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a976:	f7e5 fe3f 	bl	80005f8 <__aeabi_dmul>
 801a97a:	4602      	mov	r2, r0
 801a97c:	460b      	mov	r3, r1
 801a97e:	4620      	mov	r0, r4
 801a980:	4629      	mov	r1, r5
 801a982:	f7e5 fc83 	bl	800028c <__adddf3>
 801a986:	4604      	mov	r4, r0
 801a988:	460d      	mov	r5, r1
 801a98a:	f7e6 f8e5 	bl	8000b58 <__aeabi_d2iz>
 801a98e:	2200      	movs	r2, #0
 801a990:	4607      	mov	r7, r0
 801a992:	2300      	movs	r3, #0
 801a994:	4620      	mov	r0, r4
 801a996:	4629      	mov	r1, r5
 801a998:	f7e6 f8a0 	bl	8000adc <__aeabi_dcmplt>
 801a99c:	b140      	cbz	r0, 801a9b0 <_dtoa_r+0x168>
 801a99e:	4638      	mov	r0, r7
 801a9a0:	f7e5 fdc0 	bl	8000524 <__aeabi_i2d>
 801a9a4:	4622      	mov	r2, r4
 801a9a6:	462b      	mov	r3, r5
 801a9a8:	f7e6 f88e 	bl	8000ac8 <__aeabi_dcmpeq>
 801a9ac:	b900      	cbnz	r0, 801a9b0 <_dtoa_r+0x168>
 801a9ae:	3f01      	subs	r7, #1
 801a9b0:	2f16      	cmp	r7, #22
 801a9b2:	d852      	bhi.n	801aa5a <_dtoa_r+0x212>
 801a9b4:	4b5d      	ldr	r3, [pc, #372]	@ (801ab2c <_dtoa_r+0x2e4>)
 801a9b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801a9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801a9c2:	f7e6 f88b 	bl	8000adc <__aeabi_dcmplt>
 801a9c6:	2800      	cmp	r0, #0
 801a9c8:	d049      	beq.n	801aa5e <_dtoa_r+0x216>
 801a9ca:	3f01      	subs	r7, #1
 801a9cc:	2300      	movs	r3, #0
 801a9ce:	9310      	str	r3, [sp, #64]	@ 0x40
 801a9d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a9d2:	1b9b      	subs	r3, r3, r6
 801a9d4:	1e5a      	subs	r2, r3, #1
 801a9d6:	bf45      	ittet	mi
 801a9d8:	f1c3 0301 	rsbmi	r3, r3, #1
 801a9dc:	9300      	strmi	r3, [sp, #0]
 801a9de:	2300      	movpl	r3, #0
 801a9e0:	2300      	movmi	r3, #0
 801a9e2:	9206      	str	r2, [sp, #24]
 801a9e4:	bf54      	ite	pl
 801a9e6:	9300      	strpl	r3, [sp, #0]
 801a9e8:	9306      	strmi	r3, [sp, #24]
 801a9ea:	2f00      	cmp	r7, #0
 801a9ec:	db39      	blt.n	801aa62 <_dtoa_r+0x21a>
 801a9ee:	9b06      	ldr	r3, [sp, #24]
 801a9f0:	970d      	str	r7, [sp, #52]	@ 0x34
 801a9f2:	443b      	add	r3, r7
 801a9f4:	9306      	str	r3, [sp, #24]
 801a9f6:	2300      	movs	r3, #0
 801a9f8:	9308      	str	r3, [sp, #32]
 801a9fa:	9b07      	ldr	r3, [sp, #28]
 801a9fc:	2b09      	cmp	r3, #9
 801a9fe:	d863      	bhi.n	801aac8 <_dtoa_r+0x280>
 801aa00:	2b05      	cmp	r3, #5
 801aa02:	bfc4      	itt	gt
 801aa04:	3b04      	subgt	r3, #4
 801aa06:	9307      	strgt	r3, [sp, #28]
 801aa08:	9b07      	ldr	r3, [sp, #28]
 801aa0a:	f1a3 0302 	sub.w	r3, r3, #2
 801aa0e:	bfcc      	ite	gt
 801aa10:	2400      	movgt	r4, #0
 801aa12:	2401      	movle	r4, #1
 801aa14:	2b03      	cmp	r3, #3
 801aa16:	d863      	bhi.n	801aae0 <_dtoa_r+0x298>
 801aa18:	e8df f003 	tbb	[pc, r3]
 801aa1c:	2b375452 	.word	0x2b375452
 801aa20:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801aa24:	441e      	add	r6, r3
 801aa26:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801aa2a:	2b20      	cmp	r3, #32
 801aa2c:	bfc1      	itttt	gt
 801aa2e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801aa32:	409f      	lslgt	r7, r3
 801aa34:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801aa38:	fa24 f303 	lsrgt.w	r3, r4, r3
 801aa3c:	bfd6      	itet	le
 801aa3e:	f1c3 0320 	rsble	r3, r3, #32
 801aa42:	ea47 0003 	orrgt.w	r0, r7, r3
 801aa46:	fa04 f003 	lslle.w	r0, r4, r3
 801aa4a:	f7e5 fd5b 	bl	8000504 <__aeabi_ui2d>
 801aa4e:	2201      	movs	r2, #1
 801aa50:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801aa54:	3e01      	subs	r6, #1
 801aa56:	9212      	str	r2, [sp, #72]	@ 0x48
 801aa58:	e776      	b.n	801a948 <_dtoa_r+0x100>
 801aa5a:	2301      	movs	r3, #1
 801aa5c:	e7b7      	b.n	801a9ce <_dtoa_r+0x186>
 801aa5e:	9010      	str	r0, [sp, #64]	@ 0x40
 801aa60:	e7b6      	b.n	801a9d0 <_dtoa_r+0x188>
 801aa62:	9b00      	ldr	r3, [sp, #0]
 801aa64:	1bdb      	subs	r3, r3, r7
 801aa66:	9300      	str	r3, [sp, #0]
 801aa68:	427b      	negs	r3, r7
 801aa6a:	9308      	str	r3, [sp, #32]
 801aa6c:	2300      	movs	r3, #0
 801aa6e:	930d      	str	r3, [sp, #52]	@ 0x34
 801aa70:	e7c3      	b.n	801a9fa <_dtoa_r+0x1b2>
 801aa72:	2301      	movs	r3, #1
 801aa74:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa78:	eb07 0b03 	add.w	fp, r7, r3
 801aa7c:	f10b 0301 	add.w	r3, fp, #1
 801aa80:	2b01      	cmp	r3, #1
 801aa82:	9303      	str	r3, [sp, #12]
 801aa84:	bfb8      	it	lt
 801aa86:	2301      	movlt	r3, #1
 801aa88:	e006      	b.n	801aa98 <_dtoa_r+0x250>
 801aa8a:	2301      	movs	r3, #1
 801aa8c:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	dd28      	ble.n	801aae6 <_dtoa_r+0x29e>
 801aa94:	469b      	mov	fp, r3
 801aa96:	9303      	str	r3, [sp, #12]
 801aa98:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801aa9c:	2100      	movs	r1, #0
 801aa9e:	2204      	movs	r2, #4
 801aaa0:	f102 0514 	add.w	r5, r2, #20
 801aaa4:	429d      	cmp	r5, r3
 801aaa6:	d926      	bls.n	801aaf6 <_dtoa_r+0x2ae>
 801aaa8:	6041      	str	r1, [r0, #4]
 801aaaa:	4648      	mov	r0, r9
 801aaac:	f000 fd9c 	bl	801b5e8 <_Balloc>
 801aab0:	4682      	mov	sl, r0
 801aab2:	2800      	cmp	r0, #0
 801aab4:	d142      	bne.n	801ab3c <_dtoa_r+0x2f4>
 801aab6:	4b1e      	ldr	r3, [pc, #120]	@ (801ab30 <_dtoa_r+0x2e8>)
 801aab8:	4602      	mov	r2, r0
 801aaba:	f240 11af 	movw	r1, #431	@ 0x1af
 801aabe:	e6da      	b.n	801a876 <_dtoa_r+0x2e>
 801aac0:	2300      	movs	r3, #0
 801aac2:	e7e3      	b.n	801aa8c <_dtoa_r+0x244>
 801aac4:	2300      	movs	r3, #0
 801aac6:	e7d5      	b.n	801aa74 <_dtoa_r+0x22c>
 801aac8:	2401      	movs	r4, #1
 801aaca:	2300      	movs	r3, #0
 801aacc:	9307      	str	r3, [sp, #28]
 801aace:	9409      	str	r4, [sp, #36]	@ 0x24
 801aad0:	f04f 3bff 	mov.w	fp, #4294967295
 801aad4:	2200      	movs	r2, #0
 801aad6:	f8cd b00c 	str.w	fp, [sp, #12]
 801aada:	2312      	movs	r3, #18
 801aadc:	920c      	str	r2, [sp, #48]	@ 0x30
 801aade:	e7db      	b.n	801aa98 <_dtoa_r+0x250>
 801aae0:	2301      	movs	r3, #1
 801aae2:	9309      	str	r3, [sp, #36]	@ 0x24
 801aae4:	e7f4      	b.n	801aad0 <_dtoa_r+0x288>
 801aae6:	f04f 0b01 	mov.w	fp, #1
 801aaea:	f8cd b00c 	str.w	fp, [sp, #12]
 801aaee:	465b      	mov	r3, fp
 801aaf0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801aaf4:	e7d0      	b.n	801aa98 <_dtoa_r+0x250>
 801aaf6:	3101      	adds	r1, #1
 801aaf8:	0052      	lsls	r2, r2, #1
 801aafa:	e7d1      	b.n	801aaa0 <_dtoa_r+0x258>
 801aafc:	f3af 8000 	nop.w
 801ab00:	636f4361 	.word	0x636f4361
 801ab04:	3fd287a7 	.word	0x3fd287a7
 801ab08:	8b60c8b3 	.word	0x8b60c8b3
 801ab0c:	3fc68a28 	.word	0x3fc68a28
 801ab10:	509f79fb 	.word	0x509f79fb
 801ab14:	3fd34413 	.word	0x3fd34413
 801ab18:	08020311 	.word	0x08020311
 801ab1c:	08020328 	.word	0x08020328
 801ab20:	7ff00000 	.word	0x7ff00000
 801ab24:	08020403 	.word	0x08020403
 801ab28:	3ff80000 	.word	0x3ff80000
 801ab2c:	080208c8 	.word	0x080208c8
 801ab30:	08020380 	.word	0x08020380
 801ab34:	0802030d 	.word	0x0802030d
 801ab38:	08020402 	.word	0x08020402
 801ab3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801ab40:	6018      	str	r0, [r3, #0]
 801ab42:	9b03      	ldr	r3, [sp, #12]
 801ab44:	2b0e      	cmp	r3, #14
 801ab46:	f200 80a1 	bhi.w	801ac8c <_dtoa_r+0x444>
 801ab4a:	2c00      	cmp	r4, #0
 801ab4c:	f000 809e 	beq.w	801ac8c <_dtoa_r+0x444>
 801ab50:	2f00      	cmp	r7, #0
 801ab52:	dd33      	ble.n	801abbc <_dtoa_r+0x374>
 801ab54:	4b9c      	ldr	r3, [pc, #624]	@ (801adc8 <_dtoa_r+0x580>)
 801ab56:	f007 020f 	and.w	r2, r7, #15
 801ab5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ab5e:	ed93 7b00 	vldr	d7, [r3]
 801ab62:	05f8      	lsls	r0, r7, #23
 801ab64:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801ab68:	ea4f 1427 	mov.w	r4, r7, asr #4
 801ab6c:	d516      	bpl.n	801ab9c <_dtoa_r+0x354>
 801ab6e:	4b97      	ldr	r3, [pc, #604]	@ (801adcc <_dtoa_r+0x584>)
 801ab70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801ab74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ab78:	f7e5 fe68 	bl	800084c <__aeabi_ddiv>
 801ab7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ab80:	f004 040f 	and.w	r4, r4, #15
 801ab84:	2603      	movs	r6, #3
 801ab86:	4d91      	ldr	r5, [pc, #580]	@ (801adcc <_dtoa_r+0x584>)
 801ab88:	b954      	cbnz	r4, 801aba0 <_dtoa_r+0x358>
 801ab8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801ab8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ab92:	f7e5 fe5b 	bl	800084c <__aeabi_ddiv>
 801ab96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ab9a:	e028      	b.n	801abee <_dtoa_r+0x3a6>
 801ab9c:	2602      	movs	r6, #2
 801ab9e:	e7f2      	b.n	801ab86 <_dtoa_r+0x33e>
 801aba0:	07e1      	lsls	r1, r4, #31
 801aba2:	d508      	bpl.n	801abb6 <_dtoa_r+0x36e>
 801aba4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801aba8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801abac:	f7e5 fd24 	bl	80005f8 <__aeabi_dmul>
 801abb0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801abb4:	3601      	adds	r6, #1
 801abb6:	1064      	asrs	r4, r4, #1
 801abb8:	3508      	adds	r5, #8
 801abba:	e7e5      	b.n	801ab88 <_dtoa_r+0x340>
 801abbc:	f000 80af 	beq.w	801ad1e <_dtoa_r+0x4d6>
 801abc0:	427c      	negs	r4, r7
 801abc2:	4b81      	ldr	r3, [pc, #516]	@ (801adc8 <_dtoa_r+0x580>)
 801abc4:	4d81      	ldr	r5, [pc, #516]	@ (801adcc <_dtoa_r+0x584>)
 801abc6:	f004 020f 	and.w	r2, r4, #15
 801abca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801abd6:	f7e5 fd0f 	bl	80005f8 <__aeabi_dmul>
 801abda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801abde:	1124      	asrs	r4, r4, #4
 801abe0:	2300      	movs	r3, #0
 801abe2:	2602      	movs	r6, #2
 801abe4:	2c00      	cmp	r4, #0
 801abe6:	f040 808f 	bne.w	801ad08 <_dtoa_r+0x4c0>
 801abea:	2b00      	cmp	r3, #0
 801abec:	d1d3      	bne.n	801ab96 <_dtoa_r+0x34e>
 801abee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801abf0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	f000 8094 	beq.w	801ad22 <_dtoa_r+0x4da>
 801abfa:	4b75      	ldr	r3, [pc, #468]	@ (801add0 <_dtoa_r+0x588>)
 801abfc:	2200      	movs	r2, #0
 801abfe:	4620      	mov	r0, r4
 801ac00:	4629      	mov	r1, r5
 801ac02:	f7e5 ff6b 	bl	8000adc <__aeabi_dcmplt>
 801ac06:	2800      	cmp	r0, #0
 801ac08:	f000 808b 	beq.w	801ad22 <_dtoa_r+0x4da>
 801ac0c:	9b03      	ldr	r3, [sp, #12]
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	f000 8087 	beq.w	801ad22 <_dtoa_r+0x4da>
 801ac14:	f1bb 0f00 	cmp.w	fp, #0
 801ac18:	dd34      	ble.n	801ac84 <_dtoa_r+0x43c>
 801ac1a:	4620      	mov	r0, r4
 801ac1c:	4b6d      	ldr	r3, [pc, #436]	@ (801add4 <_dtoa_r+0x58c>)
 801ac1e:	2200      	movs	r2, #0
 801ac20:	4629      	mov	r1, r5
 801ac22:	f7e5 fce9 	bl	80005f8 <__aeabi_dmul>
 801ac26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ac2a:	f107 38ff 	add.w	r8, r7, #4294967295
 801ac2e:	3601      	adds	r6, #1
 801ac30:	465c      	mov	r4, fp
 801ac32:	4630      	mov	r0, r6
 801ac34:	f7e5 fc76 	bl	8000524 <__aeabi_i2d>
 801ac38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ac3c:	f7e5 fcdc 	bl	80005f8 <__aeabi_dmul>
 801ac40:	4b65      	ldr	r3, [pc, #404]	@ (801add8 <_dtoa_r+0x590>)
 801ac42:	2200      	movs	r2, #0
 801ac44:	f7e5 fb22 	bl	800028c <__adddf3>
 801ac48:	4605      	mov	r5, r0
 801ac4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801ac4e:	2c00      	cmp	r4, #0
 801ac50:	d16a      	bne.n	801ad28 <_dtoa_r+0x4e0>
 801ac52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ac56:	4b61      	ldr	r3, [pc, #388]	@ (801addc <_dtoa_r+0x594>)
 801ac58:	2200      	movs	r2, #0
 801ac5a:	f7e5 fb15 	bl	8000288 <__aeabi_dsub>
 801ac5e:	4602      	mov	r2, r0
 801ac60:	460b      	mov	r3, r1
 801ac62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801ac66:	462a      	mov	r2, r5
 801ac68:	4633      	mov	r3, r6
 801ac6a:	f7e5 ff55 	bl	8000b18 <__aeabi_dcmpgt>
 801ac6e:	2800      	cmp	r0, #0
 801ac70:	f040 8298 	bne.w	801b1a4 <_dtoa_r+0x95c>
 801ac74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ac78:	462a      	mov	r2, r5
 801ac7a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801ac7e:	f7e5 ff2d 	bl	8000adc <__aeabi_dcmplt>
 801ac82:	bb38      	cbnz	r0, 801acd4 <_dtoa_r+0x48c>
 801ac84:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 801ac88:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801ac8c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	f2c0 8157 	blt.w	801af42 <_dtoa_r+0x6fa>
 801ac94:	2f0e      	cmp	r7, #14
 801ac96:	f300 8154 	bgt.w	801af42 <_dtoa_r+0x6fa>
 801ac9a:	4b4b      	ldr	r3, [pc, #300]	@ (801adc8 <_dtoa_r+0x580>)
 801ac9c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801aca0:	ed93 7b00 	vldr	d7, [r3]
 801aca4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	ed8d 7b00 	vstr	d7, [sp]
 801acac:	f280 80e5 	bge.w	801ae7a <_dtoa_r+0x632>
 801acb0:	9b03      	ldr	r3, [sp, #12]
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	f300 80e1 	bgt.w	801ae7a <_dtoa_r+0x632>
 801acb8:	d10c      	bne.n	801acd4 <_dtoa_r+0x48c>
 801acba:	4b48      	ldr	r3, [pc, #288]	@ (801addc <_dtoa_r+0x594>)
 801acbc:	2200      	movs	r2, #0
 801acbe:	ec51 0b17 	vmov	r0, r1, d7
 801acc2:	f7e5 fc99 	bl	80005f8 <__aeabi_dmul>
 801acc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801acca:	f7e5 ff1b 	bl	8000b04 <__aeabi_dcmpge>
 801acce:	2800      	cmp	r0, #0
 801acd0:	f000 8266 	beq.w	801b1a0 <_dtoa_r+0x958>
 801acd4:	2400      	movs	r4, #0
 801acd6:	4625      	mov	r5, r4
 801acd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801acda:	4656      	mov	r6, sl
 801acdc:	ea6f 0803 	mvn.w	r8, r3
 801ace0:	2700      	movs	r7, #0
 801ace2:	4621      	mov	r1, r4
 801ace4:	4648      	mov	r0, r9
 801ace6:	f000 fcbf 	bl	801b668 <_Bfree>
 801acea:	2d00      	cmp	r5, #0
 801acec:	f000 80bd 	beq.w	801ae6a <_dtoa_r+0x622>
 801acf0:	b12f      	cbz	r7, 801acfe <_dtoa_r+0x4b6>
 801acf2:	42af      	cmp	r7, r5
 801acf4:	d003      	beq.n	801acfe <_dtoa_r+0x4b6>
 801acf6:	4639      	mov	r1, r7
 801acf8:	4648      	mov	r0, r9
 801acfa:	f000 fcb5 	bl	801b668 <_Bfree>
 801acfe:	4629      	mov	r1, r5
 801ad00:	4648      	mov	r0, r9
 801ad02:	f000 fcb1 	bl	801b668 <_Bfree>
 801ad06:	e0b0      	b.n	801ae6a <_dtoa_r+0x622>
 801ad08:	07e2      	lsls	r2, r4, #31
 801ad0a:	d505      	bpl.n	801ad18 <_dtoa_r+0x4d0>
 801ad0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ad10:	f7e5 fc72 	bl	80005f8 <__aeabi_dmul>
 801ad14:	3601      	adds	r6, #1
 801ad16:	2301      	movs	r3, #1
 801ad18:	1064      	asrs	r4, r4, #1
 801ad1a:	3508      	adds	r5, #8
 801ad1c:	e762      	b.n	801abe4 <_dtoa_r+0x39c>
 801ad1e:	2602      	movs	r6, #2
 801ad20:	e765      	b.n	801abee <_dtoa_r+0x3a6>
 801ad22:	9c03      	ldr	r4, [sp, #12]
 801ad24:	46b8      	mov	r8, r7
 801ad26:	e784      	b.n	801ac32 <_dtoa_r+0x3ea>
 801ad28:	4b27      	ldr	r3, [pc, #156]	@ (801adc8 <_dtoa_r+0x580>)
 801ad2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ad2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ad30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ad34:	4454      	add	r4, sl
 801ad36:	2900      	cmp	r1, #0
 801ad38:	d054      	beq.n	801ade4 <_dtoa_r+0x59c>
 801ad3a:	4929      	ldr	r1, [pc, #164]	@ (801ade0 <_dtoa_r+0x598>)
 801ad3c:	2000      	movs	r0, #0
 801ad3e:	f7e5 fd85 	bl	800084c <__aeabi_ddiv>
 801ad42:	4633      	mov	r3, r6
 801ad44:	462a      	mov	r2, r5
 801ad46:	f7e5 fa9f 	bl	8000288 <__aeabi_dsub>
 801ad4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801ad4e:	4656      	mov	r6, sl
 801ad50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ad54:	f7e5 ff00 	bl	8000b58 <__aeabi_d2iz>
 801ad58:	4605      	mov	r5, r0
 801ad5a:	f7e5 fbe3 	bl	8000524 <__aeabi_i2d>
 801ad5e:	4602      	mov	r2, r0
 801ad60:	460b      	mov	r3, r1
 801ad62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ad66:	f7e5 fa8f 	bl	8000288 <__aeabi_dsub>
 801ad6a:	3530      	adds	r5, #48	@ 0x30
 801ad6c:	4602      	mov	r2, r0
 801ad6e:	460b      	mov	r3, r1
 801ad70:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801ad74:	f806 5b01 	strb.w	r5, [r6], #1
 801ad78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801ad7c:	f7e5 feae 	bl	8000adc <__aeabi_dcmplt>
 801ad80:	2800      	cmp	r0, #0
 801ad82:	d172      	bne.n	801ae6a <_dtoa_r+0x622>
 801ad84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ad88:	4911      	ldr	r1, [pc, #68]	@ (801add0 <_dtoa_r+0x588>)
 801ad8a:	2000      	movs	r0, #0
 801ad8c:	f7e5 fa7c 	bl	8000288 <__aeabi_dsub>
 801ad90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801ad94:	f7e5 fea2 	bl	8000adc <__aeabi_dcmplt>
 801ad98:	2800      	cmp	r0, #0
 801ad9a:	f040 80b4 	bne.w	801af06 <_dtoa_r+0x6be>
 801ad9e:	42a6      	cmp	r6, r4
 801ada0:	f43f af70 	beq.w	801ac84 <_dtoa_r+0x43c>
 801ada4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801ada8:	4b0a      	ldr	r3, [pc, #40]	@ (801add4 <_dtoa_r+0x58c>)
 801adaa:	2200      	movs	r2, #0
 801adac:	f7e5 fc24 	bl	80005f8 <__aeabi_dmul>
 801adb0:	4b08      	ldr	r3, [pc, #32]	@ (801add4 <_dtoa_r+0x58c>)
 801adb2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801adb6:	2200      	movs	r2, #0
 801adb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801adbc:	f7e5 fc1c 	bl	80005f8 <__aeabi_dmul>
 801adc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801adc4:	e7c4      	b.n	801ad50 <_dtoa_r+0x508>
 801adc6:	bf00      	nop
 801adc8:	080208c8 	.word	0x080208c8
 801adcc:	080208a0 	.word	0x080208a0
 801add0:	3ff00000 	.word	0x3ff00000
 801add4:	40240000 	.word	0x40240000
 801add8:	401c0000 	.word	0x401c0000
 801addc:	40140000 	.word	0x40140000
 801ade0:	3fe00000 	.word	0x3fe00000
 801ade4:	4631      	mov	r1, r6
 801ade6:	4628      	mov	r0, r5
 801ade8:	f7e5 fc06 	bl	80005f8 <__aeabi_dmul>
 801adec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801adf0:	9413      	str	r4, [sp, #76]	@ 0x4c
 801adf2:	4656      	mov	r6, sl
 801adf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801adf8:	f7e5 feae 	bl	8000b58 <__aeabi_d2iz>
 801adfc:	4605      	mov	r5, r0
 801adfe:	f7e5 fb91 	bl	8000524 <__aeabi_i2d>
 801ae02:	4602      	mov	r2, r0
 801ae04:	460b      	mov	r3, r1
 801ae06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ae0a:	f7e5 fa3d 	bl	8000288 <__aeabi_dsub>
 801ae0e:	3530      	adds	r5, #48	@ 0x30
 801ae10:	f806 5b01 	strb.w	r5, [r6], #1
 801ae14:	4602      	mov	r2, r0
 801ae16:	460b      	mov	r3, r1
 801ae18:	42a6      	cmp	r6, r4
 801ae1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801ae1e:	f04f 0200 	mov.w	r2, #0
 801ae22:	d124      	bne.n	801ae6e <_dtoa_r+0x626>
 801ae24:	4baf      	ldr	r3, [pc, #700]	@ (801b0e4 <_dtoa_r+0x89c>)
 801ae26:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801ae2a:	f7e5 fa2f 	bl	800028c <__adddf3>
 801ae2e:	4602      	mov	r2, r0
 801ae30:	460b      	mov	r3, r1
 801ae32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ae36:	f7e5 fe6f 	bl	8000b18 <__aeabi_dcmpgt>
 801ae3a:	2800      	cmp	r0, #0
 801ae3c:	d163      	bne.n	801af06 <_dtoa_r+0x6be>
 801ae3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801ae42:	49a8      	ldr	r1, [pc, #672]	@ (801b0e4 <_dtoa_r+0x89c>)
 801ae44:	2000      	movs	r0, #0
 801ae46:	f7e5 fa1f 	bl	8000288 <__aeabi_dsub>
 801ae4a:	4602      	mov	r2, r0
 801ae4c:	460b      	mov	r3, r1
 801ae4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ae52:	f7e5 fe43 	bl	8000adc <__aeabi_dcmplt>
 801ae56:	2800      	cmp	r0, #0
 801ae58:	f43f af14 	beq.w	801ac84 <_dtoa_r+0x43c>
 801ae5c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801ae5e:	1e73      	subs	r3, r6, #1
 801ae60:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ae62:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ae66:	2b30      	cmp	r3, #48	@ 0x30
 801ae68:	d0f8      	beq.n	801ae5c <_dtoa_r+0x614>
 801ae6a:	4647      	mov	r7, r8
 801ae6c:	e03b      	b.n	801aee6 <_dtoa_r+0x69e>
 801ae6e:	4b9e      	ldr	r3, [pc, #632]	@ (801b0e8 <_dtoa_r+0x8a0>)
 801ae70:	f7e5 fbc2 	bl	80005f8 <__aeabi_dmul>
 801ae74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ae78:	e7bc      	b.n	801adf4 <_dtoa_r+0x5ac>
 801ae7a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801ae7e:	4656      	mov	r6, sl
 801ae80:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ae84:	4620      	mov	r0, r4
 801ae86:	4629      	mov	r1, r5
 801ae88:	f7e5 fce0 	bl	800084c <__aeabi_ddiv>
 801ae8c:	f7e5 fe64 	bl	8000b58 <__aeabi_d2iz>
 801ae90:	4680      	mov	r8, r0
 801ae92:	f7e5 fb47 	bl	8000524 <__aeabi_i2d>
 801ae96:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ae9a:	f7e5 fbad 	bl	80005f8 <__aeabi_dmul>
 801ae9e:	4602      	mov	r2, r0
 801aea0:	460b      	mov	r3, r1
 801aea2:	4620      	mov	r0, r4
 801aea4:	4629      	mov	r1, r5
 801aea6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801aeaa:	f7e5 f9ed 	bl	8000288 <__aeabi_dsub>
 801aeae:	f806 4b01 	strb.w	r4, [r6], #1
 801aeb2:	9d03      	ldr	r5, [sp, #12]
 801aeb4:	eba6 040a 	sub.w	r4, r6, sl
 801aeb8:	42a5      	cmp	r5, r4
 801aeba:	4602      	mov	r2, r0
 801aebc:	460b      	mov	r3, r1
 801aebe:	d133      	bne.n	801af28 <_dtoa_r+0x6e0>
 801aec0:	f7e5 f9e4 	bl	800028c <__adddf3>
 801aec4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aec8:	4604      	mov	r4, r0
 801aeca:	460d      	mov	r5, r1
 801aecc:	f7e5 fe24 	bl	8000b18 <__aeabi_dcmpgt>
 801aed0:	b9c0      	cbnz	r0, 801af04 <_dtoa_r+0x6bc>
 801aed2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aed6:	4620      	mov	r0, r4
 801aed8:	4629      	mov	r1, r5
 801aeda:	f7e5 fdf5 	bl	8000ac8 <__aeabi_dcmpeq>
 801aede:	b110      	cbz	r0, 801aee6 <_dtoa_r+0x69e>
 801aee0:	f018 0f01 	tst.w	r8, #1
 801aee4:	d10e      	bne.n	801af04 <_dtoa_r+0x6bc>
 801aee6:	9902      	ldr	r1, [sp, #8]
 801aee8:	4648      	mov	r0, r9
 801aeea:	f000 fbbd 	bl	801b668 <_Bfree>
 801aeee:	2300      	movs	r3, #0
 801aef0:	7033      	strb	r3, [r6, #0]
 801aef2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801aef4:	3701      	adds	r7, #1
 801aef6:	601f      	str	r7, [r3, #0]
 801aef8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	f000 824b 	beq.w	801b396 <_dtoa_r+0xb4e>
 801af00:	601e      	str	r6, [r3, #0]
 801af02:	e248      	b.n	801b396 <_dtoa_r+0xb4e>
 801af04:	46b8      	mov	r8, r7
 801af06:	4633      	mov	r3, r6
 801af08:	461e      	mov	r6, r3
 801af0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801af0e:	2a39      	cmp	r2, #57	@ 0x39
 801af10:	d106      	bne.n	801af20 <_dtoa_r+0x6d8>
 801af12:	459a      	cmp	sl, r3
 801af14:	d1f8      	bne.n	801af08 <_dtoa_r+0x6c0>
 801af16:	2230      	movs	r2, #48	@ 0x30
 801af18:	f108 0801 	add.w	r8, r8, #1
 801af1c:	f88a 2000 	strb.w	r2, [sl]
 801af20:	781a      	ldrb	r2, [r3, #0]
 801af22:	3201      	adds	r2, #1
 801af24:	701a      	strb	r2, [r3, #0]
 801af26:	e7a0      	b.n	801ae6a <_dtoa_r+0x622>
 801af28:	4b6f      	ldr	r3, [pc, #444]	@ (801b0e8 <_dtoa_r+0x8a0>)
 801af2a:	2200      	movs	r2, #0
 801af2c:	f7e5 fb64 	bl	80005f8 <__aeabi_dmul>
 801af30:	2200      	movs	r2, #0
 801af32:	2300      	movs	r3, #0
 801af34:	4604      	mov	r4, r0
 801af36:	460d      	mov	r5, r1
 801af38:	f7e5 fdc6 	bl	8000ac8 <__aeabi_dcmpeq>
 801af3c:	2800      	cmp	r0, #0
 801af3e:	d09f      	beq.n	801ae80 <_dtoa_r+0x638>
 801af40:	e7d1      	b.n	801aee6 <_dtoa_r+0x69e>
 801af42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801af44:	2a00      	cmp	r2, #0
 801af46:	f000 80ea 	beq.w	801b11e <_dtoa_r+0x8d6>
 801af4a:	9a07      	ldr	r2, [sp, #28]
 801af4c:	2a01      	cmp	r2, #1
 801af4e:	f300 80cd 	bgt.w	801b0ec <_dtoa_r+0x8a4>
 801af52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801af54:	2a00      	cmp	r2, #0
 801af56:	f000 80c1 	beq.w	801b0dc <_dtoa_r+0x894>
 801af5a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801af5e:	9c08      	ldr	r4, [sp, #32]
 801af60:	9e00      	ldr	r6, [sp, #0]
 801af62:	9a00      	ldr	r2, [sp, #0]
 801af64:	441a      	add	r2, r3
 801af66:	9200      	str	r2, [sp, #0]
 801af68:	9a06      	ldr	r2, [sp, #24]
 801af6a:	2101      	movs	r1, #1
 801af6c:	441a      	add	r2, r3
 801af6e:	4648      	mov	r0, r9
 801af70:	9206      	str	r2, [sp, #24]
 801af72:	f000 fc77 	bl	801b864 <__i2b>
 801af76:	4605      	mov	r5, r0
 801af78:	b166      	cbz	r6, 801af94 <_dtoa_r+0x74c>
 801af7a:	9b06      	ldr	r3, [sp, #24]
 801af7c:	2b00      	cmp	r3, #0
 801af7e:	dd09      	ble.n	801af94 <_dtoa_r+0x74c>
 801af80:	42b3      	cmp	r3, r6
 801af82:	9a00      	ldr	r2, [sp, #0]
 801af84:	bfa8      	it	ge
 801af86:	4633      	movge	r3, r6
 801af88:	1ad2      	subs	r2, r2, r3
 801af8a:	9200      	str	r2, [sp, #0]
 801af8c:	9a06      	ldr	r2, [sp, #24]
 801af8e:	1af6      	subs	r6, r6, r3
 801af90:	1ad3      	subs	r3, r2, r3
 801af92:	9306      	str	r3, [sp, #24]
 801af94:	9b08      	ldr	r3, [sp, #32]
 801af96:	b30b      	cbz	r3, 801afdc <_dtoa_r+0x794>
 801af98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af9a:	2b00      	cmp	r3, #0
 801af9c:	f000 80c6 	beq.w	801b12c <_dtoa_r+0x8e4>
 801afa0:	2c00      	cmp	r4, #0
 801afa2:	f000 80c0 	beq.w	801b126 <_dtoa_r+0x8de>
 801afa6:	4629      	mov	r1, r5
 801afa8:	4622      	mov	r2, r4
 801afaa:	4648      	mov	r0, r9
 801afac:	f000 fd12 	bl	801b9d4 <__pow5mult>
 801afb0:	9a02      	ldr	r2, [sp, #8]
 801afb2:	4601      	mov	r1, r0
 801afb4:	4605      	mov	r5, r0
 801afb6:	4648      	mov	r0, r9
 801afb8:	f000 fc6a 	bl	801b890 <__multiply>
 801afbc:	9902      	ldr	r1, [sp, #8]
 801afbe:	4680      	mov	r8, r0
 801afc0:	4648      	mov	r0, r9
 801afc2:	f000 fb51 	bl	801b668 <_Bfree>
 801afc6:	9b08      	ldr	r3, [sp, #32]
 801afc8:	1b1b      	subs	r3, r3, r4
 801afca:	9308      	str	r3, [sp, #32]
 801afcc:	f000 80b1 	beq.w	801b132 <_dtoa_r+0x8ea>
 801afd0:	9a08      	ldr	r2, [sp, #32]
 801afd2:	4641      	mov	r1, r8
 801afd4:	4648      	mov	r0, r9
 801afd6:	f000 fcfd 	bl	801b9d4 <__pow5mult>
 801afda:	9002      	str	r0, [sp, #8]
 801afdc:	2101      	movs	r1, #1
 801afde:	4648      	mov	r0, r9
 801afe0:	f000 fc40 	bl	801b864 <__i2b>
 801afe4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801afe6:	4604      	mov	r4, r0
 801afe8:	2b00      	cmp	r3, #0
 801afea:	f000 81d8 	beq.w	801b39e <_dtoa_r+0xb56>
 801afee:	461a      	mov	r2, r3
 801aff0:	4601      	mov	r1, r0
 801aff2:	4648      	mov	r0, r9
 801aff4:	f000 fcee 	bl	801b9d4 <__pow5mult>
 801aff8:	9b07      	ldr	r3, [sp, #28]
 801affa:	2b01      	cmp	r3, #1
 801affc:	4604      	mov	r4, r0
 801affe:	f300 809f 	bgt.w	801b140 <_dtoa_r+0x8f8>
 801b002:	9b04      	ldr	r3, [sp, #16]
 801b004:	2b00      	cmp	r3, #0
 801b006:	f040 8097 	bne.w	801b138 <_dtoa_r+0x8f0>
 801b00a:	9b05      	ldr	r3, [sp, #20]
 801b00c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b010:	2b00      	cmp	r3, #0
 801b012:	f040 8093 	bne.w	801b13c <_dtoa_r+0x8f4>
 801b016:	9b05      	ldr	r3, [sp, #20]
 801b018:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b01c:	0d1b      	lsrs	r3, r3, #20
 801b01e:	051b      	lsls	r3, r3, #20
 801b020:	b133      	cbz	r3, 801b030 <_dtoa_r+0x7e8>
 801b022:	9b00      	ldr	r3, [sp, #0]
 801b024:	3301      	adds	r3, #1
 801b026:	9300      	str	r3, [sp, #0]
 801b028:	9b06      	ldr	r3, [sp, #24]
 801b02a:	3301      	adds	r3, #1
 801b02c:	9306      	str	r3, [sp, #24]
 801b02e:	2301      	movs	r3, #1
 801b030:	9308      	str	r3, [sp, #32]
 801b032:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b034:	2b00      	cmp	r3, #0
 801b036:	f000 81b8 	beq.w	801b3aa <_dtoa_r+0xb62>
 801b03a:	6923      	ldr	r3, [r4, #16]
 801b03c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b040:	6918      	ldr	r0, [r3, #16]
 801b042:	f000 fbc3 	bl	801b7cc <__hi0bits>
 801b046:	f1c0 0020 	rsb	r0, r0, #32
 801b04a:	9b06      	ldr	r3, [sp, #24]
 801b04c:	4418      	add	r0, r3
 801b04e:	f010 001f 	ands.w	r0, r0, #31
 801b052:	f000 8082 	beq.w	801b15a <_dtoa_r+0x912>
 801b056:	f1c0 0320 	rsb	r3, r0, #32
 801b05a:	2b04      	cmp	r3, #4
 801b05c:	dd73      	ble.n	801b146 <_dtoa_r+0x8fe>
 801b05e:	9b00      	ldr	r3, [sp, #0]
 801b060:	f1c0 001c 	rsb	r0, r0, #28
 801b064:	4403      	add	r3, r0
 801b066:	9300      	str	r3, [sp, #0]
 801b068:	9b06      	ldr	r3, [sp, #24]
 801b06a:	4403      	add	r3, r0
 801b06c:	4406      	add	r6, r0
 801b06e:	9306      	str	r3, [sp, #24]
 801b070:	9b00      	ldr	r3, [sp, #0]
 801b072:	2b00      	cmp	r3, #0
 801b074:	dd05      	ble.n	801b082 <_dtoa_r+0x83a>
 801b076:	9902      	ldr	r1, [sp, #8]
 801b078:	461a      	mov	r2, r3
 801b07a:	4648      	mov	r0, r9
 801b07c:	f000 fd04 	bl	801ba88 <__lshift>
 801b080:	9002      	str	r0, [sp, #8]
 801b082:	9b06      	ldr	r3, [sp, #24]
 801b084:	2b00      	cmp	r3, #0
 801b086:	dd05      	ble.n	801b094 <_dtoa_r+0x84c>
 801b088:	4621      	mov	r1, r4
 801b08a:	461a      	mov	r2, r3
 801b08c:	4648      	mov	r0, r9
 801b08e:	f000 fcfb 	bl	801ba88 <__lshift>
 801b092:	4604      	mov	r4, r0
 801b094:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b096:	2b00      	cmp	r3, #0
 801b098:	d061      	beq.n	801b15e <_dtoa_r+0x916>
 801b09a:	9802      	ldr	r0, [sp, #8]
 801b09c:	4621      	mov	r1, r4
 801b09e:	f000 fd5f 	bl	801bb60 <__mcmp>
 801b0a2:	2800      	cmp	r0, #0
 801b0a4:	da5b      	bge.n	801b15e <_dtoa_r+0x916>
 801b0a6:	2300      	movs	r3, #0
 801b0a8:	9902      	ldr	r1, [sp, #8]
 801b0aa:	220a      	movs	r2, #10
 801b0ac:	4648      	mov	r0, r9
 801b0ae:	f000 fafd 	bl	801b6ac <__multadd>
 801b0b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b0b4:	9002      	str	r0, [sp, #8]
 801b0b6:	f107 38ff 	add.w	r8, r7, #4294967295
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	f000 8177 	beq.w	801b3ae <_dtoa_r+0xb66>
 801b0c0:	4629      	mov	r1, r5
 801b0c2:	2300      	movs	r3, #0
 801b0c4:	220a      	movs	r2, #10
 801b0c6:	4648      	mov	r0, r9
 801b0c8:	f000 faf0 	bl	801b6ac <__multadd>
 801b0cc:	f1bb 0f00 	cmp.w	fp, #0
 801b0d0:	4605      	mov	r5, r0
 801b0d2:	dc6f      	bgt.n	801b1b4 <_dtoa_r+0x96c>
 801b0d4:	9b07      	ldr	r3, [sp, #28]
 801b0d6:	2b02      	cmp	r3, #2
 801b0d8:	dc49      	bgt.n	801b16e <_dtoa_r+0x926>
 801b0da:	e06b      	b.n	801b1b4 <_dtoa_r+0x96c>
 801b0dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b0de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801b0e2:	e73c      	b.n	801af5e <_dtoa_r+0x716>
 801b0e4:	3fe00000 	.word	0x3fe00000
 801b0e8:	40240000 	.word	0x40240000
 801b0ec:	9b03      	ldr	r3, [sp, #12]
 801b0ee:	1e5c      	subs	r4, r3, #1
 801b0f0:	9b08      	ldr	r3, [sp, #32]
 801b0f2:	42a3      	cmp	r3, r4
 801b0f4:	db09      	blt.n	801b10a <_dtoa_r+0x8c2>
 801b0f6:	1b1c      	subs	r4, r3, r4
 801b0f8:	9b03      	ldr	r3, [sp, #12]
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	f6bf af30 	bge.w	801af60 <_dtoa_r+0x718>
 801b100:	9b00      	ldr	r3, [sp, #0]
 801b102:	9a03      	ldr	r2, [sp, #12]
 801b104:	1a9e      	subs	r6, r3, r2
 801b106:	2300      	movs	r3, #0
 801b108:	e72b      	b.n	801af62 <_dtoa_r+0x71a>
 801b10a:	9b08      	ldr	r3, [sp, #32]
 801b10c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b10e:	9408      	str	r4, [sp, #32]
 801b110:	1ae3      	subs	r3, r4, r3
 801b112:	441a      	add	r2, r3
 801b114:	9e00      	ldr	r6, [sp, #0]
 801b116:	9b03      	ldr	r3, [sp, #12]
 801b118:	920d      	str	r2, [sp, #52]	@ 0x34
 801b11a:	2400      	movs	r4, #0
 801b11c:	e721      	b.n	801af62 <_dtoa_r+0x71a>
 801b11e:	9c08      	ldr	r4, [sp, #32]
 801b120:	9e00      	ldr	r6, [sp, #0]
 801b122:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801b124:	e728      	b.n	801af78 <_dtoa_r+0x730>
 801b126:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801b12a:	e751      	b.n	801afd0 <_dtoa_r+0x788>
 801b12c:	9a08      	ldr	r2, [sp, #32]
 801b12e:	9902      	ldr	r1, [sp, #8]
 801b130:	e750      	b.n	801afd4 <_dtoa_r+0x78c>
 801b132:	f8cd 8008 	str.w	r8, [sp, #8]
 801b136:	e751      	b.n	801afdc <_dtoa_r+0x794>
 801b138:	2300      	movs	r3, #0
 801b13a:	e779      	b.n	801b030 <_dtoa_r+0x7e8>
 801b13c:	9b04      	ldr	r3, [sp, #16]
 801b13e:	e777      	b.n	801b030 <_dtoa_r+0x7e8>
 801b140:	2300      	movs	r3, #0
 801b142:	9308      	str	r3, [sp, #32]
 801b144:	e779      	b.n	801b03a <_dtoa_r+0x7f2>
 801b146:	d093      	beq.n	801b070 <_dtoa_r+0x828>
 801b148:	9a00      	ldr	r2, [sp, #0]
 801b14a:	331c      	adds	r3, #28
 801b14c:	441a      	add	r2, r3
 801b14e:	9200      	str	r2, [sp, #0]
 801b150:	9a06      	ldr	r2, [sp, #24]
 801b152:	441a      	add	r2, r3
 801b154:	441e      	add	r6, r3
 801b156:	9206      	str	r2, [sp, #24]
 801b158:	e78a      	b.n	801b070 <_dtoa_r+0x828>
 801b15a:	4603      	mov	r3, r0
 801b15c:	e7f4      	b.n	801b148 <_dtoa_r+0x900>
 801b15e:	9b03      	ldr	r3, [sp, #12]
 801b160:	2b00      	cmp	r3, #0
 801b162:	46b8      	mov	r8, r7
 801b164:	dc20      	bgt.n	801b1a8 <_dtoa_r+0x960>
 801b166:	469b      	mov	fp, r3
 801b168:	9b07      	ldr	r3, [sp, #28]
 801b16a:	2b02      	cmp	r3, #2
 801b16c:	dd1e      	ble.n	801b1ac <_dtoa_r+0x964>
 801b16e:	f1bb 0f00 	cmp.w	fp, #0
 801b172:	f47f adb1 	bne.w	801acd8 <_dtoa_r+0x490>
 801b176:	4621      	mov	r1, r4
 801b178:	465b      	mov	r3, fp
 801b17a:	2205      	movs	r2, #5
 801b17c:	4648      	mov	r0, r9
 801b17e:	f000 fa95 	bl	801b6ac <__multadd>
 801b182:	4601      	mov	r1, r0
 801b184:	4604      	mov	r4, r0
 801b186:	9802      	ldr	r0, [sp, #8]
 801b188:	f000 fcea 	bl	801bb60 <__mcmp>
 801b18c:	2800      	cmp	r0, #0
 801b18e:	f77f ada3 	ble.w	801acd8 <_dtoa_r+0x490>
 801b192:	4656      	mov	r6, sl
 801b194:	2331      	movs	r3, #49	@ 0x31
 801b196:	f806 3b01 	strb.w	r3, [r6], #1
 801b19a:	f108 0801 	add.w	r8, r8, #1
 801b19e:	e59f      	b.n	801ace0 <_dtoa_r+0x498>
 801b1a0:	9c03      	ldr	r4, [sp, #12]
 801b1a2:	46b8      	mov	r8, r7
 801b1a4:	4625      	mov	r5, r4
 801b1a6:	e7f4      	b.n	801b192 <_dtoa_r+0x94a>
 801b1a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801b1ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	f000 8101 	beq.w	801b3b6 <_dtoa_r+0xb6e>
 801b1b4:	2e00      	cmp	r6, #0
 801b1b6:	dd05      	ble.n	801b1c4 <_dtoa_r+0x97c>
 801b1b8:	4629      	mov	r1, r5
 801b1ba:	4632      	mov	r2, r6
 801b1bc:	4648      	mov	r0, r9
 801b1be:	f000 fc63 	bl	801ba88 <__lshift>
 801b1c2:	4605      	mov	r5, r0
 801b1c4:	9b08      	ldr	r3, [sp, #32]
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d05c      	beq.n	801b284 <_dtoa_r+0xa3c>
 801b1ca:	6869      	ldr	r1, [r5, #4]
 801b1cc:	4648      	mov	r0, r9
 801b1ce:	f000 fa0b 	bl	801b5e8 <_Balloc>
 801b1d2:	4606      	mov	r6, r0
 801b1d4:	b928      	cbnz	r0, 801b1e2 <_dtoa_r+0x99a>
 801b1d6:	4b82      	ldr	r3, [pc, #520]	@ (801b3e0 <_dtoa_r+0xb98>)
 801b1d8:	4602      	mov	r2, r0
 801b1da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801b1de:	f7ff bb4a 	b.w	801a876 <_dtoa_r+0x2e>
 801b1e2:	692a      	ldr	r2, [r5, #16]
 801b1e4:	3202      	adds	r2, #2
 801b1e6:	0092      	lsls	r2, r2, #2
 801b1e8:	f105 010c 	add.w	r1, r5, #12
 801b1ec:	300c      	adds	r0, #12
 801b1ee:	f7ff fa76 	bl	801a6de <memcpy>
 801b1f2:	2201      	movs	r2, #1
 801b1f4:	4631      	mov	r1, r6
 801b1f6:	4648      	mov	r0, r9
 801b1f8:	f000 fc46 	bl	801ba88 <__lshift>
 801b1fc:	f10a 0301 	add.w	r3, sl, #1
 801b200:	9300      	str	r3, [sp, #0]
 801b202:	eb0a 030b 	add.w	r3, sl, fp
 801b206:	9308      	str	r3, [sp, #32]
 801b208:	9b04      	ldr	r3, [sp, #16]
 801b20a:	f003 0301 	and.w	r3, r3, #1
 801b20e:	462f      	mov	r7, r5
 801b210:	9306      	str	r3, [sp, #24]
 801b212:	4605      	mov	r5, r0
 801b214:	9b00      	ldr	r3, [sp, #0]
 801b216:	9802      	ldr	r0, [sp, #8]
 801b218:	4621      	mov	r1, r4
 801b21a:	f103 3bff 	add.w	fp, r3, #4294967295
 801b21e:	f7ff fa8b 	bl	801a738 <quorem>
 801b222:	4603      	mov	r3, r0
 801b224:	3330      	adds	r3, #48	@ 0x30
 801b226:	9003      	str	r0, [sp, #12]
 801b228:	4639      	mov	r1, r7
 801b22a:	9802      	ldr	r0, [sp, #8]
 801b22c:	9309      	str	r3, [sp, #36]	@ 0x24
 801b22e:	f000 fc97 	bl	801bb60 <__mcmp>
 801b232:	462a      	mov	r2, r5
 801b234:	9004      	str	r0, [sp, #16]
 801b236:	4621      	mov	r1, r4
 801b238:	4648      	mov	r0, r9
 801b23a:	f000 fcad 	bl	801bb98 <__mdiff>
 801b23e:	68c2      	ldr	r2, [r0, #12]
 801b240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b242:	4606      	mov	r6, r0
 801b244:	bb02      	cbnz	r2, 801b288 <_dtoa_r+0xa40>
 801b246:	4601      	mov	r1, r0
 801b248:	9802      	ldr	r0, [sp, #8]
 801b24a:	f000 fc89 	bl	801bb60 <__mcmp>
 801b24e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b250:	4602      	mov	r2, r0
 801b252:	4631      	mov	r1, r6
 801b254:	4648      	mov	r0, r9
 801b256:	920c      	str	r2, [sp, #48]	@ 0x30
 801b258:	9309      	str	r3, [sp, #36]	@ 0x24
 801b25a:	f000 fa05 	bl	801b668 <_Bfree>
 801b25e:	9b07      	ldr	r3, [sp, #28]
 801b260:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b262:	9e00      	ldr	r6, [sp, #0]
 801b264:	ea42 0103 	orr.w	r1, r2, r3
 801b268:	9b06      	ldr	r3, [sp, #24]
 801b26a:	4319      	orrs	r1, r3
 801b26c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b26e:	d10d      	bne.n	801b28c <_dtoa_r+0xa44>
 801b270:	2b39      	cmp	r3, #57	@ 0x39
 801b272:	d027      	beq.n	801b2c4 <_dtoa_r+0xa7c>
 801b274:	9a04      	ldr	r2, [sp, #16]
 801b276:	2a00      	cmp	r2, #0
 801b278:	dd01      	ble.n	801b27e <_dtoa_r+0xa36>
 801b27a:	9b03      	ldr	r3, [sp, #12]
 801b27c:	3331      	adds	r3, #49	@ 0x31
 801b27e:	f88b 3000 	strb.w	r3, [fp]
 801b282:	e52e      	b.n	801ace2 <_dtoa_r+0x49a>
 801b284:	4628      	mov	r0, r5
 801b286:	e7b9      	b.n	801b1fc <_dtoa_r+0x9b4>
 801b288:	2201      	movs	r2, #1
 801b28a:	e7e2      	b.n	801b252 <_dtoa_r+0xa0a>
 801b28c:	9904      	ldr	r1, [sp, #16]
 801b28e:	2900      	cmp	r1, #0
 801b290:	db04      	blt.n	801b29c <_dtoa_r+0xa54>
 801b292:	9807      	ldr	r0, [sp, #28]
 801b294:	4301      	orrs	r1, r0
 801b296:	9806      	ldr	r0, [sp, #24]
 801b298:	4301      	orrs	r1, r0
 801b29a:	d120      	bne.n	801b2de <_dtoa_r+0xa96>
 801b29c:	2a00      	cmp	r2, #0
 801b29e:	ddee      	ble.n	801b27e <_dtoa_r+0xa36>
 801b2a0:	9902      	ldr	r1, [sp, #8]
 801b2a2:	9300      	str	r3, [sp, #0]
 801b2a4:	2201      	movs	r2, #1
 801b2a6:	4648      	mov	r0, r9
 801b2a8:	f000 fbee 	bl	801ba88 <__lshift>
 801b2ac:	4621      	mov	r1, r4
 801b2ae:	9002      	str	r0, [sp, #8]
 801b2b0:	f000 fc56 	bl	801bb60 <__mcmp>
 801b2b4:	2800      	cmp	r0, #0
 801b2b6:	9b00      	ldr	r3, [sp, #0]
 801b2b8:	dc02      	bgt.n	801b2c0 <_dtoa_r+0xa78>
 801b2ba:	d1e0      	bne.n	801b27e <_dtoa_r+0xa36>
 801b2bc:	07da      	lsls	r2, r3, #31
 801b2be:	d5de      	bpl.n	801b27e <_dtoa_r+0xa36>
 801b2c0:	2b39      	cmp	r3, #57	@ 0x39
 801b2c2:	d1da      	bne.n	801b27a <_dtoa_r+0xa32>
 801b2c4:	2339      	movs	r3, #57	@ 0x39
 801b2c6:	f88b 3000 	strb.w	r3, [fp]
 801b2ca:	4633      	mov	r3, r6
 801b2cc:	461e      	mov	r6, r3
 801b2ce:	3b01      	subs	r3, #1
 801b2d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801b2d4:	2a39      	cmp	r2, #57	@ 0x39
 801b2d6:	d04e      	beq.n	801b376 <_dtoa_r+0xb2e>
 801b2d8:	3201      	adds	r2, #1
 801b2da:	701a      	strb	r2, [r3, #0]
 801b2dc:	e501      	b.n	801ace2 <_dtoa_r+0x49a>
 801b2de:	2a00      	cmp	r2, #0
 801b2e0:	dd03      	ble.n	801b2ea <_dtoa_r+0xaa2>
 801b2e2:	2b39      	cmp	r3, #57	@ 0x39
 801b2e4:	d0ee      	beq.n	801b2c4 <_dtoa_r+0xa7c>
 801b2e6:	3301      	adds	r3, #1
 801b2e8:	e7c9      	b.n	801b27e <_dtoa_r+0xa36>
 801b2ea:	9a00      	ldr	r2, [sp, #0]
 801b2ec:	9908      	ldr	r1, [sp, #32]
 801b2ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b2f2:	428a      	cmp	r2, r1
 801b2f4:	d028      	beq.n	801b348 <_dtoa_r+0xb00>
 801b2f6:	9902      	ldr	r1, [sp, #8]
 801b2f8:	2300      	movs	r3, #0
 801b2fa:	220a      	movs	r2, #10
 801b2fc:	4648      	mov	r0, r9
 801b2fe:	f000 f9d5 	bl	801b6ac <__multadd>
 801b302:	42af      	cmp	r7, r5
 801b304:	9002      	str	r0, [sp, #8]
 801b306:	f04f 0300 	mov.w	r3, #0
 801b30a:	f04f 020a 	mov.w	r2, #10
 801b30e:	4639      	mov	r1, r7
 801b310:	4648      	mov	r0, r9
 801b312:	d107      	bne.n	801b324 <_dtoa_r+0xadc>
 801b314:	f000 f9ca 	bl	801b6ac <__multadd>
 801b318:	4607      	mov	r7, r0
 801b31a:	4605      	mov	r5, r0
 801b31c:	9b00      	ldr	r3, [sp, #0]
 801b31e:	3301      	adds	r3, #1
 801b320:	9300      	str	r3, [sp, #0]
 801b322:	e777      	b.n	801b214 <_dtoa_r+0x9cc>
 801b324:	f000 f9c2 	bl	801b6ac <__multadd>
 801b328:	4629      	mov	r1, r5
 801b32a:	4607      	mov	r7, r0
 801b32c:	2300      	movs	r3, #0
 801b32e:	220a      	movs	r2, #10
 801b330:	4648      	mov	r0, r9
 801b332:	f000 f9bb 	bl	801b6ac <__multadd>
 801b336:	4605      	mov	r5, r0
 801b338:	e7f0      	b.n	801b31c <_dtoa_r+0xad4>
 801b33a:	f1bb 0f00 	cmp.w	fp, #0
 801b33e:	bfcc      	ite	gt
 801b340:	465e      	movgt	r6, fp
 801b342:	2601      	movle	r6, #1
 801b344:	4456      	add	r6, sl
 801b346:	2700      	movs	r7, #0
 801b348:	9902      	ldr	r1, [sp, #8]
 801b34a:	9300      	str	r3, [sp, #0]
 801b34c:	2201      	movs	r2, #1
 801b34e:	4648      	mov	r0, r9
 801b350:	f000 fb9a 	bl	801ba88 <__lshift>
 801b354:	4621      	mov	r1, r4
 801b356:	9002      	str	r0, [sp, #8]
 801b358:	f000 fc02 	bl	801bb60 <__mcmp>
 801b35c:	2800      	cmp	r0, #0
 801b35e:	dcb4      	bgt.n	801b2ca <_dtoa_r+0xa82>
 801b360:	d102      	bne.n	801b368 <_dtoa_r+0xb20>
 801b362:	9b00      	ldr	r3, [sp, #0]
 801b364:	07db      	lsls	r3, r3, #31
 801b366:	d4b0      	bmi.n	801b2ca <_dtoa_r+0xa82>
 801b368:	4633      	mov	r3, r6
 801b36a:	461e      	mov	r6, r3
 801b36c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b370:	2a30      	cmp	r2, #48	@ 0x30
 801b372:	d0fa      	beq.n	801b36a <_dtoa_r+0xb22>
 801b374:	e4b5      	b.n	801ace2 <_dtoa_r+0x49a>
 801b376:	459a      	cmp	sl, r3
 801b378:	d1a8      	bne.n	801b2cc <_dtoa_r+0xa84>
 801b37a:	2331      	movs	r3, #49	@ 0x31
 801b37c:	f108 0801 	add.w	r8, r8, #1
 801b380:	f88a 3000 	strb.w	r3, [sl]
 801b384:	e4ad      	b.n	801ace2 <_dtoa_r+0x49a>
 801b386:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b388:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801b3e4 <_dtoa_r+0xb9c>
 801b38c:	b11b      	cbz	r3, 801b396 <_dtoa_r+0xb4e>
 801b38e:	f10a 0308 	add.w	r3, sl, #8
 801b392:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801b394:	6013      	str	r3, [r2, #0]
 801b396:	4650      	mov	r0, sl
 801b398:	b017      	add	sp, #92	@ 0x5c
 801b39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b39e:	9b07      	ldr	r3, [sp, #28]
 801b3a0:	2b01      	cmp	r3, #1
 801b3a2:	f77f ae2e 	ble.w	801b002 <_dtoa_r+0x7ba>
 801b3a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b3a8:	9308      	str	r3, [sp, #32]
 801b3aa:	2001      	movs	r0, #1
 801b3ac:	e64d      	b.n	801b04a <_dtoa_r+0x802>
 801b3ae:	f1bb 0f00 	cmp.w	fp, #0
 801b3b2:	f77f aed9 	ble.w	801b168 <_dtoa_r+0x920>
 801b3b6:	4656      	mov	r6, sl
 801b3b8:	9802      	ldr	r0, [sp, #8]
 801b3ba:	4621      	mov	r1, r4
 801b3bc:	f7ff f9bc 	bl	801a738 <quorem>
 801b3c0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801b3c4:	f806 3b01 	strb.w	r3, [r6], #1
 801b3c8:	eba6 020a 	sub.w	r2, r6, sl
 801b3cc:	4593      	cmp	fp, r2
 801b3ce:	ddb4      	ble.n	801b33a <_dtoa_r+0xaf2>
 801b3d0:	9902      	ldr	r1, [sp, #8]
 801b3d2:	2300      	movs	r3, #0
 801b3d4:	220a      	movs	r2, #10
 801b3d6:	4648      	mov	r0, r9
 801b3d8:	f000 f968 	bl	801b6ac <__multadd>
 801b3dc:	9002      	str	r0, [sp, #8]
 801b3de:	e7eb      	b.n	801b3b8 <_dtoa_r+0xb70>
 801b3e0:	08020380 	.word	0x08020380
 801b3e4:	08020304 	.word	0x08020304

0801b3e8 <_free_r>:
 801b3e8:	b538      	push	{r3, r4, r5, lr}
 801b3ea:	4605      	mov	r5, r0
 801b3ec:	2900      	cmp	r1, #0
 801b3ee:	d041      	beq.n	801b474 <_free_r+0x8c>
 801b3f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b3f4:	1f0c      	subs	r4, r1, #4
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	bfb8      	it	lt
 801b3fa:	18e4      	addlt	r4, r4, r3
 801b3fc:	f000 f8e8 	bl	801b5d0 <__malloc_lock>
 801b400:	4a1d      	ldr	r2, [pc, #116]	@ (801b478 <_free_r+0x90>)
 801b402:	6813      	ldr	r3, [r2, #0]
 801b404:	b933      	cbnz	r3, 801b414 <_free_r+0x2c>
 801b406:	6063      	str	r3, [r4, #4]
 801b408:	6014      	str	r4, [r2, #0]
 801b40a:	4628      	mov	r0, r5
 801b40c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b410:	f000 b8e4 	b.w	801b5dc <__malloc_unlock>
 801b414:	42a3      	cmp	r3, r4
 801b416:	d908      	bls.n	801b42a <_free_r+0x42>
 801b418:	6820      	ldr	r0, [r4, #0]
 801b41a:	1821      	adds	r1, r4, r0
 801b41c:	428b      	cmp	r3, r1
 801b41e:	bf01      	itttt	eq
 801b420:	6819      	ldreq	r1, [r3, #0]
 801b422:	685b      	ldreq	r3, [r3, #4]
 801b424:	1809      	addeq	r1, r1, r0
 801b426:	6021      	streq	r1, [r4, #0]
 801b428:	e7ed      	b.n	801b406 <_free_r+0x1e>
 801b42a:	461a      	mov	r2, r3
 801b42c:	685b      	ldr	r3, [r3, #4]
 801b42e:	b10b      	cbz	r3, 801b434 <_free_r+0x4c>
 801b430:	42a3      	cmp	r3, r4
 801b432:	d9fa      	bls.n	801b42a <_free_r+0x42>
 801b434:	6811      	ldr	r1, [r2, #0]
 801b436:	1850      	adds	r0, r2, r1
 801b438:	42a0      	cmp	r0, r4
 801b43a:	d10b      	bne.n	801b454 <_free_r+0x6c>
 801b43c:	6820      	ldr	r0, [r4, #0]
 801b43e:	4401      	add	r1, r0
 801b440:	1850      	adds	r0, r2, r1
 801b442:	4283      	cmp	r3, r0
 801b444:	6011      	str	r1, [r2, #0]
 801b446:	d1e0      	bne.n	801b40a <_free_r+0x22>
 801b448:	6818      	ldr	r0, [r3, #0]
 801b44a:	685b      	ldr	r3, [r3, #4]
 801b44c:	6053      	str	r3, [r2, #4]
 801b44e:	4408      	add	r0, r1
 801b450:	6010      	str	r0, [r2, #0]
 801b452:	e7da      	b.n	801b40a <_free_r+0x22>
 801b454:	d902      	bls.n	801b45c <_free_r+0x74>
 801b456:	230c      	movs	r3, #12
 801b458:	602b      	str	r3, [r5, #0]
 801b45a:	e7d6      	b.n	801b40a <_free_r+0x22>
 801b45c:	6820      	ldr	r0, [r4, #0]
 801b45e:	1821      	adds	r1, r4, r0
 801b460:	428b      	cmp	r3, r1
 801b462:	bf04      	itt	eq
 801b464:	6819      	ldreq	r1, [r3, #0]
 801b466:	685b      	ldreq	r3, [r3, #4]
 801b468:	6063      	str	r3, [r4, #4]
 801b46a:	bf04      	itt	eq
 801b46c:	1809      	addeq	r1, r1, r0
 801b46e:	6021      	streq	r1, [r4, #0]
 801b470:	6054      	str	r4, [r2, #4]
 801b472:	e7ca      	b.n	801b40a <_free_r+0x22>
 801b474:	bd38      	pop	{r3, r4, r5, pc}
 801b476:	bf00      	nop
 801b478:	2000a6ac 	.word	0x2000a6ac

0801b47c <malloc>:
 801b47c:	4b02      	ldr	r3, [pc, #8]	@ (801b488 <malloc+0xc>)
 801b47e:	4601      	mov	r1, r0
 801b480:	6818      	ldr	r0, [r3, #0]
 801b482:	f000 b825 	b.w	801b4d0 <_malloc_r>
 801b486:	bf00      	nop
 801b488:	20000160 	.word	0x20000160

0801b48c <sbrk_aligned>:
 801b48c:	b570      	push	{r4, r5, r6, lr}
 801b48e:	4e0f      	ldr	r6, [pc, #60]	@ (801b4cc <sbrk_aligned+0x40>)
 801b490:	460c      	mov	r4, r1
 801b492:	6831      	ldr	r1, [r6, #0]
 801b494:	4605      	mov	r5, r0
 801b496:	b911      	cbnz	r1, 801b49e <sbrk_aligned+0x12>
 801b498:	f002 fa76 	bl	801d988 <_sbrk_r>
 801b49c:	6030      	str	r0, [r6, #0]
 801b49e:	4621      	mov	r1, r4
 801b4a0:	4628      	mov	r0, r5
 801b4a2:	f002 fa71 	bl	801d988 <_sbrk_r>
 801b4a6:	1c43      	adds	r3, r0, #1
 801b4a8:	d103      	bne.n	801b4b2 <sbrk_aligned+0x26>
 801b4aa:	f04f 34ff 	mov.w	r4, #4294967295
 801b4ae:	4620      	mov	r0, r4
 801b4b0:	bd70      	pop	{r4, r5, r6, pc}
 801b4b2:	1cc4      	adds	r4, r0, #3
 801b4b4:	f024 0403 	bic.w	r4, r4, #3
 801b4b8:	42a0      	cmp	r0, r4
 801b4ba:	d0f8      	beq.n	801b4ae <sbrk_aligned+0x22>
 801b4bc:	1a21      	subs	r1, r4, r0
 801b4be:	4628      	mov	r0, r5
 801b4c0:	f002 fa62 	bl	801d988 <_sbrk_r>
 801b4c4:	3001      	adds	r0, #1
 801b4c6:	d1f2      	bne.n	801b4ae <sbrk_aligned+0x22>
 801b4c8:	e7ef      	b.n	801b4aa <sbrk_aligned+0x1e>
 801b4ca:	bf00      	nop
 801b4cc:	2000a6a8 	.word	0x2000a6a8

0801b4d0 <_malloc_r>:
 801b4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b4d4:	1ccd      	adds	r5, r1, #3
 801b4d6:	f025 0503 	bic.w	r5, r5, #3
 801b4da:	3508      	adds	r5, #8
 801b4dc:	2d0c      	cmp	r5, #12
 801b4de:	bf38      	it	cc
 801b4e0:	250c      	movcc	r5, #12
 801b4e2:	2d00      	cmp	r5, #0
 801b4e4:	4606      	mov	r6, r0
 801b4e6:	db01      	blt.n	801b4ec <_malloc_r+0x1c>
 801b4e8:	42a9      	cmp	r1, r5
 801b4ea:	d904      	bls.n	801b4f6 <_malloc_r+0x26>
 801b4ec:	230c      	movs	r3, #12
 801b4ee:	6033      	str	r3, [r6, #0]
 801b4f0:	2000      	movs	r0, #0
 801b4f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b4f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b5cc <_malloc_r+0xfc>
 801b4fa:	f000 f869 	bl	801b5d0 <__malloc_lock>
 801b4fe:	f8d8 3000 	ldr.w	r3, [r8]
 801b502:	461c      	mov	r4, r3
 801b504:	bb44      	cbnz	r4, 801b558 <_malloc_r+0x88>
 801b506:	4629      	mov	r1, r5
 801b508:	4630      	mov	r0, r6
 801b50a:	f7ff ffbf 	bl	801b48c <sbrk_aligned>
 801b50e:	1c43      	adds	r3, r0, #1
 801b510:	4604      	mov	r4, r0
 801b512:	d158      	bne.n	801b5c6 <_malloc_r+0xf6>
 801b514:	f8d8 4000 	ldr.w	r4, [r8]
 801b518:	4627      	mov	r7, r4
 801b51a:	2f00      	cmp	r7, #0
 801b51c:	d143      	bne.n	801b5a6 <_malloc_r+0xd6>
 801b51e:	2c00      	cmp	r4, #0
 801b520:	d04b      	beq.n	801b5ba <_malloc_r+0xea>
 801b522:	6823      	ldr	r3, [r4, #0]
 801b524:	4639      	mov	r1, r7
 801b526:	4630      	mov	r0, r6
 801b528:	eb04 0903 	add.w	r9, r4, r3
 801b52c:	f002 fa2c 	bl	801d988 <_sbrk_r>
 801b530:	4581      	cmp	r9, r0
 801b532:	d142      	bne.n	801b5ba <_malloc_r+0xea>
 801b534:	6821      	ldr	r1, [r4, #0]
 801b536:	1a6d      	subs	r5, r5, r1
 801b538:	4629      	mov	r1, r5
 801b53a:	4630      	mov	r0, r6
 801b53c:	f7ff ffa6 	bl	801b48c <sbrk_aligned>
 801b540:	3001      	adds	r0, #1
 801b542:	d03a      	beq.n	801b5ba <_malloc_r+0xea>
 801b544:	6823      	ldr	r3, [r4, #0]
 801b546:	442b      	add	r3, r5
 801b548:	6023      	str	r3, [r4, #0]
 801b54a:	f8d8 3000 	ldr.w	r3, [r8]
 801b54e:	685a      	ldr	r2, [r3, #4]
 801b550:	bb62      	cbnz	r2, 801b5ac <_malloc_r+0xdc>
 801b552:	f8c8 7000 	str.w	r7, [r8]
 801b556:	e00f      	b.n	801b578 <_malloc_r+0xa8>
 801b558:	6822      	ldr	r2, [r4, #0]
 801b55a:	1b52      	subs	r2, r2, r5
 801b55c:	d420      	bmi.n	801b5a0 <_malloc_r+0xd0>
 801b55e:	2a0b      	cmp	r2, #11
 801b560:	d917      	bls.n	801b592 <_malloc_r+0xc2>
 801b562:	1961      	adds	r1, r4, r5
 801b564:	42a3      	cmp	r3, r4
 801b566:	6025      	str	r5, [r4, #0]
 801b568:	bf18      	it	ne
 801b56a:	6059      	strne	r1, [r3, #4]
 801b56c:	6863      	ldr	r3, [r4, #4]
 801b56e:	bf08      	it	eq
 801b570:	f8c8 1000 	streq.w	r1, [r8]
 801b574:	5162      	str	r2, [r4, r5]
 801b576:	604b      	str	r3, [r1, #4]
 801b578:	4630      	mov	r0, r6
 801b57a:	f000 f82f 	bl	801b5dc <__malloc_unlock>
 801b57e:	f104 000b 	add.w	r0, r4, #11
 801b582:	1d23      	adds	r3, r4, #4
 801b584:	f020 0007 	bic.w	r0, r0, #7
 801b588:	1ac2      	subs	r2, r0, r3
 801b58a:	bf1c      	itt	ne
 801b58c:	1a1b      	subne	r3, r3, r0
 801b58e:	50a3      	strne	r3, [r4, r2]
 801b590:	e7af      	b.n	801b4f2 <_malloc_r+0x22>
 801b592:	6862      	ldr	r2, [r4, #4]
 801b594:	42a3      	cmp	r3, r4
 801b596:	bf0c      	ite	eq
 801b598:	f8c8 2000 	streq.w	r2, [r8]
 801b59c:	605a      	strne	r2, [r3, #4]
 801b59e:	e7eb      	b.n	801b578 <_malloc_r+0xa8>
 801b5a0:	4623      	mov	r3, r4
 801b5a2:	6864      	ldr	r4, [r4, #4]
 801b5a4:	e7ae      	b.n	801b504 <_malloc_r+0x34>
 801b5a6:	463c      	mov	r4, r7
 801b5a8:	687f      	ldr	r7, [r7, #4]
 801b5aa:	e7b6      	b.n	801b51a <_malloc_r+0x4a>
 801b5ac:	461a      	mov	r2, r3
 801b5ae:	685b      	ldr	r3, [r3, #4]
 801b5b0:	42a3      	cmp	r3, r4
 801b5b2:	d1fb      	bne.n	801b5ac <_malloc_r+0xdc>
 801b5b4:	2300      	movs	r3, #0
 801b5b6:	6053      	str	r3, [r2, #4]
 801b5b8:	e7de      	b.n	801b578 <_malloc_r+0xa8>
 801b5ba:	230c      	movs	r3, #12
 801b5bc:	6033      	str	r3, [r6, #0]
 801b5be:	4630      	mov	r0, r6
 801b5c0:	f000 f80c 	bl	801b5dc <__malloc_unlock>
 801b5c4:	e794      	b.n	801b4f0 <_malloc_r+0x20>
 801b5c6:	6005      	str	r5, [r0, #0]
 801b5c8:	e7d6      	b.n	801b578 <_malloc_r+0xa8>
 801b5ca:	bf00      	nop
 801b5cc:	2000a6ac 	.word	0x2000a6ac

0801b5d0 <__malloc_lock>:
 801b5d0:	4801      	ldr	r0, [pc, #4]	@ (801b5d8 <__malloc_lock+0x8>)
 801b5d2:	f7ff b882 	b.w	801a6da <__retarget_lock_acquire_recursive>
 801b5d6:	bf00      	nop
 801b5d8:	2000a6a4 	.word	0x2000a6a4

0801b5dc <__malloc_unlock>:
 801b5dc:	4801      	ldr	r0, [pc, #4]	@ (801b5e4 <__malloc_unlock+0x8>)
 801b5de:	f7ff b87d 	b.w	801a6dc <__retarget_lock_release_recursive>
 801b5e2:	bf00      	nop
 801b5e4:	2000a6a4 	.word	0x2000a6a4

0801b5e8 <_Balloc>:
 801b5e8:	b570      	push	{r4, r5, r6, lr}
 801b5ea:	69c6      	ldr	r6, [r0, #28]
 801b5ec:	4604      	mov	r4, r0
 801b5ee:	460d      	mov	r5, r1
 801b5f0:	b976      	cbnz	r6, 801b610 <_Balloc+0x28>
 801b5f2:	2010      	movs	r0, #16
 801b5f4:	f7ff ff42 	bl	801b47c <malloc>
 801b5f8:	4602      	mov	r2, r0
 801b5fa:	61e0      	str	r0, [r4, #28]
 801b5fc:	b920      	cbnz	r0, 801b608 <_Balloc+0x20>
 801b5fe:	4b18      	ldr	r3, [pc, #96]	@ (801b660 <_Balloc+0x78>)
 801b600:	4818      	ldr	r0, [pc, #96]	@ (801b664 <_Balloc+0x7c>)
 801b602:	216b      	movs	r1, #107	@ 0x6b
 801b604:	f7ff f87a 	bl	801a6fc <__assert_func>
 801b608:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b60c:	6006      	str	r6, [r0, #0]
 801b60e:	60c6      	str	r6, [r0, #12]
 801b610:	69e6      	ldr	r6, [r4, #28]
 801b612:	68f3      	ldr	r3, [r6, #12]
 801b614:	b183      	cbz	r3, 801b638 <_Balloc+0x50>
 801b616:	69e3      	ldr	r3, [r4, #28]
 801b618:	68db      	ldr	r3, [r3, #12]
 801b61a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b61e:	b9b8      	cbnz	r0, 801b650 <_Balloc+0x68>
 801b620:	2101      	movs	r1, #1
 801b622:	fa01 f605 	lsl.w	r6, r1, r5
 801b626:	1d72      	adds	r2, r6, #5
 801b628:	0092      	lsls	r2, r2, #2
 801b62a:	4620      	mov	r0, r4
 801b62c:	f002 f9cb 	bl	801d9c6 <_calloc_r>
 801b630:	b160      	cbz	r0, 801b64c <_Balloc+0x64>
 801b632:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b636:	e00e      	b.n	801b656 <_Balloc+0x6e>
 801b638:	2221      	movs	r2, #33	@ 0x21
 801b63a:	2104      	movs	r1, #4
 801b63c:	4620      	mov	r0, r4
 801b63e:	f002 f9c2 	bl	801d9c6 <_calloc_r>
 801b642:	69e3      	ldr	r3, [r4, #28]
 801b644:	60f0      	str	r0, [r6, #12]
 801b646:	68db      	ldr	r3, [r3, #12]
 801b648:	2b00      	cmp	r3, #0
 801b64a:	d1e4      	bne.n	801b616 <_Balloc+0x2e>
 801b64c:	2000      	movs	r0, #0
 801b64e:	bd70      	pop	{r4, r5, r6, pc}
 801b650:	6802      	ldr	r2, [r0, #0]
 801b652:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b656:	2300      	movs	r3, #0
 801b658:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b65c:	e7f7      	b.n	801b64e <_Balloc+0x66>
 801b65e:	bf00      	nop
 801b660:	08020311 	.word	0x08020311
 801b664:	08020391 	.word	0x08020391

0801b668 <_Bfree>:
 801b668:	b570      	push	{r4, r5, r6, lr}
 801b66a:	69c6      	ldr	r6, [r0, #28]
 801b66c:	4605      	mov	r5, r0
 801b66e:	460c      	mov	r4, r1
 801b670:	b976      	cbnz	r6, 801b690 <_Bfree+0x28>
 801b672:	2010      	movs	r0, #16
 801b674:	f7ff ff02 	bl	801b47c <malloc>
 801b678:	4602      	mov	r2, r0
 801b67a:	61e8      	str	r0, [r5, #28]
 801b67c:	b920      	cbnz	r0, 801b688 <_Bfree+0x20>
 801b67e:	4b09      	ldr	r3, [pc, #36]	@ (801b6a4 <_Bfree+0x3c>)
 801b680:	4809      	ldr	r0, [pc, #36]	@ (801b6a8 <_Bfree+0x40>)
 801b682:	218f      	movs	r1, #143	@ 0x8f
 801b684:	f7ff f83a 	bl	801a6fc <__assert_func>
 801b688:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b68c:	6006      	str	r6, [r0, #0]
 801b68e:	60c6      	str	r6, [r0, #12]
 801b690:	b13c      	cbz	r4, 801b6a2 <_Bfree+0x3a>
 801b692:	69eb      	ldr	r3, [r5, #28]
 801b694:	6862      	ldr	r2, [r4, #4]
 801b696:	68db      	ldr	r3, [r3, #12]
 801b698:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b69c:	6021      	str	r1, [r4, #0]
 801b69e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b6a2:	bd70      	pop	{r4, r5, r6, pc}
 801b6a4:	08020311 	.word	0x08020311
 801b6a8:	08020391 	.word	0x08020391

0801b6ac <__multadd>:
 801b6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6b0:	690d      	ldr	r5, [r1, #16]
 801b6b2:	4607      	mov	r7, r0
 801b6b4:	460c      	mov	r4, r1
 801b6b6:	461e      	mov	r6, r3
 801b6b8:	f101 0c14 	add.w	ip, r1, #20
 801b6bc:	2000      	movs	r0, #0
 801b6be:	f8dc 3000 	ldr.w	r3, [ip]
 801b6c2:	b299      	uxth	r1, r3
 801b6c4:	fb02 6101 	mla	r1, r2, r1, r6
 801b6c8:	0c1e      	lsrs	r6, r3, #16
 801b6ca:	0c0b      	lsrs	r3, r1, #16
 801b6cc:	fb02 3306 	mla	r3, r2, r6, r3
 801b6d0:	b289      	uxth	r1, r1
 801b6d2:	3001      	adds	r0, #1
 801b6d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b6d8:	4285      	cmp	r5, r0
 801b6da:	f84c 1b04 	str.w	r1, [ip], #4
 801b6de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b6e2:	dcec      	bgt.n	801b6be <__multadd+0x12>
 801b6e4:	b30e      	cbz	r6, 801b72a <__multadd+0x7e>
 801b6e6:	68a3      	ldr	r3, [r4, #8]
 801b6e8:	42ab      	cmp	r3, r5
 801b6ea:	dc19      	bgt.n	801b720 <__multadd+0x74>
 801b6ec:	6861      	ldr	r1, [r4, #4]
 801b6ee:	4638      	mov	r0, r7
 801b6f0:	3101      	adds	r1, #1
 801b6f2:	f7ff ff79 	bl	801b5e8 <_Balloc>
 801b6f6:	4680      	mov	r8, r0
 801b6f8:	b928      	cbnz	r0, 801b706 <__multadd+0x5a>
 801b6fa:	4602      	mov	r2, r0
 801b6fc:	4b0c      	ldr	r3, [pc, #48]	@ (801b730 <__multadd+0x84>)
 801b6fe:	480d      	ldr	r0, [pc, #52]	@ (801b734 <__multadd+0x88>)
 801b700:	21ba      	movs	r1, #186	@ 0xba
 801b702:	f7fe fffb 	bl	801a6fc <__assert_func>
 801b706:	6922      	ldr	r2, [r4, #16]
 801b708:	3202      	adds	r2, #2
 801b70a:	f104 010c 	add.w	r1, r4, #12
 801b70e:	0092      	lsls	r2, r2, #2
 801b710:	300c      	adds	r0, #12
 801b712:	f7fe ffe4 	bl	801a6de <memcpy>
 801b716:	4621      	mov	r1, r4
 801b718:	4638      	mov	r0, r7
 801b71a:	f7ff ffa5 	bl	801b668 <_Bfree>
 801b71e:	4644      	mov	r4, r8
 801b720:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b724:	3501      	adds	r5, #1
 801b726:	615e      	str	r6, [r3, #20]
 801b728:	6125      	str	r5, [r4, #16]
 801b72a:	4620      	mov	r0, r4
 801b72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b730:	08020380 	.word	0x08020380
 801b734:	08020391 	.word	0x08020391

0801b738 <__s2b>:
 801b738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b73c:	460c      	mov	r4, r1
 801b73e:	4615      	mov	r5, r2
 801b740:	461f      	mov	r7, r3
 801b742:	2209      	movs	r2, #9
 801b744:	3308      	adds	r3, #8
 801b746:	4606      	mov	r6, r0
 801b748:	fb93 f3f2 	sdiv	r3, r3, r2
 801b74c:	2100      	movs	r1, #0
 801b74e:	2201      	movs	r2, #1
 801b750:	429a      	cmp	r2, r3
 801b752:	db09      	blt.n	801b768 <__s2b+0x30>
 801b754:	4630      	mov	r0, r6
 801b756:	f7ff ff47 	bl	801b5e8 <_Balloc>
 801b75a:	b940      	cbnz	r0, 801b76e <__s2b+0x36>
 801b75c:	4602      	mov	r2, r0
 801b75e:	4b19      	ldr	r3, [pc, #100]	@ (801b7c4 <__s2b+0x8c>)
 801b760:	4819      	ldr	r0, [pc, #100]	@ (801b7c8 <__s2b+0x90>)
 801b762:	21d3      	movs	r1, #211	@ 0xd3
 801b764:	f7fe ffca 	bl	801a6fc <__assert_func>
 801b768:	0052      	lsls	r2, r2, #1
 801b76a:	3101      	adds	r1, #1
 801b76c:	e7f0      	b.n	801b750 <__s2b+0x18>
 801b76e:	9b08      	ldr	r3, [sp, #32]
 801b770:	6143      	str	r3, [r0, #20]
 801b772:	2d09      	cmp	r5, #9
 801b774:	f04f 0301 	mov.w	r3, #1
 801b778:	6103      	str	r3, [r0, #16]
 801b77a:	dd16      	ble.n	801b7aa <__s2b+0x72>
 801b77c:	f104 0909 	add.w	r9, r4, #9
 801b780:	46c8      	mov	r8, r9
 801b782:	442c      	add	r4, r5
 801b784:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b788:	4601      	mov	r1, r0
 801b78a:	3b30      	subs	r3, #48	@ 0x30
 801b78c:	220a      	movs	r2, #10
 801b78e:	4630      	mov	r0, r6
 801b790:	f7ff ff8c 	bl	801b6ac <__multadd>
 801b794:	45a0      	cmp	r8, r4
 801b796:	d1f5      	bne.n	801b784 <__s2b+0x4c>
 801b798:	f1a5 0408 	sub.w	r4, r5, #8
 801b79c:	444c      	add	r4, r9
 801b79e:	1b2d      	subs	r5, r5, r4
 801b7a0:	1963      	adds	r3, r4, r5
 801b7a2:	42bb      	cmp	r3, r7
 801b7a4:	db04      	blt.n	801b7b0 <__s2b+0x78>
 801b7a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b7aa:	340a      	adds	r4, #10
 801b7ac:	2509      	movs	r5, #9
 801b7ae:	e7f6      	b.n	801b79e <__s2b+0x66>
 801b7b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b7b4:	4601      	mov	r1, r0
 801b7b6:	3b30      	subs	r3, #48	@ 0x30
 801b7b8:	220a      	movs	r2, #10
 801b7ba:	4630      	mov	r0, r6
 801b7bc:	f7ff ff76 	bl	801b6ac <__multadd>
 801b7c0:	e7ee      	b.n	801b7a0 <__s2b+0x68>
 801b7c2:	bf00      	nop
 801b7c4:	08020380 	.word	0x08020380
 801b7c8:	08020391 	.word	0x08020391

0801b7cc <__hi0bits>:
 801b7cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801b7d0:	4603      	mov	r3, r0
 801b7d2:	bf36      	itet	cc
 801b7d4:	0403      	lslcc	r3, r0, #16
 801b7d6:	2000      	movcs	r0, #0
 801b7d8:	2010      	movcc	r0, #16
 801b7da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b7de:	bf3c      	itt	cc
 801b7e0:	021b      	lslcc	r3, r3, #8
 801b7e2:	3008      	addcc	r0, #8
 801b7e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b7e8:	bf3c      	itt	cc
 801b7ea:	011b      	lslcc	r3, r3, #4
 801b7ec:	3004      	addcc	r0, #4
 801b7ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b7f2:	bf3c      	itt	cc
 801b7f4:	009b      	lslcc	r3, r3, #2
 801b7f6:	3002      	addcc	r0, #2
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	db05      	blt.n	801b808 <__hi0bits+0x3c>
 801b7fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801b800:	f100 0001 	add.w	r0, r0, #1
 801b804:	bf08      	it	eq
 801b806:	2020      	moveq	r0, #32
 801b808:	4770      	bx	lr

0801b80a <__lo0bits>:
 801b80a:	6803      	ldr	r3, [r0, #0]
 801b80c:	4602      	mov	r2, r0
 801b80e:	f013 0007 	ands.w	r0, r3, #7
 801b812:	d00b      	beq.n	801b82c <__lo0bits+0x22>
 801b814:	07d9      	lsls	r1, r3, #31
 801b816:	d421      	bmi.n	801b85c <__lo0bits+0x52>
 801b818:	0798      	lsls	r0, r3, #30
 801b81a:	bf49      	itett	mi
 801b81c:	085b      	lsrmi	r3, r3, #1
 801b81e:	089b      	lsrpl	r3, r3, #2
 801b820:	2001      	movmi	r0, #1
 801b822:	6013      	strmi	r3, [r2, #0]
 801b824:	bf5c      	itt	pl
 801b826:	6013      	strpl	r3, [r2, #0]
 801b828:	2002      	movpl	r0, #2
 801b82a:	4770      	bx	lr
 801b82c:	b299      	uxth	r1, r3
 801b82e:	b909      	cbnz	r1, 801b834 <__lo0bits+0x2a>
 801b830:	0c1b      	lsrs	r3, r3, #16
 801b832:	2010      	movs	r0, #16
 801b834:	b2d9      	uxtb	r1, r3
 801b836:	b909      	cbnz	r1, 801b83c <__lo0bits+0x32>
 801b838:	3008      	adds	r0, #8
 801b83a:	0a1b      	lsrs	r3, r3, #8
 801b83c:	0719      	lsls	r1, r3, #28
 801b83e:	bf04      	itt	eq
 801b840:	091b      	lsreq	r3, r3, #4
 801b842:	3004      	addeq	r0, #4
 801b844:	0799      	lsls	r1, r3, #30
 801b846:	bf04      	itt	eq
 801b848:	089b      	lsreq	r3, r3, #2
 801b84a:	3002      	addeq	r0, #2
 801b84c:	07d9      	lsls	r1, r3, #31
 801b84e:	d403      	bmi.n	801b858 <__lo0bits+0x4e>
 801b850:	085b      	lsrs	r3, r3, #1
 801b852:	f100 0001 	add.w	r0, r0, #1
 801b856:	d003      	beq.n	801b860 <__lo0bits+0x56>
 801b858:	6013      	str	r3, [r2, #0]
 801b85a:	4770      	bx	lr
 801b85c:	2000      	movs	r0, #0
 801b85e:	4770      	bx	lr
 801b860:	2020      	movs	r0, #32
 801b862:	4770      	bx	lr

0801b864 <__i2b>:
 801b864:	b510      	push	{r4, lr}
 801b866:	460c      	mov	r4, r1
 801b868:	2101      	movs	r1, #1
 801b86a:	f7ff febd 	bl	801b5e8 <_Balloc>
 801b86e:	4602      	mov	r2, r0
 801b870:	b928      	cbnz	r0, 801b87e <__i2b+0x1a>
 801b872:	4b05      	ldr	r3, [pc, #20]	@ (801b888 <__i2b+0x24>)
 801b874:	4805      	ldr	r0, [pc, #20]	@ (801b88c <__i2b+0x28>)
 801b876:	f240 1145 	movw	r1, #325	@ 0x145
 801b87a:	f7fe ff3f 	bl	801a6fc <__assert_func>
 801b87e:	2301      	movs	r3, #1
 801b880:	6144      	str	r4, [r0, #20]
 801b882:	6103      	str	r3, [r0, #16]
 801b884:	bd10      	pop	{r4, pc}
 801b886:	bf00      	nop
 801b888:	08020380 	.word	0x08020380
 801b88c:	08020391 	.word	0x08020391

0801b890 <__multiply>:
 801b890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b894:	4617      	mov	r7, r2
 801b896:	690a      	ldr	r2, [r1, #16]
 801b898:	693b      	ldr	r3, [r7, #16]
 801b89a:	429a      	cmp	r2, r3
 801b89c:	bfa8      	it	ge
 801b89e:	463b      	movge	r3, r7
 801b8a0:	4689      	mov	r9, r1
 801b8a2:	bfa4      	itt	ge
 801b8a4:	460f      	movge	r7, r1
 801b8a6:	4699      	movge	r9, r3
 801b8a8:	693d      	ldr	r5, [r7, #16]
 801b8aa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b8ae:	68bb      	ldr	r3, [r7, #8]
 801b8b0:	6879      	ldr	r1, [r7, #4]
 801b8b2:	eb05 060a 	add.w	r6, r5, sl
 801b8b6:	42b3      	cmp	r3, r6
 801b8b8:	b085      	sub	sp, #20
 801b8ba:	bfb8      	it	lt
 801b8bc:	3101      	addlt	r1, #1
 801b8be:	f7ff fe93 	bl	801b5e8 <_Balloc>
 801b8c2:	b930      	cbnz	r0, 801b8d2 <__multiply+0x42>
 801b8c4:	4602      	mov	r2, r0
 801b8c6:	4b41      	ldr	r3, [pc, #260]	@ (801b9cc <__multiply+0x13c>)
 801b8c8:	4841      	ldr	r0, [pc, #260]	@ (801b9d0 <__multiply+0x140>)
 801b8ca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801b8ce:	f7fe ff15 	bl	801a6fc <__assert_func>
 801b8d2:	f100 0414 	add.w	r4, r0, #20
 801b8d6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801b8da:	4623      	mov	r3, r4
 801b8dc:	2200      	movs	r2, #0
 801b8de:	4573      	cmp	r3, lr
 801b8e0:	d320      	bcc.n	801b924 <__multiply+0x94>
 801b8e2:	f107 0814 	add.w	r8, r7, #20
 801b8e6:	f109 0114 	add.w	r1, r9, #20
 801b8ea:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801b8ee:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801b8f2:	9302      	str	r3, [sp, #8]
 801b8f4:	1beb      	subs	r3, r5, r7
 801b8f6:	3b15      	subs	r3, #21
 801b8f8:	f023 0303 	bic.w	r3, r3, #3
 801b8fc:	3304      	adds	r3, #4
 801b8fe:	3715      	adds	r7, #21
 801b900:	42bd      	cmp	r5, r7
 801b902:	bf38      	it	cc
 801b904:	2304      	movcc	r3, #4
 801b906:	9301      	str	r3, [sp, #4]
 801b908:	9b02      	ldr	r3, [sp, #8]
 801b90a:	9103      	str	r1, [sp, #12]
 801b90c:	428b      	cmp	r3, r1
 801b90e:	d80c      	bhi.n	801b92a <__multiply+0x9a>
 801b910:	2e00      	cmp	r6, #0
 801b912:	dd03      	ble.n	801b91c <__multiply+0x8c>
 801b914:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801b918:	2b00      	cmp	r3, #0
 801b91a:	d055      	beq.n	801b9c8 <__multiply+0x138>
 801b91c:	6106      	str	r6, [r0, #16]
 801b91e:	b005      	add	sp, #20
 801b920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b924:	f843 2b04 	str.w	r2, [r3], #4
 801b928:	e7d9      	b.n	801b8de <__multiply+0x4e>
 801b92a:	f8b1 a000 	ldrh.w	sl, [r1]
 801b92e:	f1ba 0f00 	cmp.w	sl, #0
 801b932:	d01f      	beq.n	801b974 <__multiply+0xe4>
 801b934:	46c4      	mov	ip, r8
 801b936:	46a1      	mov	r9, r4
 801b938:	2700      	movs	r7, #0
 801b93a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801b93e:	f8d9 3000 	ldr.w	r3, [r9]
 801b942:	fa1f fb82 	uxth.w	fp, r2
 801b946:	b29b      	uxth	r3, r3
 801b948:	fb0a 330b 	mla	r3, sl, fp, r3
 801b94c:	443b      	add	r3, r7
 801b94e:	f8d9 7000 	ldr.w	r7, [r9]
 801b952:	0c12      	lsrs	r2, r2, #16
 801b954:	0c3f      	lsrs	r7, r7, #16
 801b956:	fb0a 7202 	mla	r2, sl, r2, r7
 801b95a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801b95e:	b29b      	uxth	r3, r3
 801b960:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b964:	4565      	cmp	r5, ip
 801b966:	f849 3b04 	str.w	r3, [r9], #4
 801b96a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801b96e:	d8e4      	bhi.n	801b93a <__multiply+0xaa>
 801b970:	9b01      	ldr	r3, [sp, #4]
 801b972:	50e7      	str	r7, [r4, r3]
 801b974:	9b03      	ldr	r3, [sp, #12]
 801b976:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801b97a:	3104      	adds	r1, #4
 801b97c:	f1b9 0f00 	cmp.w	r9, #0
 801b980:	d020      	beq.n	801b9c4 <__multiply+0x134>
 801b982:	6823      	ldr	r3, [r4, #0]
 801b984:	4647      	mov	r7, r8
 801b986:	46a4      	mov	ip, r4
 801b988:	f04f 0a00 	mov.w	sl, #0
 801b98c:	f8b7 b000 	ldrh.w	fp, [r7]
 801b990:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801b994:	fb09 220b 	mla	r2, r9, fp, r2
 801b998:	4452      	add	r2, sl
 801b99a:	b29b      	uxth	r3, r3
 801b99c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b9a0:	f84c 3b04 	str.w	r3, [ip], #4
 801b9a4:	f857 3b04 	ldr.w	r3, [r7], #4
 801b9a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b9ac:	f8bc 3000 	ldrh.w	r3, [ip]
 801b9b0:	fb09 330a 	mla	r3, r9, sl, r3
 801b9b4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801b9b8:	42bd      	cmp	r5, r7
 801b9ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b9be:	d8e5      	bhi.n	801b98c <__multiply+0xfc>
 801b9c0:	9a01      	ldr	r2, [sp, #4]
 801b9c2:	50a3      	str	r3, [r4, r2]
 801b9c4:	3404      	adds	r4, #4
 801b9c6:	e79f      	b.n	801b908 <__multiply+0x78>
 801b9c8:	3e01      	subs	r6, #1
 801b9ca:	e7a1      	b.n	801b910 <__multiply+0x80>
 801b9cc:	08020380 	.word	0x08020380
 801b9d0:	08020391 	.word	0x08020391

0801b9d4 <__pow5mult>:
 801b9d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b9d8:	4615      	mov	r5, r2
 801b9da:	f012 0203 	ands.w	r2, r2, #3
 801b9de:	4607      	mov	r7, r0
 801b9e0:	460e      	mov	r6, r1
 801b9e2:	d007      	beq.n	801b9f4 <__pow5mult+0x20>
 801b9e4:	4c25      	ldr	r4, [pc, #148]	@ (801ba7c <__pow5mult+0xa8>)
 801b9e6:	3a01      	subs	r2, #1
 801b9e8:	2300      	movs	r3, #0
 801b9ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b9ee:	f7ff fe5d 	bl	801b6ac <__multadd>
 801b9f2:	4606      	mov	r6, r0
 801b9f4:	10ad      	asrs	r5, r5, #2
 801b9f6:	d03d      	beq.n	801ba74 <__pow5mult+0xa0>
 801b9f8:	69fc      	ldr	r4, [r7, #28]
 801b9fa:	b97c      	cbnz	r4, 801ba1c <__pow5mult+0x48>
 801b9fc:	2010      	movs	r0, #16
 801b9fe:	f7ff fd3d 	bl	801b47c <malloc>
 801ba02:	4602      	mov	r2, r0
 801ba04:	61f8      	str	r0, [r7, #28]
 801ba06:	b928      	cbnz	r0, 801ba14 <__pow5mult+0x40>
 801ba08:	4b1d      	ldr	r3, [pc, #116]	@ (801ba80 <__pow5mult+0xac>)
 801ba0a:	481e      	ldr	r0, [pc, #120]	@ (801ba84 <__pow5mult+0xb0>)
 801ba0c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801ba10:	f7fe fe74 	bl	801a6fc <__assert_func>
 801ba14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ba18:	6004      	str	r4, [r0, #0]
 801ba1a:	60c4      	str	r4, [r0, #12]
 801ba1c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801ba20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ba24:	b94c      	cbnz	r4, 801ba3a <__pow5mult+0x66>
 801ba26:	f240 2171 	movw	r1, #625	@ 0x271
 801ba2a:	4638      	mov	r0, r7
 801ba2c:	f7ff ff1a 	bl	801b864 <__i2b>
 801ba30:	2300      	movs	r3, #0
 801ba32:	f8c8 0008 	str.w	r0, [r8, #8]
 801ba36:	4604      	mov	r4, r0
 801ba38:	6003      	str	r3, [r0, #0]
 801ba3a:	f04f 0900 	mov.w	r9, #0
 801ba3e:	07eb      	lsls	r3, r5, #31
 801ba40:	d50a      	bpl.n	801ba58 <__pow5mult+0x84>
 801ba42:	4631      	mov	r1, r6
 801ba44:	4622      	mov	r2, r4
 801ba46:	4638      	mov	r0, r7
 801ba48:	f7ff ff22 	bl	801b890 <__multiply>
 801ba4c:	4631      	mov	r1, r6
 801ba4e:	4680      	mov	r8, r0
 801ba50:	4638      	mov	r0, r7
 801ba52:	f7ff fe09 	bl	801b668 <_Bfree>
 801ba56:	4646      	mov	r6, r8
 801ba58:	106d      	asrs	r5, r5, #1
 801ba5a:	d00b      	beq.n	801ba74 <__pow5mult+0xa0>
 801ba5c:	6820      	ldr	r0, [r4, #0]
 801ba5e:	b938      	cbnz	r0, 801ba70 <__pow5mult+0x9c>
 801ba60:	4622      	mov	r2, r4
 801ba62:	4621      	mov	r1, r4
 801ba64:	4638      	mov	r0, r7
 801ba66:	f7ff ff13 	bl	801b890 <__multiply>
 801ba6a:	6020      	str	r0, [r4, #0]
 801ba6c:	f8c0 9000 	str.w	r9, [r0]
 801ba70:	4604      	mov	r4, r0
 801ba72:	e7e4      	b.n	801ba3e <__pow5mult+0x6a>
 801ba74:	4630      	mov	r0, r6
 801ba76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ba7a:	bf00      	nop
 801ba7c:	08020890 	.word	0x08020890
 801ba80:	08020311 	.word	0x08020311
 801ba84:	08020391 	.word	0x08020391

0801ba88 <__lshift>:
 801ba88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ba8c:	460c      	mov	r4, r1
 801ba8e:	6849      	ldr	r1, [r1, #4]
 801ba90:	6923      	ldr	r3, [r4, #16]
 801ba92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ba96:	68a3      	ldr	r3, [r4, #8]
 801ba98:	4607      	mov	r7, r0
 801ba9a:	4691      	mov	r9, r2
 801ba9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801baa0:	f108 0601 	add.w	r6, r8, #1
 801baa4:	42b3      	cmp	r3, r6
 801baa6:	db0b      	blt.n	801bac0 <__lshift+0x38>
 801baa8:	4638      	mov	r0, r7
 801baaa:	f7ff fd9d 	bl	801b5e8 <_Balloc>
 801baae:	4605      	mov	r5, r0
 801bab0:	b948      	cbnz	r0, 801bac6 <__lshift+0x3e>
 801bab2:	4602      	mov	r2, r0
 801bab4:	4b28      	ldr	r3, [pc, #160]	@ (801bb58 <__lshift+0xd0>)
 801bab6:	4829      	ldr	r0, [pc, #164]	@ (801bb5c <__lshift+0xd4>)
 801bab8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801babc:	f7fe fe1e 	bl	801a6fc <__assert_func>
 801bac0:	3101      	adds	r1, #1
 801bac2:	005b      	lsls	r3, r3, #1
 801bac4:	e7ee      	b.n	801baa4 <__lshift+0x1c>
 801bac6:	2300      	movs	r3, #0
 801bac8:	f100 0114 	add.w	r1, r0, #20
 801bacc:	f100 0210 	add.w	r2, r0, #16
 801bad0:	4618      	mov	r0, r3
 801bad2:	4553      	cmp	r3, sl
 801bad4:	db33      	blt.n	801bb3e <__lshift+0xb6>
 801bad6:	6920      	ldr	r0, [r4, #16]
 801bad8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801badc:	f104 0314 	add.w	r3, r4, #20
 801bae0:	f019 091f 	ands.w	r9, r9, #31
 801bae4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bae8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801baec:	d02b      	beq.n	801bb46 <__lshift+0xbe>
 801baee:	f1c9 0e20 	rsb	lr, r9, #32
 801baf2:	468a      	mov	sl, r1
 801baf4:	2200      	movs	r2, #0
 801baf6:	6818      	ldr	r0, [r3, #0]
 801baf8:	fa00 f009 	lsl.w	r0, r0, r9
 801bafc:	4310      	orrs	r0, r2
 801bafe:	f84a 0b04 	str.w	r0, [sl], #4
 801bb02:	f853 2b04 	ldr.w	r2, [r3], #4
 801bb06:	459c      	cmp	ip, r3
 801bb08:	fa22 f20e 	lsr.w	r2, r2, lr
 801bb0c:	d8f3      	bhi.n	801baf6 <__lshift+0x6e>
 801bb0e:	ebac 0304 	sub.w	r3, ip, r4
 801bb12:	3b15      	subs	r3, #21
 801bb14:	f023 0303 	bic.w	r3, r3, #3
 801bb18:	3304      	adds	r3, #4
 801bb1a:	f104 0015 	add.w	r0, r4, #21
 801bb1e:	4560      	cmp	r0, ip
 801bb20:	bf88      	it	hi
 801bb22:	2304      	movhi	r3, #4
 801bb24:	50ca      	str	r2, [r1, r3]
 801bb26:	b10a      	cbz	r2, 801bb2c <__lshift+0xa4>
 801bb28:	f108 0602 	add.w	r6, r8, #2
 801bb2c:	3e01      	subs	r6, #1
 801bb2e:	4638      	mov	r0, r7
 801bb30:	612e      	str	r6, [r5, #16]
 801bb32:	4621      	mov	r1, r4
 801bb34:	f7ff fd98 	bl	801b668 <_Bfree>
 801bb38:	4628      	mov	r0, r5
 801bb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb3e:	f842 0f04 	str.w	r0, [r2, #4]!
 801bb42:	3301      	adds	r3, #1
 801bb44:	e7c5      	b.n	801bad2 <__lshift+0x4a>
 801bb46:	3904      	subs	r1, #4
 801bb48:	f853 2b04 	ldr.w	r2, [r3], #4
 801bb4c:	f841 2f04 	str.w	r2, [r1, #4]!
 801bb50:	459c      	cmp	ip, r3
 801bb52:	d8f9      	bhi.n	801bb48 <__lshift+0xc0>
 801bb54:	e7ea      	b.n	801bb2c <__lshift+0xa4>
 801bb56:	bf00      	nop
 801bb58:	08020380 	.word	0x08020380
 801bb5c:	08020391 	.word	0x08020391

0801bb60 <__mcmp>:
 801bb60:	690a      	ldr	r2, [r1, #16]
 801bb62:	4603      	mov	r3, r0
 801bb64:	6900      	ldr	r0, [r0, #16]
 801bb66:	1a80      	subs	r0, r0, r2
 801bb68:	b530      	push	{r4, r5, lr}
 801bb6a:	d10e      	bne.n	801bb8a <__mcmp+0x2a>
 801bb6c:	3314      	adds	r3, #20
 801bb6e:	3114      	adds	r1, #20
 801bb70:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801bb74:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801bb78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801bb7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801bb80:	4295      	cmp	r5, r2
 801bb82:	d003      	beq.n	801bb8c <__mcmp+0x2c>
 801bb84:	d205      	bcs.n	801bb92 <__mcmp+0x32>
 801bb86:	f04f 30ff 	mov.w	r0, #4294967295
 801bb8a:	bd30      	pop	{r4, r5, pc}
 801bb8c:	42a3      	cmp	r3, r4
 801bb8e:	d3f3      	bcc.n	801bb78 <__mcmp+0x18>
 801bb90:	e7fb      	b.n	801bb8a <__mcmp+0x2a>
 801bb92:	2001      	movs	r0, #1
 801bb94:	e7f9      	b.n	801bb8a <__mcmp+0x2a>
	...

0801bb98 <__mdiff>:
 801bb98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb9c:	4689      	mov	r9, r1
 801bb9e:	4606      	mov	r6, r0
 801bba0:	4611      	mov	r1, r2
 801bba2:	4648      	mov	r0, r9
 801bba4:	4614      	mov	r4, r2
 801bba6:	f7ff ffdb 	bl	801bb60 <__mcmp>
 801bbaa:	1e05      	subs	r5, r0, #0
 801bbac:	d112      	bne.n	801bbd4 <__mdiff+0x3c>
 801bbae:	4629      	mov	r1, r5
 801bbb0:	4630      	mov	r0, r6
 801bbb2:	f7ff fd19 	bl	801b5e8 <_Balloc>
 801bbb6:	4602      	mov	r2, r0
 801bbb8:	b928      	cbnz	r0, 801bbc6 <__mdiff+0x2e>
 801bbba:	4b3f      	ldr	r3, [pc, #252]	@ (801bcb8 <__mdiff+0x120>)
 801bbbc:	f240 2137 	movw	r1, #567	@ 0x237
 801bbc0:	483e      	ldr	r0, [pc, #248]	@ (801bcbc <__mdiff+0x124>)
 801bbc2:	f7fe fd9b 	bl	801a6fc <__assert_func>
 801bbc6:	2301      	movs	r3, #1
 801bbc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801bbcc:	4610      	mov	r0, r2
 801bbce:	b003      	add	sp, #12
 801bbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbd4:	bfbc      	itt	lt
 801bbd6:	464b      	movlt	r3, r9
 801bbd8:	46a1      	movlt	r9, r4
 801bbda:	4630      	mov	r0, r6
 801bbdc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801bbe0:	bfba      	itte	lt
 801bbe2:	461c      	movlt	r4, r3
 801bbe4:	2501      	movlt	r5, #1
 801bbe6:	2500      	movge	r5, #0
 801bbe8:	f7ff fcfe 	bl	801b5e8 <_Balloc>
 801bbec:	4602      	mov	r2, r0
 801bbee:	b918      	cbnz	r0, 801bbf8 <__mdiff+0x60>
 801bbf0:	4b31      	ldr	r3, [pc, #196]	@ (801bcb8 <__mdiff+0x120>)
 801bbf2:	f240 2145 	movw	r1, #581	@ 0x245
 801bbf6:	e7e3      	b.n	801bbc0 <__mdiff+0x28>
 801bbf8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801bbfc:	6926      	ldr	r6, [r4, #16]
 801bbfe:	60c5      	str	r5, [r0, #12]
 801bc00:	f109 0310 	add.w	r3, r9, #16
 801bc04:	f109 0514 	add.w	r5, r9, #20
 801bc08:	f104 0e14 	add.w	lr, r4, #20
 801bc0c:	f100 0b14 	add.w	fp, r0, #20
 801bc10:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801bc14:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801bc18:	9301      	str	r3, [sp, #4]
 801bc1a:	46d9      	mov	r9, fp
 801bc1c:	f04f 0c00 	mov.w	ip, #0
 801bc20:	9b01      	ldr	r3, [sp, #4]
 801bc22:	f85e 0b04 	ldr.w	r0, [lr], #4
 801bc26:	f853 af04 	ldr.w	sl, [r3, #4]!
 801bc2a:	9301      	str	r3, [sp, #4]
 801bc2c:	fa1f f38a 	uxth.w	r3, sl
 801bc30:	4619      	mov	r1, r3
 801bc32:	b283      	uxth	r3, r0
 801bc34:	1acb      	subs	r3, r1, r3
 801bc36:	0c00      	lsrs	r0, r0, #16
 801bc38:	4463      	add	r3, ip
 801bc3a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801bc3e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801bc42:	b29b      	uxth	r3, r3
 801bc44:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801bc48:	4576      	cmp	r6, lr
 801bc4a:	f849 3b04 	str.w	r3, [r9], #4
 801bc4e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bc52:	d8e5      	bhi.n	801bc20 <__mdiff+0x88>
 801bc54:	1b33      	subs	r3, r6, r4
 801bc56:	3b15      	subs	r3, #21
 801bc58:	f023 0303 	bic.w	r3, r3, #3
 801bc5c:	3415      	adds	r4, #21
 801bc5e:	3304      	adds	r3, #4
 801bc60:	42a6      	cmp	r6, r4
 801bc62:	bf38      	it	cc
 801bc64:	2304      	movcc	r3, #4
 801bc66:	441d      	add	r5, r3
 801bc68:	445b      	add	r3, fp
 801bc6a:	461e      	mov	r6, r3
 801bc6c:	462c      	mov	r4, r5
 801bc6e:	4544      	cmp	r4, r8
 801bc70:	d30e      	bcc.n	801bc90 <__mdiff+0xf8>
 801bc72:	f108 0103 	add.w	r1, r8, #3
 801bc76:	1b49      	subs	r1, r1, r5
 801bc78:	f021 0103 	bic.w	r1, r1, #3
 801bc7c:	3d03      	subs	r5, #3
 801bc7e:	45a8      	cmp	r8, r5
 801bc80:	bf38      	it	cc
 801bc82:	2100      	movcc	r1, #0
 801bc84:	440b      	add	r3, r1
 801bc86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bc8a:	b191      	cbz	r1, 801bcb2 <__mdiff+0x11a>
 801bc8c:	6117      	str	r7, [r2, #16]
 801bc8e:	e79d      	b.n	801bbcc <__mdiff+0x34>
 801bc90:	f854 1b04 	ldr.w	r1, [r4], #4
 801bc94:	46e6      	mov	lr, ip
 801bc96:	0c08      	lsrs	r0, r1, #16
 801bc98:	fa1c fc81 	uxtah	ip, ip, r1
 801bc9c:	4471      	add	r1, lr
 801bc9e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801bca2:	b289      	uxth	r1, r1
 801bca4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801bca8:	f846 1b04 	str.w	r1, [r6], #4
 801bcac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bcb0:	e7dd      	b.n	801bc6e <__mdiff+0xd6>
 801bcb2:	3f01      	subs	r7, #1
 801bcb4:	e7e7      	b.n	801bc86 <__mdiff+0xee>
 801bcb6:	bf00      	nop
 801bcb8:	08020380 	.word	0x08020380
 801bcbc:	08020391 	.word	0x08020391

0801bcc0 <__ulp>:
 801bcc0:	b082      	sub	sp, #8
 801bcc2:	ed8d 0b00 	vstr	d0, [sp]
 801bcc6:	9a01      	ldr	r2, [sp, #4]
 801bcc8:	4b0f      	ldr	r3, [pc, #60]	@ (801bd08 <__ulp+0x48>)
 801bcca:	4013      	ands	r3, r2
 801bccc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	dc08      	bgt.n	801bce6 <__ulp+0x26>
 801bcd4:	425b      	negs	r3, r3
 801bcd6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801bcda:	ea4f 5223 	mov.w	r2, r3, asr #20
 801bcde:	da04      	bge.n	801bcea <__ulp+0x2a>
 801bce0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801bce4:	4113      	asrs	r3, r2
 801bce6:	2200      	movs	r2, #0
 801bce8:	e008      	b.n	801bcfc <__ulp+0x3c>
 801bcea:	f1a2 0314 	sub.w	r3, r2, #20
 801bcee:	2b1e      	cmp	r3, #30
 801bcf0:	bfda      	itte	le
 801bcf2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801bcf6:	40da      	lsrle	r2, r3
 801bcf8:	2201      	movgt	r2, #1
 801bcfa:	2300      	movs	r3, #0
 801bcfc:	4619      	mov	r1, r3
 801bcfe:	4610      	mov	r0, r2
 801bd00:	ec41 0b10 	vmov	d0, r0, r1
 801bd04:	b002      	add	sp, #8
 801bd06:	4770      	bx	lr
 801bd08:	7ff00000 	.word	0x7ff00000

0801bd0c <__b2d>:
 801bd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd10:	6906      	ldr	r6, [r0, #16]
 801bd12:	f100 0814 	add.w	r8, r0, #20
 801bd16:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801bd1a:	1f37      	subs	r7, r6, #4
 801bd1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801bd20:	4610      	mov	r0, r2
 801bd22:	f7ff fd53 	bl	801b7cc <__hi0bits>
 801bd26:	f1c0 0320 	rsb	r3, r0, #32
 801bd2a:	280a      	cmp	r0, #10
 801bd2c:	600b      	str	r3, [r1, #0]
 801bd2e:	491b      	ldr	r1, [pc, #108]	@ (801bd9c <__b2d+0x90>)
 801bd30:	dc15      	bgt.n	801bd5e <__b2d+0x52>
 801bd32:	f1c0 0c0b 	rsb	ip, r0, #11
 801bd36:	fa22 f30c 	lsr.w	r3, r2, ip
 801bd3a:	45b8      	cmp	r8, r7
 801bd3c:	ea43 0501 	orr.w	r5, r3, r1
 801bd40:	bf34      	ite	cc
 801bd42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801bd46:	2300      	movcs	r3, #0
 801bd48:	3015      	adds	r0, #21
 801bd4a:	fa02 f000 	lsl.w	r0, r2, r0
 801bd4e:	fa23 f30c 	lsr.w	r3, r3, ip
 801bd52:	4303      	orrs	r3, r0
 801bd54:	461c      	mov	r4, r3
 801bd56:	ec45 4b10 	vmov	d0, r4, r5
 801bd5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd5e:	45b8      	cmp	r8, r7
 801bd60:	bf3a      	itte	cc
 801bd62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801bd66:	f1a6 0708 	subcc.w	r7, r6, #8
 801bd6a:	2300      	movcs	r3, #0
 801bd6c:	380b      	subs	r0, #11
 801bd6e:	d012      	beq.n	801bd96 <__b2d+0x8a>
 801bd70:	f1c0 0120 	rsb	r1, r0, #32
 801bd74:	fa23 f401 	lsr.w	r4, r3, r1
 801bd78:	4082      	lsls	r2, r0
 801bd7a:	4322      	orrs	r2, r4
 801bd7c:	4547      	cmp	r7, r8
 801bd7e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801bd82:	bf8c      	ite	hi
 801bd84:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801bd88:	2200      	movls	r2, #0
 801bd8a:	4083      	lsls	r3, r0
 801bd8c:	40ca      	lsrs	r2, r1
 801bd8e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801bd92:	4313      	orrs	r3, r2
 801bd94:	e7de      	b.n	801bd54 <__b2d+0x48>
 801bd96:	ea42 0501 	orr.w	r5, r2, r1
 801bd9a:	e7db      	b.n	801bd54 <__b2d+0x48>
 801bd9c:	3ff00000 	.word	0x3ff00000

0801bda0 <__d2b>:
 801bda0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bda4:	460f      	mov	r7, r1
 801bda6:	2101      	movs	r1, #1
 801bda8:	ec59 8b10 	vmov	r8, r9, d0
 801bdac:	4616      	mov	r6, r2
 801bdae:	f7ff fc1b 	bl	801b5e8 <_Balloc>
 801bdb2:	4604      	mov	r4, r0
 801bdb4:	b930      	cbnz	r0, 801bdc4 <__d2b+0x24>
 801bdb6:	4602      	mov	r2, r0
 801bdb8:	4b23      	ldr	r3, [pc, #140]	@ (801be48 <__d2b+0xa8>)
 801bdba:	4824      	ldr	r0, [pc, #144]	@ (801be4c <__d2b+0xac>)
 801bdbc:	f240 310f 	movw	r1, #783	@ 0x30f
 801bdc0:	f7fe fc9c 	bl	801a6fc <__assert_func>
 801bdc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801bdc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bdcc:	b10d      	cbz	r5, 801bdd2 <__d2b+0x32>
 801bdce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801bdd2:	9301      	str	r3, [sp, #4]
 801bdd4:	f1b8 0300 	subs.w	r3, r8, #0
 801bdd8:	d023      	beq.n	801be22 <__d2b+0x82>
 801bdda:	4668      	mov	r0, sp
 801bddc:	9300      	str	r3, [sp, #0]
 801bdde:	f7ff fd14 	bl	801b80a <__lo0bits>
 801bde2:	e9dd 1200 	ldrd	r1, r2, [sp]
 801bde6:	b1d0      	cbz	r0, 801be1e <__d2b+0x7e>
 801bde8:	f1c0 0320 	rsb	r3, r0, #32
 801bdec:	fa02 f303 	lsl.w	r3, r2, r3
 801bdf0:	430b      	orrs	r3, r1
 801bdf2:	40c2      	lsrs	r2, r0
 801bdf4:	6163      	str	r3, [r4, #20]
 801bdf6:	9201      	str	r2, [sp, #4]
 801bdf8:	9b01      	ldr	r3, [sp, #4]
 801bdfa:	61a3      	str	r3, [r4, #24]
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	bf0c      	ite	eq
 801be00:	2201      	moveq	r2, #1
 801be02:	2202      	movne	r2, #2
 801be04:	6122      	str	r2, [r4, #16]
 801be06:	b1a5      	cbz	r5, 801be32 <__d2b+0x92>
 801be08:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801be0c:	4405      	add	r5, r0
 801be0e:	603d      	str	r5, [r7, #0]
 801be10:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801be14:	6030      	str	r0, [r6, #0]
 801be16:	4620      	mov	r0, r4
 801be18:	b003      	add	sp, #12
 801be1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801be1e:	6161      	str	r1, [r4, #20]
 801be20:	e7ea      	b.n	801bdf8 <__d2b+0x58>
 801be22:	a801      	add	r0, sp, #4
 801be24:	f7ff fcf1 	bl	801b80a <__lo0bits>
 801be28:	9b01      	ldr	r3, [sp, #4]
 801be2a:	6163      	str	r3, [r4, #20]
 801be2c:	3020      	adds	r0, #32
 801be2e:	2201      	movs	r2, #1
 801be30:	e7e8      	b.n	801be04 <__d2b+0x64>
 801be32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801be36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801be3a:	6038      	str	r0, [r7, #0]
 801be3c:	6918      	ldr	r0, [r3, #16]
 801be3e:	f7ff fcc5 	bl	801b7cc <__hi0bits>
 801be42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801be46:	e7e5      	b.n	801be14 <__d2b+0x74>
 801be48:	08020380 	.word	0x08020380
 801be4c:	08020391 	.word	0x08020391

0801be50 <__ratio>:
 801be50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be54:	b085      	sub	sp, #20
 801be56:	e9cd 1000 	strd	r1, r0, [sp]
 801be5a:	a902      	add	r1, sp, #8
 801be5c:	f7ff ff56 	bl	801bd0c <__b2d>
 801be60:	9800      	ldr	r0, [sp, #0]
 801be62:	a903      	add	r1, sp, #12
 801be64:	ec55 4b10 	vmov	r4, r5, d0
 801be68:	f7ff ff50 	bl	801bd0c <__b2d>
 801be6c:	9b01      	ldr	r3, [sp, #4]
 801be6e:	6919      	ldr	r1, [r3, #16]
 801be70:	9b00      	ldr	r3, [sp, #0]
 801be72:	691b      	ldr	r3, [r3, #16]
 801be74:	1ac9      	subs	r1, r1, r3
 801be76:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801be7a:	1a9b      	subs	r3, r3, r2
 801be7c:	ec5b ab10 	vmov	sl, fp, d0
 801be80:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801be84:	2b00      	cmp	r3, #0
 801be86:	bfce      	itee	gt
 801be88:	462a      	movgt	r2, r5
 801be8a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801be8e:	465a      	movle	r2, fp
 801be90:	462f      	mov	r7, r5
 801be92:	46d9      	mov	r9, fp
 801be94:	bfcc      	ite	gt
 801be96:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801be9a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801be9e:	464b      	mov	r3, r9
 801bea0:	4652      	mov	r2, sl
 801bea2:	4620      	mov	r0, r4
 801bea4:	4639      	mov	r1, r7
 801bea6:	f7e4 fcd1 	bl	800084c <__aeabi_ddiv>
 801beaa:	ec41 0b10 	vmov	d0, r0, r1
 801beae:	b005      	add	sp, #20
 801beb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801beb4 <__copybits>:
 801beb4:	3901      	subs	r1, #1
 801beb6:	b570      	push	{r4, r5, r6, lr}
 801beb8:	1149      	asrs	r1, r1, #5
 801beba:	6914      	ldr	r4, [r2, #16]
 801bebc:	3101      	adds	r1, #1
 801bebe:	f102 0314 	add.w	r3, r2, #20
 801bec2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801bec6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801beca:	1f05      	subs	r5, r0, #4
 801becc:	42a3      	cmp	r3, r4
 801bece:	d30c      	bcc.n	801beea <__copybits+0x36>
 801bed0:	1aa3      	subs	r3, r4, r2
 801bed2:	3b11      	subs	r3, #17
 801bed4:	f023 0303 	bic.w	r3, r3, #3
 801bed8:	3211      	adds	r2, #17
 801beda:	42a2      	cmp	r2, r4
 801bedc:	bf88      	it	hi
 801bede:	2300      	movhi	r3, #0
 801bee0:	4418      	add	r0, r3
 801bee2:	2300      	movs	r3, #0
 801bee4:	4288      	cmp	r0, r1
 801bee6:	d305      	bcc.n	801bef4 <__copybits+0x40>
 801bee8:	bd70      	pop	{r4, r5, r6, pc}
 801beea:	f853 6b04 	ldr.w	r6, [r3], #4
 801beee:	f845 6f04 	str.w	r6, [r5, #4]!
 801bef2:	e7eb      	b.n	801becc <__copybits+0x18>
 801bef4:	f840 3b04 	str.w	r3, [r0], #4
 801bef8:	e7f4      	b.n	801bee4 <__copybits+0x30>

0801befa <__any_on>:
 801befa:	f100 0214 	add.w	r2, r0, #20
 801befe:	6900      	ldr	r0, [r0, #16]
 801bf00:	114b      	asrs	r3, r1, #5
 801bf02:	4298      	cmp	r0, r3
 801bf04:	b510      	push	{r4, lr}
 801bf06:	db11      	blt.n	801bf2c <__any_on+0x32>
 801bf08:	dd0a      	ble.n	801bf20 <__any_on+0x26>
 801bf0a:	f011 011f 	ands.w	r1, r1, #31
 801bf0e:	d007      	beq.n	801bf20 <__any_on+0x26>
 801bf10:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801bf14:	fa24 f001 	lsr.w	r0, r4, r1
 801bf18:	fa00 f101 	lsl.w	r1, r0, r1
 801bf1c:	428c      	cmp	r4, r1
 801bf1e:	d10b      	bne.n	801bf38 <__any_on+0x3e>
 801bf20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bf24:	4293      	cmp	r3, r2
 801bf26:	d803      	bhi.n	801bf30 <__any_on+0x36>
 801bf28:	2000      	movs	r0, #0
 801bf2a:	bd10      	pop	{r4, pc}
 801bf2c:	4603      	mov	r3, r0
 801bf2e:	e7f7      	b.n	801bf20 <__any_on+0x26>
 801bf30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bf34:	2900      	cmp	r1, #0
 801bf36:	d0f5      	beq.n	801bf24 <__any_on+0x2a>
 801bf38:	2001      	movs	r0, #1
 801bf3a:	e7f6      	b.n	801bf2a <__any_on+0x30>

0801bf3c <_realloc_r>:
 801bf3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf40:	4607      	mov	r7, r0
 801bf42:	4614      	mov	r4, r2
 801bf44:	460d      	mov	r5, r1
 801bf46:	b921      	cbnz	r1, 801bf52 <_realloc_r+0x16>
 801bf48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bf4c:	4611      	mov	r1, r2
 801bf4e:	f7ff babf 	b.w	801b4d0 <_malloc_r>
 801bf52:	b92a      	cbnz	r2, 801bf60 <_realloc_r+0x24>
 801bf54:	f7ff fa48 	bl	801b3e8 <_free_r>
 801bf58:	4625      	mov	r5, r4
 801bf5a:	4628      	mov	r0, r5
 801bf5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf60:	f002 f88f 	bl	801e082 <_malloc_usable_size_r>
 801bf64:	4284      	cmp	r4, r0
 801bf66:	4606      	mov	r6, r0
 801bf68:	d802      	bhi.n	801bf70 <_realloc_r+0x34>
 801bf6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bf6e:	d8f4      	bhi.n	801bf5a <_realloc_r+0x1e>
 801bf70:	4621      	mov	r1, r4
 801bf72:	4638      	mov	r0, r7
 801bf74:	f7ff faac 	bl	801b4d0 <_malloc_r>
 801bf78:	4680      	mov	r8, r0
 801bf7a:	b908      	cbnz	r0, 801bf80 <_realloc_r+0x44>
 801bf7c:	4645      	mov	r5, r8
 801bf7e:	e7ec      	b.n	801bf5a <_realloc_r+0x1e>
 801bf80:	42b4      	cmp	r4, r6
 801bf82:	4622      	mov	r2, r4
 801bf84:	4629      	mov	r1, r5
 801bf86:	bf28      	it	cs
 801bf88:	4632      	movcs	r2, r6
 801bf8a:	f7fe fba8 	bl	801a6de <memcpy>
 801bf8e:	4629      	mov	r1, r5
 801bf90:	4638      	mov	r0, r7
 801bf92:	f7ff fa29 	bl	801b3e8 <_free_r>
 801bf96:	e7f1      	b.n	801bf7c <_realloc_r+0x40>

0801bf98 <sulp>:
 801bf98:	b570      	push	{r4, r5, r6, lr}
 801bf9a:	4604      	mov	r4, r0
 801bf9c:	460d      	mov	r5, r1
 801bf9e:	ec45 4b10 	vmov	d0, r4, r5
 801bfa2:	4616      	mov	r6, r2
 801bfa4:	f7ff fe8c 	bl	801bcc0 <__ulp>
 801bfa8:	ec51 0b10 	vmov	r0, r1, d0
 801bfac:	b17e      	cbz	r6, 801bfce <sulp+0x36>
 801bfae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801bfb2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	dd09      	ble.n	801bfce <sulp+0x36>
 801bfba:	051b      	lsls	r3, r3, #20
 801bfbc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801bfc0:	2400      	movs	r4, #0
 801bfc2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801bfc6:	4622      	mov	r2, r4
 801bfc8:	462b      	mov	r3, r5
 801bfca:	f7e4 fb15 	bl	80005f8 <__aeabi_dmul>
 801bfce:	ec41 0b10 	vmov	d0, r0, r1
 801bfd2:	bd70      	pop	{r4, r5, r6, pc}
 801bfd4:	0000      	movs	r0, r0
	...

0801bfd8 <_strtod_l>:
 801bfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfdc:	b09f      	sub	sp, #124	@ 0x7c
 801bfde:	460c      	mov	r4, r1
 801bfe0:	9217      	str	r2, [sp, #92]	@ 0x5c
 801bfe2:	2200      	movs	r2, #0
 801bfe4:	921a      	str	r2, [sp, #104]	@ 0x68
 801bfe6:	9005      	str	r0, [sp, #20]
 801bfe8:	f04f 0a00 	mov.w	sl, #0
 801bfec:	f04f 0b00 	mov.w	fp, #0
 801bff0:	460a      	mov	r2, r1
 801bff2:	9219      	str	r2, [sp, #100]	@ 0x64
 801bff4:	7811      	ldrb	r1, [r2, #0]
 801bff6:	292b      	cmp	r1, #43	@ 0x2b
 801bff8:	d04a      	beq.n	801c090 <_strtod_l+0xb8>
 801bffa:	d838      	bhi.n	801c06e <_strtod_l+0x96>
 801bffc:	290d      	cmp	r1, #13
 801bffe:	d832      	bhi.n	801c066 <_strtod_l+0x8e>
 801c000:	2908      	cmp	r1, #8
 801c002:	d832      	bhi.n	801c06a <_strtod_l+0x92>
 801c004:	2900      	cmp	r1, #0
 801c006:	d03b      	beq.n	801c080 <_strtod_l+0xa8>
 801c008:	2200      	movs	r2, #0
 801c00a:	920e      	str	r2, [sp, #56]	@ 0x38
 801c00c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801c00e:	782a      	ldrb	r2, [r5, #0]
 801c010:	2a30      	cmp	r2, #48	@ 0x30
 801c012:	f040 80b2 	bne.w	801c17a <_strtod_l+0x1a2>
 801c016:	786a      	ldrb	r2, [r5, #1]
 801c018:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801c01c:	2a58      	cmp	r2, #88	@ 0x58
 801c01e:	d16e      	bne.n	801c0fe <_strtod_l+0x126>
 801c020:	9302      	str	r3, [sp, #8]
 801c022:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c024:	9301      	str	r3, [sp, #4]
 801c026:	ab1a      	add	r3, sp, #104	@ 0x68
 801c028:	9300      	str	r3, [sp, #0]
 801c02a:	4a8f      	ldr	r2, [pc, #572]	@ (801c268 <_strtod_l+0x290>)
 801c02c:	9805      	ldr	r0, [sp, #20]
 801c02e:	ab1b      	add	r3, sp, #108	@ 0x6c
 801c030:	a919      	add	r1, sp, #100	@ 0x64
 801c032:	f001 fd43 	bl	801dabc <__gethex>
 801c036:	f010 060f 	ands.w	r6, r0, #15
 801c03a:	4604      	mov	r4, r0
 801c03c:	d005      	beq.n	801c04a <_strtod_l+0x72>
 801c03e:	2e06      	cmp	r6, #6
 801c040:	d128      	bne.n	801c094 <_strtod_l+0xbc>
 801c042:	3501      	adds	r5, #1
 801c044:	2300      	movs	r3, #0
 801c046:	9519      	str	r5, [sp, #100]	@ 0x64
 801c048:	930e      	str	r3, [sp, #56]	@ 0x38
 801c04a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	f040 858e 	bne.w	801cb6e <_strtod_l+0xb96>
 801c052:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c054:	b1cb      	cbz	r3, 801c08a <_strtod_l+0xb2>
 801c056:	4652      	mov	r2, sl
 801c058:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801c05c:	ec43 2b10 	vmov	d0, r2, r3
 801c060:	b01f      	add	sp, #124	@ 0x7c
 801c062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c066:	2920      	cmp	r1, #32
 801c068:	d1ce      	bne.n	801c008 <_strtod_l+0x30>
 801c06a:	3201      	adds	r2, #1
 801c06c:	e7c1      	b.n	801bff2 <_strtod_l+0x1a>
 801c06e:	292d      	cmp	r1, #45	@ 0x2d
 801c070:	d1ca      	bne.n	801c008 <_strtod_l+0x30>
 801c072:	2101      	movs	r1, #1
 801c074:	910e      	str	r1, [sp, #56]	@ 0x38
 801c076:	1c51      	adds	r1, r2, #1
 801c078:	9119      	str	r1, [sp, #100]	@ 0x64
 801c07a:	7852      	ldrb	r2, [r2, #1]
 801c07c:	2a00      	cmp	r2, #0
 801c07e:	d1c5      	bne.n	801c00c <_strtod_l+0x34>
 801c080:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c082:	9419      	str	r4, [sp, #100]	@ 0x64
 801c084:	2b00      	cmp	r3, #0
 801c086:	f040 8570 	bne.w	801cb6a <_strtod_l+0xb92>
 801c08a:	4652      	mov	r2, sl
 801c08c:	465b      	mov	r3, fp
 801c08e:	e7e5      	b.n	801c05c <_strtod_l+0x84>
 801c090:	2100      	movs	r1, #0
 801c092:	e7ef      	b.n	801c074 <_strtod_l+0x9c>
 801c094:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c096:	b13a      	cbz	r2, 801c0a8 <_strtod_l+0xd0>
 801c098:	2135      	movs	r1, #53	@ 0x35
 801c09a:	a81c      	add	r0, sp, #112	@ 0x70
 801c09c:	f7ff ff0a 	bl	801beb4 <__copybits>
 801c0a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c0a2:	9805      	ldr	r0, [sp, #20]
 801c0a4:	f7ff fae0 	bl	801b668 <_Bfree>
 801c0a8:	3e01      	subs	r6, #1
 801c0aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c0ac:	2e04      	cmp	r6, #4
 801c0ae:	d806      	bhi.n	801c0be <_strtod_l+0xe6>
 801c0b0:	e8df f006 	tbb	[pc, r6]
 801c0b4:	201d0314 	.word	0x201d0314
 801c0b8:	14          	.byte	0x14
 801c0b9:	00          	.byte	0x00
 801c0ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801c0be:	05e1      	lsls	r1, r4, #23
 801c0c0:	bf48      	it	mi
 801c0c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801c0c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c0ca:	0d1b      	lsrs	r3, r3, #20
 801c0cc:	051b      	lsls	r3, r3, #20
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	d1bb      	bne.n	801c04a <_strtod_l+0x72>
 801c0d2:	f7fe fad7 	bl	801a684 <__errno>
 801c0d6:	2322      	movs	r3, #34	@ 0x22
 801c0d8:	6003      	str	r3, [r0, #0]
 801c0da:	e7b6      	b.n	801c04a <_strtod_l+0x72>
 801c0dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801c0e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801c0e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801c0e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c0ec:	e7e7      	b.n	801c0be <_strtod_l+0xe6>
 801c0ee:	f8df b180 	ldr.w	fp, [pc, #384]	@ 801c270 <_strtod_l+0x298>
 801c0f2:	e7e4      	b.n	801c0be <_strtod_l+0xe6>
 801c0f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801c0f8:	f04f 3aff 	mov.w	sl, #4294967295
 801c0fc:	e7df      	b.n	801c0be <_strtod_l+0xe6>
 801c0fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c100:	1c5a      	adds	r2, r3, #1
 801c102:	9219      	str	r2, [sp, #100]	@ 0x64
 801c104:	785b      	ldrb	r3, [r3, #1]
 801c106:	2b30      	cmp	r3, #48	@ 0x30
 801c108:	d0f9      	beq.n	801c0fe <_strtod_l+0x126>
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d09d      	beq.n	801c04a <_strtod_l+0x72>
 801c10e:	2301      	movs	r3, #1
 801c110:	2700      	movs	r7, #0
 801c112:	9308      	str	r3, [sp, #32]
 801c114:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c116:	930c      	str	r3, [sp, #48]	@ 0x30
 801c118:	970b      	str	r7, [sp, #44]	@ 0x2c
 801c11a:	46b9      	mov	r9, r7
 801c11c:	220a      	movs	r2, #10
 801c11e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801c120:	7805      	ldrb	r5, [r0, #0]
 801c122:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801c126:	b2d9      	uxtb	r1, r3
 801c128:	2909      	cmp	r1, #9
 801c12a:	d928      	bls.n	801c17e <_strtod_l+0x1a6>
 801c12c:	494f      	ldr	r1, [pc, #316]	@ (801c26c <_strtod_l+0x294>)
 801c12e:	2201      	movs	r2, #1
 801c130:	f001 fbf5 	bl	801d91e <strncmp>
 801c134:	2800      	cmp	r0, #0
 801c136:	d032      	beq.n	801c19e <_strtod_l+0x1c6>
 801c138:	2000      	movs	r0, #0
 801c13a:	462a      	mov	r2, r5
 801c13c:	900a      	str	r0, [sp, #40]	@ 0x28
 801c13e:	464d      	mov	r5, r9
 801c140:	4603      	mov	r3, r0
 801c142:	2a65      	cmp	r2, #101	@ 0x65
 801c144:	d001      	beq.n	801c14a <_strtod_l+0x172>
 801c146:	2a45      	cmp	r2, #69	@ 0x45
 801c148:	d114      	bne.n	801c174 <_strtod_l+0x19c>
 801c14a:	b91d      	cbnz	r5, 801c154 <_strtod_l+0x17c>
 801c14c:	9a08      	ldr	r2, [sp, #32]
 801c14e:	4302      	orrs	r2, r0
 801c150:	d096      	beq.n	801c080 <_strtod_l+0xa8>
 801c152:	2500      	movs	r5, #0
 801c154:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801c156:	1c62      	adds	r2, r4, #1
 801c158:	9219      	str	r2, [sp, #100]	@ 0x64
 801c15a:	7862      	ldrb	r2, [r4, #1]
 801c15c:	2a2b      	cmp	r2, #43	@ 0x2b
 801c15e:	d07a      	beq.n	801c256 <_strtod_l+0x27e>
 801c160:	2a2d      	cmp	r2, #45	@ 0x2d
 801c162:	d07e      	beq.n	801c262 <_strtod_l+0x28a>
 801c164:	f04f 0c00 	mov.w	ip, #0
 801c168:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801c16c:	2909      	cmp	r1, #9
 801c16e:	f240 8085 	bls.w	801c27c <_strtod_l+0x2a4>
 801c172:	9419      	str	r4, [sp, #100]	@ 0x64
 801c174:	f04f 0800 	mov.w	r8, #0
 801c178:	e0a5      	b.n	801c2c6 <_strtod_l+0x2ee>
 801c17a:	2300      	movs	r3, #0
 801c17c:	e7c8      	b.n	801c110 <_strtod_l+0x138>
 801c17e:	f1b9 0f08 	cmp.w	r9, #8
 801c182:	bfd8      	it	le
 801c184:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 801c186:	f100 0001 	add.w	r0, r0, #1
 801c18a:	bfda      	itte	le
 801c18c:	fb02 3301 	mlale	r3, r2, r1, r3
 801c190:	930b      	strle	r3, [sp, #44]	@ 0x2c
 801c192:	fb02 3707 	mlagt	r7, r2, r7, r3
 801c196:	f109 0901 	add.w	r9, r9, #1
 801c19a:	9019      	str	r0, [sp, #100]	@ 0x64
 801c19c:	e7bf      	b.n	801c11e <_strtod_l+0x146>
 801c19e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c1a0:	1c5a      	adds	r2, r3, #1
 801c1a2:	9219      	str	r2, [sp, #100]	@ 0x64
 801c1a4:	785a      	ldrb	r2, [r3, #1]
 801c1a6:	f1b9 0f00 	cmp.w	r9, #0
 801c1aa:	d03b      	beq.n	801c224 <_strtod_l+0x24c>
 801c1ac:	900a      	str	r0, [sp, #40]	@ 0x28
 801c1ae:	464d      	mov	r5, r9
 801c1b0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801c1b4:	2b09      	cmp	r3, #9
 801c1b6:	d912      	bls.n	801c1de <_strtod_l+0x206>
 801c1b8:	2301      	movs	r3, #1
 801c1ba:	e7c2      	b.n	801c142 <_strtod_l+0x16a>
 801c1bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c1be:	1c5a      	adds	r2, r3, #1
 801c1c0:	9219      	str	r2, [sp, #100]	@ 0x64
 801c1c2:	785a      	ldrb	r2, [r3, #1]
 801c1c4:	3001      	adds	r0, #1
 801c1c6:	2a30      	cmp	r2, #48	@ 0x30
 801c1c8:	d0f8      	beq.n	801c1bc <_strtod_l+0x1e4>
 801c1ca:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801c1ce:	2b08      	cmp	r3, #8
 801c1d0:	f200 84d2 	bhi.w	801cb78 <_strtod_l+0xba0>
 801c1d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c1d6:	900a      	str	r0, [sp, #40]	@ 0x28
 801c1d8:	2000      	movs	r0, #0
 801c1da:	930c      	str	r3, [sp, #48]	@ 0x30
 801c1dc:	4605      	mov	r5, r0
 801c1de:	3a30      	subs	r2, #48	@ 0x30
 801c1e0:	f100 0301 	add.w	r3, r0, #1
 801c1e4:	d018      	beq.n	801c218 <_strtod_l+0x240>
 801c1e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c1e8:	4419      	add	r1, r3
 801c1ea:	910a      	str	r1, [sp, #40]	@ 0x28
 801c1ec:	462e      	mov	r6, r5
 801c1ee:	f04f 0e0a 	mov.w	lr, #10
 801c1f2:	1c71      	adds	r1, r6, #1
 801c1f4:	eba1 0c05 	sub.w	ip, r1, r5
 801c1f8:	4563      	cmp	r3, ip
 801c1fa:	dc15      	bgt.n	801c228 <_strtod_l+0x250>
 801c1fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801c200:	182b      	adds	r3, r5, r0
 801c202:	2b08      	cmp	r3, #8
 801c204:	f105 0501 	add.w	r5, r5, #1
 801c208:	4405      	add	r5, r0
 801c20a:	dc1a      	bgt.n	801c242 <_strtod_l+0x26a>
 801c20c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c20e:	230a      	movs	r3, #10
 801c210:	fb03 2301 	mla	r3, r3, r1, r2
 801c214:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c216:	2300      	movs	r3, #0
 801c218:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c21a:	1c51      	adds	r1, r2, #1
 801c21c:	9119      	str	r1, [sp, #100]	@ 0x64
 801c21e:	7852      	ldrb	r2, [r2, #1]
 801c220:	4618      	mov	r0, r3
 801c222:	e7c5      	b.n	801c1b0 <_strtod_l+0x1d8>
 801c224:	4648      	mov	r0, r9
 801c226:	e7ce      	b.n	801c1c6 <_strtod_l+0x1ee>
 801c228:	2e08      	cmp	r6, #8
 801c22a:	dc05      	bgt.n	801c238 <_strtod_l+0x260>
 801c22c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801c22e:	fb0e f606 	mul.w	r6, lr, r6
 801c232:	960b      	str	r6, [sp, #44]	@ 0x2c
 801c234:	460e      	mov	r6, r1
 801c236:	e7dc      	b.n	801c1f2 <_strtod_l+0x21a>
 801c238:	2910      	cmp	r1, #16
 801c23a:	bfd8      	it	le
 801c23c:	fb0e f707 	mulle.w	r7, lr, r7
 801c240:	e7f8      	b.n	801c234 <_strtod_l+0x25c>
 801c242:	2b0f      	cmp	r3, #15
 801c244:	bfdc      	itt	le
 801c246:	230a      	movle	r3, #10
 801c248:	fb03 2707 	mlale	r7, r3, r7, r2
 801c24c:	e7e3      	b.n	801c216 <_strtod_l+0x23e>
 801c24e:	2300      	movs	r3, #0
 801c250:	930a      	str	r3, [sp, #40]	@ 0x28
 801c252:	2301      	movs	r3, #1
 801c254:	e77a      	b.n	801c14c <_strtod_l+0x174>
 801c256:	f04f 0c00 	mov.w	ip, #0
 801c25a:	1ca2      	adds	r2, r4, #2
 801c25c:	9219      	str	r2, [sp, #100]	@ 0x64
 801c25e:	78a2      	ldrb	r2, [r4, #2]
 801c260:	e782      	b.n	801c168 <_strtod_l+0x190>
 801c262:	f04f 0c01 	mov.w	ip, #1
 801c266:	e7f8      	b.n	801c25a <_strtod_l+0x282>
 801c268:	080209a4 	.word	0x080209a4
 801c26c:	080203ea 	.word	0x080203ea
 801c270:	7ff00000 	.word	0x7ff00000
 801c274:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c276:	1c51      	adds	r1, r2, #1
 801c278:	9119      	str	r1, [sp, #100]	@ 0x64
 801c27a:	7852      	ldrb	r2, [r2, #1]
 801c27c:	2a30      	cmp	r2, #48	@ 0x30
 801c27e:	d0f9      	beq.n	801c274 <_strtod_l+0x29c>
 801c280:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801c284:	2908      	cmp	r1, #8
 801c286:	f63f af75 	bhi.w	801c174 <_strtod_l+0x19c>
 801c28a:	3a30      	subs	r2, #48	@ 0x30
 801c28c:	9209      	str	r2, [sp, #36]	@ 0x24
 801c28e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c290:	920f      	str	r2, [sp, #60]	@ 0x3c
 801c292:	f04f 080a 	mov.w	r8, #10
 801c296:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c298:	1c56      	adds	r6, r2, #1
 801c29a:	9619      	str	r6, [sp, #100]	@ 0x64
 801c29c:	7852      	ldrb	r2, [r2, #1]
 801c29e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801c2a2:	f1be 0f09 	cmp.w	lr, #9
 801c2a6:	d939      	bls.n	801c31c <_strtod_l+0x344>
 801c2a8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801c2aa:	1a76      	subs	r6, r6, r1
 801c2ac:	2e08      	cmp	r6, #8
 801c2ae:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801c2b2:	dc03      	bgt.n	801c2bc <_strtod_l+0x2e4>
 801c2b4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c2b6:	4588      	cmp	r8, r1
 801c2b8:	bfa8      	it	ge
 801c2ba:	4688      	movge	r8, r1
 801c2bc:	f1bc 0f00 	cmp.w	ip, #0
 801c2c0:	d001      	beq.n	801c2c6 <_strtod_l+0x2ee>
 801c2c2:	f1c8 0800 	rsb	r8, r8, #0
 801c2c6:	2d00      	cmp	r5, #0
 801c2c8:	d14e      	bne.n	801c368 <_strtod_l+0x390>
 801c2ca:	9908      	ldr	r1, [sp, #32]
 801c2cc:	4308      	orrs	r0, r1
 801c2ce:	f47f aebc 	bne.w	801c04a <_strtod_l+0x72>
 801c2d2:	2b00      	cmp	r3, #0
 801c2d4:	f47f aed4 	bne.w	801c080 <_strtod_l+0xa8>
 801c2d8:	2a69      	cmp	r2, #105	@ 0x69
 801c2da:	d028      	beq.n	801c32e <_strtod_l+0x356>
 801c2dc:	dc25      	bgt.n	801c32a <_strtod_l+0x352>
 801c2de:	2a49      	cmp	r2, #73	@ 0x49
 801c2e0:	d025      	beq.n	801c32e <_strtod_l+0x356>
 801c2e2:	2a4e      	cmp	r2, #78	@ 0x4e
 801c2e4:	f47f aecc 	bne.w	801c080 <_strtod_l+0xa8>
 801c2e8:	499a      	ldr	r1, [pc, #616]	@ (801c554 <_strtod_l+0x57c>)
 801c2ea:	a819      	add	r0, sp, #100	@ 0x64
 801c2ec:	f001 fe08 	bl	801df00 <__match>
 801c2f0:	2800      	cmp	r0, #0
 801c2f2:	f43f aec5 	beq.w	801c080 <_strtod_l+0xa8>
 801c2f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c2f8:	781b      	ldrb	r3, [r3, #0]
 801c2fa:	2b28      	cmp	r3, #40	@ 0x28
 801c2fc:	d12e      	bne.n	801c35c <_strtod_l+0x384>
 801c2fe:	4996      	ldr	r1, [pc, #600]	@ (801c558 <_strtod_l+0x580>)
 801c300:	aa1c      	add	r2, sp, #112	@ 0x70
 801c302:	a819      	add	r0, sp, #100	@ 0x64
 801c304:	f001 fe10 	bl	801df28 <__hexnan>
 801c308:	2805      	cmp	r0, #5
 801c30a:	d127      	bne.n	801c35c <_strtod_l+0x384>
 801c30c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c30e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801c312:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801c316:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801c31a:	e696      	b.n	801c04a <_strtod_l+0x72>
 801c31c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c31e:	fb08 2101 	mla	r1, r8, r1, r2
 801c322:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801c326:	9209      	str	r2, [sp, #36]	@ 0x24
 801c328:	e7b5      	b.n	801c296 <_strtod_l+0x2be>
 801c32a:	2a6e      	cmp	r2, #110	@ 0x6e
 801c32c:	e7da      	b.n	801c2e4 <_strtod_l+0x30c>
 801c32e:	498b      	ldr	r1, [pc, #556]	@ (801c55c <_strtod_l+0x584>)
 801c330:	a819      	add	r0, sp, #100	@ 0x64
 801c332:	f001 fde5 	bl	801df00 <__match>
 801c336:	2800      	cmp	r0, #0
 801c338:	f43f aea2 	beq.w	801c080 <_strtod_l+0xa8>
 801c33c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c33e:	4988      	ldr	r1, [pc, #544]	@ (801c560 <_strtod_l+0x588>)
 801c340:	3b01      	subs	r3, #1
 801c342:	a819      	add	r0, sp, #100	@ 0x64
 801c344:	9319      	str	r3, [sp, #100]	@ 0x64
 801c346:	f001 fddb 	bl	801df00 <__match>
 801c34a:	b910      	cbnz	r0, 801c352 <_strtod_l+0x37a>
 801c34c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c34e:	3301      	adds	r3, #1
 801c350:	9319      	str	r3, [sp, #100]	@ 0x64
 801c352:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 801c570 <_strtod_l+0x598>
 801c356:	f04f 0a00 	mov.w	sl, #0
 801c35a:	e676      	b.n	801c04a <_strtod_l+0x72>
 801c35c:	4881      	ldr	r0, [pc, #516]	@ (801c564 <_strtod_l+0x58c>)
 801c35e:	f001 fb23 	bl	801d9a8 <nan>
 801c362:	ec5b ab10 	vmov	sl, fp, d0
 801c366:	e670      	b.n	801c04a <_strtod_l+0x72>
 801c368:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c36a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801c36c:	eba8 0303 	sub.w	r3, r8, r3
 801c370:	f1b9 0f00 	cmp.w	r9, #0
 801c374:	bf08      	it	eq
 801c376:	46a9      	moveq	r9, r5
 801c378:	2d10      	cmp	r5, #16
 801c37a:	9309      	str	r3, [sp, #36]	@ 0x24
 801c37c:	462c      	mov	r4, r5
 801c37e:	bfa8      	it	ge
 801c380:	2410      	movge	r4, #16
 801c382:	f7e4 f8bf 	bl	8000504 <__aeabi_ui2d>
 801c386:	2d09      	cmp	r5, #9
 801c388:	4682      	mov	sl, r0
 801c38a:	468b      	mov	fp, r1
 801c38c:	dc13      	bgt.n	801c3b6 <_strtod_l+0x3de>
 801c38e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c390:	2b00      	cmp	r3, #0
 801c392:	f43f ae5a 	beq.w	801c04a <_strtod_l+0x72>
 801c396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c398:	dd78      	ble.n	801c48c <_strtod_l+0x4b4>
 801c39a:	2b16      	cmp	r3, #22
 801c39c:	dc5f      	bgt.n	801c45e <_strtod_l+0x486>
 801c39e:	4972      	ldr	r1, [pc, #456]	@ (801c568 <_strtod_l+0x590>)
 801c3a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c3a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c3a8:	4652      	mov	r2, sl
 801c3aa:	465b      	mov	r3, fp
 801c3ac:	f7e4 f924 	bl	80005f8 <__aeabi_dmul>
 801c3b0:	4682      	mov	sl, r0
 801c3b2:	468b      	mov	fp, r1
 801c3b4:	e649      	b.n	801c04a <_strtod_l+0x72>
 801c3b6:	4b6c      	ldr	r3, [pc, #432]	@ (801c568 <_strtod_l+0x590>)
 801c3b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c3bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801c3c0:	f7e4 f91a 	bl	80005f8 <__aeabi_dmul>
 801c3c4:	4682      	mov	sl, r0
 801c3c6:	4638      	mov	r0, r7
 801c3c8:	468b      	mov	fp, r1
 801c3ca:	f7e4 f89b 	bl	8000504 <__aeabi_ui2d>
 801c3ce:	4602      	mov	r2, r0
 801c3d0:	460b      	mov	r3, r1
 801c3d2:	4650      	mov	r0, sl
 801c3d4:	4659      	mov	r1, fp
 801c3d6:	f7e3 ff59 	bl	800028c <__adddf3>
 801c3da:	2d0f      	cmp	r5, #15
 801c3dc:	4682      	mov	sl, r0
 801c3de:	468b      	mov	fp, r1
 801c3e0:	ddd5      	ble.n	801c38e <_strtod_l+0x3b6>
 801c3e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c3e4:	1b2c      	subs	r4, r5, r4
 801c3e6:	441c      	add	r4, r3
 801c3e8:	2c00      	cmp	r4, #0
 801c3ea:	f340 8093 	ble.w	801c514 <_strtod_l+0x53c>
 801c3ee:	f014 030f 	ands.w	r3, r4, #15
 801c3f2:	d00a      	beq.n	801c40a <_strtod_l+0x432>
 801c3f4:	495c      	ldr	r1, [pc, #368]	@ (801c568 <_strtod_l+0x590>)
 801c3f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c3fa:	4652      	mov	r2, sl
 801c3fc:	465b      	mov	r3, fp
 801c3fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c402:	f7e4 f8f9 	bl	80005f8 <__aeabi_dmul>
 801c406:	4682      	mov	sl, r0
 801c408:	468b      	mov	fp, r1
 801c40a:	f034 040f 	bics.w	r4, r4, #15
 801c40e:	d073      	beq.n	801c4f8 <_strtod_l+0x520>
 801c410:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801c414:	dd49      	ble.n	801c4aa <_strtod_l+0x4d2>
 801c416:	2400      	movs	r4, #0
 801c418:	46a0      	mov	r8, r4
 801c41a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801c41c:	46a1      	mov	r9, r4
 801c41e:	9a05      	ldr	r2, [sp, #20]
 801c420:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 801c570 <_strtod_l+0x598>
 801c424:	2322      	movs	r3, #34	@ 0x22
 801c426:	6013      	str	r3, [r2, #0]
 801c428:	f04f 0a00 	mov.w	sl, #0
 801c42c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c42e:	2b00      	cmp	r3, #0
 801c430:	f43f ae0b 	beq.w	801c04a <_strtod_l+0x72>
 801c434:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c436:	9805      	ldr	r0, [sp, #20]
 801c438:	f7ff f916 	bl	801b668 <_Bfree>
 801c43c:	9805      	ldr	r0, [sp, #20]
 801c43e:	4649      	mov	r1, r9
 801c440:	f7ff f912 	bl	801b668 <_Bfree>
 801c444:	9805      	ldr	r0, [sp, #20]
 801c446:	4641      	mov	r1, r8
 801c448:	f7ff f90e 	bl	801b668 <_Bfree>
 801c44c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c44e:	9805      	ldr	r0, [sp, #20]
 801c450:	f7ff f90a 	bl	801b668 <_Bfree>
 801c454:	9805      	ldr	r0, [sp, #20]
 801c456:	4621      	mov	r1, r4
 801c458:	f7ff f906 	bl	801b668 <_Bfree>
 801c45c:	e5f5      	b.n	801c04a <_strtod_l+0x72>
 801c45e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c460:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801c464:	4293      	cmp	r3, r2
 801c466:	dbbc      	blt.n	801c3e2 <_strtod_l+0x40a>
 801c468:	4c3f      	ldr	r4, [pc, #252]	@ (801c568 <_strtod_l+0x590>)
 801c46a:	f1c5 050f 	rsb	r5, r5, #15
 801c46e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801c472:	4652      	mov	r2, sl
 801c474:	465b      	mov	r3, fp
 801c476:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c47a:	f7e4 f8bd 	bl	80005f8 <__aeabi_dmul>
 801c47e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c480:	1b5d      	subs	r5, r3, r5
 801c482:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801c486:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c48a:	e78f      	b.n	801c3ac <_strtod_l+0x3d4>
 801c48c:	3316      	adds	r3, #22
 801c48e:	dba8      	blt.n	801c3e2 <_strtod_l+0x40a>
 801c490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c492:	eba3 0808 	sub.w	r8, r3, r8
 801c496:	4b34      	ldr	r3, [pc, #208]	@ (801c568 <_strtod_l+0x590>)
 801c498:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801c49c:	e9d8 2300 	ldrd	r2, r3, [r8]
 801c4a0:	4650      	mov	r0, sl
 801c4a2:	4659      	mov	r1, fp
 801c4a4:	f7e4 f9d2 	bl	800084c <__aeabi_ddiv>
 801c4a8:	e782      	b.n	801c3b0 <_strtod_l+0x3d8>
 801c4aa:	2300      	movs	r3, #0
 801c4ac:	4f2f      	ldr	r7, [pc, #188]	@ (801c56c <_strtod_l+0x594>)
 801c4ae:	1124      	asrs	r4, r4, #4
 801c4b0:	4650      	mov	r0, sl
 801c4b2:	4659      	mov	r1, fp
 801c4b4:	461e      	mov	r6, r3
 801c4b6:	2c01      	cmp	r4, #1
 801c4b8:	dc21      	bgt.n	801c4fe <_strtod_l+0x526>
 801c4ba:	b10b      	cbz	r3, 801c4c0 <_strtod_l+0x4e8>
 801c4bc:	4682      	mov	sl, r0
 801c4be:	468b      	mov	fp, r1
 801c4c0:	492a      	ldr	r1, [pc, #168]	@ (801c56c <_strtod_l+0x594>)
 801c4c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801c4c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801c4ca:	4652      	mov	r2, sl
 801c4cc:	465b      	mov	r3, fp
 801c4ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c4d2:	f7e4 f891 	bl	80005f8 <__aeabi_dmul>
 801c4d6:	4b26      	ldr	r3, [pc, #152]	@ (801c570 <_strtod_l+0x598>)
 801c4d8:	460a      	mov	r2, r1
 801c4da:	400b      	ands	r3, r1
 801c4dc:	4925      	ldr	r1, [pc, #148]	@ (801c574 <_strtod_l+0x59c>)
 801c4de:	428b      	cmp	r3, r1
 801c4e0:	4682      	mov	sl, r0
 801c4e2:	d898      	bhi.n	801c416 <_strtod_l+0x43e>
 801c4e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801c4e8:	428b      	cmp	r3, r1
 801c4ea:	bf86      	itte	hi
 801c4ec:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 801c578 <_strtod_l+0x5a0>
 801c4f0:	f04f 3aff 	movhi.w	sl, #4294967295
 801c4f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801c4f8:	2300      	movs	r3, #0
 801c4fa:	9308      	str	r3, [sp, #32]
 801c4fc:	e076      	b.n	801c5ec <_strtod_l+0x614>
 801c4fe:	07e2      	lsls	r2, r4, #31
 801c500:	d504      	bpl.n	801c50c <_strtod_l+0x534>
 801c502:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c506:	f7e4 f877 	bl	80005f8 <__aeabi_dmul>
 801c50a:	2301      	movs	r3, #1
 801c50c:	3601      	adds	r6, #1
 801c50e:	1064      	asrs	r4, r4, #1
 801c510:	3708      	adds	r7, #8
 801c512:	e7d0      	b.n	801c4b6 <_strtod_l+0x4de>
 801c514:	d0f0      	beq.n	801c4f8 <_strtod_l+0x520>
 801c516:	4264      	negs	r4, r4
 801c518:	f014 020f 	ands.w	r2, r4, #15
 801c51c:	d00a      	beq.n	801c534 <_strtod_l+0x55c>
 801c51e:	4b12      	ldr	r3, [pc, #72]	@ (801c568 <_strtod_l+0x590>)
 801c520:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c524:	4650      	mov	r0, sl
 801c526:	4659      	mov	r1, fp
 801c528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c52c:	f7e4 f98e 	bl	800084c <__aeabi_ddiv>
 801c530:	4682      	mov	sl, r0
 801c532:	468b      	mov	fp, r1
 801c534:	1124      	asrs	r4, r4, #4
 801c536:	d0df      	beq.n	801c4f8 <_strtod_l+0x520>
 801c538:	2c1f      	cmp	r4, #31
 801c53a:	dd1f      	ble.n	801c57c <_strtod_l+0x5a4>
 801c53c:	2400      	movs	r4, #0
 801c53e:	46a0      	mov	r8, r4
 801c540:	940b      	str	r4, [sp, #44]	@ 0x2c
 801c542:	46a1      	mov	r9, r4
 801c544:	9a05      	ldr	r2, [sp, #20]
 801c546:	2322      	movs	r3, #34	@ 0x22
 801c548:	f04f 0a00 	mov.w	sl, #0
 801c54c:	f04f 0b00 	mov.w	fp, #0
 801c550:	6013      	str	r3, [r2, #0]
 801c552:	e76b      	b.n	801c42c <_strtod_l+0x454>
 801c554:	0802028d 	.word	0x0802028d
 801c558:	08020990 	.word	0x08020990
 801c55c:	08020285 	.word	0x08020285
 801c560:	08020307 	.word	0x08020307
 801c564:	08020303 	.word	0x08020303
 801c568:	080208c8 	.word	0x080208c8
 801c56c:	080208a0 	.word	0x080208a0
 801c570:	7ff00000 	.word	0x7ff00000
 801c574:	7ca00000 	.word	0x7ca00000
 801c578:	7fefffff 	.word	0x7fefffff
 801c57c:	f014 0310 	ands.w	r3, r4, #16
 801c580:	bf18      	it	ne
 801c582:	236a      	movne	r3, #106	@ 0x6a
 801c584:	4ea9      	ldr	r6, [pc, #676]	@ (801c82c <_strtod_l+0x854>)
 801c586:	9308      	str	r3, [sp, #32]
 801c588:	4650      	mov	r0, sl
 801c58a:	4659      	mov	r1, fp
 801c58c:	2300      	movs	r3, #0
 801c58e:	07e7      	lsls	r7, r4, #31
 801c590:	d504      	bpl.n	801c59c <_strtod_l+0x5c4>
 801c592:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c596:	f7e4 f82f 	bl	80005f8 <__aeabi_dmul>
 801c59a:	2301      	movs	r3, #1
 801c59c:	1064      	asrs	r4, r4, #1
 801c59e:	f106 0608 	add.w	r6, r6, #8
 801c5a2:	d1f4      	bne.n	801c58e <_strtod_l+0x5b6>
 801c5a4:	b10b      	cbz	r3, 801c5aa <_strtod_l+0x5d2>
 801c5a6:	4682      	mov	sl, r0
 801c5a8:	468b      	mov	fp, r1
 801c5aa:	9b08      	ldr	r3, [sp, #32]
 801c5ac:	b1b3      	cbz	r3, 801c5dc <_strtod_l+0x604>
 801c5ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801c5b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	4659      	mov	r1, fp
 801c5ba:	dd0f      	ble.n	801c5dc <_strtod_l+0x604>
 801c5bc:	2b1f      	cmp	r3, #31
 801c5be:	dd56      	ble.n	801c66e <_strtod_l+0x696>
 801c5c0:	2b34      	cmp	r3, #52	@ 0x34
 801c5c2:	bfde      	ittt	le
 801c5c4:	f04f 33ff 	movle.w	r3, #4294967295
 801c5c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801c5cc:	4093      	lslle	r3, r2
 801c5ce:	f04f 0a00 	mov.w	sl, #0
 801c5d2:	bfcc      	ite	gt
 801c5d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801c5d8:	ea03 0b01 	andle.w	fp, r3, r1
 801c5dc:	2200      	movs	r2, #0
 801c5de:	2300      	movs	r3, #0
 801c5e0:	4650      	mov	r0, sl
 801c5e2:	4659      	mov	r1, fp
 801c5e4:	f7e4 fa70 	bl	8000ac8 <__aeabi_dcmpeq>
 801c5e8:	2800      	cmp	r0, #0
 801c5ea:	d1a7      	bne.n	801c53c <_strtod_l+0x564>
 801c5ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c5ee:	9300      	str	r3, [sp, #0]
 801c5f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c5f2:	9805      	ldr	r0, [sp, #20]
 801c5f4:	462b      	mov	r3, r5
 801c5f6:	464a      	mov	r2, r9
 801c5f8:	f7ff f89e 	bl	801b738 <__s2b>
 801c5fc:	900b      	str	r0, [sp, #44]	@ 0x2c
 801c5fe:	2800      	cmp	r0, #0
 801c600:	f43f af09 	beq.w	801c416 <_strtod_l+0x43e>
 801c604:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c606:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c608:	2a00      	cmp	r2, #0
 801c60a:	eba3 0308 	sub.w	r3, r3, r8
 801c60e:	bfa8      	it	ge
 801c610:	2300      	movge	r3, #0
 801c612:	9312      	str	r3, [sp, #72]	@ 0x48
 801c614:	2400      	movs	r4, #0
 801c616:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801c61a:	9316      	str	r3, [sp, #88]	@ 0x58
 801c61c:	46a0      	mov	r8, r4
 801c61e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c620:	9805      	ldr	r0, [sp, #20]
 801c622:	6859      	ldr	r1, [r3, #4]
 801c624:	f7fe ffe0 	bl	801b5e8 <_Balloc>
 801c628:	4681      	mov	r9, r0
 801c62a:	2800      	cmp	r0, #0
 801c62c:	f43f aef7 	beq.w	801c41e <_strtod_l+0x446>
 801c630:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c632:	691a      	ldr	r2, [r3, #16]
 801c634:	3202      	adds	r2, #2
 801c636:	f103 010c 	add.w	r1, r3, #12
 801c63a:	0092      	lsls	r2, r2, #2
 801c63c:	300c      	adds	r0, #12
 801c63e:	f7fe f84e 	bl	801a6de <memcpy>
 801c642:	ec4b ab10 	vmov	d0, sl, fp
 801c646:	9805      	ldr	r0, [sp, #20]
 801c648:	aa1c      	add	r2, sp, #112	@ 0x70
 801c64a:	a91b      	add	r1, sp, #108	@ 0x6c
 801c64c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801c650:	f7ff fba6 	bl	801bda0 <__d2b>
 801c654:	901a      	str	r0, [sp, #104]	@ 0x68
 801c656:	2800      	cmp	r0, #0
 801c658:	f43f aee1 	beq.w	801c41e <_strtod_l+0x446>
 801c65c:	9805      	ldr	r0, [sp, #20]
 801c65e:	2101      	movs	r1, #1
 801c660:	f7ff f900 	bl	801b864 <__i2b>
 801c664:	4680      	mov	r8, r0
 801c666:	b948      	cbnz	r0, 801c67c <_strtod_l+0x6a4>
 801c668:	f04f 0800 	mov.w	r8, #0
 801c66c:	e6d7      	b.n	801c41e <_strtod_l+0x446>
 801c66e:	f04f 32ff 	mov.w	r2, #4294967295
 801c672:	fa02 f303 	lsl.w	r3, r2, r3
 801c676:	ea03 0a0a 	and.w	sl, r3, sl
 801c67a:	e7af      	b.n	801c5dc <_strtod_l+0x604>
 801c67c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801c67e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801c680:	2d00      	cmp	r5, #0
 801c682:	bfab      	itete	ge
 801c684:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801c686:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801c688:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801c68a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801c68c:	bfac      	ite	ge
 801c68e:	18ef      	addge	r7, r5, r3
 801c690:	1b5e      	sublt	r6, r3, r5
 801c692:	9b08      	ldr	r3, [sp, #32]
 801c694:	1aed      	subs	r5, r5, r3
 801c696:	4415      	add	r5, r2
 801c698:	4b65      	ldr	r3, [pc, #404]	@ (801c830 <_strtod_l+0x858>)
 801c69a:	3d01      	subs	r5, #1
 801c69c:	429d      	cmp	r5, r3
 801c69e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801c6a2:	da50      	bge.n	801c746 <_strtod_l+0x76e>
 801c6a4:	1b5b      	subs	r3, r3, r5
 801c6a6:	2b1f      	cmp	r3, #31
 801c6a8:	eba2 0203 	sub.w	r2, r2, r3
 801c6ac:	f04f 0101 	mov.w	r1, #1
 801c6b0:	dc3d      	bgt.n	801c72e <_strtod_l+0x756>
 801c6b2:	fa01 f303 	lsl.w	r3, r1, r3
 801c6b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c6b8:	2300      	movs	r3, #0
 801c6ba:	9310      	str	r3, [sp, #64]	@ 0x40
 801c6bc:	18bd      	adds	r5, r7, r2
 801c6be:	9b08      	ldr	r3, [sp, #32]
 801c6c0:	42af      	cmp	r7, r5
 801c6c2:	4416      	add	r6, r2
 801c6c4:	441e      	add	r6, r3
 801c6c6:	463b      	mov	r3, r7
 801c6c8:	bfa8      	it	ge
 801c6ca:	462b      	movge	r3, r5
 801c6cc:	42b3      	cmp	r3, r6
 801c6ce:	bfa8      	it	ge
 801c6d0:	4633      	movge	r3, r6
 801c6d2:	2b00      	cmp	r3, #0
 801c6d4:	bfc2      	ittt	gt
 801c6d6:	1aed      	subgt	r5, r5, r3
 801c6d8:	1af6      	subgt	r6, r6, r3
 801c6da:	1aff      	subgt	r7, r7, r3
 801c6dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	dd16      	ble.n	801c710 <_strtod_l+0x738>
 801c6e2:	4641      	mov	r1, r8
 801c6e4:	9805      	ldr	r0, [sp, #20]
 801c6e6:	461a      	mov	r2, r3
 801c6e8:	f7ff f974 	bl	801b9d4 <__pow5mult>
 801c6ec:	4680      	mov	r8, r0
 801c6ee:	2800      	cmp	r0, #0
 801c6f0:	d0ba      	beq.n	801c668 <_strtod_l+0x690>
 801c6f2:	4601      	mov	r1, r0
 801c6f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c6f6:	9805      	ldr	r0, [sp, #20]
 801c6f8:	f7ff f8ca 	bl	801b890 <__multiply>
 801c6fc:	900a      	str	r0, [sp, #40]	@ 0x28
 801c6fe:	2800      	cmp	r0, #0
 801c700:	f43f ae8d 	beq.w	801c41e <_strtod_l+0x446>
 801c704:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c706:	9805      	ldr	r0, [sp, #20]
 801c708:	f7fe ffae 	bl	801b668 <_Bfree>
 801c70c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c70e:	931a      	str	r3, [sp, #104]	@ 0x68
 801c710:	2d00      	cmp	r5, #0
 801c712:	dc1d      	bgt.n	801c750 <_strtod_l+0x778>
 801c714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c716:	2b00      	cmp	r3, #0
 801c718:	dd23      	ble.n	801c762 <_strtod_l+0x78a>
 801c71a:	4649      	mov	r1, r9
 801c71c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c71e:	9805      	ldr	r0, [sp, #20]
 801c720:	f7ff f958 	bl	801b9d4 <__pow5mult>
 801c724:	4681      	mov	r9, r0
 801c726:	b9e0      	cbnz	r0, 801c762 <_strtod_l+0x78a>
 801c728:	f04f 0900 	mov.w	r9, #0
 801c72c:	e677      	b.n	801c41e <_strtod_l+0x446>
 801c72e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801c732:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801c736:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801c73a:	35e2      	adds	r5, #226	@ 0xe2
 801c73c:	fa01 f305 	lsl.w	r3, r1, r5
 801c740:	9310      	str	r3, [sp, #64]	@ 0x40
 801c742:	9113      	str	r1, [sp, #76]	@ 0x4c
 801c744:	e7ba      	b.n	801c6bc <_strtod_l+0x6e4>
 801c746:	2300      	movs	r3, #0
 801c748:	9310      	str	r3, [sp, #64]	@ 0x40
 801c74a:	2301      	movs	r3, #1
 801c74c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c74e:	e7b5      	b.n	801c6bc <_strtod_l+0x6e4>
 801c750:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c752:	9805      	ldr	r0, [sp, #20]
 801c754:	462a      	mov	r2, r5
 801c756:	f7ff f997 	bl	801ba88 <__lshift>
 801c75a:	901a      	str	r0, [sp, #104]	@ 0x68
 801c75c:	2800      	cmp	r0, #0
 801c75e:	d1d9      	bne.n	801c714 <_strtod_l+0x73c>
 801c760:	e65d      	b.n	801c41e <_strtod_l+0x446>
 801c762:	2e00      	cmp	r6, #0
 801c764:	dd07      	ble.n	801c776 <_strtod_l+0x79e>
 801c766:	4649      	mov	r1, r9
 801c768:	9805      	ldr	r0, [sp, #20]
 801c76a:	4632      	mov	r2, r6
 801c76c:	f7ff f98c 	bl	801ba88 <__lshift>
 801c770:	4681      	mov	r9, r0
 801c772:	2800      	cmp	r0, #0
 801c774:	d0d8      	beq.n	801c728 <_strtod_l+0x750>
 801c776:	2f00      	cmp	r7, #0
 801c778:	dd08      	ble.n	801c78c <_strtod_l+0x7b4>
 801c77a:	4641      	mov	r1, r8
 801c77c:	9805      	ldr	r0, [sp, #20]
 801c77e:	463a      	mov	r2, r7
 801c780:	f7ff f982 	bl	801ba88 <__lshift>
 801c784:	4680      	mov	r8, r0
 801c786:	2800      	cmp	r0, #0
 801c788:	f43f ae49 	beq.w	801c41e <_strtod_l+0x446>
 801c78c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c78e:	9805      	ldr	r0, [sp, #20]
 801c790:	464a      	mov	r2, r9
 801c792:	f7ff fa01 	bl	801bb98 <__mdiff>
 801c796:	4604      	mov	r4, r0
 801c798:	2800      	cmp	r0, #0
 801c79a:	f43f ae40 	beq.w	801c41e <_strtod_l+0x446>
 801c79e:	68c3      	ldr	r3, [r0, #12]
 801c7a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c7a2:	2300      	movs	r3, #0
 801c7a4:	60c3      	str	r3, [r0, #12]
 801c7a6:	4641      	mov	r1, r8
 801c7a8:	f7ff f9da 	bl	801bb60 <__mcmp>
 801c7ac:	2800      	cmp	r0, #0
 801c7ae:	da45      	bge.n	801c83c <_strtod_l+0x864>
 801c7b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c7b2:	ea53 030a 	orrs.w	r3, r3, sl
 801c7b6:	d16b      	bne.n	801c890 <_strtod_l+0x8b8>
 801c7b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c7bc:	2b00      	cmp	r3, #0
 801c7be:	d167      	bne.n	801c890 <_strtod_l+0x8b8>
 801c7c0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c7c4:	0d1b      	lsrs	r3, r3, #20
 801c7c6:	051b      	lsls	r3, r3, #20
 801c7c8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801c7cc:	d960      	bls.n	801c890 <_strtod_l+0x8b8>
 801c7ce:	6963      	ldr	r3, [r4, #20]
 801c7d0:	b913      	cbnz	r3, 801c7d8 <_strtod_l+0x800>
 801c7d2:	6923      	ldr	r3, [r4, #16]
 801c7d4:	2b01      	cmp	r3, #1
 801c7d6:	dd5b      	ble.n	801c890 <_strtod_l+0x8b8>
 801c7d8:	4621      	mov	r1, r4
 801c7da:	2201      	movs	r2, #1
 801c7dc:	9805      	ldr	r0, [sp, #20]
 801c7de:	f7ff f953 	bl	801ba88 <__lshift>
 801c7e2:	4641      	mov	r1, r8
 801c7e4:	4604      	mov	r4, r0
 801c7e6:	f7ff f9bb 	bl	801bb60 <__mcmp>
 801c7ea:	2800      	cmp	r0, #0
 801c7ec:	dd50      	ble.n	801c890 <_strtod_l+0x8b8>
 801c7ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c7f2:	9a08      	ldr	r2, [sp, #32]
 801c7f4:	0d1b      	lsrs	r3, r3, #20
 801c7f6:	051b      	lsls	r3, r3, #20
 801c7f8:	2a00      	cmp	r2, #0
 801c7fa:	d06a      	beq.n	801c8d2 <_strtod_l+0x8fa>
 801c7fc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801c800:	d867      	bhi.n	801c8d2 <_strtod_l+0x8fa>
 801c802:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801c806:	f67f ae9d 	bls.w	801c544 <_strtod_l+0x56c>
 801c80a:	4b0a      	ldr	r3, [pc, #40]	@ (801c834 <_strtod_l+0x85c>)
 801c80c:	4650      	mov	r0, sl
 801c80e:	4659      	mov	r1, fp
 801c810:	2200      	movs	r2, #0
 801c812:	f7e3 fef1 	bl	80005f8 <__aeabi_dmul>
 801c816:	4b08      	ldr	r3, [pc, #32]	@ (801c838 <_strtod_l+0x860>)
 801c818:	400b      	ands	r3, r1
 801c81a:	4682      	mov	sl, r0
 801c81c:	468b      	mov	fp, r1
 801c81e:	2b00      	cmp	r3, #0
 801c820:	f47f ae08 	bne.w	801c434 <_strtod_l+0x45c>
 801c824:	9a05      	ldr	r2, [sp, #20]
 801c826:	2322      	movs	r3, #34	@ 0x22
 801c828:	6013      	str	r3, [r2, #0]
 801c82a:	e603      	b.n	801c434 <_strtod_l+0x45c>
 801c82c:	080209b8 	.word	0x080209b8
 801c830:	fffffc02 	.word	0xfffffc02
 801c834:	39500000 	.word	0x39500000
 801c838:	7ff00000 	.word	0x7ff00000
 801c83c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801c840:	d165      	bne.n	801c90e <_strtod_l+0x936>
 801c842:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c844:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c848:	b35a      	cbz	r2, 801c8a2 <_strtod_l+0x8ca>
 801c84a:	4a9f      	ldr	r2, [pc, #636]	@ (801cac8 <_strtod_l+0xaf0>)
 801c84c:	4293      	cmp	r3, r2
 801c84e:	d12b      	bne.n	801c8a8 <_strtod_l+0x8d0>
 801c850:	9b08      	ldr	r3, [sp, #32]
 801c852:	4651      	mov	r1, sl
 801c854:	b303      	cbz	r3, 801c898 <_strtod_l+0x8c0>
 801c856:	4b9d      	ldr	r3, [pc, #628]	@ (801cacc <_strtod_l+0xaf4>)
 801c858:	465a      	mov	r2, fp
 801c85a:	4013      	ands	r3, r2
 801c85c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801c860:	f04f 32ff 	mov.w	r2, #4294967295
 801c864:	d81b      	bhi.n	801c89e <_strtod_l+0x8c6>
 801c866:	0d1b      	lsrs	r3, r3, #20
 801c868:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801c86c:	fa02 f303 	lsl.w	r3, r2, r3
 801c870:	4299      	cmp	r1, r3
 801c872:	d119      	bne.n	801c8a8 <_strtod_l+0x8d0>
 801c874:	4b96      	ldr	r3, [pc, #600]	@ (801cad0 <_strtod_l+0xaf8>)
 801c876:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c878:	429a      	cmp	r2, r3
 801c87a:	d102      	bne.n	801c882 <_strtod_l+0x8aa>
 801c87c:	3101      	adds	r1, #1
 801c87e:	f43f adce 	beq.w	801c41e <_strtod_l+0x446>
 801c882:	4b92      	ldr	r3, [pc, #584]	@ (801cacc <_strtod_l+0xaf4>)
 801c884:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c886:	401a      	ands	r2, r3
 801c888:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801c88c:	f04f 0a00 	mov.w	sl, #0
 801c890:	9b08      	ldr	r3, [sp, #32]
 801c892:	2b00      	cmp	r3, #0
 801c894:	d1b9      	bne.n	801c80a <_strtod_l+0x832>
 801c896:	e5cd      	b.n	801c434 <_strtod_l+0x45c>
 801c898:	f04f 33ff 	mov.w	r3, #4294967295
 801c89c:	e7e8      	b.n	801c870 <_strtod_l+0x898>
 801c89e:	4613      	mov	r3, r2
 801c8a0:	e7e6      	b.n	801c870 <_strtod_l+0x898>
 801c8a2:	ea53 030a 	orrs.w	r3, r3, sl
 801c8a6:	d0a2      	beq.n	801c7ee <_strtod_l+0x816>
 801c8a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c8aa:	b1db      	cbz	r3, 801c8e4 <_strtod_l+0x90c>
 801c8ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c8ae:	4213      	tst	r3, r2
 801c8b0:	d0ee      	beq.n	801c890 <_strtod_l+0x8b8>
 801c8b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c8b4:	9a08      	ldr	r2, [sp, #32]
 801c8b6:	4650      	mov	r0, sl
 801c8b8:	4659      	mov	r1, fp
 801c8ba:	b1bb      	cbz	r3, 801c8ec <_strtod_l+0x914>
 801c8bc:	f7ff fb6c 	bl	801bf98 <sulp>
 801c8c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c8c4:	ec53 2b10 	vmov	r2, r3, d0
 801c8c8:	f7e3 fce0 	bl	800028c <__adddf3>
 801c8cc:	4682      	mov	sl, r0
 801c8ce:	468b      	mov	fp, r1
 801c8d0:	e7de      	b.n	801c890 <_strtod_l+0x8b8>
 801c8d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801c8d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801c8da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801c8de:	f04f 3aff 	mov.w	sl, #4294967295
 801c8e2:	e7d5      	b.n	801c890 <_strtod_l+0x8b8>
 801c8e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c8e6:	ea13 0f0a 	tst.w	r3, sl
 801c8ea:	e7e1      	b.n	801c8b0 <_strtod_l+0x8d8>
 801c8ec:	f7ff fb54 	bl	801bf98 <sulp>
 801c8f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c8f4:	ec53 2b10 	vmov	r2, r3, d0
 801c8f8:	f7e3 fcc6 	bl	8000288 <__aeabi_dsub>
 801c8fc:	2200      	movs	r2, #0
 801c8fe:	2300      	movs	r3, #0
 801c900:	4682      	mov	sl, r0
 801c902:	468b      	mov	fp, r1
 801c904:	f7e4 f8e0 	bl	8000ac8 <__aeabi_dcmpeq>
 801c908:	2800      	cmp	r0, #0
 801c90a:	d0c1      	beq.n	801c890 <_strtod_l+0x8b8>
 801c90c:	e61a      	b.n	801c544 <_strtod_l+0x56c>
 801c90e:	4641      	mov	r1, r8
 801c910:	4620      	mov	r0, r4
 801c912:	f7ff fa9d 	bl	801be50 <__ratio>
 801c916:	ec57 6b10 	vmov	r6, r7, d0
 801c91a:	2200      	movs	r2, #0
 801c91c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801c920:	4630      	mov	r0, r6
 801c922:	4639      	mov	r1, r7
 801c924:	f7e4 f8e4 	bl	8000af0 <__aeabi_dcmple>
 801c928:	2800      	cmp	r0, #0
 801c92a:	d06f      	beq.n	801ca0c <_strtod_l+0xa34>
 801c92c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c92e:	2b00      	cmp	r3, #0
 801c930:	d17a      	bne.n	801ca28 <_strtod_l+0xa50>
 801c932:	f1ba 0f00 	cmp.w	sl, #0
 801c936:	d158      	bne.n	801c9ea <_strtod_l+0xa12>
 801c938:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c93a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d15a      	bne.n	801c9f8 <_strtod_l+0xa20>
 801c942:	4b64      	ldr	r3, [pc, #400]	@ (801cad4 <_strtod_l+0xafc>)
 801c944:	2200      	movs	r2, #0
 801c946:	4630      	mov	r0, r6
 801c948:	4639      	mov	r1, r7
 801c94a:	f7e4 f8c7 	bl	8000adc <__aeabi_dcmplt>
 801c94e:	2800      	cmp	r0, #0
 801c950:	d159      	bne.n	801ca06 <_strtod_l+0xa2e>
 801c952:	4630      	mov	r0, r6
 801c954:	4639      	mov	r1, r7
 801c956:	4b60      	ldr	r3, [pc, #384]	@ (801cad8 <_strtod_l+0xb00>)
 801c958:	2200      	movs	r2, #0
 801c95a:	f7e3 fe4d 	bl	80005f8 <__aeabi_dmul>
 801c95e:	4606      	mov	r6, r0
 801c960:	460f      	mov	r7, r1
 801c962:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801c966:	9606      	str	r6, [sp, #24]
 801c968:	9307      	str	r3, [sp, #28]
 801c96a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c96e:	4d57      	ldr	r5, [pc, #348]	@ (801cacc <_strtod_l+0xaf4>)
 801c970:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801c974:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c976:	401d      	ands	r5, r3
 801c978:	4b58      	ldr	r3, [pc, #352]	@ (801cadc <_strtod_l+0xb04>)
 801c97a:	429d      	cmp	r5, r3
 801c97c:	f040 80b2 	bne.w	801cae4 <_strtod_l+0xb0c>
 801c980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c982:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801c986:	ec4b ab10 	vmov	d0, sl, fp
 801c98a:	f7ff f999 	bl	801bcc0 <__ulp>
 801c98e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c992:	ec51 0b10 	vmov	r0, r1, d0
 801c996:	f7e3 fe2f 	bl	80005f8 <__aeabi_dmul>
 801c99a:	4652      	mov	r2, sl
 801c99c:	465b      	mov	r3, fp
 801c99e:	f7e3 fc75 	bl	800028c <__adddf3>
 801c9a2:	460b      	mov	r3, r1
 801c9a4:	4949      	ldr	r1, [pc, #292]	@ (801cacc <_strtod_l+0xaf4>)
 801c9a6:	4a4e      	ldr	r2, [pc, #312]	@ (801cae0 <_strtod_l+0xb08>)
 801c9a8:	4019      	ands	r1, r3
 801c9aa:	4291      	cmp	r1, r2
 801c9ac:	4682      	mov	sl, r0
 801c9ae:	d942      	bls.n	801ca36 <_strtod_l+0xa5e>
 801c9b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c9b2:	4b47      	ldr	r3, [pc, #284]	@ (801cad0 <_strtod_l+0xaf8>)
 801c9b4:	429a      	cmp	r2, r3
 801c9b6:	d103      	bne.n	801c9c0 <_strtod_l+0x9e8>
 801c9b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c9ba:	3301      	adds	r3, #1
 801c9bc:	f43f ad2f 	beq.w	801c41e <_strtod_l+0x446>
 801c9c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801cad0 <_strtod_l+0xaf8>
 801c9c4:	f04f 3aff 	mov.w	sl, #4294967295
 801c9c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c9ca:	9805      	ldr	r0, [sp, #20]
 801c9cc:	f7fe fe4c 	bl	801b668 <_Bfree>
 801c9d0:	9805      	ldr	r0, [sp, #20]
 801c9d2:	4649      	mov	r1, r9
 801c9d4:	f7fe fe48 	bl	801b668 <_Bfree>
 801c9d8:	9805      	ldr	r0, [sp, #20]
 801c9da:	4641      	mov	r1, r8
 801c9dc:	f7fe fe44 	bl	801b668 <_Bfree>
 801c9e0:	9805      	ldr	r0, [sp, #20]
 801c9e2:	4621      	mov	r1, r4
 801c9e4:	f7fe fe40 	bl	801b668 <_Bfree>
 801c9e8:	e619      	b.n	801c61e <_strtod_l+0x646>
 801c9ea:	f1ba 0f01 	cmp.w	sl, #1
 801c9ee:	d103      	bne.n	801c9f8 <_strtod_l+0xa20>
 801c9f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c9f2:	2b00      	cmp	r3, #0
 801c9f4:	f43f ada6 	beq.w	801c544 <_strtod_l+0x56c>
 801c9f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801caa8 <_strtod_l+0xad0>
 801c9fc:	4f35      	ldr	r7, [pc, #212]	@ (801cad4 <_strtod_l+0xafc>)
 801c9fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ca02:	2600      	movs	r6, #0
 801ca04:	e7b1      	b.n	801c96a <_strtod_l+0x992>
 801ca06:	4f34      	ldr	r7, [pc, #208]	@ (801cad8 <_strtod_l+0xb00>)
 801ca08:	2600      	movs	r6, #0
 801ca0a:	e7aa      	b.n	801c962 <_strtod_l+0x98a>
 801ca0c:	4b32      	ldr	r3, [pc, #200]	@ (801cad8 <_strtod_l+0xb00>)
 801ca0e:	4630      	mov	r0, r6
 801ca10:	4639      	mov	r1, r7
 801ca12:	2200      	movs	r2, #0
 801ca14:	f7e3 fdf0 	bl	80005f8 <__aeabi_dmul>
 801ca18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ca1a:	4606      	mov	r6, r0
 801ca1c:	460f      	mov	r7, r1
 801ca1e:	2b00      	cmp	r3, #0
 801ca20:	d09f      	beq.n	801c962 <_strtod_l+0x98a>
 801ca22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801ca26:	e7a0      	b.n	801c96a <_strtod_l+0x992>
 801ca28:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801cab0 <_strtod_l+0xad8>
 801ca2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ca30:	ec57 6b17 	vmov	r6, r7, d7
 801ca34:	e799      	b.n	801c96a <_strtod_l+0x992>
 801ca36:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801ca3a:	9b08      	ldr	r3, [sp, #32]
 801ca3c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d1c1      	bne.n	801c9c8 <_strtod_l+0x9f0>
 801ca44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801ca48:	0d1b      	lsrs	r3, r3, #20
 801ca4a:	051b      	lsls	r3, r3, #20
 801ca4c:	429d      	cmp	r5, r3
 801ca4e:	d1bb      	bne.n	801c9c8 <_strtod_l+0x9f0>
 801ca50:	4630      	mov	r0, r6
 801ca52:	4639      	mov	r1, r7
 801ca54:	f7e4 f930 	bl	8000cb8 <__aeabi_d2lz>
 801ca58:	f7e3 fda0 	bl	800059c <__aeabi_l2d>
 801ca5c:	4602      	mov	r2, r0
 801ca5e:	460b      	mov	r3, r1
 801ca60:	4630      	mov	r0, r6
 801ca62:	4639      	mov	r1, r7
 801ca64:	f7e3 fc10 	bl	8000288 <__aeabi_dsub>
 801ca68:	460b      	mov	r3, r1
 801ca6a:	4602      	mov	r2, r0
 801ca6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801ca70:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801ca74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ca76:	ea46 060a 	orr.w	r6, r6, sl
 801ca7a:	431e      	orrs	r6, r3
 801ca7c:	d06f      	beq.n	801cb5e <_strtod_l+0xb86>
 801ca7e:	a30e      	add	r3, pc, #56	@ (adr r3, 801cab8 <_strtod_l+0xae0>)
 801ca80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca84:	f7e4 f82a 	bl	8000adc <__aeabi_dcmplt>
 801ca88:	2800      	cmp	r0, #0
 801ca8a:	f47f acd3 	bne.w	801c434 <_strtod_l+0x45c>
 801ca8e:	a30c      	add	r3, pc, #48	@ (adr r3, 801cac0 <_strtod_l+0xae8>)
 801ca90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ca98:	f7e4 f83e 	bl	8000b18 <__aeabi_dcmpgt>
 801ca9c:	2800      	cmp	r0, #0
 801ca9e:	d093      	beq.n	801c9c8 <_strtod_l+0x9f0>
 801caa0:	e4c8      	b.n	801c434 <_strtod_l+0x45c>
 801caa2:	bf00      	nop
 801caa4:	f3af 8000 	nop.w
 801caa8:	00000000 	.word	0x00000000
 801caac:	bff00000 	.word	0xbff00000
 801cab0:	00000000 	.word	0x00000000
 801cab4:	3ff00000 	.word	0x3ff00000
 801cab8:	94a03595 	.word	0x94a03595
 801cabc:	3fdfffff 	.word	0x3fdfffff
 801cac0:	35afe535 	.word	0x35afe535
 801cac4:	3fe00000 	.word	0x3fe00000
 801cac8:	000fffff 	.word	0x000fffff
 801cacc:	7ff00000 	.word	0x7ff00000
 801cad0:	7fefffff 	.word	0x7fefffff
 801cad4:	3ff00000 	.word	0x3ff00000
 801cad8:	3fe00000 	.word	0x3fe00000
 801cadc:	7fe00000 	.word	0x7fe00000
 801cae0:	7c9fffff 	.word	0x7c9fffff
 801cae4:	9b08      	ldr	r3, [sp, #32]
 801cae6:	b323      	cbz	r3, 801cb32 <_strtod_l+0xb5a>
 801cae8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801caec:	d821      	bhi.n	801cb32 <_strtod_l+0xb5a>
 801caee:	a328      	add	r3, pc, #160	@ (adr r3, 801cb90 <_strtod_l+0xbb8>)
 801caf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801caf4:	4630      	mov	r0, r6
 801caf6:	4639      	mov	r1, r7
 801caf8:	f7e3 fffa 	bl	8000af0 <__aeabi_dcmple>
 801cafc:	b1a0      	cbz	r0, 801cb28 <_strtod_l+0xb50>
 801cafe:	4639      	mov	r1, r7
 801cb00:	4630      	mov	r0, r6
 801cb02:	f7e4 f851 	bl	8000ba8 <__aeabi_d2uiz>
 801cb06:	2801      	cmp	r0, #1
 801cb08:	bf38      	it	cc
 801cb0a:	2001      	movcc	r0, #1
 801cb0c:	f7e3 fcfa 	bl	8000504 <__aeabi_ui2d>
 801cb10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cb12:	4606      	mov	r6, r0
 801cb14:	460f      	mov	r7, r1
 801cb16:	b9fb      	cbnz	r3, 801cb58 <_strtod_l+0xb80>
 801cb18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801cb1c:	9014      	str	r0, [sp, #80]	@ 0x50
 801cb1e:	9315      	str	r3, [sp, #84]	@ 0x54
 801cb20:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801cb24:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801cb28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cb2a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801cb2e:	1b5b      	subs	r3, r3, r5
 801cb30:	9311      	str	r3, [sp, #68]	@ 0x44
 801cb32:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801cb36:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801cb3a:	f7ff f8c1 	bl	801bcc0 <__ulp>
 801cb3e:	4650      	mov	r0, sl
 801cb40:	ec53 2b10 	vmov	r2, r3, d0
 801cb44:	4659      	mov	r1, fp
 801cb46:	f7e3 fd57 	bl	80005f8 <__aeabi_dmul>
 801cb4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801cb4e:	f7e3 fb9d 	bl	800028c <__adddf3>
 801cb52:	4682      	mov	sl, r0
 801cb54:	468b      	mov	fp, r1
 801cb56:	e770      	b.n	801ca3a <_strtod_l+0xa62>
 801cb58:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801cb5c:	e7e0      	b.n	801cb20 <_strtod_l+0xb48>
 801cb5e:	a30e      	add	r3, pc, #56	@ (adr r3, 801cb98 <_strtod_l+0xbc0>)
 801cb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb64:	f7e3 ffba 	bl	8000adc <__aeabi_dcmplt>
 801cb68:	e798      	b.n	801ca9c <_strtod_l+0xac4>
 801cb6a:	2300      	movs	r3, #0
 801cb6c:	930e      	str	r3, [sp, #56]	@ 0x38
 801cb6e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801cb70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cb72:	6013      	str	r3, [r2, #0]
 801cb74:	f7ff ba6d 	b.w	801c052 <_strtod_l+0x7a>
 801cb78:	2a65      	cmp	r2, #101	@ 0x65
 801cb7a:	f43f ab68 	beq.w	801c24e <_strtod_l+0x276>
 801cb7e:	2a45      	cmp	r2, #69	@ 0x45
 801cb80:	f43f ab65 	beq.w	801c24e <_strtod_l+0x276>
 801cb84:	2301      	movs	r3, #1
 801cb86:	f7ff bba0 	b.w	801c2ca <_strtod_l+0x2f2>
 801cb8a:	bf00      	nop
 801cb8c:	f3af 8000 	nop.w
 801cb90:	ffc00000 	.word	0xffc00000
 801cb94:	41dfffff 	.word	0x41dfffff
 801cb98:	94a03595 	.word	0x94a03595
 801cb9c:	3fcfffff 	.word	0x3fcfffff

0801cba0 <_strtod_r>:
 801cba0:	4b01      	ldr	r3, [pc, #4]	@ (801cba8 <_strtod_r+0x8>)
 801cba2:	f7ff ba19 	b.w	801bfd8 <_strtod_l>
 801cba6:	bf00      	nop
 801cba8:	200001b0 	.word	0x200001b0

0801cbac <_strtol_l.isra.0>:
 801cbac:	2b24      	cmp	r3, #36	@ 0x24
 801cbae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cbb2:	4686      	mov	lr, r0
 801cbb4:	4690      	mov	r8, r2
 801cbb6:	d801      	bhi.n	801cbbc <_strtol_l.isra.0+0x10>
 801cbb8:	2b01      	cmp	r3, #1
 801cbba:	d106      	bne.n	801cbca <_strtol_l.isra.0+0x1e>
 801cbbc:	f7fd fd62 	bl	801a684 <__errno>
 801cbc0:	2316      	movs	r3, #22
 801cbc2:	6003      	str	r3, [r0, #0]
 801cbc4:	2000      	movs	r0, #0
 801cbc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cbca:	4834      	ldr	r0, [pc, #208]	@ (801cc9c <_strtol_l.isra.0+0xf0>)
 801cbcc:	460d      	mov	r5, r1
 801cbce:	462a      	mov	r2, r5
 801cbd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cbd4:	5d06      	ldrb	r6, [r0, r4]
 801cbd6:	f016 0608 	ands.w	r6, r6, #8
 801cbda:	d1f8      	bne.n	801cbce <_strtol_l.isra.0+0x22>
 801cbdc:	2c2d      	cmp	r4, #45	@ 0x2d
 801cbde:	d110      	bne.n	801cc02 <_strtol_l.isra.0+0x56>
 801cbe0:	782c      	ldrb	r4, [r5, #0]
 801cbe2:	2601      	movs	r6, #1
 801cbe4:	1c95      	adds	r5, r2, #2
 801cbe6:	f033 0210 	bics.w	r2, r3, #16
 801cbea:	d115      	bne.n	801cc18 <_strtol_l.isra.0+0x6c>
 801cbec:	2c30      	cmp	r4, #48	@ 0x30
 801cbee:	d10d      	bne.n	801cc0c <_strtol_l.isra.0+0x60>
 801cbf0:	782a      	ldrb	r2, [r5, #0]
 801cbf2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801cbf6:	2a58      	cmp	r2, #88	@ 0x58
 801cbf8:	d108      	bne.n	801cc0c <_strtol_l.isra.0+0x60>
 801cbfa:	786c      	ldrb	r4, [r5, #1]
 801cbfc:	3502      	adds	r5, #2
 801cbfe:	2310      	movs	r3, #16
 801cc00:	e00a      	b.n	801cc18 <_strtol_l.isra.0+0x6c>
 801cc02:	2c2b      	cmp	r4, #43	@ 0x2b
 801cc04:	bf04      	itt	eq
 801cc06:	782c      	ldrbeq	r4, [r5, #0]
 801cc08:	1c95      	addeq	r5, r2, #2
 801cc0a:	e7ec      	b.n	801cbe6 <_strtol_l.isra.0+0x3a>
 801cc0c:	2b00      	cmp	r3, #0
 801cc0e:	d1f6      	bne.n	801cbfe <_strtol_l.isra.0+0x52>
 801cc10:	2c30      	cmp	r4, #48	@ 0x30
 801cc12:	bf14      	ite	ne
 801cc14:	230a      	movne	r3, #10
 801cc16:	2308      	moveq	r3, #8
 801cc18:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801cc1c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801cc20:	2200      	movs	r2, #0
 801cc22:	fbbc f9f3 	udiv	r9, ip, r3
 801cc26:	4610      	mov	r0, r2
 801cc28:	fb03 ca19 	mls	sl, r3, r9, ip
 801cc2c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801cc30:	2f09      	cmp	r7, #9
 801cc32:	d80f      	bhi.n	801cc54 <_strtol_l.isra.0+0xa8>
 801cc34:	463c      	mov	r4, r7
 801cc36:	42a3      	cmp	r3, r4
 801cc38:	dd1b      	ble.n	801cc72 <_strtol_l.isra.0+0xc6>
 801cc3a:	1c57      	adds	r7, r2, #1
 801cc3c:	d007      	beq.n	801cc4e <_strtol_l.isra.0+0xa2>
 801cc3e:	4581      	cmp	r9, r0
 801cc40:	d314      	bcc.n	801cc6c <_strtol_l.isra.0+0xc0>
 801cc42:	d101      	bne.n	801cc48 <_strtol_l.isra.0+0x9c>
 801cc44:	45a2      	cmp	sl, r4
 801cc46:	db11      	blt.n	801cc6c <_strtol_l.isra.0+0xc0>
 801cc48:	fb00 4003 	mla	r0, r0, r3, r4
 801cc4c:	2201      	movs	r2, #1
 801cc4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cc52:	e7eb      	b.n	801cc2c <_strtol_l.isra.0+0x80>
 801cc54:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801cc58:	2f19      	cmp	r7, #25
 801cc5a:	d801      	bhi.n	801cc60 <_strtol_l.isra.0+0xb4>
 801cc5c:	3c37      	subs	r4, #55	@ 0x37
 801cc5e:	e7ea      	b.n	801cc36 <_strtol_l.isra.0+0x8a>
 801cc60:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801cc64:	2f19      	cmp	r7, #25
 801cc66:	d804      	bhi.n	801cc72 <_strtol_l.isra.0+0xc6>
 801cc68:	3c57      	subs	r4, #87	@ 0x57
 801cc6a:	e7e4      	b.n	801cc36 <_strtol_l.isra.0+0x8a>
 801cc6c:	f04f 32ff 	mov.w	r2, #4294967295
 801cc70:	e7ed      	b.n	801cc4e <_strtol_l.isra.0+0xa2>
 801cc72:	1c53      	adds	r3, r2, #1
 801cc74:	d108      	bne.n	801cc88 <_strtol_l.isra.0+0xdc>
 801cc76:	2322      	movs	r3, #34	@ 0x22
 801cc78:	f8ce 3000 	str.w	r3, [lr]
 801cc7c:	4660      	mov	r0, ip
 801cc7e:	f1b8 0f00 	cmp.w	r8, #0
 801cc82:	d0a0      	beq.n	801cbc6 <_strtol_l.isra.0+0x1a>
 801cc84:	1e69      	subs	r1, r5, #1
 801cc86:	e006      	b.n	801cc96 <_strtol_l.isra.0+0xea>
 801cc88:	b106      	cbz	r6, 801cc8c <_strtol_l.isra.0+0xe0>
 801cc8a:	4240      	negs	r0, r0
 801cc8c:	f1b8 0f00 	cmp.w	r8, #0
 801cc90:	d099      	beq.n	801cbc6 <_strtol_l.isra.0+0x1a>
 801cc92:	2a00      	cmp	r2, #0
 801cc94:	d1f6      	bne.n	801cc84 <_strtol_l.isra.0+0xd8>
 801cc96:	f8c8 1000 	str.w	r1, [r8]
 801cc9a:	e794      	b.n	801cbc6 <_strtol_l.isra.0+0x1a>
 801cc9c:	080209e1 	.word	0x080209e1

0801cca0 <_strtol_r>:
 801cca0:	f7ff bf84 	b.w	801cbac <_strtol_l.isra.0>

0801cca4 <__ssputs_r>:
 801cca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cca8:	688e      	ldr	r6, [r1, #8]
 801ccaa:	461f      	mov	r7, r3
 801ccac:	42be      	cmp	r6, r7
 801ccae:	680b      	ldr	r3, [r1, #0]
 801ccb0:	4682      	mov	sl, r0
 801ccb2:	460c      	mov	r4, r1
 801ccb4:	4690      	mov	r8, r2
 801ccb6:	d82d      	bhi.n	801cd14 <__ssputs_r+0x70>
 801ccb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ccbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801ccc0:	d026      	beq.n	801cd10 <__ssputs_r+0x6c>
 801ccc2:	6965      	ldr	r5, [r4, #20]
 801ccc4:	6909      	ldr	r1, [r1, #16]
 801ccc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ccca:	eba3 0901 	sub.w	r9, r3, r1
 801ccce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ccd2:	1c7b      	adds	r3, r7, #1
 801ccd4:	444b      	add	r3, r9
 801ccd6:	106d      	asrs	r5, r5, #1
 801ccd8:	429d      	cmp	r5, r3
 801ccda:	bf38      	it	cc
 801ccdc:	461d      	movcc	r5, r3
 801ccde:	0553      	lsls	r3, r2, #21
 801cce0:	d527      	bpl.n	801cd32 <__ssputs_r+0x8e>
 801cce2:	4629      	mov	r1, r5
 801cce4:	f7fe fbf4 	bl	801b4d0 <_malloc_r>
 801cce8:	4606      	mov	r6, r0
 801ccea:	b360      	cbz	r0, 801cd46 <__ssputs_r+0xa2>
 801ccec:	6921      	ldr	r1, [r4, #16]
 801ccee:	464a      	mov	r2, r9
 801ccf0:	f7fd fcf5 	bl	801a6de <memcpy>
 801ccf4:	89a3      	ldrh	r3, [r4, #12]
 801ccf6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801ccfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ccfe:	81a3      	strh	r3, [r4, #12]
 801cd00:	6126      	str	r6, [r4, #16]
 801cd02:	6165      	str	r5, [r4, #20]
 801cd04:	444e      	add	r6, r9
 801cd06:	eba5 0509 	sub.w	r5, r5, r9
 801cd0a:	6026      	str	r6, [r4, #0]
 801cd0c:	60a5      	str	r5, [r4, #8]
 801cd0e:	463e      	mov	r6, r7
 801cd10:	42be      	cmp	r6, r7
 801cd12:	d900      	bls.n	801cd16 <__ssputs_r+0x72>
 801cd14:	463e      	mov	r6, r7
 801cd16:	6820      	ldr	r0, [r4, #0]
 801cd18:	4632      	mov	r2, r6
 801cd1a:	4641      	mov	r1, r8
 801cd1c:	f7fd fbe8 	bl	801a4f0 <memmove>
 801cd20:	68a3      	ldr	r3, [r4, #8]
 801cd22:	1b9b      	subs	r3, r3, r6
 801cd24:	60a3      	str	r3, [r4, #8]
 801cd26:	6823      	ldr	r3, [r4, #0]
 801cd28:	4433      	add	r3, r6
 801cd2a:	6023      	str	r3, [r4, #0]
 801cd2c:	2000      	movs	r0, #0
 801cd2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd32:	462a      	mov	r2, r5
 801cd34:	f7ff f902 	bl	801bf3c <_realloc_r>
 801cd38:	4606      	mov	r6, r0
 801cd3a:	2800      	cmp	r0, #0
 801cd3c:	d1e0      	bne.n	801cd00 <__ssputs_r+0x5c>
 801cd3e:	6921      	ldr	r1, [r4, #16]
 801cd40:	4650      	mov	r0, sl
 801cd42:	f7fe fb51 	bl	801b3e8 <_free_r>
 801cd46:	230c      	movs	r3, #12
 801cd48:	f8ca 3000 	str.w	r3, [sl]
 801cd4c:	89a3      	ldrh	r3, [r4, #12]
 801cd4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cd52:	81a3      	strh	r3, [r4, #12]
 801cd54:	f04f 30ff 	mov.w	r0, #4294967295
 801cd58:	e7e9      	b.n	801cd2e <__ssputs_r+0x8a>
	...

0801cd5c <_svfiprintf_r>:
 801cd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd60:	4698      	mov	r8, r3
 801cd62:	898b      	ldrh	r3, [r1, #12]
 801cd64:	061b      	lsls	r3, r3, #24
 801cd66:	b09d      	sub	sp, #116	@ 0x74
 801cd68:	4607      	mov	r7, r0
 801cd6a:	460d      	mov	r5, r1
 801cd6c:	4614      	mov	r4, r2
 801cd6e:	d510      	bpl.n	801cd92 <_svfiprintf_r+0x36>
 801cd70:	690b      	ldr	r3, [r1, #16]
 801cd72:	b973      	cbnz	r3, 801cd92 <_svfiprintf_r+0x36>
 801cd74:	2140      	movs	r1, #64	@ 0x40
 801cd76:	f7fe fbab 	bl	801b4d0 <_malloc_r>
 801cd7a:	6028      	str	r0, [r5, #0]
 801cd7c:	6128      	str	r0, [r5, #16]
 801cd7e:	b930      	cbnz	r0, 801cd8e <_svfiprintf_r+0x32>
 801cd80:	230c      	movs	r3, #12
 801cd82:	603b      	str	r3, [r7, #0]
 801cd84:	f04f 30ff 	mov.w	r0, #4294967295
 801cd88:	b01d      	add	sp, #116	@ 0x74
 801cd8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd8e:	2340      	movs	r3, #64	@ 0x40
 801cd90:	616b      	str	r3, [r5, #20]
 801cd92:	2300      	movs	r3, #0
 801cd94:	9309      	str	r3, [sp, #36]	@ 0x24
 801cd96:	2320      	movs	r3, #32
 801cd98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801cd9c:	f8cd 800c 	str.w	r8, [sp, #12]
 801cda0:	2330      	movs	r3, #48	@ 0x30
 801cda2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801cf40 <_svfiprintf_r+0x1e4>
 801cda6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801cdaa:	f04f 0901 	mov.w	r9, #1
 801cdae:	4623      	mov	r3, r4
 801cdb0:	469a      	mov	sl, r3
 801cdb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cdb6:	b10a      	cbz	r2, 801cdbc <_svfiprintf_r+0x60>
 801cdb8:	2a25      	cmp	r2, #37	@ 0x25
 801cdba:	d1f9      	bne.n	801cdb0 <_svfiprintf_r+0x54>
 801cdbc:	ebba 0b04 	subs.w	fp, sl, r4
 801cdc0:	d00b      	beq.n	801cdda <_svfiprintf_r+0x7e>
 801cdc2:	465b      	mov	r3, fp
 801cdc4:	4622      	mov	r2, r4
 801cdc6:	4629      	mov	r1, r5
 801cdc8:	4638      	mov	r0, r7
 801cdca:	f7ff ff6b 	bl	801cca4 <__ssputs_r>
 801cdce:	3001      	adds	r0, #1
 801cdd0:	f000 80a7 	beq.w	801cf22 <_svfiprintf_r+0x1c6>
 801cdd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cdd6:	445a      	add	r2, fp
 801cdd8:	9209      	str	r2, [sp, #36]	@ 0x24
 801cdda:	f89a 3000 	ldrb.w	r3, [sl]
 801cdde:	2b00      	cmp	r3, #0
 801cde0:	f000 809f 	beq.w	801cf22 <_svfiprintf_r+0x1c6>
 801cde4:	2300      	movs	r3, #0
 801cde6:	f04f 32ff 	mov.w	r2, #4294967295
 801cdea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cdee:	f10a 0a01 	add.w	sl, sl, #1
 801cdf2:	9304      	str	r3, [sp, #16]
 801cdf4:	9307      	str	r3, [sp, #28]
 801cdf6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801cdfa:	931a      	str	r3, [sp, #104]	@ 0x68
 801cdfc:	4654      	mov	r4, sl
 801cdfe:	2205      	movs	r2, #5
 801ce00:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ce04:	484e      	ldr	r0, [pc, #312]	@ (801cf40 <_svfiprintf_r+0x1e4>)
 801ce06:	f7e3 f9e3 	bl	80001d0 <memchr>
 801ce0a:	9a04      	ldr	r2, [sp, #16]
 801ce0c:	b9d8      	cbnz	r0, 801ce46 <_svfiprintf_r+0xea>
 801ce0e:	06d0      	lsls	r0, r2, #27
 801ce10:	bf44      	itt	mi
 801ce12:	2320      	movmi	r3, #32
 801ce14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ce18:	0711      	lsls	r1, r2, #28
 801ce1a:	bf44      	itt	mi
 801ce1c:	232b      	movmi	r3, #43	@ 0x2b
 801ce1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ce22:	f89a 3000 	ldrb.w	r3, [sl]
 801ce26:	2b2a      	cmp	r3, #42	@ 0x2a
 801ce28:	d015      	beq.n	801ce56 <_svfiprintf_r+0xfa>
 801ce2a:	9a07      	ldr	r2, [sp, #28]
 801ce2c:	4654      	mov	r4, sl
 801ce2e:	2000      	movs	r0, #0
 801ce30:	f04f 0c0a 	mov.w	ip, #10
 801ce34:	4621      	mov	r1, r4
 801ce36:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ce3a:	3b30      	subs	r3, #48	@ 0x30
 801ce3c:	2b09      	cmp	r3, #9
 801ce3e:	d94b      	bls.n	801ced8 <_svfiprintf_r+0x17c>
 801ce40:	b1b0      	cbz	r0, 801ce70 <_svfiprintf_r+0x114>
 801ce42:	9207      	str	r2, [sp, #28]
 801ce44:	e014      	b.n	801ce70 <_svfiprintf_r+0x114>
 801ce46:	eba0 0308 	sub.w	r3, r0, r8
 801ce4a:	fa09 f303 	lsl.w	r3, r9, r3
 801ce4e:	4313      	orrs	r3, r2
 801ce50:	9304      	str	r3, [sp, #16]
 801ce52:	46a2      	mov	sl, r4
 801ce54:	e7d2      	b.n	801cdfc <_svfiprintf_r+0xa0>
 801ce56:	9b03      	ldr	r3, [sp, #12]
 801ce58:	1d19      	adds	r1, r3, #4
 801ce5a:	681b      	ldr	r3, [r3, #0]
 801ce5c:	9103      	str	r1, [sp, #12]
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	bfbb      	ittet	lt
 801ce62:	425b      	neglt	r3, r3
 801ce64:	f042 0202 	orrlt.w	r2, r2, #2
 801ce68:	9307      	strge	r3, [sp, #28]
 801ce6a:	9307      	strlt	r3, [sp, #28]
 801ce6c:	bfb8      	it	lt
 801ce6e:	9204      	strlt	r2, [sp, #16]
 801ce70:	7823      	ldrb	r3, [r4, #0]
 801ce72:	2b2e      	cmp	r3, #46	@ 0x2e
 801ce74:	d10a      	bne.n	801ce8c <_svfiprintf_r+0x130>
 801ce76:	7863      	ldrb	r3, [r4, #1]
 801ce78:	2b2a      	cmp	r3, #42	@ 0x2a
 801ce7a:	d132      	bne.n	801cee2 <_svfiprintf_r+0x186>
 801ce7c:	9b03      	ldr	r3, [sp, #12]
 801ce7e:	1d1a      	adds	r2, r3, #4
 801ce80:	681b      	ldr	r3, [r3, #0]
 801ce82:	9203      	str	r2, [sp, #12]
 801ce84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ce88:	3402      	adds	r4, #2
 801ce8a:	9305      	str	r3, [sp, #20]
 801ce8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801cf50 <_svfiprintf_r+0x1f4>
 801ce90:	7821      	ldrb	r1, [r4, #0]
 801ce92:	2203      	movs	r2, #3
 801ce94:	4650      	mov	r0, sl
 801ce96:	f7e3 f99b 	bl	80001d0 <memchr>
 801ce9a:	b138      	cbz	r0, 801ceac <_svfiprintf_r+0x150>
 801ce9c:	9b04      	ldr	r3, [sp, #16]
 801ce9e:	eba0 000a 	sub.w	r0, r0, sl
 801cea2:	2240      	movs	r2, #64	@ 0x40
 801cea4:	4082      	lsls	r2, r0
 801cea6:	4313      	orrs	r3, r2
 801cea8:	3401      	adds	r4, #1
 801ceaa:	9304      	str	r3, [sp, #16]
 801ceac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ceb0:	4824      	ldr	r0, [pc, #144]	@ (801cf44 <_svfiprintf_r+0x1e8>)
 801ceb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ceb6:	2206      	movs	r2, #6
 801ceb8:	f7e3 f98a 	bl	80001d0 <memchr>
 801cebc:	2800      	cmp	r0, #0
 801cebe:	d036      	beq.n	801cf2e <_svfiprintf_r+0x1d2>
 801cec0:	4b21      	ldr	r3, [pc, #132]	@ (801cf48 <_svfiprintf_r+0x1ec>)
 801cec2:	bb1b      	cbnz	r3, 801cf0c <_svfiprintf_r+0x1b0>
 801cec4:	9b03      	ldr	r3, [sp, #12]
 801cec6:	3307      	adds	r3, #7
 801cec8:	f023 0307 	bic.w	r3, r3, #7
 801cecc:	3308      	adds	r3, #8
 801cece:	9303      	str	r3, [sp, #12]
 801ced0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ced2:	4433      	add	r3, r6
 801ced4:	9309      	str	r3, [sp, #36]	@ 0x24
 801ced6:	e76a      	b.n	801cdae <_svfiprintf_r+0x52>
 801ced8:	fb0c 3202 	mla	r2, ip, r2, r3
 801cedc:	460c      	mov	r4, r1
 801cede:	2001      	movs	r0, #1
 801cee0:	e7a8      	b.n	801ce34 <_svfiprintf_r+0xd8>
 801cee2:	2300      	movs	r3, #0
 801cee4:	3401      	adds	r4, #1
 801cee6:	9305      	str	r3, [sp, #20]
 801cee8:	4619      	mov	r1, r3
 801ceea:	f04f 0c0a 	mov.w	ip, #10
 801ceee:	4620      	mov	r0, r4
 801cef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cef4:	3a30      	subs	r2, #48	@ 0x30
 801cef6:	2a09      	cmp	r2, #9
 801cef8:	d903      	bls.n	801cf02 <_svfiprintf_r+0x1a6>
 801cefa:	2b00      	cmp	r3, #0
 801cefc:	d0c6      	beq.n	801ce8c <_svfiprintf_r+0x130>
 801cefe:	9105      	str	r1, [sp, #20]
 801cf00:	e7c4      	b.n	801ce8c <_svfiprintf_r+0x130>
 801cf02:	fb0c 2101 	mla	r1, ip, r1, r2
 801cf06:	4604      	mov	r4, r0
 801cf08:	2301      	movs	r3, #1
 801cf0a:	e7f0      	b.n	801ceee <_svfiprintf_r+0x192>
 801cf0c:	ab03      	add	r3, sp, #12
 801cf0e:	9300      	str	r3, [sp, #0]
 801cf10:	462a      	mov	r2, r5
 801cf12:	4b0e      	ldr	r3, [pc, #56]	@ (801cf4c <_svfiprintf_r+0x1f0>)
 801cf14:	a904      	add	r1, sp, #16
 801cf16:	4638      	mov	r0, r7
 801cf18:	f7fc f978 	bl	801920c <_printf_float>
 801cf1c:	1c42      	adds	r2, r0, #1
 801cf1e:	4606      	mov	r6, r0
 801cf20:	d1d6      	bne.n	801ced0 <_svfiprintf_r+0x174>
 801cf22:	89ab      	ldrh	r3, [r5, #12]
 801cf24:	065b      	lsls	r3, r3, #25
 801cf26:	f53f af2d 	bmi.w	801cd84 <_svfiprintf_r+0x28>
 801cf2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cf2c:	e72c      	b.n	801cd88 <_svfiprintf_r+0x2c>
 801cf2e:	ab03      	add	r3, sp, #12
 801cf30:	9300      	str	r3, [sp, #0]
 801cf32:	462a      	mov	r2, r5
 801cf34:	4b05      	ldr	r3, [pc, #20]	@ (801cf4c <_svfiprintf_r+0x1f0>)
 801cf36:	a904      	add	r1, sp, #16
 801cf38:	4638      	mov	r0, r7
 801cf3a:	f7fc fd4b 	bl	80199d4 <_printf_i>
 801cf3e:	e7ed      	b.n	801cf1c <_svfiprintf_r+0x1c0>
 801cf40:	08020290 	.word	0x08020290
 801cf44:	0802029a 	.word	0x0802029a
 801cf48:	0801920d 	.word	0x0801920d
 801cf4c:	0801cca5 	.word	0x0801cca5
 801cf50:	08020296 	.word	0x08020296

0801cf54 <_sungetc_r>:
 801cf54:	b538      	push	{r3, r4, r5, lr}
 801cf56:	1c4b      	adds	r3, r1, #1
 801cf58:	4614      	mov	r4, r2
 801cf5a:	d103      	bne.n	801cf64 <_sungetc_r+0x10>
 801cf5c:	f04f 35ff 	mov.w	r5, #4294967295
 801cf60:	4628      	mov	r0, r5
 801cf62:	bd38      	pop	{r3, r4, r5, pc}
 801cf64:	8993      	ldrh	r3, [r2, #12]
 801cf66:	f023 0320 	bic.w	r3, r3, #32
 801cf6a:	8193      	strh	r3, [r2, #12]
 801cf6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cf6e:	6852      	ldr	r2, [r2, #4]
 801cf70:	b2cd      	uxtb	r5, r1
 801cf72:	b18b      	cbz	r3, 801cf98 <_sungetc_r+0x44>
 801cf74:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801cf76:	4293      	cmp	r3, r2
 801cf78:	dd08      	ble.n	801cf8c <_sungetc_r+0x38>
 801cf7a:	6823      	ldr	r3, [r4, #0]
 801cf7c:	1e5a      	subs	r2, r3, #1
 801cf7e:	6022      	str	r2, [r4, #0]
 801cf80:	f803 5c01 	strb.w	r5, [r3, #-1]
 801cf84:	6863      	ldr	r3, [r4, #4]
 801cf86:	3301      	adds	r3, #1
 801cf88:	6063      	str	r3, [r4, #4]
 801cf8a:	e7e9      	b.n	801cf60 <_sungetc_r+0xc>
 801cf8c:	4621      	mov	r1, r4
 801cf8e:	f000 fc8c 	bl	801d8aa <__submore>
 801cf92:	2800      	cmp	r0, #0
 801cf94:	d0f1      	beq.n	801cf7a <_sungetc_r+0x26>
 801cf96:	e7e1      	b.n	801cf5c <_sungetc_r+0x8>
 801cf98:	6921      	ldr	r1, [r4, #16]
 801cf9a:	6823      	ldr	r3, [r4, #0]
 801cf9c:	b151      	cbz	r1, 801cfb4 <_sungetc_r+0x60>
 801cf9e:	4299      	cmp	r1, r3
 801cfa0:	d208      	bcs.n	801cfb4 <_sungetc_r+0x60>
 801cfa2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801cfa6:	42a9      	cmp	r1, r5
 801cfa8:	d104      	bne.n	801cfb4 <_sungetc_r+0x60>
 801cfaa:	3b01      	subs	r3, #1
 801cfac:	3201      	adds	r2, #1
 801cfae:	6023      	str	r3, [r4, #0]
 801cfb0:	6062      	str	r2, [r4, #4]
 801cfb2:	e7d5      	b.n	801cf60 <_sungetc_r+0xc>
 801cfb4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801cfb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cfbc:	6363      	str	r3, [r4, #52]	@ 0x34
 801cfbe:	2303      	movs	r3, #3
 801cfc0:	63a3      	str	r3, [r4, #56]	@ 0x38
 801cfc2:	4623      	mov	r3, r4
 801cfc4:	f803 5f46 	strb.w	r5, [r3, #70]!
 801cfc8:	6023      	str	r3, [r4, #0]
 801cfca:	2301      	movs	r3, #1
 801cfcc:	e7dc      	b.n	801cf88 <_sungetc_r+0x34>

0801cfce <__ssrefill_r>:
 801cfce:	b510      	push	{r4, lr}
 801cfd0:	460c      	mov	r4, r1
 801cfd2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801cfd4:	b169      	cbz	r1, 801cff2 <__ssrefill_r+0x24>
 801cfd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cfda:	4299      	cmp	r1, r3
 801cfdc:	d001      	beq.n	801cfe2 <__ssrefill_r+0x14>
 801cfde:	f7fe fa03 	bl	801b3e8 <_free_r>
 801cfe2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801cfe4:	6063      	str	r3, [r4, #4]
 801cfe6:	2000      	movs	r0, #0
 801cfe8:	6360      	str	r0, [r4, #52]	@ 0x34
 801cfea:	b113      	cbz	r3, 801cff2 <__ssrefill_r+0x24>
 801cfec:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801cfee:	6023      	str	r3, [r4, #0]
 801cff0:	bd10      	pop	{r4, pc}
 801cff2:	6923      	ldr	r3, [r4, #16]
 801cff4:	6023      	str	r3, [r4, #0]
 801cff6:	2300      	movs	r3, #0
 801cff8:	6063      	str	r3, [r4, #4]
 801cffa:	89a3      	ldrh	r3, [r4, #12]
 801cffc:	f043 0320 	orr.w	r3, r3, #32
 801d000:	81a3      	strh	r3, [r4, #12]
 801d002:	f04f 30ff 	mov.w	r0, #4294967295
 801d006:	e7f3      	b.n	801cff0 <__ssrefill_r+0x22>

0801d008 <__ssvfiscanf_r>:
 801d008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d00c:	460c      	mov	r4, r1
 801d00e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801d012:	2100      	movs	r1, #0
 801d014:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801d018:	49a6      	ldr	r1, [pc, #664]	@ (801d2b4 <__ssvfiscanf_r+0x2ac>)
 801d01a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801d01c:	f10d 0804 	add.w	r8, sp, #4
 801d020:	49a5      	ldr	r1, [pc, #660]	@ (801d2b8 <__ssvfiscanf_r+0x2b0>)
 801d022:	4fa6      	ldr	r7, [pc, #664]	@ (801d2bc <__ssvfiscanf_r+0x2b4>)
 801d024:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801d028:	4606      	mov	r6, r0
 801d02a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801d02c:	9300      	str	r3, [sp, #0]
 801d02e:	f892 9000 	ldrb.w	r9, [r2]
 801d032:	f1b9 0f00 	cmp.w	r9, #0
 801d036:	f000 8158 	beq.w	801d2ea <__ssvfiscanf_r+0x2e2>
 801d03a:	f817 3009 	ldrb.w	r3, [r7, r9]
 801d03e:	f013 0308 	ands.w	r3, r3, #8
 801d042:	f102 0501 	add.w	r5, r2, #1
 801d046:	d019      	beq.n	801d07c <__ssvfiscanf_r+0x74>
 801d048:	6863      	ldr	r3, [r4, #4]
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	dd0f      	ble.n	801d06e <__ssvfiscanf_r+0x66>
 801d04e:	6823      	ldr	r3, [r4, #0]
 801d050:	781a      	ldrb	r2, [r3, #0]
 801d052:	5cba      	ldrb	r2, [r7, r2]
 801d054:	0712      	lsls	r2, r2, #28
 801d056:	d401      	bmi.n	801d05c <__ssvfiscanf_r+0x54>
 801d058:	462a      	mov	r2, r5
 801d05a:	e7e8      	b.n	801d02e <__ssvfiscanf_r+0x26>
 801d05c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801d05e:	3201      	adds	r2, #1
 801d060:	9245      	str	r2, [sp, #276]	@ 0x114
 801d062:	6862      	ldr	r2, [r4, #4]
 801d064:	3301      	adds	r3, #1
 801d066:	3a01      	subs	r2, #1
 801d068:	6062      	str	r2, [r4, #4]
 801d06a:	6023      	str	r3, [r4, #0]
 801d06c:	e7ec      	b.n	801d048 <__ssvfiscanf_r+0x40>
 801d06e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d070:	4621      	mov	r1, r4
 801d072:	4630      	mov	r0, r6
 801d074:	4798      	blx	r3
 801d076:	2800      	cmp	r0, #0
 801d078:	d0e9      	beq.n	801d04e <__ssvfiscanf_r+0x46>
 801d07a:	e7ed      	b.n	801d058 <__ssvfiscanf_r+0x50>
 801d07c:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801d080:	f040 8085 	bne.w	801d18e <__ssvfiscanf_r+0x186>
 801d084:	9341      	str	r3, [sp, #260]	@ 0x104
 801d086:	9343      	str	r3, [sp, #268]	@ 0x10c
 801d088:	7853      	ldrb	r3, [r2, #1]
 801d08a:	2b2a      	cmp	r3, #42	@ 0x2a
 801d08c:	bf02      	ittt	eq
 801d08e:	2310      	moveq	r3, #16
 801d090:	1c95      	addeq	r5, r2, #2
 801d092:	9341      	streq	r3, [sp, #260]	@ 0x104
 801d094:	220a      	movs	r2, #10
 801d096:	46aa      	mov	sl, r5
 801d098:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801d09c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801d0a0:	2b09      	cmp	r3, #9
 801d0a2:	d91e      	bls.n	801d0e2 <__ssvfiscanf_r+0xda>
 801d0a4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801d2c0 <__ssvfiscanf_r+0x2b8>
 801d0a8:	2203      	movs	r2, #3
 801d0aa:	4658      	mov	r0, fp
 801d0ac:	f7e3 f890 	bl	80001d0 <memchr>
 801d0b0:	b138      	cbz	r0, 801d0c2 <__ssvfiscanf_r+0xba>
 801d0b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801d0b4:	eba0 000b 	sub.w	r0, r0, fp
 801d0b8:	2301      	movs	r3, #1
 801d0ba:	4083      	lsls	r3, r0
 801d0bc:	4313      	orrs	r3, r2
 801d0be:	9341      	str	r3, [sp, #260]	@ 0x104
 801d0c0:	4655      	mov	r5, sl
 801d0c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d0c6:	2b78      	cmp	r3, #120	@ 0x78
 801d0c8:	d806      	bhi.n	801d0d8 <__ssvfiscanf_r+0xd0>
 801d0ca:	2b57      	cmp	r3, #87	@ 0x57
 801d0cc:	d810      	bhi.n	801d0f0 <__ssvfiscanf_r+0xe8>
 801d0ce:	2b25      	cmp	r3, #37	@ 0x25
 801d0d0:	d05d      	beq.n	801d18e <__ssvfiscanf_r+0x186>
 801d0d2:	d857      	bhi.n	801d184 <__ssvfiscanf_r+0x17c>
 801d0d4:	2b00      	cmp	r3, #0
 801d0d6:	d075      	beq.n	801d1c4 <__ssvfiscanf_r+0x1bc>
 801d0d8:	2303      	movs	r3, #3
 801d0da:	9347      	str	r3, [sp, #284]	@ 0x11c
 801d0dc:	230a      	movs	r3, #10
 801d0de:	9342      	str	r3, [sp, #264]	@ 0x108
 801d0e0:	e088      	b.n	801d1f4 <__ssvfiscanf_r+0x1ec>
 801d0e2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801d0e4:	fb02 1103 	mla	r1, r2, r3, r1
 801d0e8:	3930      	subs	r1, #48	@ 0x30
 801d0ea:	9143      	str	r1, [sp, #268]	@ 0x10c
 801d0ec:	4655      	mov	r5, sl
 801d0ee:	e7d2      	b.n	801d096 <__ssvfiscanf_r+0x8e>
 801d0f0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801d0f4:	2a20      	cmp	r2, #32
 801d0f6:	d8ef      	bhi.n	801d0d8 <__ssvfiscanf_r+0xd0>
 801d0f8:	a101      	add	r1, pc, #4	@ (adr r1, 801d100 <__ssvfiscanf_r+0xf8>)
 801d0fa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801d0fe:	bf00      	nop
 801d100:	0801d1d3 	.word	0x0801d1d3
 801d104:	0801d0d9 	.word	0x0801d0d9
 801d108:	0801d0d9 	.word	0x0801d0d9
 801d10c:	0801d22d 	.word	0x0801d22d
 801d110:	0801d0d9 	.word	0x0801d0d9
 801d114:	0801d0d9 	.word	0x0801d0d9
 801d118:	0801d0d9 	.word	0x0801d0d9
 801d11c:	0801d0d9 	.word	0x0801d0d9
 801d120:	0801d0d9 	.word	0x0801d0d9
 801d124:	0801d0d9 	.word	0x0801d0d9
 801d128:	0801d0d9 	.word	0x0801d0d9
 801d12c:	0801d243 	.word	0x0801d243
 801d130:	0801d229 	.word	0x0801d229
 801d134:	0801d18b 	.word	0x0801d18b
 801d138:	0801d18b 	.word	0x0801d18b
 801d13c:	0801d18b 	.word	0x0801d18b
 801d140:	0801d0d9 	.word	0x0801d0d9
 801d144:	0801d1e5 	.word	0x0801d1e5
 801d148:	0801d0d9 	.word	0x0801d0d9
 801d14c:	0801d0d9 	.word	0x0801d0d9
 801d150:	0801d0d9 	.word	0x0801d0d9
 801d154:	0801d0d9 	.word	0x0801d0d9
 801d158:	0801d253 	.word	0x0801d253
 801d15c:	0801d1ed 	.word	0x0801d1ed
 801d160:	0801d1cb 	.word	0x0801d1cb
 801d164:	0801d0d9 	.word	0x0801d0d9
 801d168:	0801d0d9 	.word	0x0801d0d9
 801d16c:	0801d24f 	.word	0x0801d24f
 801d170:	0801d0d9 	.word	0x0801d0d9
 801d174:	0801d229 	.word	0x0801d229
 801d178:	0801d0d9 	.word	0x0801d0d9
 801d17c:	0801d0d9 	.word	0x0801d0d9
 801d180:	0801d1d3 	.word	0x0801d1d3
 801d184:	3b45      	subs	r3, #69	@ 0x45
 801d186:	2b02      	cmp	r3, #2
 801d188:	d8a6      	bhi.n	801d0d8 <__ssvfiscanf_r+0xd0>
 801d18a:	2305      	movs	r3, #5
 801d18c:	e031      	b.n	801d1f2 <__ssvfiscanf_r+0x1ea>
 801d18e:	6863      	ldr	r3, [r4, #4]
 801d190:	2b00      	cmp	r3, #0
 801d192:	dd0d      	ble.n	801d1b0 <__ssvfiscanf_r+0x1a8>
 801d194:	6823      	ldr	r3, [r4, #0]
 801d196:	781a      	ldrb	r2, [r3, #0]
 801d198:	454a      	cmp	r2, r9
 801d19a:	f040 80a6 	bne.w	801d2ea <__ssvfiscanf_r+0x2e2>
 801d19e:	3301      	adds	r3, #1
 801d1a0:	6862      	ldr	r2, [r4, #4]
 801d1a2:	6023      	str	r3, [r4, #0]
 801d1a4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801d1a6:	3a01      	subs	r2, #1
 801d1a8:	3301      	adds	r3, #1
 801d1aa:	6062      	str	r2, [r4, #4]
 801d1ac:	9345      	str	r3, [sp, #276]	@ 0x114
 801d1ae:	e753      	b.n	801d058 <__ssvfiscanf_r+0x50>
 801d1b0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d1b2:	4621      	mov	r1, r4
 801d1b4:	4630      	mov	r0, r6
 801d1b6:	4798      	blx	r3
 801d1b8:	2800      	cmp	r0, #0
 801d1ba:	d0eb      	beq.n	801d194 <__ssvfiscanf_r+0x18c>
 801d1bc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801d1be:	2800      	cmp	r0, #0
 801d1c0:	f040 808b 	bne.w	801d2da <__ssvfiscanf_r+0x2d2>
 801d1c4:	f04f 30ff 	mov.w	r0, #4294967295
 801d1c8:	e08b      	b.n	801d2e2 <__ssvfiscanf_r+0x2da>
 801d1ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801d1cc:	f042 0220 	orr.w	r2, r2, #32
 801d1d0:	9241      	str	r2, [sp, #260]	@ 0x104
 801d1d2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801d1d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801d1d8:	9241      	str	r2, [sp, #260]	@ 0x104
 801d1da:	2210      	movs	r2, #16
 801d1dc:	2b6e      	cmp	r3, #110	@ 0x6e
 801d1de:	9242      	str	r2, [sp, #264]	@ 0x108
 801d1e0:	d902      	bls.n	801d1e8 <__ssvfiscanf_r+0x1e0>
 801d1e2:	e005      	b.n	801d1f0 <__ssvfiscanf_r+0x1e8>
 801d1e4:	2300      	movs	r3, #0
 801d1e6:	9342      	str	r3, [sp, #264]	@ 0x108
 801d1e8:	2303      	movs	r3, #3
 801d1ea:	e002      	b.n	801d1f2 <__ssvfiscanf_r+0x1ea>
 801d1ec:	2308      	movs	r3, #8
 801d1ee:	9342      	str	r3, [sp, #264]	@ 0x108
 801d1f0:	2304      	movs	r3, #4
 801d1f2:	9347      	str	r3, [sp, #284]	@ 0x11c
 801d1f4:	6863      	ldr	r3, [r4, #4]
 801d1f6:	2b00      	cmp	r3, #0
 801d1f8:	dd39      	ble.n	801d26e <__ssvfiscanf_r+0x266>
 801d1fa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801d1fc:	0659      	lsls	r1, r3, #25
 801d1fe:	d404      	bmi.n	801d20a <__ssvfiscanf_r+0x202>
 801d200:	6823      	ldr	r3, [r4, #0]
 801d202:	781a      	ldrb	r2, [r3, #0]
 801d204:	5cba      	ldrb	r2, [r7, r2]
 801d206:	0712      	lsls	r2, r2, #28
 801d208:	d438      	bmi.n	801d27c <__ssvfiscanf_r+0x274>
 801d20a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801d20c:	2b02      	cmp	r3, #2
 801d20e:	dc47      	bgt.n	801d2a0 <__ssvfiscanf_r+0x298>
 801d210:	466b      	mov	r3, sp
 801d212:	4622      	mov	r2, r4
 801d214:	a941      	add	r1, sp, #260	@ 0x104
 801d216:	4630      	mov	r0, r6
 801d218:	f000 f86c 	bl	801d2f4 <_scanf_chars>
 801d21c:	2801      	cmp	r0, #1
 801d21e:	d064      	beq.n	801d2ea <__ssvfiscanf_r+0x2e2>
 801d220:	2802      	cmp	r0, #2
 801d222:	f47f af19 	bne.w	801d058 <__ssvfiscanf_r+0x50>
 801d226:	e7c9      	b.n	801d1bc <__ssvfiscanf_r+0x1b4>
 801d228:	220a      	movs	r2, #10
 801d22a:	e7d7      	b.n	801d1dc <__ssvfiscanf_r+0x1d4>
 801d22c:	4629      	mov	r1, r5
 801d22e:	4640      	mov	r0, r8
 801d230:	f000 fb02 	bl	801d838 <__sccl>
 801d234:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801d236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d23a:	9341      	str	r3, [sp, #260]	@ 0x104
 801d23c:	4605      	mov	r5, r0
 801d23e:	2301      	movs	r3, #1
 801d240:	e7d7      	b.n	801d1f2 <__ssvfiscanf_r+0x1ea>
 801d242:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801d244:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d248:	9341      	str	r3, [sp, #260]	@ 0x104
 801d24a:	2300      	movs	r3, #0
 801d24c:	e7d1      	b.n	801d1f2 <__ssvfiscanf_r+0x1ea>
 801d24e:	2302      	movs	r3, #2
 801d250:	e7cf      	b.n	801d1f2 <__ssvfiscanf_r+0x1ea>
 801d252:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801d254:	06c3      	lsls	r3, r0, #27
 801d256:	f53f aeff 	bmi.w	801d058 <__ssvfiscanf_r+0x50>
 801d25a:	9b00      	ldr	r3, [sp, #0]
 801d25c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801d25e:	1d19      	adds	r1, r3, #4
 801d260:	9100      	str	r1, [sp, #0]
 801d262:	681b      	ldr	r3, [r3, #0]
 801d264:	07c0      	lsls	r0, r0, #31
 801d266:	bf4c      	ite	mi
 801d268:	801a      	strhmi	r2, [r3, #0]
 801d26a:	601a      	strpl	r2, [r3, #0]
 801d26c:	e6f4      	b.n	801d058 <__ssvfiscanf_r+0x50>
 801d26e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d270:	4621      	mov	r1, r4
 801d272:	4630      	mov	r0, r6
 801d274:	4798      	blx	r3
 801d276:	2800      	cmp	r0, #0
 801d278:	d0bf      	beq.n	801d1fa <__ssvfiscanf_r+0x1f2>
 801d27a:	e79f      	b.n	801d1bc <__ssvfiscanf_r+0x1b4>
 801d27c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801d27e:	3201      	adds	r2, #1
 801d280:	9245      	str	r2, [sp, #276]	@ 0x114
 801d282:	6862      	ldr	r2, [r4, #4]
 801d284:	3a01      	subs	r2, #1
 801d286:	2a00      	cmp	r2, #0
 801d288:	6062      	str	r2, [r4, #4]
 801d28a:	dd02      	ble.n	801d292 <__ssvfiscanf_r+0x28a>
 801d28c:	3301      	adds	r3, #1
 801d28e:	6023      	str	r3, [r4, #0]
 801d290:	e7b6      	b.n	801d200 <__ssvfiscanf_r+0x1f8>
 801d292:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d294:	4621      	mov	r1, r4
 801d296:	4630      	mov	r0, r6
 801d298:	4798      	blx	r3
 801d29a:	2800      	cmp	r0, #0
 801d29c:	d0b0      	beq.n	801d200 <__ssvfiscanf_r+0x1f8>
 801d29e:	e78d      	b.n	801d1bc <__ssvfiscanf_r+0x1b4>
 801d2a0:	2b04      	cmp	r3, #4
 801d2a2:	dc0f      	bgt.n	801d2c4 <__ssvfiscanf_r+0x2bc>
 801d2a4:	466b      	mov	r3, sp
 801d2a6:	4622      	mov	r2, r4
 801d2a8:	a941      	add	r1, sp, #260	@ 0x104
 801d2aa:	4630      	mov	r0, r6
 801d2ac:	f000 f87c 	bl	801d3a8 <_scanf_i>
 801d2b0:	e7b4      	b.n	801d21c <__ssvfiscanf_r+0x214>
 801d2b2:	bf00      	nop
 801d2b4:	0801cf55 	.word	0x0801cf55
 801d2b8:	0801cfcf 	.word	0x0801cfcf
 801d2bc:	080209e1 	.word	0x080209e1
 801d2c0:	08020296 	.word	0x08020296
 801d2c4:	4b0a      	ldr	r3, [pc, #40]	@ (801d2f0 <__ssvfiscanf_r+0x2e8>)
 801d2c6:	2b00      	cmp	r3, #0
 801d2c8:	f43f aec6 	beq.w	801d058 <__ssvfiscanf_r+0x50>
 801d2cc:	466b      	mov	r3, sp
 801d2ce:	4622      	mov	r2, r4
 801d2d0:	a941      	add	r1, sp, #260	@ 0x104
 801d2d2:	4630      	mov	r0, r6
 801d2d4:	f7fc fc9c 	bl	8019c10 <_scanf_float>
 801d2d8:	e7a0      	b.n	801d21c <__ssvfiscanf_r+0x214>
 801d2da:	89a3      	ldrh	r3, [r4, #12]
 801d2dc:	065b      	lsls	r3, r3, #25
 801d2de:	f53f af71 	bmi.w	801d1c4 <__ssvfiscanf_r+0x1bc>
 801d2e2:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801d2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2ea:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801d2ec:	e7f9      	b.n	801d2e2 <__ssvfiscanf_r+0x2da>
 801d2ee:	bf00      	nop
 801d2f0:	08019c11 	.word	0x08019c11

0801d2f4 <_scanf_chars>:
 801d2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d2f8:	4615      	mov	r5, r2
 801d2fa:	688a      	ldr	r2, [r1, #8]
 801d2fc:	4680      	mov	r8, r0
 801d2fe:	460c      	mov	r4, r1
 801d300:	b932      	cbnz	r2, 801d310 <_scanf_chars+0x1c>
 801d302:	698a      	ldr	r2, [r1, #24]
 801d304:	2a00      	cmp	r2, #0
 801d306:	bf14      	ite	ne
 801d308:	f04f 32ff 	movne.w	r2, #4294967295
 801d30c:	2201      	moveq	r2, #1
 801d30e:	608a      	str	r2, [r1, #8]
 801d310:	6822      	ldr	r2, [r4, #0]
 801d312:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801d3a4 <_scanf_chars+0xb0>
 801d316:	06d1      	lsls	r1, r2, #27
 801d318:	bf5f      	itttt	pl
 801d31a:	681a      	ldrpl	r2, [r3, #0]
 801d31c:	1d11      	addpl	r1, r2, #4
 801d31e:	6019      	strpl	r1, [r3, #0]
 801d320:	6816      	ldrpl	r6, [r2, #0]
 801d322:	2700      	movs	r7, #0
 801d324:	69a0      	ldr	r0, [r4, #24]
 801d326:	b188      	cbz	r0, 801d34c <_scanf_chars+0x58>
 801d328:	2801      	cmp	r0, #1
 801d32a:	d107      	bne.n	801d33c <_scanf_chars+0x48>
 801d32c:	682b      	ldr	r3, [r5, #0]
 801d32e:	781a      	ldrb	r2, [r3, #0]
 801d330:	6963      	ldr	r3, [r4, #20]
 801d332:	5c9b      	ldrb	r3, [r3, r2]
 801d334:	b953      	cbnz	r3, 801d34c <_scanf_chars+0x58>
 801d336:	2f00      	cmp	r7, #0
 801d338:	d031      	beq.n	801d39e <_scanf_chars+0xaa>
 801d33a:	e022      	b.n	801d382 <_scanf_chars+0x8e>
 801d33c:	2802      	cmp	r0, #2
 801d33e:	d120      	bne.n	801d382 <_scanf_chars+0x8e>
 801d340:	682b      	ldr	r3, [r5, #0]
 801d342:	781b      	ldrb	r3, [r3, #0]
 801d344:	f819 3003 	ldrb.w	r3, [r9, r3]
 801d348:	071b      	lsls	r3, r3, #28
 801d34a:	d41a      	bmi.n	801d382 <_scanf_chars+0x8e>
 801d34c:	6823      	ldr	r3, [r4, #0]
 801d34e:	06da      	lsls	r2, r3, #27
 801d350:	bf5e      	ittt	pl
 801d352:	682b      	ldrpl	r3, [r5, #0]
 801d354:	781b      	ldrbpl	r3, [r3, #0]
 801d356:	f806 3b01 	strbpl.w	r3, [r6], #1
 801d35a:	682a      	ldr	r2, [r5, #0]
 801d35c:	686b      	ldr	r3, [r5, #4]
 801d35e:	3201      	adds	r2, #1
 801d360:	602a      	str	r2, [r5, #0]
 801d362:	68a2      	ldr	r2, [r4, #8]
 801d364:	3b01      	subs	r3, #1
 801d366:	3a01      	subs	r2, #1
 801d368:	606b      	str	r3, [r5, #4]
 801d36a:	3701      	adds	r7, #1
 801d36c:	60a2      	str	r2, [r4, #8]
 801d36e:	b142      	cbz	r2, 801d382 <_scanf_chars+0x8e>
 801d370:	2b00      	cmp	r3, #0
 801d372:	dcd7      	bgt.n	801d324 <_scanf_chars+0x30>
 801d374:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801d378:	4629      	mov	r1, r5
 801d37a:	4640      	mov	r0, r8
 801d37c:	4798      	blx	r3
 801d37e:	2800      	cmp	r0, #0
 801d380:	d0d0      	beq.n	801d324 <_scanf_chars+0x30>
 801d382:	6823      	ldr	r3, [r4, #0]
 801d384:	f013 0310 	ands.w	r3, r3, #16
 801d388:	d105      	bne.n	801d396 <_scanf_chars+0xa2>
 801d38a:	68e2      	ldr	r2, [r4, #12]
 801d38c:	3201      	adds	r2, #1
 801d38e:	60e2      	str	r2, [r4, #12]
 801d390:	69a2      	ldr	r2, [r4, #24]
 801d392:	b102      	cbz	r2, 801d396 <_scanf_chars+0xa2>
 801d394:	7033      	strb	r3, [r6, #0]
 801d396:	6923      	ldr	r3, [r4, #16]
 801d398:	443b      	add	r3, r7
 801d39a:	6123      	str	r3, [r4, #16]
 801d39c:	2000      	movs	r0, #0
 801d39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d3a2:	bf00      	nop
 801d3a4:	080209e1 	.word	0x080209e1

0801d3a8 <_scanf_i>:
 801d3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3ac:	4698      	mov	r8, r3
 801d3ae:	4b74      	ldr	r3, [pc, #464]	@ (801d580 <_scanf_i+0x1d8>)
 801d3b0:	460c      	mov	r4, r1
 801d3b2:	4682      	mov	sl, r0
 801d3b4:	4616      	mov	r6, r2
 801d3b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d3ba:	b087      	sub	sp, #28
 801d3bc:	ab03      	add	r3, sp, #12
 801d3be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801d3c2:	4b70      	ldr	r3, [pc, #448]	@ (801d584 <_scanf_i+0x1dc>)
 801d3c4:	69a1      	ldr	r1, [r4, #24]
 801d3c6:	4a70      	ldr	r2, [pc, #448]	@ (801d588 <_scanf_i+0x1e0>)
 801d3c8:	2903      	cmp	r1, #3
 801d3ca:	bf08      	it	eq
 801d3cc:	461a      	moveq	r2, r3
 801d3ce:	68a3      	ldr	r3, [r4, #8]
 801d3d0:	9201      	str	r2, [sp, #4]
 801d3d2:	1e5a      	subs	r2, r3, #1
 801d3d4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801d3d8:	bf88      	it	hi
 801d3da:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801d3de:	4627      	mov	r7, r4
 801d3e0:	bf82      	ittt	hi
 801d3e2:	eb03 0905 	addhi.w	r9, r3, r5
 801d3e6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801d3ea:	60a3      	strhi	r3, [r4, #8]
 801d3ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 801d3f0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801d3f4:	bf98      	it	ls
 801d3f6:	f04f 0900 	movls.w	r9, #0
 801d3fa:	6023      	str	r3, [r4, #0]
 801d3fc:	463d      	mov	r5, r7
 801d3fe:	f04f 0b00 	mov.w	fp, #0
 801d402:	6831      	ldr	r1, [r6, #0]
 801d404:	ab03      	add	r3, sp, #12
 801d406:	7809      	ldrb	r1, [r1, #0]
 801d408:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801d40c:	2202      	movs	r2, #2
 801d40e:	f7e2 fedf 	bl	80001d0 <memchr>
 801d412:	b328      	cbz	r0, 801d460 <_scanf_i+0xb8>
 801d414:	f1bb 0f01 	cmp.w	fp, #1
 801d418:	d159      	bne.n	801d4ce <_scanf_i+0x126>
 801d41a:	6862      	ldr	r2, [r4, #4]
 801d41c:	b92a      	cbnz	r2, 801d42a <_scanf_i+0x82>
 801d41e:	6822      	ldr	r2, [r4, #0]
 801d420:	2108      	movs	r1, #8
 801d422:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801d426:	6061      	str	r1, [r4, #4]
 801d428:	6022      	str	r2, [r4, #0]
 801d42a:	6822      	ldr	r2, [r4, #0]
 801d42c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801d430:	6022      	str	r2, [r4, #0]
 801d432:	68a2      	ldr	r2, [r4, #8]
 801d434:	1e51      	subs	r1, r2, #1
 801d436:	60a1      	str	r1, [r4, #8]
 801d438:	b192      	cbz	r2, 801d460 <_scanf_i+0xb8>
 801d43a:	6832      	ldr	r2, [r6, #0]
 801d43c:	1c51      	adds	r1, r2, #1
 801d43e:	6031      	str	r1, [r6, #0]
 801d440:	7812      	ldrb	r2, [r2, #0]
 801d442:	f805 2b01 	strb.w	r2, [r5], #1
 801d446:	6872      	ldr	r2, [r6, #4]
 801d448:	3a01      	subs	r2, #1
 801d44a:	2a00      	cmp	r2, #0
 801d44c:	6072      	str	r2, [r6, #4]
 801d44e:	dc07      	bgt.n	801d460 <_scanf_i+0xb8>
 801d450:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801d454:	4631      	mov	r1, r6
 801d456:	4650      	mov	r0, sl
 801d458:	4790      	blx	r2
 801d45a:	2800      	cmp	r0, #0
 801d45c:	f040 8085 	bne.w	801d56a <_scanf_i+0x1c2>
 801d460:	f10b 0b01 	add.w	fp, fp, #1
 801d464:	f1bb 0f03 	cmp.w	fp, #3
 801d468:	d1cb      	bne.n	801d402 <_scanf_i+0x5a>
 801d46a:	6863      	ldr	r3, [r4, #4]
 801d46c:	b90b      	cbnz	r3, 801d472 <_scanf_i+0xca>
 801d46e:	230a      	movs	r3, #10
 801d470:	6063      	str	r3, [r4, #4]
 801d472:	6863      	ldr	r3, [r4, #4]
 801d474:	4945      	ldr	r1, [pc, #276]	@ (801d58c <_scanf_i+0x1e4>)
 801d476:	6960      	ldr	r0, [r4, #20]
 801d478:	1ac9      	subs	r1, r1, r3
 801d47a:	f000 f9dd 	bl	801d838 <__sccl>
 801d47e:	f04f 0b00 	mov.w	fp, #0
 801d482:	68a3      	ldr	r3, [r4, #8]
 801d484:	6822      	ldr	r2, [r4, #0]
 801d486:	2b00      	cmp	r3, #0
 801d488:	d03d      	beq.n	801d506 <_scanf_i+0x15e>
 801d48a:	6831      	ldr	r1, [r6, #0]
 801d48c:	6960      	ldr	r0, [r4, #20]
 801d48e:	f891 c000 	ldrb.w	ip, [r1]
 801d492:	f810 000c 	ldrb.w	r0, [r0, ip]
 801d496:	2800      	cmp	r0, #0
 801d498:	d035      	beq.n	801d506 <_scanf_i+0x15e>
 801d49a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801d49e:	d124      	bne.n	801d4ea <_scanf_i+0x142>
 801d4a0:	0510      	lsls	r0, r2, #20
 801d4a2:	d522      	bpl.n	801d4ea <_scanf_i+0x142>
 801d4a4:	f10b 0b01 	add.w	fp, fp, #1
 801d4a8:	f1b9 0f00 	cmp.w	r9, #0
 801d4ac:	d003      	beq.n	801d4b6 <_scanf_i+0x10e>
 801d4ae:	3301      	adds	r3, #1
 801d4b0:	f109 39ff 	add.w	r9, r9, #4294967295
 801d4b4:	60a3      	str	r3, [r4, #8]
 801d4b6:	6873      	ldr	r3, [r6, #4]
 801d4b8:	3b01      	subs	r3, #1
 801d4ba:	2b00      	cmp	r3, #0
 801d4bc:	6073      	str	r3, [r6, #4]
 801d4be:	dd1b      	ble.n	801d4f8 <_scanf_i+0x150>
 801d4c0:	6833      	ldr	r3, [r6, #0]
 801d4c2:	3301      	adds	r3, #1
 801d4c4:	6033      	str	r3, [r6, #0]
 801d4c6:	68a3      	ldr	r3, [r4, #8]
 801d4c8:	3b01      	subs	r3, #1
 801d4ca:	60a3      	str	r3, [r4, #8]
 801d4cc:	e7d9      	b.n	801d482 <_scanf_i+0xda>
 801d4ce:	f1bb 0f02 	cmp.w	fp, #2
 801d4d2:	d1ae      	bne.n	801d432 <_scanf_i+0x8a>
 801d4d4:	6822      	ldr	r2, [r4, #0]
 801d4d6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801d4da:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801d4de:	d1c4      	bne.n	801d46a <_scanf_i+0xc2>
 801d4e0:	2110      	movs	r1, #16
 801d4e2:	6061      	str	r1, [r4, #4]
 801d4e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801d4e8:	e7a2      	b.n	801d430 <_scanf_i+0x88>
 801d4ea:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801d4ee:	6022      	str	r2, [r4, #0]
 801d4f0:	780b      	ldrb	r3, [r1, #0]
 801d4f2:	f805 3b01 	strb.w	r3, [r5], #1
 801d4f6:	e7de      	b.n	801d4b6 <_scanf_i+0x10e>
 801d4f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801d4fc:	4631      	mov	r1, r6
 801d4fe:	4650      	mov	r0, sl
 801d500:	4798      	blx	r3
 801d502:	2800      	cmp	r0, #0
 801d504:	d0df      	beq.n	801d4c6 <_scanf_i+0x11e>
 801d506:	6823      	ldr	r3, [r4, #0]
 801d508:	05d9      	lsls	r1, r3, #23
 801d50a:	d50d      	bpl.n	801d528 <_scanf_i+0x180>
 801d50c:	42bd      	cmp	r5, r7
 801d50e:	d909      	bls.n	801d524 <_scanf_i+0x17c>
 801d510:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801d514:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801d518:	4632      	mov	r2, r6
 801d51a:	4650      	mov	r0, sl
 801d51c:	4798      	blx	r3
 801d51e:	f105 39ff 	add.w	r9, r5, #4294967295
 801d522:	464d      	mov	r5, r9
 801d524:	42bd      	cmp	r5, r7
 801d526:	d028      	beq.n	801d57a <_scanf_i+0x1d2>
 801d528:	6822      	ldr	r2, [r4, #0]
 801d52a:	f012 0210 	ands.w	r2, r2, #16
 801d52e:	d113      	bne.n	801d558 <_scanf_i+0x1b0>
 801d530:	702a      	strb	r2, [r5, #0]
 801d532:	6863      	ldr	r3, [r4, #4]
 801d534:	9e01      	ldr	r6, [sp, #4]
 801d536:	4639      	mov	r1, r7
 801d538:	4650      	mov	r0, sl
 801d53a:	47b0      	blx	r6
 801d53c:	f8d8 3000 	ldr.w	r3, [r8]
 801d540:	6821      	ldr	r1, [r4, #0]
 801d542:	1d1a      	adds	r2, r3, #4
 801d544:	f8c8 2000 	str.w	r2, [r8]
 801d548:	f011 0f20 	tst.w	r1, #32
 801d54c:	681b      	ldr	r3, [r3, #0]
 801d54e:	d00f      	beq.n	801d570 <_scanf_i+0x1c8>
 801d550:	6018      	str	r0, [r3, #0]
 801d552:	68e3      	ldr	r3, [r4, #12]
 801d554:	3301      	adds	r3, #1
 801d556:	60e3      	str	r3, [r4, #12]
 801d558:	6923      	ldr	r3, [r4, #16]
 801d55a:	1bed      	subs	r5, r5, r7
 801d55c:	445d      	add	r5, fp
 801d55e:	442b      	add	r3, r5
 801d560:	6123      	str	r3, [r4, #16]
 801d562:	2000      	movs	r0, #0
 801d564:	b007      	add	sp, #28
 801d566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d56a:	f04f 0b00 	mov.w	fp, #0
 801d56e:	e7ca      	b.n	801d506 <_scanf_i+0x15e>
 801d570:	07ca      	lsls	r2, r1, #31
 801d572:	bf4c      	ite	mi
 801d574:	8018      	strhmi	r0, [r3, #0]
 801d576:	6018      	strpl	r0, [r3, #0]
 801d578:	e7eb      	b.n	801d552 <_scanf_i+0x1aa>
 801d57a:	2001      	movs	r0, #1
 801d57c:	e7f2      	b.n	801d564 <_scanf_i+0x1bc>
 801d57e:	bf00      	nop
 801d580:	080201dc 	.word	0x080201dc
 801d584:	0801cca1 	.word	0x0801cca1
 801d588:	0801e171 	.word	0x0801e171
 801d58c:	080203fc 	.word	0x080203fc

0801d590 <__sflush_r>:
 801d590:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d598:	0716      	lsls	r6, r2, #28
 801d59a:	4605      	mov	r5, r0
 801d59c:	460c      	mov	r4, r1
 801d59e:	d454      	bmi.n	801d64a <__sflush_r+0xba>
 801d5a0:	684b      	ldr	r3, [r1, #4]
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	dc02      	bgt.n	801d5ac <__sflush_r+0x1c>
 801d5a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d5a8:	2b00      	cmp	r3, #0
 801d5aa:	dd48      	ble.n	801d63e <__sflush_r+0xae>
 801d5ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d5ae:	2e00      	cmp	r6, #0
 801d5b0:	d045      	beq.n	801d63e <__sflush_r+0xae>
 801d5b2:	2300      	movs	r3, #0
 801d5b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d5b8:	682f      	ldr	r7, [r5, #0]
 801d5ba:	6a21      	ldr	r1, [r4, #32]
 801d5bc:	602b      	str	r3, [r5, #0]
 801d5be:	d030      	beq.n	801d622 <__sflush_r+0x92>
 801d5c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d5c2:	89a3      	ldrh	r3, [r4, #12]
 801d5c4:	0759      	lsls	r1, r3, #29
 801d5c6:	d505      	bpl.n	801d5d4 <__sflush_r+0x44>
 801d5c8:	6863      	ldr	r3, [r4, #4]
 801d5ca:	1ad2      	subs	r2, r2, r3
 801d5cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d5ce:	b10b      	cbz	r3, 801d5d4 <__sflush_r+0x44>
 801d5d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d5d2:	1ad2      	subs	r2, r2, r3
 801d5d4:	2300      	movs	r3, #0
 801d5d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d5d8:	6a21      	ldr	r1, [r4, #32]
 801d5da:	4628      	mov	r0, r5
 801d5dc:	47b0      	blx	r6
 801d5de:	1c43      	adds	r3, r0, #1
 801d5e0:	89a3      	ldrh	r3, [r4, #12]
 801d5e2:	d106      	bne.n	801d5f2 <__sflush_r+0x62>
 801d5e4:	6829      	ldr	r1, [r5, #0]
 801d5e6:	291d      	cmp	r1, #29
 801d5e8:	d82b      	bhi.n	801d642 <__sflush_r+0xb2>
 801d5ea:	4a2a      	ldr	r2, [pc, #168]	@ (801d694 <__sflush_r+0x104>)
 801d5ec:	40ca      	lsrs	r2, r1
 801d5ee:	07d6      	lsls	r6, r2, #31
 801d5f0:	d527      	bpl.n	801d642 <__sflush_r+0xb2>
 801d5f2:	2200      	movs	r2, #0
 801d5f4:	6062      	str	r2, [r4, #4]
 801d5f6:	04d9      	lsls	r1, r3, #19
 801d5f8:	6922      	ldr	r2, [r4, #16]
 801d5fa:	6022      	str	r2, [r4, #0]
 801d5fc:	d504      	bpl.n	801d608 <__sflush_r+0x78>
 801d5fe:	1c42      	adds	r2, r0, #1
 801d600:	d101      	bne.n	801d606 <__sflush_r+0x76>
 801d602:	682b      	ldr	r3, [r5, #0]
 801d604:	b903      	cbnz	r3, 801d608 <__sflush_r+0x78>
 801d606:	6560      	str	r0, [r4, #84]	@ 0x54
 801d608:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d60a:	602f      	str	r7, [r5, #0]
 801d60c:	b1b9      	cbz	r1, 801d63e <__sflush_r+0xae>
 801d60e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d612:	4299      	cmp	r1, r3
 801d614:	d002      	beq.n	801d61c <__sflush_r+0x8c>
 801d616:	4628      	mov	r0, r5
 801d618:	f7fd fee6 	bl	801b3e8 <_free_r>
 801d61c:	2300      	movs	r3, #0
 801d61e:	6363      	str	r3, [r4, #52]	@ 0x34
 801d620:	e00d      	b.n	801d63e <__sflush_r+0xae>
 801d622:	2301      	movs	r3, #1
 801d624:	4628      	mov	r0, r5
 801d626:	47b0      	blx	r6
 801d628:	4602      	mov	r2, r0
 801d62a:	1c50      	adds	r0, r2, #1
 801d62c:	d1c9      	bne.n	801d5c2 <__sflush_r+0x32>
 801d62e:	682b      	ldr	r3, [r5, #0]
 801d630:	2b00      	cmp	r3, #0
 801d632:	d0c6      	beq.n	801d5c2 <__sflush_r+0x32>
 801d634:	2b1d      	cmp	r3, #29
 801d636:	d001      	beq.n	801d63c <__sflush_r+0xac>
 801d638:	2b16      	cmp	r3, #22
 801d63a:	d11e      	bne.n	801d67a <__sflush_r+0xea>
 801d63c:	602f      	str	r7, [r5, #0]
 801d63e:	2000      	movs	r0, #0
 801d640:	e022      	b.n	801d688 <__sflush_r+0xf8>
 801d642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d646:	b21b      	sxth	r3, r3
 801d648:	e01b      	b.n	801d682 <__sflush_r+0xf2>
 801d64a:	690f      	ldr	r7, [r1, #16]
 801d64c:	2f00      	cmp	r7, #0
 801d64e:	d0f6      	beq.n	801d63e <__sflush_r+0xae>
 801d650:	0793      	lsls	r3, r2, #30
 801d652:	680e      	ldr	r6, [r1, #0]
 801d654:	bf08      	it	eq
 801d656:	694b      	ldreq	r3, [r1, #20]
 801d658:	600f      	str	r7, [r1, #0]
 801d65a:	bf18      	it	ne
 801d65c:	2300      	movne	r3, #0
 801d65e:	eba6 0807 	sub.w	r8, r6, r7
 801d662:	608b      	str	r3, [r1, #8]
 801d664:	f1b8 0f00 	cmp.w	r8, #0
 801d668:	dde9      	ble.n	801d63e <__sflush_r+0xae>
 801d66a:	6a21      	ldr	r1, [r4, #32]
 801d66c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d66e:	4643      	mov	r3, r8
 801d670:	463a      	mov	r2, r7
 801d672:	4628      	mov	r0, r5
 801d674:	47b0      	blx	r6
 801d676:	2800      	cmp	r0, #0
 801d678:	dc08      	bgt.n	801d68c <__sflush_r+0xfc>
 801d67a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d67e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d682:	81a3      	strh	r3, [r4, #12]
 801d684:	f04f 30ff 	mov.w	r0, #4294967295
 801d688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d68c:	4407      	add	r7, r0
 801d68e:	eba8 0800 	sub.w	r8, r8, r0
 801d692:	e7e7      	b.n	801d664 <__sflush_r+0xd4>
 801d694:	20400001 	.word	0x20400001

0801d698 <_fflush_r>:
 801d698:	b538      	push	{r3, r4, r5, lr}
 801d69a:	690b      	ldr	r3, [r1, #16]
 801d69c:	4605      	mov	r5, r0
 801d69e:	460c      	mov	r4, r1
 801d6a0:	b913      	cbnz	r3, 801d6a8 <_fflush_r+0x10>
 801d6a2:	2500      	movs	r5, #0
 801d6a4:	4628      	mov	r0, r5
 801d6a6:	bd38      	pop	{r3, r4, r5, pc}
 801d6a8:	b118      	cbz	r0, 801d6b2 <_fflush_r+0x1a>
 801d6aa:	6a03      	ldr	r3, [r0, #32]
 801d6ac:	b90b      	cbnz	r3, 801d6b2 <_fflush_r+0x1a>
 801d6ae:	f7fc fd49 	bl	801a144 <__sinit>
 801d6b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d6b6:	2b00      	cmp	r3, #0
 801d6b8:	d0f3      	beq.n	801d6a2 <_fflush_r+0xa>
 801d6ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d6bc:	07d0      	lsls	r0, r2, #31
 801d6be:	d404      	bmi.n	801d6ca <_fflush_r+0x32>
 801d6c0:	0599      	lsls	r1, r3, #22
 801d6c2:	d402      	bmi.n	801d6ca <_fflush_r+0x32>
 801d6c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d6c6:	f7fd f808 	bl	801a6da <__retarget_lock_acquire_recursive>
 801d6ca:	4628      	mov	r0, r5
 801d6cc:	4621      	mov	r1, r4
 801d6ce:	f7ff ff5f 	bl	801d590 <__sflush_r>
 801d6d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d6d4:	07da      	lsls	r2, r3, #31
 801d6d6:	4605      	mov	r5, r0
 801d6d8:	d4e4      	bmi.n	801d6a4 <_fflush_r+0xc>
 801d6da:	89a3      	ldrh	r3, [r4, #12]
 801d6dc:	059b      	lsls	r3, r3, #22
 801d6de:	d4e1      	bmi.n	801d6a4 <_fflush_r+0xc>
 801d6e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d6e2:	f7fc fffb 	bl	801a6dc <__retarget_lock_release_recursive>
 801d6e6:	e7dd      	b.n	801d6a4 <_fflush_r+0xc>

0801d6e8 <fiprintf>:
 801d6e8:	b40e      	push	{r1, r2, r3}
 801d6ea:	b503      	push	{r0, r1, lr}
 801d6ec:	4601      	mov	r1, r0
 801d6ee:	ab03      	add	r3, sp, #12
 801d6f0:	4805      	ldr	r0, [pc, #20]	@ (801d708 <fiprintf+0x20>)
 801d6f2:	f853 2b04 	ldr.w	r2, [r3], #4
 801d6f6:	6800      	ldr	r0, [r0, #0]
 801d6f8:	9301      	str	r3, [sp, #4]
 801d6fa:	f7fb ffdb 	bl	80196b4 <_vfiprintf_r>
 801d6fe:	b002      	add	sp, #8
 801d700:	f85d eb04 	ldr.w	lr, [sp], #4
 801d704:	b003      	add	sp, #12
 801d706:	4770      	bx	lr
 801d708:	20000160 	.word	0x20000160

0801d70c <__swhatbuf_r>:
 801d70c:	b570      	push	{r4, r5, r6, lr}
 801d70e:	460c      	mov	r4, r1
 801d710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d714:	2900      	cmp	r1, #0
 801d716:	b096      	sub	sp, #88	@ 0x58
 801d718:	4615      	mov	r5, r2
 801d71a:	461e      	mov	r6, r3
 801d71c:	da0d      	bge.n	801d73a <__swhatbuf_r+0x2e>
 801d71e:	89a3      	ldrh	r3, [r4, #12]
 801d720:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801d724:	f04f 0100 	mov.w	r1, #0
 801d728:	bf14      	ite	ne
 801d72a:	2340      	movne	r3, #64	@ 0x40
 801d72c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801d730:	2000      	movs	r0, #0
 801d732:	6031      	str	r1, [r6, #0]
 801d734:	602b      	str	r3, [r5, #0]
 801d736:	b016      	add	sp, #88	@ 0x58
 801d738:	bd70      	pop	{r4, r5, r6, pc}
 801d73a:	466a      	mov	r2, sp
 801d73c:	f000 f902 	bl	801d944 <_fstat_r>
 801d740:	2800      	cmp	r0, #0
 801d742:	dbec      	blt.n	801d71e <__swhatbuf_r+0x12>
 801d744:	9901      	ldr	r1, [sp, #4]
 801d746:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d74a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d74e:	4259      	negs	r1, r3
 801d750:	4159      	adcs	r1, r3
 801d752:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d756:	e7eb      	b.n	801d730 <__swhatbuf_r+0x24>

0801d758 <__smakebuf_r>:
 801d758:	898b      	ldrh	r3, [r1, #12]
 801d75a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d75c:	079d      	lsls	r5, r3, #30
 801d75e:	4606      	mov	r6, r0
 801d760:	460c      	mov	r4, r1
 801d762:	d507      	bpl.n	801d774 <__smakebuf_r+0x1c>
 801d764:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d768:	6023      	str	r3, [r4, #0]
 801d76a:	6123      	str	r3, [r4, #16]
 801d76c:	2301      	movs	r3, #1
 801d76e:	6163      	str	r3, [r4, #20]
 801d770:	b003      	add	sp, #12
 801d772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d774:	ab01      	add	r3, sp, #4
 801d776:	466a      	mov	r2, sp
 801d778:	f7ff ffc8 	bl	801d70c <__swhatbuf_r>
 801d77c:	9f00      	ldr	r7, [sp, #0]
 801d77e:	4605      	mov	r5, r0
 801d780:	4639      	mov	r1, r7
 801d782:	4630      	mov	r0, r6
 801d784:	f7fd fea4 	bl	801b4d0 <_malloc_r>
 801d788:	b948      	cbnz	r0, 801d79e <__smakebuf_r+0x46>
 801d78a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d78e:	059a      	lsls	r2, r3, #22
 801d790:	d4ee      	bmi.n	801d770 <__smakebuf_r+0x18>
 801d792:	f023 0303 	bic.w	r3, r3, #3
 801d796:	f043 0302 	orr.w	r3, r3, #2
 801d79a:	81a3      	strh	r3, [r4, #12]
 801d79c:	e7e2      	b.n	801d764 <__smakebuf_r+0xc>
 801d79e:	89a3      	ldrh	r3, [r4, #12]
 801d7a0:	6020      	str	r0, [r4, #0]
 801d7a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d7a6:	81a3      	strh	r3, [r4, #12]
 801d7a8:	9b01      	ldr	r3, [sp, #4]
 801d7aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d7ae:	b15b      	cbz	r3, 801d7c8 <__smakebuf_r+0x70>
 801d7b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d7b4:	4630      	mov	r0, r6
 801d7b6:	f000 f8d7 	bl	801d968 <_isatty_r>
 801d7ba:	b128      	cbz	r0, 801d7c8 <__smakebuf_r+0x70>
 801d7bc:	89a3      	ldrh	r3, [r4, #12]
 801d7be:	f023 0303 	bic.w	r3, r3, #3
 801d7c2:	f043 0301 	orr.w	r3, r3, #1
 801d7c6:	81a3      	strh	r3, [r4, #12]
 801d7c8:	89a3      	ldrh	r3, [r4, #12]
 801d7ca:	431d      	orrs	r5, r3
 801d7cc:	81a5      	strh	r5, [r4, #12]
 801d7ce:	e7cf      	b.n	801d770 <__smakebuf_r+0x18>

0801d7d0 <_putc_r>:
 801d7d0:	b570      	push	{r4, r5, r6, lr}
 801d7d2:	460d      	mov	r5, r1
 801d7d4:	4614      	mov	r4, r2
 801d7d6:	4606      	mov	r6, r0
 801d7d8:	b118      	cbz	r0, 801d7e2 <_putc_r+0x12>
 801d7da:	6a03      	ldr	r3, [r0, #32]
 801d7dc:	b90b      	cbnz	r3, 801d7e2 <_putc_r+0x12>
 801d7de:	f7fc fcb1 	bl	801a144 <__sinit>
 801d7e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d7e4:	07d8      	lsls	r0, r3, #31
 801d7e6:	d405      	bmi.n	801d7f4 <_putc_r+0x24>
 801d7e8:	89a3      	ldrh	r3, [r4, #12]
 801d7ea:	0599      	lsls	r1, r3, #22
 801d7ec:	d402      	bmi.n	801d7f4 <_putc_r+0x24>
 801d7ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d7f0:	f7fc ff73 	bl	801a6da <__retarget_lock_acquire_recursive>
 801d7f4:	68a3      	ldr	r3, [r4, #8]
 801d7f6:	3b01      	subs	r3, #1
 801d7f8:	2b00      	cmp	r3, #0
 801d7fa:	60a3      	str	r3, [r4, #8]
 801d7fc:	da05      	bge.n	801d80a <_putc_r+0x3a>
 801d7fe:	69a2      	ldr	r2, [r4, #24]
 801d800:	4293      	cmp	r3, r2
 801d802:	db12      	blt.n	801d82a <_putc_r+0x5a>
 801d804:	b2eb      	uxtb	r3, r5
 801d806:	2b0a      	cmp	r3, #10
 801d808:	d00f      	beq.n	801d82a <_putc_r+0x5a>
 801d80a:	6823      	ldr	r3, [r4, #0]
 801d80c:	1c5a      	adds	r2, r3, #1
 801d80e:	6022      	str	r2, [r4, #0]
 801d810:	701d      	strb	r5, [r3, #0]
 801d812:	b2ed      	uxtb	r5, r5
 801d814:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d816:	07da      	lsls	r2, r3, #31
 801d818:	d405      	bmi.n	801d826 <_putc_r+0x56>
 801d81a:	89a3      	ldrh	r3, [r4, #12]
 801d81c:	059b      	lsls	r3, r3, #22
 801d81e:	d402      	bmi.n	801d826 <_putc_r+0x56>
 801d820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d822:	f7fc ff5b 	bl	801a6dc <__retarget_lock_release_recursive>
 801d826:	4628      	mov	r0, r5
 801d828:	bd70      	pop	{r4, r5, r6, pc}
 801d82a:	4629      	mov	r1, r5
 801d82c:	4622      	mov	r2, r4
 801d82e:	4630      	mov	r0, r6
 801d830:	f7fc fdc9 	bl	801a3c6 <__swbuf_r>
 801d834:	4605      	mov	r5, r0
 801d836:	e7ed      	b.n	801d814 <_putc_r+0x44>

0801d838 <__sccl>:
 801d838:	b570      	push	{r4, r5, r6, lr}
 801d83a:	780b      	ldrb	r3, [r1, #0]
 801d83c:	4604      	mov	r4, r0
 801d83e:	2b5e      	cmp	r3, #94	@ 0x5e
 801d840:	bf0b      	itete	eq
 801d842:	784b      	ldrbeq	r3, [r1, #1]
 801d844:	1c4a      	addne	r2, r1, #1
 801d846:	1c8a      	addeq	r2, r1, #2
 801d848:	2100      	movne	r1, #0
 801d84a:	bf08      	it	eq
 801d84c:	2101      	moveq	r1, #1
 801d84e:	3801      	subs	r0, #1
 801d850:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801d854:	f800 1f01 	strb.w	r1, [r0, #1]!
 801d858:	42a8      	cmp	r0, r5
 801d85a:	d1fb      	bne.n	801d854 <__sccl+0x1c>
 801d85c:	b90b      	cbnz	r3, 801d862 <__sccl+0x2a>
 801d85e:	1e50      	subs	r0, r2, #1
 801d860:	bd70      	pop	{r4, r5, r6, pc}
 801d862:	f081 0101 	eor.w	r1, r1, #1
 801d866:	54e1      	strb	r1, [r4, r3]
 801d868:	4610      	mov	r0, r2
 801d86a:	4602      	mov	r2, r0
 801d86c:	f812 5b01 	ldrb.w	r5, [r2], #1
 801d870:	2d2d      	cmp	r5, #45	@ 0x2d
 801d872:	d005      	beq.n	801d880 <__sccl+0x48>
 801d874:	2d5d      	cmp	r5, #93	@ 0x5d
 801d876:	d016      	beq.n	801d8a6 <__sccl+0x6e>
 801d878:	2d00      	cmp	r5, #0
 801d87a:	d0f1      	beq.n	801d860 <__sccl+0x28>
 801d87c:	462b      	mov	r3, r5
 801d87e:	e7f2      	b.n	801d866 <__sccl+0x2e>
 801d880:	7846      	ldrb	r6, [r0, #1]
 801d882:	2e5d      	cmp	r6, #93	@ 0x5d
 801d884:	d0fa      	beq.n	801d87c <__sccl+0x44>
 801d886:	42b3      	cmp	r3, r6
 801d888:	dcf8      	bgt.n	801d87c <__sccl+0x44>
 801d88a:	3002      	adds	r0, #2
 801d88c:	461a      	mov	r2, r3
 801d88e:	3201      	adds	r2, #1
 801d890:	4296      	cmp	r6, r2
 801d892:	54a1      	strb	r1, [r4, r2]
 801d894:	dcfb      	bgt.n	801d88e <__sccl+0x56>
 801d896:	1af2      	subs	r2, r6, r3
 801d898:	3a01      	subs	r2, #1
 801d89a:	1c5d      	adds	r5, r3, #1
 801d89c:	42b3      	cmp	r3, r6
 801d89e:	bfa8      	it	ge
 801d8a0:	2200      	movge	r2, #0
 801d8a2:	18ab      	adds	r3, r5, r2
 801d8a4:	e7e1      	b.n	801d86a <__sccl+0x32>
 801d8a6:	4610      	mov	r0, r2
 801d8a8:	e7da      	b.n	801d860 <__sccl+0x28>

0801d8aa <__submore>:
 801d8aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8ae:	460c      	mov	r4, r1
 801d8b0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801d8b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d8b6:	4299      	cmp	r1, r3
 801d8b8:	d11d      	bne.n	801d8f6 <__submore+0x4c>
 801d8ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801d8be:	f7fd fe07 	bl	801b4d0 <_malloc_r>
 801d8c2:	b918      	cbnz	r0, 801d8cc <__submore+0x22>
 801d8c4:	f04f 30ff 	mov.w	r0, #4294967295
 801d8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d8d0:	63a3      	str	r3, [r4, #56]	@ 0x38
 801d8d2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801d8d6:	6360      	str	r0, [r4, #52]	@ 0x34
 801d8d8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801d8dc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801d8e0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801d8e4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801d8e8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801d8ec:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801d8f0:	6020      	str	r0, [r4, #0]
 801d8f2:	2000      	movs	r0, #0
 801d8f4:	e7e8      	b.n	801d8c8 <__submore+0x1e>
 801d8f6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801d8f8:	0077      	lsls	r7, r6, #1
 801d8fa:	463a      	mov	r2, r7
 801d8fc:	f7fe fb1e 	bl	801bf3c <_realloc_r>
 801d900:	4605      	mov	r5, r0
 801d902:	2800      	cmp	r0, #0
 801d904:	d0de      	beq.n	801d8c4 <__submore+0x1a>
 801d906:	eb00 0806 	add.w	r8, r0, r6
 801d90a:	4601      	mov	r1, r0
 801d90c:	4632      	mov	r2, r6
 801d90e:	4640      	mov	r0, r8
 801d910:	f7fc fee5 	bl	801a6de <memcpy>
 801d914:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801d918:	f8c4 8000 	str.w	r8, [r4]
 801d91c:	e7e9      	b.n	801d8f2 <__submore+0x48>

0801d91e <strncmp>:
 801d91e:	b510      	push	{r4, lr}
 801d920:	b16a      	cbz	r2, 801d93e <strncmp+0x20>
 801d922:	3901      	subs	r1, #1
 801d924:	1884      	adds	r4, r0, r2
 801d926:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d92a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801d92e:	429a      	cmp	r2, r3
 801d930:	d103      	bne.n	801d93a <strncmp+0x1c>
 801d932:	42a0      	cmp	r0, r4
 801d934:	d001      	beq.n	801d93a <strncmp+0x1c>
 801d936:	2a00      	cmp	r2, #0
 801d938:	d1f5      	bne.n	801d926 <strncmp+0x8>
 801d93a:	1ad0      	subs	r0, r2, r3
 801d93c:	bd10      	pop	{r4, pc}
 801d93e:	4610      	mov	r0, r2
 801d940:	e7fc      	b.n	801d93c <strncmp+0x1e>
	...

0801d944 <_fstat_r>:
 801d944:	b538      	push	{r3, r4, r5, lr}
 801d946:	4d07      	ldr	r5, [pc, #28]	@ (801d964 <_fstat_r+0x20>)
 801d948:	2300      	movs	r3, #0
 801d94a:	4604      	mov	r4, r0
 801d94c:	4608      	mov	r0, r1
 801d94e:	4611      	mov	r1, r2
 801d950:	602b      	str	r3, [r5, #0]
 801d952:	f7eb fea3 	bl	800969c <_fstat>
 801d956:	1c43      	adds	r3, r0, #1
 801d958:	d102      	bne.n	801d960 <_fstat_r+0x1c>
 801d95a:	682b      	ldr	r3, [r5, #0]
 801d95c:	b103      	cbz	r3, 801d960 <_fstat_r+0x1c>
 801d95e:	6023      	str	r3, [r4, #0]
 801d960:	bd38      	pop	{r3, r4, r5, pc}
 801d962:	bf00      	nop
 801d964:	2000a6a0 	.word	0x2000a6a0

0801d968 <_isatty_r>:
 801d968:	b538      	push	{r3, r4, r5, lr}
 801d96a:	4d06      	ldr	r5, [pc, #24]	@ (801d984 <_isatty_r+0x1c>)
 801d96c:	2300      	movs	r3, #0
 801d96e:	4604      	mov	r4, r0
 801d970:	4608      	mov	r0, r1
 801d972:	602b      	str	r3, [r5, #0]
 801d974:	f7eb fea2 	bl	80096bc <_isatty>
 801d978:	1c43      	adds	r3, r0, #1
 801d97a:	d102      	bne.n	801d982 <_isatty_r+0x1a>
 801d97c:	682b      	ldr	r3, [r5, #0]
 801d97e:	b103      	cbz	r3, 801d982 <_isatty_r+0x1a>
 801d980:	6023      	str	r3, [r4, #0]
 801d982:	bd38      	pop	{r3, r4, r5, pc}
 801d984:	2000a6a0 	.word	0x2000a6a0

0801d988 <_sbrk_r>:
 801d988:	b538      	push	{r3, r4, r5, lr}
 801d98a:	4d06      	ldr	r5, [pc, #24]	@ (801d9a4 <_sbrk_r+0x1c>)
 801d98c:	2300      	movs	r3, #0
 801d98e:	4604      	mov	r4, r0
 801d990:	4608      	mov	r0, r1
 801d992:	602b      	str	r3, [r5, #0]
 801d994:	f7eb feaa 	bl	80096ec <_sbrk>
 801d998:	1c43      	adds	r3, r0, #1
 801d99a:	d102      	bne.n	801d9a2 <_sbrk_r+0x1a>
 801d99c:	682b      	ldr	r3, [r5, #0]
 801d99e:	b103      	cbz	r3, 801d9a2 <_sbrk_r+0x1a>
 801d9a0:	6023      	str	r3, [r4, #0]
 801d9a2:	bd38      	pop	{r3, r4, r5, pc}
 801d9a4:	2000a6a0 	.word	0x2000a6a0

0801d9a8 <nan>:
 801d9a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801d9b0 <nan+0x8>
 801d9ac:	4770      	bx	lr
 801d9ae:	bf00      	nop
 801d9b0:	00000000 	.word	0x00000000
 801d9b4:	7ff80000 	.word	0x7ff80000

0801d9b8 <abort>:
 801d9b8:	b508      	push	{r3, lr}
 801d9ba:	2006      	movs	r0, #6
 801d9bc:	f000 fc10 	bl	801e1e0 <raise>
 801d9c0:	2001      	movs	r0, #1
 801d9c2:	f7eb fe37 	bl	8009634 <_exit>

0801d9c6 <_calloc_r>:
 801d9c6:	b570      	push	{r4, r5, r6, lr}
 801d9c8:	fba1 5402 	umull	r5, r4, r1, r2
 801d9cc:	b934      	cbnz	r4, 801d9dc <_calloc_r+0x16>
 801d9ce:	4629      	mov	r1, r5
 801d9d0:	f7fd fd7e 	bl	801b4d0 <_malloc_r>
 801d9d4:	4606      	mov	r6, r0
 801d9d6:	b928      	cbnz	r0, 801d9e4 <_calloc_r+0x1e>
 801d9d8:	4630      	mov	r0, r6
 801d9da:	bd70      	pop	{r4, r5, r6, pc}
 801d9dc:	220c      	movs	r2, #12
 801d9de:	6002      	str	r2, [r0, #0]
 801d9e0:	2600      	movs	r6, #0
 801d9e2:	e7f9      	b.n	801d9d8 <_calloc_r+0x12>
 801d9e4:	462a      	mov	r2, r5
 801d9e6:	4621      	mov	r1, r4
 801d9e8:	f7fc fd9c 	bl	801a524 <memset>
 801d9ec:	e7f4      	b.n	801d9d8 <_calloc_r+0x12>

0801d9ee <rshift>:
 801d9ee:	6903      	ldr	r3, [r0, #16]
 801d9f0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d9f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d9f8:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d9fc:	f100 0414 	add.w	r4, r0, #20
 801da00:	dd45      	ble.n	801da8e <rshift+0xa0>
 801da02:	f011 011f 	ands.w	r1, r1, #31
 801da06:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801da0a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801da0e:	d10c      	bne.n	801da2a <rshift+0x3c>
 801da10:	f100 0710 	add.w	r7, r0, #16
 801da14:	4629      	mov	r1, r5
 801da16:	42b1      	cmp	r1, r6
 801da18:	d334      	bcc.n	801da84 <rshift+0x96>
 801da1a:	1a9b      	subs	r3, r3, r2
 801da1c:	009b      	lsls	r3, r3, #2
 801da1e:	1eea      	subs	r2, r5, #3
 801da20:	4296      	cmp	r6, r2
 801da22:	bf38      	it	cc
 801da24:	2300      	movcc	r3, #0
 801da26:	4423      	add	r3, r4
 801da28:	e015      	b.n	801da56 <rshift+0x68>
 801da2a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801da2e:	f1c1 0820 	rsb	r8, r1, #32
 801da32:	40cf      	lsrs	r7, r1
 801da34:	f105 0e04 	add.w	lr, r5, #4
 801da38:	46a1      	mov	r9, r4
 801da3a:	4576      	cmp	r6, lr
 801da3c:	46f4      	mov	ip, lr
 801da3e:	d815      	bhi.n	801da6c <rshift+0x7e>
 801da40:	1a9a      	subs	r2, r3, r2
 801da42:	0092      	lsls	r2, r2, #2
 801da44:	3a04      	subs	r2, #4
 801da46:	3501      	adds	r5, #1
 801da48:	42ae      	cmp	r6, r5
 801da4a:	bf38      	it	cc
 801da4c:	2200      	movcc	r2, #0
 801da4e:	18a3      	adds	r3, r4, r2
 801da50:	50a7      	str	r7, [r4, r2]
 801da52:	b107      	cbz	r7, 801da56 <rshift+0x68>
 801da54:	3304      	adds	r3, #4
 801da56:	1b1a      	subs	r2, r3, r4
 801da58:	42a3      	cmp	r3, r4
 801da5a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801da5e:	bf08      	it	eq
 801da60:	2300      	moveq	r3, #0
 801da62:	6102      	str	r2, [r0, #16]
 801da64:	bf08      	it	eq
 801da66:	6143      	streq	r3, [r0, #20]
 801da68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801da6c:	f8dc c000 	ldr.w	ip, [ip]
 801da70:	fa0c fc08 	lsl.w	ip, ip, r8
 801da74:	ea4c 0707 	orr.w	r7, ip, r7
 801da78:	f849 7b04 	str.w	r7, [r9], #4
 801da7c:	f85e 7b04 	ldr.w	r7, [lr], #4
 801da80:	40cf      	lsrs	r7, r1
 801da82:	e7da      	b.n	801da3a <rshift+0x4c>
 801da84:	f851 cb04 	ldr.w	ip, [r1], #4
 801da88:	f847 cf04 	str.w	ip, [r7, #4]!
 801da8c:	e7c3      	b.n	801da16 <rshift+0x28>
 801da8e:	4623      	mov	r3, r4
 801da90:	e7e1      	b.n	801da56 <rshift+0x68>

0801da92 <__hexdig_fun>:
 801da92:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801da96:	2b09      	cmp	r3, #9
 801da98:	d802      	bhi.n	801daa0 <__hexdig_fun+0xe>
 801da9a:	3820      	subs	r0, #32
 801da9c:	b2c0      	uxtb	r0, r0
 801da9e:	4770      	bx	lr
 801daa0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801daa4:	2b05      	cmp	r3, #5
 801daa6:	d801      	bhi.n	801daac <__hexdig_fun+0x1a>
 801daa8:	3847      	subs	r0, #71	@ 0x47
 801daaa:	e7f7      	b.n	801da9c <__hexdig_fun+0xa>
 801daac:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801dab0:	2b05      	cmp	r3, #5
 801dab2:	d801      	bhi.n	801dab8 <__hexdig_fun+0x26>
 801dab4:	3827      	subs	r0, #39	@ 0x27
 801dab6:	e7f1      	b.n	801da9c <__hexdig_fun+0xa>
 801dab8:	2000      	movs	r0, #0
 801daba:	4770      	bx	lr

0801dabc <__gethex>:
 801dabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dac0:	b085      	sub	sp, #20
 801dac2:	468a      	mov	sl, r1
 801dac4:	9302      	str	r3, [sp, #8]
 801dac6:	680b      	ldr	r3, [r1, #0]
 801dac8:	9001      	str	r0, [sp, #4]
 801daca:	4690      	mov	r8, r2
 801dacc:	1c9c      	adds	r4, r3, #2
 801dace:	46a1      	mov	r9, r4
 801dad0:	f814 0b01 	ldrb.w	r0, [r4], #1
 801dad4:	2830      	cmp	r0, #48	@ 0x30
 801dad6:	d0fa      	beq.n	801dace <__gethex+0x12>
 801dad8:	eba9 0303 	sub.w	r3, r9, r3
 801dadc:	f1a3 0b02 	sub.w	fp, r3, #2
 801dae0:	f7ff ffd7 	bl	801da92 <__hexdig_fun>
 801dae4:	4605      	mov	r5, r0
 801dae6:	2800      	cmp	r0, #0
 801dae8:	d168      	bne.n	801dbbc <__gethex+0x100>
 801daea:	49a0      	ldr	r1, [pc, #640]	@ (801dd6c <__gethex+0x2b0>)
 801daec:	2201      	movs	r2, #1
 801daee:	4648      	mov	r0, r9
 801daf0:	f7ff ff15 	bl	801d91e <strncmp>
 801daf4:	4607      	mov	r7, r0
 801daf6:	2800      	cmp	r0, #0
 801daf8:	d167      	bne.n	801dbca <__gethex+0x10e>
 801dafa:	f899 0001 	ldrb.w	r0, [r9, #1]
 801dafe:	4626      	mov	r6, r4
 801db00:	f7ff ffc7 	bl	801da92 <__hexdig_fun>
 801db04:	2800      	cmp	r0, #0
 801db06:	d062      	beq.n	801dbce <__gethex+0x112>
 801db08:	4623      	mov	r3, r4
 801db0a:	7818      	ldrb	r0, [r3, #0]
 801db0c:	2830      	cmp	r0, #48	@ 0x30
 801db0e:	4699      	mov	r9, r3
 801db10:	f103 0301 	add.w	r3, r3, #1
 801db14:	d0f9      	beq.n	801db0a <__gethex+0x4e>
 801db16:	f7ff ffbc 	bl	801da92 <__hexdig_fun>
 801db1a:	fab0 f580 	clz	r5, r0
 801db1e:	096d      	lsrs	r5, r5, #5
 801db20:	f04f 0b01 	mov.w	fp, #1
 801db24:	464a      	mov	r2, r9
 801db26:	4616      	mov	r6, r2
 801db28:	3201      	adds	r2, #1
 801db2a:	7830      	ldrb	r0, [r6, #0]
 801db2c:	f7ff ffb1 	bl	801da92 <__hexdig_fun>
 801db30:	2800      	cmp	r0, #0
 801db32:	d1f8      	bne.n	801db26 <__gethex+0x6a>
 801db34:	498d      	ldr	r1, [pc, #564]	@ (801dd6c <__gethex+0x2b0>)
 801db36:	2201      	movs	r2, #1
 801db38:	4630      	mov	r0, r6
 801db3a:	f7ff fef0 	bl	801d91e <strncmp>
 801db3e:	2800      	cmp	r0, #0
 801db40:	d13f      	bne.n	801dbc2 <__gethex+0x106>
 801db42:	b944      	cbnz	r4, 801db56 <__gethex+0x9a>
 801db44:	1c74      	adds	r4, r6, #1
 801db46:	4622      	mov	r2, r4
 801db48:	4616      	mov	r6, r2
 801db4a:	3201      	adds	r2, #1
 801db4c:	7830      	ldrb	r0, [r6, #0]
 801db4e:	f7ff ffa0 	bl	801da92 <__hexdig_fun>
 801db52:	2800      	cmp	r0, #0
 801db54:	d1f8      	bne.n	801db48 <__gethex+0x8c>
 801db56:	1ba4      	subs	r4, r4, r6
 801db58:	00a7      	lsls	r7, r4, #2
 801db5a:	7833      	ldrb	r3, [r6, #0]
 801db5c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801db60:	2b50      	cmp	r3, #80	@ 0x50
 801db62:	d13e      	bne.n	801dbe2 <__gethex+0x126>
 801db64:	7873      	ldrb	r3, [r6, #1]
 801db66:	2b2b      	cmp	r3, #43	@ 0x2b
 801db68:	d033      	beq.n	801dbd2 <__gethex+0x116>
 801db6a:	2b2d      	cmp	r3, #45	@ 0x2d
 801db6c:	d034      	beq.n	801dbd8 <__gethex+0x11c>
 801db6e:	1c71      	adds	r1, r6, #1
 801db70:	2400      	movs	r4, #0
 801db72:	7808      	ldrb	r0, [r1, #0]
 801db74:	f7ff ff8d 	bl	801da92 <__hexdig_fun>
 801db78:	1e43      	subs	r3, r0, #1
 801db7a:	b2db      	uxtb	r3, r3
 801db7c:	2b18      	cmp	r3, #24
 801db7e:	d830      	bhi.n	801dbe2 <__gethex+0x126>
 801db80:	f1a0 0210 	sub.w	r2, r0, #16
 801db84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801db88:	f7ff ff83 	bl	801da92 <__hexdig_fun>
 801db8c:	f100 3cff 	add.w	ip, r0, #4294967295
 801db90:	fa5f fc8c 	uxtb.w	ip, ip
 801db94:	f1bc 0f18 	cmp.w	ip, #24
 801db98:	f04f 030a 	mov.w	r3, #10
 801db9c:	d91e      	bls.n	801dbdc <__gethex+0x120>
 801db9e:	b104      	cbz	r4, 801dba2 <__gethex+0xe6>
 801dba0:	4252      	negs	r2, r2
 801dba2:	4417      	add	r7, r2
 801dba4:	f8ca 1000 	str.w	r1, [sl]
 801dba8:	b1ed      	cbz	r5, 801dbe6 <__gethex+0x12a>
 801dbaa:	f1bb 0f00 	cmp.w	fp, #0
 801dbae:	bf0c      	ite	eq
 801dbb0:	2506      	moveq	r5, #6
 801dbb2:	2500      	movne	r5, #0
 801dbb4:	4628      	mov	r0, r5
 801dbb6:	b005      	add	sp, #20
 801dbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbbc:	2500      	movs	r5, #0
 801dbbe:	462c      	mov	r4, r5
 801dbc0:	e7b0      	b.n	801db24 <__gethex+0x68>
 801dbc2:	2c00      	cmp	r4, #0
 801dbc4:	d1c7      	bne.n	801db56 <__gethex+0x9a>
 801dbc6:	4627      	mov	r7, r4
 801dbc8:	e7c7      	b.n	801db5a <__gethex+0x9e>
 801dbca:	464e      	mov	r6, r9
 801dbcc:	462f      	mov	r7, r5
 801dbce:	2501      	movs	r5, #1
 801dbd0:	e7c3      	b.n	801db5a <__gethex+0x9e>
 801dbd2:	2400      	movs	r4, #0
 801dbd4:	1cb1      	adds	r1, r6, #2
 801dbd6:	e7cc      	b.n	801db72 <__gethex+0xb6>
 801dbd8:	2401      	movs	r4, #1
 801dbda:	e7fb      	b.n	801dbd4 <__gethex+0x118>
 801dbdc:	fb03 0002 	mla	r0, r3, r2, r0
 801dbe0:	e7ce      	b.n	801db80 <__gethex+0xc4>
 801dbe2:	4631      	mov	r1, r6
 801dbe4:	e7de      	b.n	801dba4 <__gethex+0xe8>
 801dbe6:	eba6 0309 	sub.w	r3, r6, r9
 801dbea:	3b01      	subs	r3, #1
 801dbec:	4629      	mov	r1, r5
 801dbee:	2b07      	cmp	r3, #7
 801dbf0:	dc0a      	bgt.n	801dc08 <__gethex+0x14c>
 801dbf2:	9801      	ldr	r0, [sp, #4]
 801dbf4:	f7fd fcf8 	bl	801b5e8 <_Balloc>
 801dbf8:	4604      	mov	r4, r0
 801dbfa:	b940      	cbnz	r0, 801dc0e <__gethex+0x152>
 801dbfc:	4b5c      	ldr	r3, [pc, #368]	@ (801dd70 <__gethex+0x2b4>)
 801dbfe:	4602      	mov	r2, r0
 801dc00:	21e4      	movs	r1, #228	@ 0xe4
 801dc02:	485c      	ldr	r0, [pc, #368]	@ (801dd74 <__gethex+0x2b8>)
 801dc04:	f7fc fd7a 	bl	801a6fc <__assert_func>
 801dc08:	3101      	adds	r1, #1
 801dc0a:	105b      	asrs	r3, r3, #1
 801dc0c:	e7ef      	b.n	801dbee <__gethex+0x132>
 801dc0e:	f100 0a14 	add.w	sl, r0, #20
 801dc12:	2300      	movs	r3, #0
 801dc14:	4655      	mov	r5, sl
 801dc16:	469b      	mov	fp, r3
 801dc18:	45b1      	cmp	r9, r6
 801dc1a:	d337      	bcc.n	801dc8c <__gethex+0x1d0>
 801dc1c:	f845 bb04 	str.w	fp, [r5], #4
 801dc20:	eba5 050a 	sub.w	r5, r5, sl
 801dc24:	10ad      	asrs	r5, r5, #2
 801dc26:	6125      	str	r5, [r4, #16]
 801dc28:	4658      	mov	r0, fp
 801dc2a:	f7fd fdcf 	bl	801b7cc <__hi0bits>
 801dc2e:	016d      	lsls	r5, r5, #5
 801dc30:	f8d8 6000 	ldr.w	r6, [r8]
 801dc34:	1a2d      	subs	r5, r5, r0
 801dc36:	42b5      	cmp	r5, r6
 801dc38:	dd54      	ble.n	801dce4 <__gethex+0x228>
 801dc3a:	1bad      	subs	r5, r5, r6
 801dc3c:	4629      	mov	r1, r5
 801dc3e:	4620      	mov	r0, r4
 801dc40:	f7fe f95b 	bl	801befa <__any_on>
 801dc44:	4681      	mov	r9, r0
 801dc46:	b178      	cbz	r0, 801dc68 <__gethex+0x1ac>
 801dc48:	1e6b      	subs	r3, r5, #1
 801dc4a:	1159      	asrs	r1, r3, #5
 801dc4c:	f003 021f 	and.w	r2, r3, #31
 801dc50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801dc54:	f04f 0901 	mov.w	r9, #1
 801dc58:	fa09 f202 	lsl.w	r2, r9, r2
 801dc5c:	420a      	tst	r2, r1
 801dc5e:	d003      	beq.n	801dc68 <__gethex+0x1ac>
 801dc60:	454b      	cmp	r3, r9
 801dc62:	dc36      	bgt.n	801dcd2 <__gethex+0x216>
 801dc64:	f04f 0902 	mov.w	r9, #2
 801dc68:	4629      	mov	r1, r5
 801dc6a:	4620      	mov	r0, r4
 801dc6c:	f7ff febf 	bl	801d9ee <rshift>
 801dc70:	442f      	add	r7, r5
 801dc72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801dc76:	42bb      	cmp	r3, r7
 801dc78:	da42      	bge.n	801dd00 <__gethex+0x244>
 801dc7a:	9801      	ldr	r0, [sp, #4]
 801dc7c:	4621      	mov	r1, r4
 801dc7e:	f7fd fcf3 	bl	801b668 <_Bfree>
 801dc82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dc84:	2300      	movs	r3, #0
 801dc86:	6013      	str	r3, [r2, #0]
 801dc88:	25a3      	movs	r5, #163	@ 0xa3
 801dc8a:	e793      	b.n	801dbb4 <__gethex+0xf8>
 801dc8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801dc90:	2a2e      	cmp	r2, #46	@ 0x2e
 801dc92:	d012      	beq.n	801dcba <__gethex+0x1fe>
 801dc94:	2b20      	cmp	r3, #32
 801dc96:	d104      	bne.n	801dca2 <__gethex+0x1e6>
 801dc98:	f845 bb04 	str.w	fp, [r5], #4
 801dc9c:	f04f 0b00 	mov.w	fp, #0
 801dca0:	465b      	mov	r3, fp
 801dca2:	7830      	ldrb	r0, [r6, #0]
 801dca4:	9303      	str	r3, [sp, #12]
 801dca6:	f7ff fef4 	bl	801da92 <__hexdig_fun>
 801dcaa:	9b03      	ldr	r3, [sp, #12]
 801dcac:	f000 000f 	and.w	r0, r0, #15
 801dcb0:	4098      	lsls	r0, r3
 801dcb2:	ea4b 0b00 	orr.w	fp, fp, r0
 801dcb6:	3304      	adds	r3, #4
 801dcb8:	e7ae      	b.n	801dc18 <__gethex+0x15c>
 801dcba:	45b1      	cmp	r9, r6
 801dcbc:	d8ea      	bhi.n	801dc94 <__gethex+0x1d8>
 801dcbe:	492b      	ldr	r1, [pc, #172]	@ (801dd6c <__gethex+0x2b0>)
 801dcc0:	9303      	str	r3, [sp, #12]
 801dcc2:	2201      	movs	r2, #1
 801dcc4:	4630      	mov	r0, r6
 801dcc6:	f7ff fe2a 	bl	801d91e <strncmp>
 801dcca:	9b03      	ldr	r3, [sp, #12]
 801dccc:	2800      	cmp	r0, #0
 801dcce:	d1e1      	bne.n	801dc94 <__gethex+0x1d8>
 801dcd0:	e7a2      	b.n	801dc18 <__gethex+0x15c>
 801dcd2:	1ea9      	subs	r1, r5, #2
 801dcd4:	4620      	mov	r0, r4
 801dcd6:	f7fe f910 	bl	801befa <__any_on>
 801dcda:	2800      	cmp	r0, #0
 801dcdc:	d0c2      	beq.n	801dc64 <__gethex+0x1a8>
 801dcde:	f04f 0903 	mov.w	r9, #3
 801dce2:	e7c1      	b.n	801dc68 <__gethex+0x1ac>
 801dce4:	da09      	bge.n	801dcfa <__gethex+0x23e>
 801dce6:	1b75      	subs	r5, r6, r5
 801dce8:	4621      	mov	r1, r4
 801dcea:	9801      	ldr	r0, [sp, #4]
 801dcec:	462a      	mov	r2, r5
 801dcee:	f7fd fecb 	bl	801ba88 <__lshift>
 801dcf2:	1b7f      	subs	r7, r7, r5
 801dcf4:	4604      	mov	r4, r0
 801dcf6:	f100 0a14 	add.w	sl, r0, #20
 801dcfa:	f04f 0900 	mov.w	r9, #0
 801dcfe:	e7b8      	b.n	801dc72 <__gethex+0x1b6>
 801dd00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801dd04:	42bd      	cmp	r5, r7
 801dd06:	dd6f      	ble.n	801dde8 <__gethex+0x32c>
 801dd08:	1bed      	subs	r5, r5, r7
 801dd0a:	42ae      	cmp	r6, r5
 801dd0c:	dc34      	bgt.n	801dd78 <__gethex+0x2bc>
 801dd0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801dd12:	2b02      	cmp	r3, #2
 801dd14:	d022      	beq.n	801dd5c <__gethex+0x2a0>
 801dd16:	2b03      	cmp	r3, #3
 801dd18:	d024      	beq.n	801dd64 <__gethex+0x2a8>
 801dd1a:	2b01      	cmp	r3, #1
 801dd1c:	d115      	bne.n	801dd4a <__gethex+0x28e>
 801dd1e:	42ae      	cmp	r6, r5
 801dd20:	d113      	bne.n	801dd4a <__gethex+0x28e>
 801dd22:	2e01      	cmp	r6, #1
 801dd24:	d10b      	bne.n	801dd3e <__gethex+0x282>
 801dd26:	9a02      	ldr	r2, [sp, #8]
 801dd28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801dd2c:	6013      	str	r3, [r2, #0]
 801dd2e:	2301      	movs	r3, #1
 801dd30:	6123      	str	r3, [r4, #16]
 801dd32:	f8ca 3000 	str.w	r3, [sl]
 801dd36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dd38:	2562      	movs	r5, #98	@ 0x62
 801dd3a:	601c      	str	r4, [r3, #0]
 801dd3c:	e73a      	b.n	801dbb4 <__gethex+0xf8>
 801dd3e:	1e71      	subs	r1, r6, #1
 801dd40:	4620      	mov	r0, r4
 801dd42:	f7fe f8da 	bl	801befa <__any_on>
 801dd46:	2800      	cmp	r0, #0
 801dd48:	d1ed      	bne.n	801dd26 <__gethex+0x26a>
 801dd4a:	9801      	ldr	r0, [sp, #4]
 801dd4c:	4621      	mov	r1, r4
 801dd4e:	f7fd fc8b 	bl	801b668 <_Bfree>
 801dd52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dd54:	2300      	movs	r3, #0
 801dd56:	6013      	str	r3, [r2, #0]
 801dd58:	2550      	movs	r5, #80	@ 0x50
 801dd5a:	e72b      	b.n	801dbb4 <__gethex+0xf8>
 801dd5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dd5e:	2b00      	cmp	r3, #0
 801dd60:	d1f3      	bne.n	801dd4a <__gethex+0x28e>
 801dd62:	e7e0      	b.n	801dd26 <__gethex+0x26a>
 801dd64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dd66:	2b00      	cmp	r3, #0
 801dd68:	d1dd      	bne.n	801dd26 <__gethex+0x26a>
 801dd6a:	e7ee      	b.n	801dd4a <__gethex+0x28e>
 801dd6c:	080203ea 	.word	0x080203ea
 801dd70:	08020380 	.word	0x08020380
 801dd74:	0802040f 	.word	0x0802040f
 801dd78:	1e6f      	subs	r7, r5, #1
 801dd7a:	f1b9 0f00 	cmp.w	r9, #0
 801dd7e:	d130      	bne.n	801dde2 <__gethex+0x326>
 801dd80:	b127      	cbz	r7, 801dd8c <__gethex+0x2d0>
 801dd82:	4639      	mov	r1, r7
 801dd84:	4620      	mov	r0, r4
 801dd86:	f7fe f8b8 	bl	801befa <__any_on>
 801dd8a:	4681      	mov	r9, r0
 801dd8c:	117a      	asrs	r2, r7, #5
 801dd8e:	2301      	movs	r3, #1
 801dd90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801dd94:	f007 071f 	and.w	r7, r7, #31
 801dd98:	40bb      	lsls	r3, r7
 801dd9a:	4213      	tst	r3, r2
 801dd9c:	4629      	mov	r1, r5
 801dd9e:	4620      	mov	r0, r4
 801dda0:	bf18      	it	ne
 801dda2:	f049 0902 	orrne.w	r9, r9, #2
 801dda6:	f7ff fe22 	bl	801d9ee <rshift>
 801ddaa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801ddae:	1b76      	subs	r6, r6, r5
 801ddb0:	2502      	movs	r5, #2
 801ddb2:	f1b9 0f00 	cmp.w	r9, #0
 801ddb6:	d047      	beq.n	801de48 <__gethex+0x38c>
 801ddb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ddbc:	2b02      	cmp	r3, #2
 801ddbe:	d015      	beq.n	801ddec <__gethex+0x330>
 801ddc0:	2b03      	cmp	r3, #3
 801ddc2:	d017      	beq.n	801ddf4 <__gethex+0x338>
 801ddc4:	2b01      	cmp	r3, #1
 801ddc6:	d109      	bne.n	801dddc <__gethex+0x320>
 801ddc8:	f019 0f02 	tst.w	r9, #2
 801ddcc:	d006      	beq.n	801dddc <__gethex+0x320>
 801ddce:	f8da 3000 	ldr.w	r3, [sl]
 801ddd2:	ea49 0903 	orr.w	r9, r9, r3
 801ddd6:	f019 0f01 	tst.w	r9, #1
 801ddda:	d10e      	bne.n	801ddfa <__gethex+0x33e>
 801dddc:	f045 0510 	orr.w	r5, r5, #16
 801dde0:	e032      	b.n	801de48 <__gethex+0x38c>
 801dde2:	f04f 0901 	mov.w	r9, #1
 801dde6:	e7d1      	b.n	801dd8c <__gethex+0x2d0>
 801dde8:	2501      	movs	r5, #1
 801ddea:	e7e2      	b.n	801ddb2 <__gethex+0x2f6>
 801ddec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ddee:	f1c3 0301 	rsb	r3, r3, #1
 801ddf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ddf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ddf6:	2b00      	cmp	r3, #0
 801ddf8:	d0f0      	beq.n	801dddc <__gethex+0x320>
 801ddfa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ddfe:	f104 0314 	add.w	r3, r4, #20
 801de02:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801de06:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801de0a:	f04f 0c00 	mov.w	ip, #0
 801de0e:	4618      	mov	r0, r3
 801de10:	f853 2b04 	ldr.w	r2, [r3], #4
 801de14:	f1b2 3fff 	cmp.w	r2, #4294967295
 801de18:	d01b      	beq.n	801de52 <__gethex+0x396>
 801de1a:	3201      	adds	r2, #1
 801de1c:	6002      	str	r2, [r0, #0]
 801de1e:	2d02      	cmp	r5, #2
 801de20:	f104 0314 	add.w	r3, r4, #20
 801de24:	d13c      	bne.n	801dea0 <__gethex+0x3e4>
 801de26:	f8d8 2000 	ldr.w	r2, [r8]
 801de2a:	3a01      	subs	r2, #1
 801de2c:	42b2      	cmp	r2, r6
 801de2e:	d109      	bne.n	801de44 <__gethex+0x388>
 801de30:	1171      	asrs	r1, r6, #5
 801de32:	2201      	movs	r2, #1
 801de34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801de38:	f006 061f 	and.w	r6, r6, #31
 801de3c:	fa02 f606 	lsl.w	r6, r2, r6
 801de40:	421e      	tst	r6, r3
 801de42:	d13a      	bne.n	801deba <__gethex+0x3fe>
 801de44:	f045 0520 	orr.w	r5, r5, #32
 801de48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801de4a:	601c      	str	r4, [r3, #0]
 801de4c:	9b02      	ldr	r3, [sp, #8]
 801de4e:	601f      	str	r7, [r3, #0]
 801de50:	e6b0      	b.n	801dbb4 <__gethex+0xf8>
 801de52:	4299      	cmp	r1, r3
 801de54:	f843 cc04 	str.w	ip, [r3, #-4]
 801de58:	d8d9      	bhi.n	801de0e <__gethex+0x352>
 801de5a:	68a3      	ldr	r3, [r4, #8]
 801de5c:	459b      	cmp	fp, r3
 801de5e:	db17      	blt.n	801de90 <__gethex+0x3d4>
 801de60:	6861      	ldr	r1, [r4, #4]
 801de62:	9801      	ldr	r0, [sp, #4]
 801de64:	3101      	adds	r1, #1
 801de66:	f7fd fbbf 	bl	801b5e8 <_Balloc>
 801de6a:	4681      	mov	r9, r0
 801de6c:	b918      	cbnz	r0, 801de76 <__gethex+0x3ba>
 801de6e:	4b1a      	ldr	r3, [pc, #104]	@ (801ded8 <__gethex+0x41c>)
 801de70:	4602      	mov	r2, r0
 801de72:	2184      	movs	r1, #132	@ 0x84
 801de74:	e6c5      	b.n	801dc02 <__gethex+0x146>
 801de76:	6922      	ldr	r2, [r4, #16]
 801de78:	3202      	adds	r2, #2
 801de7a:	f104 010c 	add.w	r1, r4, #12
 801de7e:	0092      	lsls	r2, r2, #2
 801de80:	300c      	adds	r0, #12
 801de82:	f7fc fc2c 	bl	801a6de <memcpy>
 801de86:	4621      	mov	r1, r4
 801de88:	9801      	ldr	r0, [sp, #4]
 801de8a:	f7fd fbed 	bl	801b668 <_Bfree>
 801de8e:	464c      	mov	r4, r9
 801de90:	6923      	ldr	r3, [r4, #16]
 801de92:	1c5a      	adds	r2, r3, #1
 801de94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801de98:	6122      	str	r2, [r4, #16]
 801de9a:	2201      	movs	r2, #1
 801de9c:	615a      	str	r2, [r3, #20]
 801de9e:	e7be      	b.n	801de1e <__gethex+0x362>
 801dea0:	6922      	ldr	r2, [r4, #16]
 801dea2:	455a      	cmp	r2, fp
 801dea4:	dd0b      	ble.n	801debe <__gethex+0x402>
 801dea6:	2101      	movs	r1, #1
 801dea8:	4620      	mov	r0, r4
 801deaa:	f7ff fda0 	bl	801d9ee <rshift>
 801deae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801deb2:	3701      	adds	r7, #1
 801deb4:	42bb      	cmp	r3, r7
 801deb6:	f6ff aee0 	blt.w	801dc7a <__gethex+0x1be>
 801deba:	2501      	movs	r5, #1
 801debc:	e7c2      	b.n	801de44 <__gethex+0x388>
 801debe:	f016 061f 	ands.w	r6, r6, #31
 801dec2:	d0fa      	beq.n	801deba <__gethex+0x3fe>
 801dec4:	4453      	add	r3, sl
 801dec6:	f1c6 0620 	rsb	r6, r6, #32
 801deca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801dece:	f7fd fc7d 	bl	801b7cc <__hi0bits>
 801ded2:	42b0      	cmp	r0, r6
 801ded4:	dbe7      	blt.n	801dea6 <__gethex+0x3ea>
 801ded6:	e7f0      	b.n	801deba <__gethex+0x3fe>
 801ded8:	08020380 	.word	0x08020380

0801dedc <L_shift>:
 801dedc:	f1c2 0208 	rsb	r2, r2, #8
 801dee0:	0092      	lsls	r2, r2, #2
 801dee2:	b570      	push	{r4, r5, r6, lr}
 801dee4:	f1c2 0620 	rsb	r6, r2, #32
 801dee8:	6843      	ldr	r3, [r0, #4]
 801deea:	6804      	ldr	r4, [r0, #0]
 801deec:	fa03 f506 	lsl.w	r5, r3, r6
 801def0:	432c      	orrs	r4, r5
 801def2:	40d3      	lsrs	r3, r2
 801def4:	6004      	str	r4, [r0, #0]
 801def6:	f840 3f04 	str.w	r3, [r0, #4]!
 801defa:	4288      	cmp	r0, r1
 801defc:	d3f4      	bcc.n	801dee8 <L_shift+0xc>
 801defe:	bd70      	pop	{r4, r5, r6, pc}

0801df00 <__match>:
 801df00:	b530      	push	{r4, r5, lr}
 801df02:	6803      	ldr	r3, [r0, #0]
 801df04:	3301      	adds	r3, #1
 801df06:	f811 4b01 	ldrb.w	r4, [r1], #1
 801df0a:	b914      	cbnz	r4, 801df12 <__match+0x12>
 801df0c:	6003      	str	r3, [r0, #0]
 801df0e:	2001      	movs	r0, #1
 801df10:	bd30      	pop	{r4, r5, pc}
 801df12:	f813 2b01 	ldrb.w	r2, [r3], #1
 801df16:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801df1a:	2d19      	cmp	r5, #25
 801df1c:	bf98      	it	ls
 801df1e:	3220      	addls	r2, #32
 801df20:	42a2      	cmp	r2, r4
 801df22:	d0f0      	beq.n	801df06 <__match+0x6>
 801df24:	2000      	movs	r0, #0
 801df26:	e7f3      	b.n	801df10 <__match+0x10>

0801df28 <__hexnan>:
 801df28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df2c:	680b      	ldr	r3, [r1, #0]
 801df2e:	6801      	ldr	r1, [r0, #0]
 801df30:	115e      	asrs	r6, r3, #5
 801df32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801df36:	f013 031f 	ands.w	r3, r3, #31
 801df3a:	b087      	sub	sp, #28
 801df3c:	bf18      	it	ne
 801df3e:	3604      	addne	r6, #4
 801df40:	2500      	movs	r5, #0
 801df42:	1f37      	subs	r7, r6, #4
 801df44:	4682      	mov	sl, r0
 801df46:	4690      	mov	r8, r2
 801df48:	9301      	str	r3, [sp, #4]
 801df4a:	f846 5c04 	str.w	r5, [r6, #-4]
 801df4e:	46b9      	mov	r9, r7
 801df50:	463c      	mov	r4, r7
 801df52:	9502      	str	r5, [sp, #8]
 801df54:	46ab      	mov	fp, r5
 801df56:	784a      	ldrb	r2, [r1, #1]
 801df58:	1c4b      	adds	r3, r1, #1
 801df5a:	9303      	str	r3, [sp, #12]
 801df5c:	b342      	cbz	r2, 801dfb0 <__hexnan+0x88>
 801df5e:	4610      	mov	r0, r2
 801df60:	9105      	str	r1, [sp, #20]
 801df62:	9204      	str	r2, [sp, #16]
 801df64:	f7ff fd95 	bl	801da92 <__hexdig_fun>
 801df68:	2800      	cmp	r0, #0
 801df6a:	d151      	bne.n	801e010 <__hexnan+0xe8>
 801df6c:	9a04      	ldr	r2, [sp, #16]
 801df6e:	9905      	ldr	r1, [sp, #20]
 801df70:	2a20      	cmp	r2, #32
 801df72:	d818      	bhi.n	801dfa6 <__hexnan+0x7e>
 801df74:	9b02      	ldr	r3, [sp, #8]
 801df76:	459b      	cmp	fp, r3
 801df78:	dd13      	ble.n	801dfa2 <__hexnan+0x7a>
 801df7a:	454c      	cmp	r4, r9
 801df7c:	d206      	bcs.n	801df8c <__hexnan+0x64>
 801df7e:	2d07      	cmp	r5, #7
 801df80:	dc04      	bgt.n	801df8c <__hexnan+0x64>
 801df82:	462a      	mov	r2, r5
 801df84:	4649      	mov	r1, r9
 801df86:	4620      	mov	r0, r4
 801df88:	f7ff ffa8 	bl	801dedc <L_shift>
 801df8c:	4544      	cmp	r4, r8
 801df8e:	d952      	bls.n	801e036 <__hexnan+0x10e>
 801df90:	2300      	movs	r3, #0
 801df92:	f1a4 0904 	sub.w	r9, r4, #4
 801df96:	f844 3c04 	str.w	r3, [r4, #-4]
 801df9a:	f8cd b008 	str.w	fp, [sp, #8]
 801df9e:	464c      	mov	r4, r9
 801dfa0:	461d      	mov	r5, r3
 801dfa2:	9903      	ldr	r1, [sp, #12]
 801dfa4:	e7d7      	b.n	801df56 <__hexnan+0x2e>
 801dfa6:	2a29      	cmp	r2, #41	@ 0x29
 801dfa8:	d157      	bne.n	801e05a <__hexnan+0x132>
 801dfaa:	3102      	adds	r1, #2
 801dfac:	f8ca 1000 	str.w	r1, [sl]
 801dfb0:	f1bb 0f00 	cmp.w	fp, #0
 801dfb4:	d051      	beq.n	801e05a <__hexnan+0x132>
 801dfb6:	454c      	cmp	r4, r9
 801dfb8:	d206      	bcs.n	801dfc8 <__hexnan+0xa0>
 801dfba:	2d07      	cmp	r5, #7
 801dfbc:	dc04      	bgt.n	801dfc8 <__hexnan+0xa0>
 801dfbe:	462a      	mov	r2, r5
 801dfc0:	4649      	mov	r1, r9
 801dfc2:	4620      	mov	r0, r4
 801dfc4:	f7ff ff8a 	bl	801dedc <L_shift>
 801dfc8:	4544      	cmp	r4, r8
 801dfca:	d936      	bls.n	801e03a <__hexnan+0x112>
 801dfcc:	f1a8 0204 	sub.w	r2, r8, #4
 801dfd0:	4623      	mov	r3, r4
 801dfd2:	f853 1b04 	ldr.w	r1, [r3], #4
 801dfd6:	f842 1f04 	str.w	r1, [r2, #4]!
 801dfda:	429f      	cmp	r7, r3
 801dfdc:	d2f9      	bcs.n	801dfd2 <__hexnan+0xaa>
 801dfde:	1b3b      	subs	r3, r7, r4
 801dfe0:	f023 0303 	bic.w	r3, r3, #3
 801dfe4:	3304      	adds	r3, #4
 801dfe6:	3401      	adds	r4, #1
 801dfe8:	3e03      	subs	r6, #3
 801dfea:	42b4      	cmp	r4, r6
 801dfec:	bf88      	it	hi
 801dfee:	2304      	movhi	r3, #4
 801dff0:	4443      	add	r3, r8
 801dff2:	2200      	movs	r2, #0
 801dff4:	f843 2b04 	str.w	r2, [r3], #4
 801dff8:	429f      	cmp	r7, r3
 801dffa:	d2fb      	bcs.n	801dff4 <__hexnan+0xcc>
 801dffc:	683b      	ldr	r3, [r7, #0]
 801dffe:	b91b      	cbnz	r3, 801e008 <__hexnan+0xe0>
 801e000:	4547      	cmp	r7, r8
 801e002:	d128      	bne.n	801e056 <__hexnan+0x12e>
 801e004:	2301      	movs	r3, #1
 801e006:	603b      	str	r3, [r7, #0]
 801e008:	2005      	movs	r0, #5
 801e00a:	b007      	add	sp, #28
 801e00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e010:	3501      	adds	r5, #1
 801e012:	2d08      	cmp	r5, #8
 801e014:	f10b 0b01 	add.w	fp, fp, #1
 801e018:	dd06      	ble.n	801e028 <__hexnan+0x100>
 801e01a:	4544      	cmp	r4, r8
 801e01c:	d9c1      	bls.n	801dfa2 <__hexnan+0x7a>
 801e01e:	2300      	movs	r3, #0
 801e020:	f844 3c04 	str.w	r3, [r4, #-4]
 801e024:	2501      	movs	r5, #1
 801e026:	3c04      	subs	r4, #4
 801e028:	6822      	ldr	r2, [r4, #0]
 801e02a:	f000 000f 	and.w	r0, r0, #15
 801e02e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801e032:	6020      	str	r0, [r4, #0]
 801e034:	e7b5      	b.n	801dfa2 <__hexnan+0x7a>
 801e036:	2508      	movs	r5, #8
 801e038:	e7b3      	b.n	801dfa2 <__hexnan+0x7a>
 801e03a:	9b01      	ldr	r3, [sp, #4]
 801e03c:	2b00      	cmp	r3, #0
 801e03e:	d0dd      	beq.n	801dffc <__hexnan+0xd4>
 801e040:	f1c3 0320 	rsb	r3, r3, #32
 801e044:	f04f 32ff 	mov.w	r2, #4294967295
 801e048:	40da      	lsrs	r2, r3
 801e04a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801e04e:	4013      	ands	r3, r2
 801e050:	f846 3c04 	str.w	r3, [r6, #-4]
 801e054:	e7d2      	b.n	801dffc <__hexnan+0xd4>
 801e056:	3f04      	subs	r7, #4
 801e058:	e7d0      	b.n	801dffc <__hexnan+0xd4>
 801e05a:	2004      	movs	r0, #4
 801e05c:	e7d5      	b.n	801e00a <__hexnan+0xe2>

0801e05e <__ascii_mbtowc>:
 801e05e:	b082      	sub	sp, #8
 801e060:	b901      	cbnz	r1, 801e064 <__ascii_mbtowc+0x6>
 801e062:	a901      	add	r1, sp, #4
 801e064:	b142      	cbz	r2, 801e078 <__ascii_mbtowc+0x1a>
 801e066:	b14b      	cbz	r3, 801e07c <__ascii_mbtowc+0x1e>
 801e068:	7813      	ldrb	r3, [r2, #0]
 801e06a:	600b      	str	r3, [r1, #0]
 801e06c:	7812      	ldrb	r2, [r2, #0]
 801e06e:	1e10      	subs	r0, r2, #0
 801e070:	bf18      	it	ne
 801e072:	2001      	movne	r0, #1
 801e074:	b002      	add	sp, #8
 801e076:	4770      	bx	lr
 801e078:	4610      	mov	r0, r2
 801e07a:	e7fb      	b.n	801e074 <__ascii_mbtowc+0x16>
 801e07c:	f06f 0001 	mvn.w	r0, #1
 801e080:	e7f8      	b.n	801e074 <__ascii_mbtowc+0x16>

0801e082 <_malloc_usable_size_r>:
 801e082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e086:	1f18      	subs	r0, r3, #4
 801e088:	2b00      	cmp	r3, #0
 801e08a:	bfbc      	itt	lt
 801e08c:	580b      	ldrlt	r3, [r1, r0]
 801e08e:	18c0      	addlt	r0, r0, r3
 801e090:	4770      	bx	lr
	...

0801e094 <_strtoul_l.isra.0>:
 801e094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e098:	4e34      	ldr	r6, [pc, #208]	@ (801e16c <_strtoul_l.isra.0+0xd8>)
 801e09a:	4686      	mov	lr, r0
 801e09c:	460d      	mov	r5, r1
 801e09e:	4628      	mov	r0, r5
 801e0a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e0a4:	5d37      	ldrb	r7, [r6, r4]
 801e0a6:	f017 0708 	ands.w	r7, r7, #8
 801e0aa:	d1f8      	bne.n	801e09e <_strtoul_l.isra.0+0xa>
 801e0ac:	2c2d      	cmp	r4, #45	@ 0x2d
 801e0ae:	d110      	bne.n	801e0d2 <_strtoul_l.isra.0+0x3e>
 801e0b0:	782c      	ldrb	r4, [r5, #0]
 801e0b2:	2701      	movs	r7, #1
 801e0b4:	1c85      	adds	r5, r0, #2
 801e0b6:	f033 0010 	bics.w	r0, r3, #16
 801e0ba:	d115      	bne.n	801e0e8 <_strtoul_l.isra.0+0x54>
 801e0bc:	2c30      	cmp	r4, #48	@ 0x30
 801e0be:	d10d      	bne.n	801e0dc <_strtoul_l.isra.0+0x48>
 801e0c0:	7828      	ldrb	r0, [r5, #0]
 801e0c2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801e0c6:	2858      	cmp	r0, #88	@ 0x58
 801e0c8:	d108      	bne.n	801e0dc <_strtoul_l.isra.0+0x48>
 801e0ca:	786c      	ldrb	r4, [r5, #1]
 801e0cc:	3502      	adds	r5, #2
 801e0ce:	2310      	movs	r3, #16
 801e0d0:	e00a      	b.n	801e0e8 <_strtoul_l.isra.0+0x54>
 801e0d2:	2c2b      	cmp	r4, #43	@ 0x2b
 801e0d4:	bf04      	itt	eq
 801e0d6:	782c      	ldrbeq	r4, [r5, #0]
 801e0d8:	1c85      	addeq	r5, r0, #2
 801e0da:	e7ec      	b.n	801e0b6 <_strtoul_l.isra.0+0x22>
 801e0dc:	2b00      	cmp	r3, #0
 801e0de:	d1f6      	bne.n	801e0ce <_strtoul_l.isra.0+0x3a>
 801e0e0:	2c30      	cmp	r4, #48	@ 0x30
 801e0e2:	bf14      	ite	ne
 801e0e4:	230a      	movne	r3, #10
 801e0e6:	2308      	moveq	r3, #8
 801e0e8:	f04f 38ff 	mov.w	r8, #4294967295
 801e0ec:	2600      	movs	r6, #0
 801e0ee:	fbb8 f8f3 	udiv	r8, r8, r3
 801e0f2:	fb03 f908 	mul.w	r9, r3, r8
 801e0f6:	ea6f 0909 	mvn.w	r9, r9
 801e0fa:	4630      	mov	r0, r6
 801e0fc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801e100:	f1bc 0f09 	cmp.w	ip, #9
 801e104:	d810      	bhi.n	801e128 <_strtoul_l.isra.0+0x94>
 801e106:	4664      	mov	r4, ip
 801e108:	42a3      	cmp	r3, r4
 801e10a:	dd1e      	ble.n	801e14a <_strtoul_l.isra.0+0xb6>
 801e10c:	f1b6 3fff 	cmp.w	r6, #4294967295
 801e110:	d007      	beq.n	801e122 <_strtoul_l.isra.0+0x8e>
 801e112:	4580      	cmp	r8, r0
 801e114:	d316      	bcc.n	801e144 <_strtoul_l.isra.0+0xb0>
 801e116:	d101      	bne.n	801e11c <_strtoul_l.isra.0+0x88>
 801e118:	45a1      	cmp	r9, r4
 801e11a:	db13      	blt.n	801e144 <_strtoul_l.isra.0+0xb0>
 801e11c:	fb00 4003 	mla	r0, r0, r3, r4
 801e120:	2601      	movs	r6, #1
 801e122:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e126:	e7e9      	b.n	801e0fc <_strtoul_l.isra.0+0x68>
 801e128:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801e12c:	f1bc 0f19 	cmp.w	ip, #25
 801e130:	d801      	bhi.n	801e136 <_strtoul_l.isra.0+0xa2>
 801e132:	3c37      	subs	r4, #55	@ 0x37
 801e134:	e7e8      	b.n	801e108 <_strtoul_l.isra.0+0x74>
 801e136:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801e13a:	f1bc 0f19 	cmp.w	ip, #25
 801e13e:	d804      	bhi.n	801e14a <_strtoul_l.isra.0+0xb6>
 801e140:	3c57      	subs	r4, #87	@ 0x57
 801e142:	e7e1      	b.n	801e108 <_strtoul_l.isra.0+0x74>
 801e144:	f04f 36ff 	mov.w	r6, #4294967295
 801e148:	e7eb      	b.n	801e122 <_strtoul_l.isra.0+0x8e>
 801e14a:	1c73      	adds	r3, r6, #1
 801e14c:	d106      	bne.n	801e15c <_strtoul_l.isra.0+0xc8>
 801e14e:	2322      	movs	r3, #34	@ 0x22
 801e150:	f8ce 3000 	str.w	r3, [lr]
 801e154:	4630      	mov	r0, r6
 801e156:	b932      	cbnz	r2, 801e166 <_strtoul_l.isra.0+0xd2>
 801e158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e15c:	b107      	cbz	r7, 801e160 <_strtoul_l.isra.0+0xcc>
 801e15e:	4240      	negs	r0, r0
 801e160:	2a00      	cmp	r2, #0
 801e162:	d0f9      	beq.n	801e158 <_strtoul_l.isra.0+0xc4>
 801e164:	b106      	cbz	r6, 801e168 <_strtoul_l.isra.0+0xd4>
 801e166:	1e69      	subs	r1, r5, #1
 801e168:	6011      	str	r1, [r2, #0]
 801e16a:	e7f5      	b.n	801e158 <_strtoul_l.isra.0+0xc4>
 801e16c:	080209e1 	.word	0x080209e1

0801e170 <_strtoul_r>:
 801e170:	f7ff bf90 	b.w	801e094 <_strtoul_l.isra.0>

0801e174 <__ascii_wctomb>:
 801e174:	4603      	mov	r3, r0
 801e176:	4608      	mov	r0, r1
 801e178:	b141      	cbz	r1, 801e18c <__ascii_wctomb+0x18>
 801e17a:	2aff      	cmp	r2, #255	@ 0xff
 801e17c:	d904      	bls.n	801e188 <__ascii_wctomb+0x14>
 801e17e:	228a      	movs	r2, #138	@ 0x8a
 801e180:	601a      	str	r2, [r3, #0]
 801e182:	f04f 30ff 	mov.w	r0, #4294967295
 801e186:	4770      	bx	lr
 801e188:	700a      	strb	r2, [r1, #0]
 801e18a:	2001      	movs	r0, #1
 801e18c:	4770      	bx	lr

0801e18e <_raise_r>:
 801e18e:	291f      	cmp	r1, #31
 801e190:	b538      	push	{r3, r4, r5, lr}
 801e192:	4605      	mov	r5, r0
 801e194:	460c      	mov	r4, r1
 801e196:	d904      	bls.n	801e1a2 <_raise_r+0x14>
 801e198:	2316      	movs	r3, #22
 801e19a:	6003      	str	r3, [r0, #0]
 801e19c:	f04f 30ff 	mov.w	r0, #4294967295
 801e1a0:	bd38      	pop	{r3, r4, r5, pc}
 801e1a2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e1a4:	b112      	cbz	r2, 801e1ac <_raise_r+0x1e>
 801e1a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e1aa:	b94b      	cbnz	r3, 801e1c0 <_raise_r+0x32>
 801e1ac:	4628      	mov	r0, r5
 801e1ae:	f000 f831 	bl	801e214 <_getpid_r>
 801e1b2:	4622      	mov	r2, r4
 801e1b4:	4601      	mov	r1, r0
 801e1b6:	4628      	mov	r0, r5
 801e1b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e1bc:	f000 b818 	b.w	801e1f0 <_kill_r>
 801e1c0:	2b01      	cmp	r3, #1
 801e1c2:	d00a      	beq.n	801e1da <_raise_r+0x4c>
 801e1c4:	1c59      	adds	r1, r3, #1
 801e1c6:	d103      	bne.n	801e1d0 <_raise_r+0x42>
 801e1c8:	2316      	movs	r3, #22
 801e1ca:	6003      	str	r3, [r0, #0]
 801e1cc:	2001      	movs	r0, #1
 801e1ce:	e7e7      	b.n	801e1a0 <_raise_r+0x12>
 801e1d0:	2100      	movs	r1, #0
 801e1d2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e1d6:	4620      	mov	r0, r4
 801e1d8:	4798      	blx	r3
 801e1da:	2000      	movs	r0, #0
 801e1dc:	e7e0      	b.n	801e1a0 <_raise_r+0x12>
	...

0801e1e0 <raise>:
 801e1e0:	4b02      	ldr	r3, [pc, #8]	@ (801e1ec <raise+0xc>)
 801e1e2:	4601      	mov	r1, r0
 801e1e4:	6818      	ldr	r0, [r3, #0]
 801e1e6:	f7ff bfd2 	b.w	801e18e <_raise_r>
 801e1ea:	bf00      	nop
 801e1ec:	20000160 	.word	0x20000160

0801e1f0 <_kill_r>:
 801e1f0:	b538      	push	{r3, r4, r5, lr}
 801e1f2:	4d07      	ldr	r5, [pc, #28]	@ (801e210 <_kill_r+0x20>)
 801e1f4:	2300      	movs	r3, #0
 801e1f6:	4604      	mov	r4, r0
 801e1f8:	4608      	mov	r0, r1
 801e1fa:	4611      	mov	r1, r2
 801e1fc:	602b      	str	r3, [r5, #0]
 801e1fe:	f7eb fa09 	bl	8009614 <_kill>
 801e202:	1c43      	adds	r3, r0, #1
 801e204:	d102      	bne.n	801e20c <_kill_r+0x1c>
 801e206:	682b      	ldr	r3, [r5, #0]
 801e208:	b103      	cbz	r3, 801e20c <_kill_r+0x1c>
 801e20a:	6023      	str	r3, [r4, #0]
 801e20c:	bd38      	pop	{r3, r4, r5, pc}
 801e20e:	bf00      	nop
 801e210:	2000a6a0 	.word	0x2000a6a0

0801e214 <_getpid_r>:
 801e214:	f7eb b9f6 	b.w	8009604 <_getpid>

0801e218 <_init>:
 801e218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e21a:	bf00      	nop
 801e21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e21e:	bc08      	pop	{r3}
 801e220:	469e      	mov	lr, r3
 801e222:	4770      	bx	lr

0801e224 <_fini>:
 801e224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e226:	bf00      	nop
 801e228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e22a:	bc08      	pop	{r3}
 801e22c:	469e      	mov	lr, r3
 801e22e:	4770      	bx	lr
